<?xml version="1.0" encoding="UTF-8"?>

<chapter xml:id="project-setup">
	<title>Project setup</title>

	<para>
		Before we get started we need to setup the following things:
	</para>

	<itemizedlist>
		<listitem>Eclipse IDE or any other IDE of your choise. Eclipse an be downloaded
		from the eclipse site. Choose Eclipse IDE for Java EE Developers.</listitem>

		<listitem>A servlet container like for instance Tomcat.</listitem>

		<listitem>The IT Mill Toolkit package - this tutorial is written with the 5.3
		series so choose the latest Release Candidate until 5.3 is finally
		released.</listitem>
	</itemizedlist>

	<para>
		We will assume below that you are using Eclipse and Tomcat but anything similar is fine.
	</para>

	<para>
		Start up your Eclipse and choose
		<menuchoice><guimenu>File</guimenu><guisubmenu>New</guisubmenu><guimenuitem>Project</guimenuitem></menuchoice>.
	</para>

	<figure xml:id="figure.eclipse.new-project">
		<title>New Project Window in Eclipse</title>
		<mediaobject>
			<imageobject role="html">
				<imagedata align="center" fileref="img/eclipse-new-project-1.png"/>
			</imageobject>
			<imageobject role="fo">
				<imagedata scale="75" align="center" fileref="img/eclipse-new-project-1.png"/>
			</imageobject>
		</mediaobject>
	</figure>

	<para>
		We will be creating a Dynamic Web Project which is designed to build web
		applications deployed as a .war file to a servlet container.
	</para>

	<figure xml:id="figure.eclipse.new-project.web">
		<title>New Dynamic Web Project Window in Eclipse</title>
		<mediaobject>
			<imageobject role="html">
				<imagedata align="center" fileref="img/eclipse-new-project-2.png"/>
			</imageobject>
			<imageobject role="fo">
				<imagedata scale="75" align="center" fileref="img/eclipse-new-project-2.png"/>
			</imageobject>
		</mediaobject>
	</figure>

	<para>
		Add the following settings to the project:
	</para>

	<itemizedlist>
         <listitem><guilabel>Project name</guilabel></listitem>

         <listitem><guilabel>Target runtime</guilabel>

			<itemizedlist>
				<listitem><guilabel>Choose new</guilabel></listitem>

				<listitem>Select Apache Tomcat v6.0</listitem>

				<listitem>check <guilabel>Create a new local server</guilabel></listitem>

				<listitem>Choose your Tomcat directory in the next step</listitem>
			</itemizedlist>
		</listitem>

		<listitem>Click <guibutton>Finish</guibutton> and switch to the suggested Java EE
		mode</listitem>
	</itemizedlist>

	<para>
		The project creator will automatically create a proper hierarchy for our project.
	</para>

	<para>
		Finally open the Java EE perspective (Eclipse asks if you want to do this).
	</para>
 	
		
	<para>
		Next we need to add the Toolkit library to our project. Drop the earlier
		downloaded <filename>itmill-toolkit-5.3.0*.jar</filename> into the
		<filename>WebContent/WEB-INF/lib</filename> directory.
	</para>

	<para>
		That is it, now we are ready to create the main class for our application. Right
		click on the project in the Project Explorer and choose
		<menuchoice><guimenu>New</guimenu><guimenuitem>Class</guimenuitem></menuchoice>.
	</para>

	<figure xml:id="figure.eclipse.new-class">
		<title>New Java Class Window in Eclipse</title>
		<mediaobject>
			<imageobject role="html">
				<imagedata align="center" fileref="img/eclipse-new-class.png"/>
			</imageobject>
			<imageobject role="fo">
				<imagedata scale="75" align="center" fileref="img/eclipse-new-class.png"/>
			</imageobject>
		</mediaobject>
	</figure>

	<para>
		Type in:
	</para>

	<itemizedlist>
		<listitem>a proper package name (<package>com.itmill.dev.addressbook</package>)</listitem>

		<listitem>a name for the class (<classname>AddressBookApplication</classname>)</listitem>

		<listitem>We'll be extending <classname>com.itmill.toolkit.Application</classname>
		so choose that as the super class</listitem>
	</itemizedlist>

	<para>
		Next, click <guibutton>Finish</guibutton> and Eclipse will create the new class for you.
	</para>
	
	<para>
		Let's first ensure that we get basic things like deployment and debugging
		working. Change your newly created application class to contain the following
		"Hello world" code for testing purposes:
	</para>

	<programlisting><![CDATA[package com.itmill.dev.addressbook;

import com.itmill.toolkit.Application;
import com.itmill.toolkit.ui.Label;
import com.itmill.toolkit.ui.Window;

public class AddressBookApplication extends Application {

    @Override
    public void init() {
        setMainWindow(new Window("Address Book"));
        getMainWindow().addComponent(new Label("Hello World"));
    }
}]]></programlisting>

	<tip>
		<title>Hint 1</title>
		<para>
			If the formatting is weird after copy/pasting code from this tutorial, press
			<keycombo><keycap>Ctrl</keycap><keycap>Alt</keycap><keycap>F</keycap></keycombo>
			to let Eclipse format the code.
		</para>
	</tip>

	<tip>
		<title>Hint 2</title>
		<para>
			If you copy/paste some code and Eclipse doesn't recognize some of the classes,
			press
			<keycombo><keycap>Ctrl</keycap><keycap>Shift</keycap><keycap>O</keycap></keycombo>
			to automatically organize the imports.
		</para>
	</tip>

	<para>
		Double click in the left margin next to the <methodname>init()</methodname> method
		to add a break point.
	</para>

	<para>
		To run our application in Tomcat we need to do some changes to our web.xml
		file. This is the only XML configuration file you need to touch! We need to define
		the Toolkit application servlet which responds to browser requests. The Eclipse
		project creator has created a basic <filename>web.xml</filename> for us in the
		<filename>WebContent/WEB-INF/</filename> directory. Open it in the text editor and
		modify it so it looks like the following. Make sure there is no white space before
		<literal>&lt;?xml</literal> or Eclipse will complain about invalid XML.
	</para>

		<programlisting><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE web-app PUBLIC "-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN"
                         "http://java.sun.com/dtd/web-app_2_3.dtd">
<web-app id="WebApp_ID">
  <display-name>AddressBook</display-name>

  <!-- ApplicationServlet from Toolkit jar will respond to requests. -->
  <servlet>
    <servlet-name>AddressBook</servlet-name>
    <servlet-class>
        com.itmill.toolkit.terminal.gwt.server.ApplicationServlet
    </servlet-class>
    <init-param>
      <!-- Define our application class for servlet. -->
      <param-name>application</param-name>
      <param-value>com.itmill.dev.addressbook.AddressBookApplication</param-value>
    </init-param>
  </servlet>

  <!-- Make the servlet respond to all requests. -->
  <servlet-mapping>
    <servlet-name>AddressBook</servlet-name>
    <url-pattern>/*</url-pattern>
  </servlet-mapping>
</web-app>]]></programlisting>

	<para>
		See the <citetitle>Reference Manual</citetitle> for an explanation as to why the
		web.xml file looks like this. Now we are ready to deploy our project to
		Tomcat. Right click on the <package>AddressBook</package> project in Project
		Explorer and choose <menuchoice><guimenu>Debug as</guimenu><guimenuitem>Debug on
		Server</guimenuitem></menuchoice>. All settings in the popup ought to be OK so
		just click <guibutton>Finish</guibutton>. Eclipse will now start Tomcat and deploy
		the project.
	</para>

	<para>
		Before the application shows up the debugger should hit the
		<methodname>init()</methodname> method and Eclipse asks you if you want to move
		automatically to the debug perspective. Do that and you can debug your application
		code just as you would debug any application code in Eclipse. When ready, remove
		the break point by double clicking next to <methodname>init()</methodname> again
		and then click <guibutton>Play</guibutton> to resume execution.
	</para>

	<para>
		When starting the application, Eclipse automatically opened an embedded web
		browser in a new tab for you (it should say "Address Book"). Open the tab and
		ensure you see "Hello World" on your screen. Next you can copy/paste the URL to
		your favorite web browser to verify it works from there as well.
	</para>

	<para>
		If everything worked, we are ready to start building the main layout. If there was
		a problem, go back and recheck the steps or download the Eclipse project for the
		next step and start from there. If you ran into problems then also check the
		<citetitle>IT Mill Toolkit Reference Manual</citetitle> for a Quick Start guide on
		how to install Tomcat.
	</para>

	<note>
		<para>
			Note: After this step we have done ALL the needed configurations to start
			developing IT Mill Toolkit based applications. No more libraries needed, no more
			XML configurations needed whatsoever - no matter how much you extend your
			application in the future.
		</para>
	</note>

	<para>
		You can download the Eclipse project package for this step from:
	</para>

	<itemizedlist>
		<listitem><link href="http://www.itmill.com/download/doc/tutorial/itmill-toolkit-5-tutorial/ab-ch2-setup.zip"/></listitem>
	</itemizedlist>

</chapter>


<!-- Keep this comment at the end of the file
Local variables:
mode: xml
sgml-omittag:nil
sgml-shorttag:nil
sgml-namecase-general:nil
sgml-general-insert-case:lower
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:4
sgml-indent-data:t
sgml-parent-document:nil
sgml-exposed-tags:nil
sgml-local-catalogs:("/etc/sgml/catalog" "/usr/share/xemacs21/xemacs-packages/etc/psgml-dtds/CATALOG")
sgml-local-ecat-files:("ECAT" "~/sgml/ECAT" "/usr/share/sgml/ECAT" "/usr/local/share/sgml/ECAT" "/usr/local/lib/sgml/ECAT")
End:
-->

