<?xml version="1.0" encoding="UTF-8"?>
<!-- ====================================================================== -->
<!-- Copyright 2000-2012 Vaadin Ltd                                         -->
<!-- All Rights Reserved                                                    -->
<!-- This work is licensed under a Creative Commons Attribution-NoDerivs    -->
<!-- License (CC-BY-ND) Version 3.0. Full license text is available at:     -->
<!-- http://creativecommons.org/licenses/by-nd/3.0/legalcode                -->
<!-- ====================================================================== -->

<chapter xml:id="update-ui">

	<title>Update the UI to Use SQLContainer</title>

  <section>
    <title>Binding <classname>Table</classname> to an <classname>SQLContainer</classname></title>
    <para>
      To access the database helper class and the newly created containers in our application,
      we add a new field to our <classname>AddressBookApplication</classname> together with a getter:
    </para>
    <programlisting><![CDATA[private DatabaseHelper dbHelp = new DatabaseHelper();
public DatabaseHelper getDbHelp() {
  return dbHelp;
}]]></programlisting>

    <para>
      In addition, we need to change the <classname>PersonList</classname> constructor
      so that it gets the person container from the <classname>DatabaseHelper</classname>
      instance. The <classname>PersonList</classname> constructor should look like this:
    </para>

    <programlisting><![CDATA[public class PersonList extends Table {
  public PersonList(final AddressBookApplication app) {
      setSizeFull();
      setContainerDataSource(app.getDbHelp().getPersonContainer());
  }
}]]></programlisting>

    <para>
      The <methodname>setContainerDataSource()</methodname> sets the
      <classname>SQLContainer</classname> which we created in
      <xref linkend="sqlcontainer-basics.replacing-indexedcontainer.initializing"/> to be the
      data source for the <classname>PersonList</classname> table.
    </para>

    <para>
      The <varname>NATURAL_COL_ORDER</varname> in the <classname>DatabaseHelper</classname>
      class should also be updated for the SQLContainer. The definition should be:
    </para>

    <programlisting><![CDATA[public static final Object[] NATURAL_COL_ORDER = new Object[] {
      "FIRSTNAME", "LASTNAME", "EMAIL", "PHONENUMBER", "STREETADDRESS",
      "POSTALCODE", "CITYID" };]]></programlisting>


        <section>
          <title>Replacing the CityID with the Name of the City</title>
          <para>
            As you have probably noticed, the <literal>City</literal> column of the table currently
            shows only the <literal>CityID</literal> (actually the foreign key reference) and not
            the name of the city. This happens because the city data is stored in another database
            table and so far we have not even touched it. Therefore we need to modify the
            <literal>City</literal> column of the <classname>PersonList</classname> table to fetch
            the human-readable name of the city from the <classname>City</classname> table and display
            it to the user.
          </para>

          <para>
            The easiest way to do this is to add a generated column to the table. When the column
            is generated, the table will fetch the city name using the
            <classname>DatabaseHelper</classname> and create a <classname>Label</classname>. The code
            for this can be seen below; add the code to the constructor of the
            <classname>PersonList</classname> class.
          </para>

          <programlisting><![CDATA[addGeneratedColumn("CITYID", new ColumnGenerator() {
  public Component generateCell(Table source, Object itemId,
            Object columnId) {
      if (getItem(itemId).getItemProperty("CITYID").getValue() != null) {
          Label l = new Label();
          int cityId = (Integer) getItem(itemId).getItemProperty(
                "CITYID").getValue();
          l.setValue(app.getDbHelp().getCityName(cityId));
          l.setSizeUndefined();
          return l;
      }
      return null;
  }
});]]></programlisting>

          <para>
            Note that we are using the same column ID that is actually a property ID in the person
            container for the generated column. This way the generated column will override the
            column that only contained the <literal>CityID</literal>s.
          </para>

        </section>

  </section>

  <section>
    <title>Changing the PersonForm to Accommodate SQLContainer</title>

    <para>
      In order to reflect the changes to the transaction aware SQLContainer, the
      <methodname>commit()</methodname> and <methodname>discard()</methodname> methods need to
      be overridden in the <classname>PersonForm</classname>. At the very least, the
      <methodname>commit()</methodname> or <methodname>rollback()</methodname> method of the
      SQLContainer needs to be called so that the changes will be either properly written to
      the database or discarded from the container alltogether.
    </para>

    <para>
      Our overridden <methodname>commit()</methodname> and <methodname>discard()</methodname>
      methods look like the following:
    </para>
    <programlisting><![CDATA[@Override
public void commit() throws Buffered.SourceException {
  /* Commit the data entered in the person form to the actual item. */
  super.commit();

  /* Commit changes to the database. */
  try {
      app.getDbHelp().getPersonContainer().commit();
  } catch (UnsupportedOperationException e) {
      e.printStackTrace();
  } catch (SQLException e) {
      e.printStackTrace();
  }
  setReadOnly(true);
}

@Override
public void discard() throws Buffered.SourceException {
  super.discard();
  /* On discard, roll back the changes. */
  try {
      app.getDbHelp().getPersonContainer().rollback();
  } catch (UnsupportedOperationException e) {
      e.printStackTrace();
  } catch (SQLException e) {
      e.printStackTrace();
  }
  /* Clear the form */
  setItemDataSource(null);
  setReadOnly(true);
}]]></programlisting>

  </section>

  <section>
    <title>Adding a New Contact</title>
    <para>
      The Address Book Tutorial creates a new instance of <classname>Person</classname>,
      wraps it in a <classname>BeanItem</classname> and adds the item to the
      <classname>PersonForm</classname>. When using an SQLContainer, we should add a new
      item to the container and then edit that item. When done in this way we get automatic
      persistence of the new item when running <methodname>commit()</methodname> in
      <classname>SQLContainer</classname>. The updated <methodname>.addContact()</methodname>
      in <classname>PersonForm</classname> looks like this:
    </para>

    <programlisting><![CDATA[public void addContact() {
  /* Roll back changes just in case */
  try {
      app.getDbHelp().getPersonContainer().rollback();
  } catch (SQLException ignored) {
  }
  Object tempItemId = app.getDbHelp().getPersonContainer().addItem();
  setItemDataSource(app.getDbHelp().getPersonContainer().getItem(
          tempItemId));
  setReadOnly(false);
}]]></programlisting>

  </section>

  <section xml:id="update-ui.map-city-to-contacts">
    <title>Map the <classname>City</classname> Table to the Contacts</title>

    <para>
      Adding and editing contacts should now work, but you will notice that the city of a contact
      is shown only by its ID, not by the actual city name. Since this is not very usable, we need
      to create a mapping from the city ID to the name of the city and display that instead.
    </para>

    <para>
      For this purpose, we will constuct a <classname>ComboBox</classname> which will contain the
      existing cities as well as allow the user to enter new ones. This way, selecting an existing
      city becomes much easier.
    </para>

    <para>
      Replacing the normal text field with a combo box will introduce you to the system used
      in Vaadin for populating a form. The same mechanism can be used in tables if you put the
      table into editable mode. Fields are generated using the factory pattern by a class
      implementing the <classname>FieldFactory</classname> interface.
    </para>

    <para>
      By default, the <classname>BaseFieldFactory</classname> class is used and is generally a
      good base for customizations. The <classname>FieldFactory</classname> interface has several
      methods which we do not want to implement and <classname>BaseFieldFactory</classname> has
      good default implementations of these. Later, we'll use the same field factory to tune the
      form fields even more.
    </para> 

    <para>
      We start by adding a <classname>ComboBox</classname> field to our
      <classname>PersonForm</classname>:
    </para>

    <programlisting><![CDATA[private final ComboBox cities = new ComboBox("City");]]></programlisting>

    <para>
      We make adding new items possible and populate the <classname>ComboBox</classname> with
      existing cities from our data source. We will also set the <classname>ComboBox</classname>
      to immediate mode. Add the following code to the <classname>PersonForm</classname>
      constructor:
    </para>

    <programlisting><![CDATA[/* Allow the user to enter new cities */
cities.setNewItemsAllowed(true);

/* We do not want to use null values */
cities.setNullSelectionAllowed(false);

/* Cities selection */
cities.setContainerDataSource(app.getDbHelp().getCityContainer());
cities.setItemCaptionPropertyId("NAME");
cities.setImmediate(true);]]></programlisting>

    <para>
      Finally, we'll make a field factory that extends <classname>BaseFieldFactory</classname>. Using
      the field factory, we can choose what kind of field to use for each property. For the
      <literal>city</literal> property, we'll return the <varname>cities</varname> combo box. For
      all other properties, we let the <classname>BaseFieldFactory</classname> take care of creating
      the field.
    </para>

    <programlisting><![CDATA[setFormFieldFactory(new DefaultFieldFactory() {
 @Override
 public Field createField(Item item, Object propertyId,
    Component uiContext) {
     Field field;
     if (propertyId.equals("CITYID")) {
         field = cities;
     } else {
         field = super.createField(item, propertyId, uiContext);
     }
     return field;
 }
});]]></programlisting>

    <para>
      Now that we have the cities nicely listed in a <classname>ComboBox</classname>, we need to
      allow the user to add cities that are not yet present in the <classname>City</classname>
      database table. This is easy to implement using a <classname>NewItemHandler</classname>
      from the <classname>AbstractSelect</classname> class. In this case, our
      <classname>NewItemHandler</classname> will call the <methodname>addCity()</methodname>
      method of the <classname>DatabaseHelper</classname> class. Due to the temporary row IDs
      used in the SQLContainer, we will also need add a listener to the <classname>City</classname>
      container to receive notifications about the automatically generated IDs of added items.
      Add the following code to the end of the <classname>PersonForm</classname> constructor:
    </para>

    <programlisting><![CDATA[/* NewItemHandler to add new cities */
cities.setNewItemHandler(new AbstractSelect.NewItemHandler() {
  public void addNewItem(String newItemCaption) {
      app.getDbHelp().addCity(newItemCaption);
  }
});
/* Add PersonForm as RowIdChangeListener to the CityContainer */
app.getDbHelp().getCityContainer().addListener(this);]]></programlisting>

    <para>
      To implement the <classname>RowIdChangeListener</classname>, we first need to declare
      that the <classname>PersonForm</classname> class implements
      <classname>QueryDelegate.RowIdChangeListener</classname>. After the declaration, we must
      provide the implementation. In our implementation, we will make the <varname>cities</varname>
      combo box select the city that was just inserted; this <methodname>setValue()</methodname>
      call is necessary since the <varname>itemID</varname> of the city has just changed. Finally,
      we'll set the key of the added city to the person item that we are currently editing, so that
      its <literal>CITYID</literal> property will reference the correct city. The implementation
      can be done like this:
    </para>

    <programlisting><![CDATA[public void rowIdChange(RowIdChangeEvent event) {
  cities.setValue(event.getNewRowId());
  getItemDataSource().getItemProperty("CITYID").setValue(
          event.getNewRowId().getId()[0]);
}]]></programlisting>

    <para>
      The final touch will be done in the <methodname>setItemDataSource()</methodname> method
      of the <classname>PersonForm</classname> class. Here we will add code that will select
      the correct city from the combo box every time a new item is set to the
      <classname>PersonForm</classname>. Since the item from the person container will
      only contain the key of the city, but the combo box requires a complete
      <classname>RowId</classname>, we will need to generate one. Add the following code
      to the <methodname>setItemDataSource()</methodname> method in <classname>PersonForm</classname>,
      right after the call to <methodname>super.setItemDataSource(newDataSource, orderedProperties)</methodname>.
    </para>

    <programlisting><![CDATA[/* Select correct city from the cities ComboBox */
setReadOnly(false);
if (newDataSource.getItemProperty("CITYID").getValue() != null) {
  cities.select(new RowId(new Object[] { newDataSource
                .getItemProperty("CITYID").getValue() }));
} else {
  cities.select(cities.getItemIds().iterator().next());
}]]></programlisting>

    <para>
      If the value of the city reference is <literal>null</literal> (e.g. the item is new),
      the first item will be selected from the <varname>cities</varname> combo box.
    </para>

    <para>
      Try it out and make sure that creation of new contacts, editing of old ones and adding
      new cities works properly.
    </para>
  </section>

  <section>
    <title>Searching with the SQLContainer</title>

    <para>
      In order to make search work with the SQLContainer, we first add two fields to the
      <classname>SearchFilter</classname> class, after which the class will look as follows:
    </para>

    <programlisting><![CDATA[package com.vaadin.demo.tutorial.addressbook.data;
import java.io.Serializable;
public class SearchFilter implements Serializable {

    private final String term;
    private final Object propertyId;
    private String propertyIdDisplayName;
    private String termDisplayName;
    private String searchName;

    public SearchFilter(Object propertyId, String searchTerm, String name) {
          this.propertyId = propertyId;
          this.term = searchTerm;
          this.searchName = name;
    }

    public SearchFilter(Object propertyId, String searchTerm, String name,
          String propertyIdDisplayName, String termDisplayName) {
        this(propertyId, searchTerm, name);
        setPropertyIdDisplayName(propertyIdDisplayName);
        setTermDisplayName(termDisplayName);
    }

    // + getters and setters
}]]></programlisting>

    <para>
      The <methodname>performSearch()</methodname> method also needs to be updated to check
      for illegal values that the SQLContainer won't accept.
    </para>

    <programlisting><![CDATA[private void performSearch() {
  String searchTerm = (String) tf.getValue();
  if (searchTerm == null || searchTerm.equals("")) {
      getWindow().showNotification("Search term cannot be empty!",
              Notification.TYPE_WARNING_MESSAGE);
      return;
  }
  List<SearchFilter> searchFilters = new ArrayList<SearchFilter>();
  searchFilters.add(new SearchFilter(fieldToSearch.getValue(),
                   searchTerm, (String) searchName.getValue(),                       
                   fieldToSearch.getItemCaption(fieldToSearch.getValue()),
                   searchTerm));

  /* If Save is checked, save the search through the main app. */
  if (saveSearch.booleanValue()) {
      if (searchName.getValue() == null
              || searchName.getValue().equals("")) {
          getWindow().showNotification(
                  "Please enter a name for your search!",
                  Notification.TYPE_WARNING_MESSAGE);
          return;
      }
      SearchFilter[] sf = {};
      app.saveSearch(searchFilters.toArray(sf));
  }
  SearchFilter[] sf = {};
  app.search(searchFilters.toArray(sf));
}]]></programlisting>

    <para>
      Now we need to modify the <methodname>search()</methodname> logic in the application
      class. Using the new filtering API in Vaadin 6.6.0, we can use the
      <methodname>addContainerFilter()</methodname> method to add an <classname>Or</classname>
      filter wrapping all other filters.
    </para>

    <programlisting><![CDATA[public void search(SearchFilter... searchFilters) {
  SQLContainer c = getDbHelp().getPersonContainer();
  
  /* Clear previous filters */
  c.removeAllContainerFilters();
  
  /* Build an array of filters */
  Filter[] filters = new Filter[searchFilters.length];
  int ix = 0;
  for (SearchFilter searchFilter : searchFilters) {
      if (Integer.class.equals(c.getType(searchFilter.getPropertyId()))) {
          try {
              filters[ix] = new Equal(searchFilter.getPropertyId(),
                      Integer.parseInt(searchFilter.getTerm()));
          } catch (NumberFormatException nfe) {
              getMainWindow().showNotification("Invalid search term!");
              return;
          }
      } else {
          filters[ix] = new Like((String) searchFilter.getPropertyId(),
                  "%" + searchFilter.getTerm() + "%");
      }
      ix++;
  }
  /* Add the filter(s) to the person container. */
  c.addContainerFilter(new Or(filters));
  showListView();
}]]></programlisting>

    <para>
      The logic for the "Show All" item in the tree also needs to be changed in order for the
      functionality to work with SQLContainer. Update the <methodname>itemClick()</methodname>
      and <methodname>addNewContact()</methodname> methods in the application class to the
      following:
    </para>

    <programlisting><![CDATA[[...]
if (NavigationTree.SHOW_ALL.equals(itemId)) {
  /* Clear all filters from person container */
  getDbHelp().getPersonContainer().removeAllContainerFilters();
  showListView();
}
[...]

private void addNewContact() {
  showListView();
  tree.select(NavigationTree.SHOW_ALL);
  
  /* Clear all filters from person container */
  getDbHelp().getPersonContainer().removeAllContainerFilters();
  personForm.addContact();
}]]></programlisting>

    <section>
      <title>Implementing Search Based on a Foreign Key</title>

      <para>
        We have previously created a simple search view, implemented the search functionality
        and support for saving the searches. However you may have noted that currently only
        city Ids will be searched if the <classname>City</classname> field is used in the search,
        not the actual city names. Therefore we need to modify the search to first look up the
        correct IDs from the city container, and after that create the required amount of search
        filters for the person container. Now you will also see why earlier the search filters
        were passed around and saved in an array.
      </para>

      <para>
        We start from the <classname>SearchView</classname><methodname>.performSearch()</methodname>
        method and replace this:
      </para>

      <programlisting><![CDATA[searchFilters.add(new SearchFilter(fieldToSearch.getValue(),
                                   searchTerm, (String) searchName.getValue(), 
	                                 fieldToSearch.getItemCaption(fieldToSearch.getValue()),
                                   searchTerm));]]></programlisting>

      <para>with this:</para>

      <programlisting><![CDATA[if (!"CITYID".equals(fieldToSearch.getValue())) {
 /* If this is NOT a City search, one filter is enough. */
 searchFilters.add(new SearchFilter(fieldToSearch.getValue(),
                                    searchTerm, (String) searchName.getValue(),
                                    fieldToSearch.getItemCaption(fieldToSearch.getValue()),
                                    searchTerm));
} else {
 SQLContainer cc = app.getDbHelp().getCityContainer();
 cc.addContainerFilter("NAME", searchTerm, true, false);
 for (Object cityItemId : cc.getItemIds()) {
     searchFilters.add(
          new SearchFilter("CITYID",
                           cc.getItem(cityItemId).getItemProperty("ID").getValue().toString(),
                           (String) searchName.getValue(),
                           fieldToSearch.getItemCaption(fieldToSearch.getValue()),
                           searchTerm));
 }
 cc.removeAllContainerFilters();
}]]></programlisting>

      <para>
        In the above code, all the other fields are handled exactly as before, except for
        the <classname>City</classname> field. If a <classname>City</classname> search is made,
        we will fetch the city container and add a container filter to it. This filter will
        search for the term the user entered. Once the results are in we will generate
        <classname>SearchFilters</classname> with each of the matching cities' IDs.
      </para>

    </section>
    
    <section>
      <title>The E-mail Address to Link Generator</title>
      
      <para>
        The <classname>ColumnGenerator</classname> used to display e-mail addresses as links also
        needs updating for use with the SQLContainer, since it currently relies on having an
        instance of <classname>Person</classname>, which is not present with the SQLContainer.
      </para>
      <programlisting><![CDATA[// customize email column to have mailto: links using column generator
addGeneratedColumn("EMAIL", new ColumnGenerator() {
    public Component generateCell(Table source, Object itemId,
                                  Object columnId) {
        if (getItem(itemId).getItemProperty("EMAIL").getValue() != null) {
            Link l = new Link();
            l.setResource(new ExternalResource("mailto:"
                + getItem(itemId).getItemProperty("EMAIL").getValue()));
            l.setCaption(getItem(itemId).getItemProperty("EMAIL")
                .getValue().toString());
            return l;
        }
        return null;
    }
});]]></programlisting>

    </section>
    
    <section>
      <title>The Search Notification</title>
      <para>
        The notification that shows information about the search needs to be refactored a little bit.
        Change this:
      </para>
      <programlisting><![CDATA[getMainWindow().showNotification(
       "Searched for " + searchFilter.getPropertyId() + "=*"
       + searchFilter.getTerm() + "*, found "
       + getDataSource().size() + " item(s).",
       Notification.TYPE_TRAY_NOTIFICATION);]]></programlisting>
      <para>To the following:</para>
      <programlisting><![CDATA[getMainWindow().showNotification(
      "Searched for:<br/> "
              + searchFilters[0].getPropertyIdDisplayName() + " = *"
              + searchFilters[0].getTermDisplayName()
              + "*<br/>Found " + c.size() + " item(s).",
      Notification.TYPE_TRAY_NOTIFICATION);]]></programlisting>
      
      <para>
        In addition to the successful search notification, we can also add a notification
        for invalid search terms. To accomplish this we will add the following code to the
        search method of the main application. The line should be added inside the catch block,
        right before the return statement.
      </para>

      <programlisting><![CDATA[getMainWindow().showNotification("Invalid search term!");]]></programlisting>
    </section>
    
    <section>
      <title>Fixing the Captions of Form Fields</title>

      <para>
        One small detail that catches the eye are the captions of the
        <classname>PersonForm</classname>. As you can see, they are not of the nice
        human-friendly type we used in the table, but they are once again the column
        names directly from the database. Luckily, we can fix this very easily by adding
        the following code to the field factory created at the end of the previous
        chapter. The code should be inserted right before the '<literal>return field;</literal>'
        statement.
      </para>

      <programlisting><![CDATA[/* Set the correct caption to each field */
for (int i = 0; i < DatabaseHelper.NATURAL_COL_ORDER.length; i++) {
    if (DatabaseHelper.NATURAL_COL_ORDER[i].equals(propertyId)) {
        field.setCaption(DatabaseHelper.COL_HEADERS_ENGLISH[i]);
    }
}]]></programlisting>
      
    </section>
    
    <section>
      <title>Null Representation</title>
      <para>
        You may have noticed that a lot of the text fields have the text "null" when no value
        has yet been written in them. This can be made more user friendly by changing the
        string representation of a null value for the text fields. Do this by adding the following
        to the <methodname>createField()</methodname> method.
      </para>

      <programlisting><![CDATA[/* Set null representation of all text fields to empty */
if (field instanceof TextField) {
    ((TextField) field).setNullRepresentation("");
}]]></programlisting>
      
    </section>
    
    <section>
      <title>Making Table Row Selection More Intuitive</title>
      
      <para>
        You may have noticed that the selected row of the main <classname>Table</classname>
        does not always reflect the previous action, or even seem logical at all. Fortunately,
        this usability-enhancing feature can be implemented rather simply. First, we'll need
        to create a method that will fix the selected row and scroll it into view if necessary.
        A reasonable place to implement this is the <classname>PersonList</classname> class.
        Add the following method:
      </para>

      <programlisting><![CDATA[public void fixVisibleAndSelectedItem() {
    if ((getValue() == null || !containsId(getValue())) && size() > 0) {
        Object itemId = getItemIds().iterator().next();
        select(itemId);
        setCurrentPageFirstItemId(itemId);
    } else {
        setCurrentPageFirstItemId(getValue());
    }
}]]></programlisting>
      
      <para>
        This method will scroll the current selection into view, or if no selection is made,
        select the first row in the table.
      </para>
      
      <para>
        Now, where should we call this method? If we observe the selections of the
        <classname>PersonList</classname> table while using the application, we'll notice three
        actions which will make the selected row disappear:
      </para>
      
      <itemizedlist>
    		<listitem>After moving from a search result view to the <uilabel>Show All</uilabel> view</listitem>
    		<listitem>After moving from the <uilabel>Show All</uilabel> view to a search result view</listitem>
    		<listitem>After a new contact has been added</listitem>
    	</itemizedlist>

    	<para>
    	  For the first two cases the fix is easy. We only need to add a call to the method
    	  we just created into the <methodname>showListView()</methodname> and
    	  <methodname>showSearchView()</methodname> methods of the
    	  <classname>AddressBookApplication</classname>, for example like this:
    	</para>

      <programlisting><![CDATA[private void showSearchView() {
    setMainComponent(getSearchView());
    personList.fixVisibleAndSelectedItem();
}]]></programlisting>
      
      <para>
        The third case is a bit more problematic, since we need to get the
        <classname>RowId</classname> of the added contact to be able to select it from the
        <classname>PersonList</classname>. The trick is to use the
        <classname>RowIdChangeListener</classname> like we did in
        <xref linkend="update-ui.map-city-to-contacts" />. with the <classname>City</classname>
        container. First, we make the <classname>AddressBookApplication</classname> implement the
        <classname>QueryDelegate.RowIdChangeListener</classname> interface, and implement the
        <methodname>rowIdChange()</methodname> method as follows. We also add a call to the
        <methodname>fixVisibleAndSelectedItem()</methodname> method.
      </para>
      
      <programlisting><![CDATA[public void rowIdChange(RowIdChangeEvent event) {
    /* Select the added item and fix the table scroll position */
    personList.select(event.getNewRowId());
    personList.fixVisibleAndSelectedItem();
}]]></programlisting>
      
      <para>
        Finally, we should register the main application class as a listener to the
        <classname>PersonAddress</classname> container, and we should be all done!
        The following statement at the end of the <methodname>init()</methodname> method in
        <classname>AddressBookApplication</classname> will do the job:
      </para>

      <programlisting><![CDATA[dbHelp.getPersonContainer().addListener(this);]]></programlisting>

      <para>
        Go ahead and see if the table row selections make more sense after these enhancements.
      </para>
    </section>
  </section>


</chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: xml
sgml-omittag:nil
sgml-shorttag:nil
sgml-namecase-general:nil
sgml-general-insert-case:lower
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:4
sgml-indent-data:t
sgml-parent-document:nil
sgml-exposed-tags:nil
sgml-local-catalogs:("/etc/sgml/catalog" "/usr/share/xemacs21/xemacs-packages/etc/psgml-dtds/CATALOG")
sgml-local-ecat-files:("ECAT" "~/sgml/ECAT" "/usr/share/sgml/ECAT" "/usr/local/share/sgml/ECAT" "/usr/local/lib/sgml/ECAT")
End:
-->
