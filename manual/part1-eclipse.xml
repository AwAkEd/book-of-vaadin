<?xml version="1.0" encoding="iso-8859-1"?>

<chapter xml:id="eclipse">
	<title>Visual User Interface Design with Eclipse</title>
	
	<para>
		This chapter provides instructions for developing the graphical user interface of
		Vaadin components with a visual editor included in the Vaadin Plugin for
		the Eclipse IDE.
	</para>

	<section>
		<title>Overview</title>

		<para>
			The visual or WYSIWYG editor for Vaadin allows you to design the user
			interface of an entire application or specific custom components. The editor
			generates the actual Java code, which is designed to be reusable, so you can
			design the basic layout of the user interface with the visual editor and
			build the user interaction logic on top of the generated code. You can use
			inheritance and composition to modify the components further.
		</para>

		<para>
			The editor is included in the Vaadin Plugin for Eclipse (actually as a
			separate plugin in the plugin set). For installing the Vaadin plugin, see
			<xref linkend="getting-started.environment.eclipse-plugin"/>.
		</para>

		<note>
			<title>Ongoing Work</title>

			<para>
				The first preview version of the visual editor was released in May 2009
				and is still <emphasis>under development</emphasis> at the time of the
				publication of this book. While the preview version is incomplete and
				probably not suitable for demanding use, you can use it for simple tasks,
				especially when familiarizing yourself with Vaadin.
			</para>
		</note>
	</section>

	<section>
		<title>Creating a New <classname>CustomComponent</classname></title>
		
		<para>
			The visual editor works with custom component classes that extend the
			<classname>CustomComponent</classname> class, which is the basic technique in
			Vaadin for creating composite components. Custom components are described in
			<xref linkend="components.customcomponent"/>. Any
			<classname>CustomComponent</classname> will not do for the visual editor; you
			need to create a new one as instructed below.
		</para>

		<orderedlist>
			<listitem>
				<para>
					Select
					<menuchoice><guimenu>File</guimenu><guisubmenu>New</guisubmenu><guimenuitem>Other...</guimenuitem></menuchoice>
					in the main menu or right-click the <guilabel>Project
					Explorer</guilabel> and select
					<menuchoice><guimenu>New</guimenu><guimenuitem>Other...</guimenuitem></menuchoice>
					to open the wizard selection window.
				</para>
			</listitem>
			
			<listitem>
				<para>
					In the <guilabel>New</guilabel> wizard selection window, select
					<menuchoice><guimenu>Vaadin</guimenu><guimenuitem>Vaadin
					CustomComponent</guimenuitem></menuchoice> and click
					<guibutton>Next</guibutton>.
				</para>
				
				<screenshot>
					<mediaobject>
						<imageobject role="html">
							<imagedata align="center" fileref="img/eclipse/editor-new-select.png"/>
						</imageobject>
						<imageobject role="fo">
							<imagedata scale="100" smallscale="100%" align="center" fileref="img/eclipse/editor-new-select.png"/>
						</imageobject>
					</mediaobject>
				</screenshot>
			</listitem>

			<listitem>
				<para>
					The <guilabel>Source folder</guilabel> is the root source
					directory where the new component will be created. This is by
					default the default source directory of your project.
				</para>

				<screenshot>
					<mediaobject>
						<imageobject role="html">
							<imagedata align="center" fileref="img/eclipse/editor-new-settings.png"/>
						</imageobject>
						<imageobject role="fo">
							<imagedata scale="100" smallscale="100%" align="center" fileref="img/eclipse/editor-new-settings.png"/>
						</imageobject>
					</mediaobject>
				</screenshot>
					
				<para>
					Enter the Java <guilabel>Package</guilabel> under which the new
					component class should be created or select it by clicking the
					<guibutton>Browse</guibutton> button. Also enter the class
					<guilabel>Name</guilabel> of the new component.
				</para>

				<para>
					Finally, click <guibutton>Finish</guibutton> to create the component.
				</para>
			</listitem>
		</orderedlist>

		<para>
			A newly created composite component is opened in the editor window, as shown
			in <xref linkend="figure.eclipse.editor.source.new"/>.
		</para>

		<figure xml:id="figure.eclipse.editor.source.new">
			<title>New Composite Component</title>
			<mediaobject>
				<imageobject role="html">
					<imagedata align="center" fileref="img/eclipse/editor-new-source-1.png"/>
				</imageobject>
				<imageobject role="fo">
					<imagedata scale="100" smallscale="100%" align="center" fileref="img/eclipse/editor-source-1.png"/>
				</imageobject>
			</mediaobject>
		</figure>

		<para>
			You can observe that a component that you can edit with the visual editor has
			two tabs at the bottom of the view: <guilabel>Source</guilabel> and
			<guilabel>Design</guilabel>. These tabs allow switching between the source
			view and the visual editing view.
		</para>
	</section>

	<section xml:id="eclipse.structure">
		<title>Structure of a Visually Editable Component</title>
		
		<para>
			A component created by the wizard and later managed by the visual editor has a
			very specific structure that allows you to insert your user interface logic in
			the component while keeping a minimal amount of code off-limits. You need to
			know what you can edit yourself and what exactly is managed by the editor. The
			managed member variables and methods are marked with the
			<classname>AutoGenerated</classname> annotation, as you can see later.
		</para>

		<para>
			A visually editable component consists of:
		</para>

		<itemizedlist>
			<listitem><para>Member variables containing sub-component references</para></listitem>
			<listitem><para>Sub-component builder methods</para></listitem>
			<listitem><para>The constructor</para></listitem>
		</itemizedlist>
		
		<para>
			The structure of a composite component is hierarchical, a nested hierarchy of
			layout components containing other layout components as well as regular
			components. The root layout of the component tree, or the
			<emphasis>composition root</emphasis> of the
			<classname>CustomComponent</classname>, is named
			<literal>mainLayout</literal>. See <xref
			linkend="components.customcomponent"/> for a detailed description of the
			structure of custom (composite) components.
		</para>

		<section xml:id="eclipse.structure.references">
			<title>Sub-Component References</title>
			
			<para>
				The <classname>CustomComponent</classname> class will include a reference
				to each contained component as a member variable. The most important of
				these is the <varname>mainLayout</varname> reference to the composition
				root layout. Such automatically generated member variables are marked with
				the <literal>@AutoGenerated</literal> annotation. They are managed by
				the editor, so you should not edit them manually, unless you know what you
				are doing.
			</para>

			<para>
				A composite component with a <classname>AbsoluteLayout</classname> as the
				composition root, containing a <classname>Button</classname> and a
				<classname>Table</classname> would have the references as follows:
			</para>
			
			<programlisting><?pocket-size 65% ?><![CDATA[public class MyComponent extends CustomComponent {

    @AutoGenerated
    private AbsoluteLayout mainLayout;
    @AutoGenerated
    private Button myButton;
    @AutoGenerated
    private Table myTable;
    ...]]></programlisting>

			<para>
				The names of the member variables are defined in the component properties
				panel of the visual editor, in the <guilabel>Component name</guilabel>
				field, as described in <xref
				linkend="eclipse.editor.component-properties.basic"/>. While you can
				change the name of any other components, the name of the root layout is
				always <varname>mainLayout</varname>. It is fixed because the editor does
				not make changes to the constructor, as noted in <xref
				linkend="eclipse.structure.constructor"/>. You can, however, change the
				type of the root layout, which is an <classname>AbsoluteLayout</classname>
				by default.
			</para>

			<para>
				Certain typically static components, such as the
				<classname>Label</classname> label component, will not have a reference as
				a member variable. See the description of the builder methods below for
				details.
			</para>

		</section>

		<section xml:id="eclipse.structure.builders">
			<title>Sub-Component Builders</title>

			<para>
				Every managed layout component will have a builder method that creates the
				layout and all its contained components. The builder puts references to
				the created components in their corresponding member variables, and it
				also returns a reference to the created layout component.
			</para>

			<para>
				Below is an example of an initial main layout:
			</para>

			<programlisting><?pocket-size 75% ?><![CDATA[@AutoGenerated
private AbsoluteLayout buildMainLayout() {
    // common part: create layout
    mainLayout = new AbsoluteLayout();
    
    // top-level component properties
    setHeight("100.0%");
    setWidth("100.0%");
    
    return mainLayout;
}]]></programlisting>

			<para>
				Notice that while the builder methods return a reference to the created
				component, they also write the reference directly to the member
				variable. The returned reference might not be used by the generated code
				at all (in the constructor or in the builder methods), but you can use it
				for your purposes.
			</para>
			
			<para>
				The builder of the main layout is called in the constructor, as explained
				in <xref linkend="eclipse.structure.constructor"/>. When you have a layout
				with nested layout components, the builders of each layout will call the
				appropriate builder methods of their contained layouts to create their
				contents.
			</para>
		</section>

		<section xml:id="eclipse.structure.constructor">
			<title>The Constructor</title>

			<para>
				When you create a new composite component using the wizard, it will create
				a constructor for the component and fill its basic content.
			</para>

			<programlisting><?pocket-size 65% ?><![CDATA[    public MyComponent() {
        buildMainLayout();
        setCompositionRoot(mainLayout);

        // TODO add user code here
    }]]></programlisting>

			<para>
				The most important thing to do in the constructor is to set the
				composition root of the <classname>CustomComponent</classname> with the
				<methodname>setCompositionRoot()</methodname> (see <xref
				linkend="components.customcomponent"/> for more details on the composition
				root). The generated constructor first builds the root layout of the
				composite component with <methodname>buildMainLayout()</methodname> and
				then uses the <varname>mainLayout</varname> reference.
			</para>

			<para>
				 The editor will not change the constructor afterwards, so you can safely
				 change it as you want. The editor does not allow changing the member
				 variable holding a reference to the root layout, so it is always named as
				 <varname>mainLayout</varname>.
			</para>
		</section>
	</section>
		
	<section xml:id="eclipse.editor">
		<title>Using The Visual Editor</title>

		<para>
			The visual editor view consists of, on the left side, an editing area that
			displays the current layout and, on the right side, a control panel that
			contains a component tree, component settings, and a component list for adding
			new components.
		</para>

		<section>
			<title>Adding New Components</title>

			<para>
				To add new components in the user interface, you add nodes to the
				component tree at the top of the editor control panel. To add a new node,
				select an existing node under which you wish to insert the new node. The
				list box at the bottom of the editor control panel shows the components
				allowed under the selected component; you can generally add components
				only under a layout (<classname>Layout</classname>) or a component
				container (<classname>ComponentContainer</classname>). Just click on a
				component to add it under the selected component.
			</para>
		</section>

		<section xml:id="eclipse.editor.component-properties">
			<title>Setting Component Properties</title>

			<para>
				The property setting area of the control panel allows setting component
				properties. The area is divided into basic properties, size and position
				settings, and other properties, which includes also styles.
			</para>

			<section xml:id="eclipse.editor.component-properties.basic">
				<title>Basic Properties</title>

				<figure xml:id="figure.eclipse.editor.component-properties.basic">
					<title>Basic Component Properties</title>
					<mediaobject>
						<imageobject role="html">
							<imagedata align="center" fileref="img/eclipse/editor-properties-basic.png"/>
						</imageobject>
						<imageobject role="fo">
							<imagedata scale="100" smallscale="100%" align="center" fileref="img/eclipse/editor-properties-basic.png"/>
						</imageobject>
					</mediaobject>
				</figure>

				<para>
					The basic properties of a component, as shown in <xref linkend="figure.eclipse.editor.component-properties.basic"/> are:
				</para>

				<variablelist>
					<varlistentry>
						<term>Component name</term>
						<listitem>
							<para>
								The name of the component, which is used for the reference
								to the component, so it must obey Java notation for
								variable names.
							</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>Caption</term>
						<listitem>
							<para>
								The caption of a component is usually displayed above the
								component, left of the caption. Some components, such as
								<classname>Button</classname>, display the icon inside the
								component. For <classname>Label</classname> text, you
								should set the value of the label instead of the caption.
							</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>Description (tooltip)</term>
						<listitem>
							<para>
								The description is usually displayed as a tooltip when the
								mouse pointer hovers over the component for a while. Some
								components, such as <classname>Form</classname> have their
								own way of displaying the description.
							</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>Icon</term>
						<listitem>
							<para>
								The icon of a component is usually displayed above the
								component, left of the caption. Some components, such as
								<classname>Button</classname>, display the icon inside the
								component.
							</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>Formatting type</term>
						<listitem>
							<para>
								Some components allow different formatting types, such as
								<classname>Label</classname>, which allow formatting
								either as <guilabel>Text</guilabel>,
								<guilabel>XHTML</guilabel>,
								<guilabel>Preformatted</guilabel>, and
								<guilabel>Raw</guilabel>.
							</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>Value</term>
						<listitem>
							<para>
								The component value. The value type and how it is
								displayed by the component varies between different
								component types and each value type has its own
								editor. The editor opens by clicking on the
								<guibutton>...</guibutton> button.
							</para>
						</listitem>
					</varlistentry>
				</variablelist>
				
			</section>

			<section>
				<title>Size and Position</title>

				<para>
					The size of a component is determined by its width and height, which
					you can give in the two edit boxes in the control panel. You can use
					any unit specifiers for components, as described in <xref
					linkend="components.features.sizeable"/>. Emptying a size box will
					make the size "automatic", which means setting the size as
					<emphasis>undefined</emphasis>. In the generated code, the undefined
					value will be expressed as "<literal>-1px</literal>".
				</para>

				<para>
					Setting width of "<literal>100px</literal>" and
					<emphasis>auto</emphasis> (undefined or empty) height would result in
					the following generated settings for a button:
				</para>

			<programlisting><![CDATA[// myButton
myButton = new Button();
...
myButton.setHeight("-1px");
myButton.setWidth("100px");
...]]></programlisting>

				<para>
				</para>

				<para>
					<xref linkend="figure.eclipse.editor.component-properties.size"/>
					shows the control panel area for the size and position.
				</para>

				<figure xml:id="figure.eclipse.editor.component-properties.size">
					<title>Component Size and Position</title>
					<mediaobject>
						<imageobject role="html">
							<imagedata align="center" fileref="img/eclipse/editor-properties-size.png"/>
						</imageobject>
						<imageobject role="fo">
							<imagedata scale="100" smallscale="100%" align="center" fileref="img/eclipse/editor-properties-size.png"/>
						</imageobject>
					</mediaobject>
				</figure>

				<para>
					The generated code for the example would be:
				</para>

				<para>
					When editing the position of a component inside an
					<classname>AbsoluteLayout</classname>, the editor will display
					vertical and horizontal rulers, which you can use to set the position
					of the component. The rulers are shown only for positions that are not
					<emphasis>auto</emphasis>. See <xref
					linkend="eclipse.editor.absolutelayout"/> for more information about
					editing absolute layouts.
				</para>
			</section>

			<section>
				<title>Other Properties</title>

				<para>
				</para>
			</section>
		</section>

		<section xml:id="eclipse.editor.absolutelayout">
			<title>Editing an <classname>AbsoluteLayout</classname></title>

			<para>
				An <classname>AbsoluteLayout</classname> allows positioning components
				exactly at specified coordinates. To position [...].
			</para>
		</section>
	</section>
</chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: xml
sgml-omittag:nil
sgml-shorttag:nil
sgml-namecase-general:nil
sgml-general-insert-case:lower
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:4
sgml-indent-data:t
sgml-parent-document:nil
sgml-exposed-tags:nil
sgml-local-catalogs:("/etc/sgml/catalog" "/usr/share/xemacs21/xemacs-packages/etc/psgml-dtds/CATALOG")
sgml-local-ecat-files:("ECAT" "~/sgml/ECAT" "/usr/share/sgml/ECAT" "/usr/local/share/sgml/ECAT" "/usr/local/lib/sgml/ECAT")
End:
-->
