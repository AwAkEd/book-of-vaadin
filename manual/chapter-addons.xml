<?xml version="1.0" encoding="UTF-8"?>

<chapter xml:id="addons">
	<title>Using Vaadin Add-ons</title>

	<para>
		This chapter describes the installation of add-on components, themes, containers,
		and other tools from the Vaadin Directory and the use of commercial add-ons
		offered by Vaadin.
	</para>

	<section xml:id="addons.overview">
		<title>Overview</title>

		<para>
            In addition to the components, layouts, themes, and data sources built in into
            the core Vaadin library, many others are available as add-ons, either from the
            Vaadin Directory or from independent sources. Both commercial and free
            components exist under various licenses.
        </para>

		<para>
            Installation of themes, data sources, and components built with server-side
            component composition is simple, just dropping a JAR package in a project
            and, usually, compiling the included widget set (the client-side
            implementation).
        </para>
	</section>

    <section xml:id="addons.downloading">
        <title>Downloading Add-ons from Vaadin Directory</title>

        <para>
            Vaadin Directory at <uri>http://vaadin.com/directory/</uri> provides a rich
            collection of add-ons for Vaadin. You can download Directory add-on packages
            from the details page of an add-on.
        </para>

        <orderedlist>
            <listitem>
                <para>
                    Select the version; some add-ons have several versions available.
                    The latest is shown by default, but you can choose another the
                    version to download from the dropdown menu in the header of the
                    details page.
                </para>
            </listitem>
            <listitem>
                <para>
                    Click <guibutton>Download Now</guibutton> and save the JAR or Zip
                    file on your computer.
                </para>
            </listitem>
            <listitem>
                <para>
                    If the add-on is packaged in a Zip package, unzip the package and
                    follow any instructions provided inside the package. Typically,
                    you just need to copy a JAR file to your web project under the
                    <filename>WEB-INF/lib</filename> directory.
                </para>
            </listitem>

            <listitem>
                <para>
                    Update and recompile your project. In Eclipse, select the project
                    and press F5.
                </para>
            </listitem>

            <listitem>
                <para>
                    You need to compile the client-side implementations of the add-on
                    components, that is, a <emphasis>widget set</emphasis>. This is
                    the case for majority of add-ons, except for pure server-side,
                    theme, or data binding add-ons. You must recompile the widget set
                    if you install a new version of the add-on or the Vaadin
                    library. See the subsequent sections for detailed instructions for
                    compiling widget sets.
                </para>
            </listitem>
            
            <listitem>
                <para>
                    Update the project in web server and possibly restart the server.
                </para>
            </listitem>
        </orderedlist>

        <para>
            After trying out an add-on, you can give some feedback to the author of
            the add-on by rating the add-on with one to five stars and optionally
            leaving a comment.
        </para>

        <para>
            Please note the add-on license. While most commercial add-ons can be
            downloaded directly, you should note their license and other terms and
            conditions. Many are offered under a dual licensing agreement so that they
            can be used in open source projects for free, and many have a trial period
            for closed-source development.
        </para>
    </section>

    <section xml:id="addons.compiling">
        <title>Compiling Add-on Widget Sets</title>

        <section xml:id="addons.compiling.eclipse">
            <title>Compiling Widget Sets in Eclipse</title>

            <para>
                To be able to compile widget sets in Eclipse, you need to have the Vaadin
                Plugin for Eclipse installed, as instructed in <xref
                linkend="getting-started.environment.eclipse-plugin"/>.
            </para>

            <para>
                An application can only have one widget set, so if you use multiple
                add-ons and possibly your own custom widgets, they need to be combined to
                a single widget set that inherits them. You can create the combining
                widget set manually and the Eclipse plugin simply update it when you add
                new add-ons. Otherwise, the Eclipse plugin automatically creates a
                project-specific widget set under the project root source folder.
            </para>

            <para>
                The Eclipse plugin compiles widget sets automatically by default. They do
                not normally need to be recompiled after changes to server-side classes,
                so if the automatic recompilation get annoying, disable it from the
                project settings.
            </para>

            <para>
                To compile the widget set(s) manually, click the <guilabel>Compile Vaadin
                widgets</guilabel> button in Eclipse toolbar or press
                <keycombo><keycap>Ctrl</keycap><keycap>6</keycap></keycombo>. You must
                recompile the widget set(s) always when you install a new version of the
                add-on or of the Vaadin library.
            </para>

            <!-- TODO: Better icon as requested in #3692. -->
            <figure xml:id="figure.advanced.addons.compiling-eclipse.toolbar">
                <title>The <guibutton>Compile Vaadin widgets</guibutton> Button in Eclipse Toolbar</title>
                <mediaobject>
                    <imageobject role="html">
                        <imagedata align="center" fileref="img/eclipse/widgetset-compiling-toolbar-lo.png"/>
                    </imageobject>
                    <imageobject role="fo">
                        <imagedata scale="100" smallscale="70%" align="center" fileref="img/eclipse/widgetset-compiling-toolbar-hi.png"/>
                    </imageobject>
                </mediaobject>
            </figure>

            <para>
                Further information on defining and compiling widget sets is given in
                <xref linkend="gwt.eclipse.compiling"/>, <xref linkend="gwt.widgetset"/>,
                and <xref linkend="gwt.development.compiler"/>.
            </para>
        </section>

        <section xml:id="addons.compiling.ant">
            <title>Compiling Widget Sets with an Ant Script</title>

            <para>
                If you need to compile the widget set with an Ant script, you can find a
                script template at the URL <link
                xlink:href="https://vaadin.com/download/misc/build-widgetset.xml">https://vaadin.com/download/misc/build-widgetset.xml</link>.
                You can copy the build script to your project and, once configured, use it
                by entering:
            </para>

            <screen><prompt>$</prompt> <command>ant -f build-widgetset.xml</command></screen>

            <para>
                See <xref linkend="gwt.development.compiler"/> for details on configuring
                the build script and the available build targets, and <xref
                linkend="gwt.widgetset"/> for information regarding the widget set
                definition file.
            </para>

            <para>
                If you are using an IDE such as Eclipse, <emphasis>always</emphasis>
                remember to refresh the project to synchronize it with the filesystem
                after compiling the widget set outside Eclipse.
            </para>
        </section>

        <section xml:id="addons.compiling.troubleshooting">
            <title>Troubleshooting</title>
        
            <para>
                If you experience problems, do the following:
            </para>

            <itemizedlist>
                <listitem>
                    <para>
                        Check the <filename>.gwt.xml</filename> widget set definition file
                        under the widget set folder in the project root package. For
                        example, if the project root package is
                        <filename>com.example.myproject</filename>, the widget set
                        definition file would be
                        <filename>com.example.myproject.widgetset.MyprojectWidgetset.gwt.xml</filename>. See
                        <xref linkend="gwt.widgetset"/> for details on the contents of the
                        widget set definition file.
                    </para>
                </listitem>

                <listitem>
                    <para>
                        Check the <filename>WEB-INF/web.xml</filename> deployment
                        descriptor and see that the servlet for your application has a
                        widget set parameter, such as the following:
                    </para>

                    <programlisting><?pocket-size 65% ?><![CDATA[<init-param>
  <description>Application widgetset</description>
  <param-name>widgetset</param-name>
  <param-value>com.example.myproject.widgetset.MyprojectWidgetset</param-value>
</init-param>]]></programlisting>
                </listitem>

                <listitem>
                    <para>
                        See the <filename>VAADIN/widgetsets</filename> directory and check
                        that the widget set appears there. You can remove it and recompile
                        to see that compilation works properly.
                    </para>
                </listitem>
                <listitem>
                    <para>
                        Use the <guilabel>Net</guilabel> tab in Firebug to see that the
                        widget set (and theme) is loaded properly.
                    </para>
                </listitem>
                <listitem>
                    <para>
                        Use the <uri>?debug</uri> parameter for the application to see if
                        there is any version conflict between the widget set and the
                        Vaadin library, or the themes. See <xref
                        linkend="advanced.debug-production-modes.debug.mode"/> for
                        details.
                    </para>
                </listitem>
                <listitem>
                    <para>
                        Refresh and recompile the project. In Eclipse, select the project
                        and press <keycap>F5</keycap>, stop the server, clean the server
                        temporary directories, and restart it.
                    </para>
                </listitem>
                <listitem>
                    <para>
                        Check the Error Log view in Eclipse (or the IDE you use).
                    </para>
                </listitem>
            </itemizedlist>

            <!-- TODO Vaadin 7: Re-enable
            <para>
                For more specific problems related to widget sets definition and
                compilation, see <xref linkend="gwt.development.troubleshooting"/>.
            </para>
            -->
        </section>
    </section>

    <section xml:id="addons.removing">
        <title>Removing Add-ons</title>

        <para>
            Version mismatch problems with custom widget sets are a common source of
            grief for many beginners in Vaadin. If you need add-ons or your own custom
            components that include widget sets, you of course need to compile them,
            but otherwise it is unnecessary.
        </para>

        <para>
            If you do not use any such add-ons or your own custom components, do the
            following:
        </para>

        <orderedlist>
            <listitem>
                <para>
                    If you are using the Eclipse plugin, disable automatic widget set
                    compilation from project preferences, in the
                    <guilabel>Vaadin</guilabel> category, by selecting <guilabel>Suspend
                    automatic widgetset builds</guilabel>. This prevents accidental
                    compilation of the unnecessary widget sets. You may want to do this
                    anyhow as the automatic builds can be annoying. You can still always
                    build the widget set with the button in the toolbar.
                </para>
            </listitem>
            <listitem>
                <para>
                    Remove all widget set folders from under the
                    <filename>VAADIN/widgetsets</filename> folder.
                </para>
            </listitem>
            <listitem>
                <para>
                    Edit the <filename>WEB-INF/web.xml</filename> file and remove the
                    <parameter>widgetset</parameter> init parameter from the servlet. It
                    looks as follows:
                </para>

                <programlisting><?pocket-size 65% ?><![CDATA[<init-param>
  <description>Application widgetset</description>
  <param-name>widgetset</param-name>
  <param-value>com.vaadin.demo.colorpicker.widgetset.ColorPickerWidgetSet</param-value>
</init-param>]]></programlisting>
            </listitem>

            <listitem>
                <para>
                    Refresh the project. In Eclipse, select the project and press F5, stop
                    the server, clean the server temporary directories, and restart it.
                </para>
            </listitem>
        </orderedlist>
        
        <para>
            At least in development environments, if you have extracted Vaadin themes to
            the <filename>VAADIN/themes</filename> folder, you should remove them and let
            them be loaded dynamically from the Vaadin JAR.
        </para>
    </section>

    <section xml:id="addons.maven">
        <title>Using Add-ons in a Maven Project</title>

        <indexterm xml:id="term.addons.maven" class="startofrange">
            <primary>Maven</primary>
            <secondary>using add-ons</secondary>
        </indexterm>

        <para>
            To use add-ons in a project that uses Maven, you simply have to add them as
            dependencies in the POM. If the add-ons includes widget sets, as at least most
            component add-ons do, you also need to define and compile a project widget
            set.
        </para>

        <para>
            Creating, compiling, and packaging a Vaadin project using Maven was described
            in <xref linkend="getting-started.maven"/>.
        </para>

        <section xml:id="addons.maven.dependency">
            <title>Adding a Dependency</title>

            <para>
                Vaadin Directory provides a Maven repository for all the add-ons in the
                Directory. You can view needed Maven dependency definitions by clicking
                the <guibutton>Maven POM</guibutton> button at the right side of the
                add-on view, as illustrated in <xref
                linkend="figure.addons.maven.pombutton"/>.
            </para>

            <figure xml:id="figure.addons.maven.pombutton">
                <title>Maven POM Definitions in Vaadin Directory</title>
                <mediaobject>
                    <imageobject role="html">
                        <imagedata align="center" fileref="img/addons/directory-maven-pom.png"/>
                    </imageobject>
                    <imageobject role="fo">
                        <imagedata smallscale="70%" align="center" fileref="img/addons/directory-maven-pom.png"/>
                    </imageobject>
                </mediaobject>
            </figure>

            <para>
                You need to copy the dependency declaration to the
                <filename>pom.xml</filename> file in your project, under the
                <filename>/project/dependencies</filename> element.
            </para>

			<programlisting>  ...
  &lt;dependencies&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;com.vaadin&lt;/groupId&gt;
      &lt;artifactId&gt;vaadin&lt;/artifactId&gt;
      &lt;version&gt;${vaadin.version}&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;org.vaadin.addons&lt;/groupId&gt;
      &lt;artifactId&gt;<emphasis role="bold">vaadin-sqlcontainer</emphasis>&lt;/artifactId&gt;
      &lt;version&gt;<emphasis role="bold">1.1.0</emphasis>&lt;/version&gt;
    &lt;/dependency&gt;
    ...</programlisting>

            <para>
                You can use the exact version number, as is done in the example above, or
                <literal>LATEST</literal> to always use the latest version of the add-on.
            </para>

            <para>
                The POM excerpt given in Directory includes also a repository definition,
                but if you have used the <literal>vaadin-archetype-clean</literal>
                archetype when creating your project, it should already include the
                definition.
            </para>
        </section>

        <section xml:id="addons.maven.widgetset">
            <title>Enabling Widget Set Compilation</title>

            <para>
                Most add-on components in Vaadin Directory include a <emphasis>widget
                set</emphasis> which must be compiled before using the add-on. Some
                add-ons, such as data binding add-ons or themes, do not include a widget
                set.
            </para>

            <simplesect xml:id="addons.maven.widgetset.pom">
                <title>Configuring the POM</title>

                <para>
                    The configuration needed for compiling widget sets is included in the
                    <filename>pom.xml</filename> created with the
                    <literal>vaadin-archetype-clean</literal> archetype, but the elements are
                    commented out. You just need to enable the configuration.
                </para>

                <programlisting>&lt;!-- Compile custom GWT components or widget dependencies with the GWT compiler --&gt;
<emphasis role="bold">&lt;!--</emphasis>
&lt;plugin&gt;
  &lt;groupId&gt;org.codehaus.mojo&lt;/groupId&gt;
  ...
&lt;/plugin&gt;
<emphasis role="bold">--&gt;</emphasis>

...

<emphasis role="bold">&lt;!--</emphasis>
&lt;pluginRepositories&gt;
&lt;/pluginRepositories&gt;
<emphasis role="bold">--&gt;</emphasis>

...

&lt;dependencies&gt;
...
  <emphasis role="bold">&lt;!--</emphasis>
  &lt;dependency&gt;
    ...
  &lt;/dependency&gt;
  <emphasis role="bold">--&gt;</emphasis>
&lt;/dependencies&gt;</programlisting>
            </simplesect>

            <simplesect xml:id="addons.maven.widgetset.module">
                <title>Creating a Widget Set Definition File</title>

                <indexterm xml:id="term.addons.maven.widgetset.module" class="startofrange">
                    <primary>Google Web Toolkit</primary>
                    <secondary>GWT Module Descriptor</secondary>
                </indexterm>

                <para>
                    Your project needs a widget set that combines the default widget set
                    in the Vaadin core library with any widget sets from add-ons. This
                    requires creating an empty <emphasis>widget set definition
                    file</emphasis> (or <emphasis>module file</emphasis> in GWT
                    terminology). The actual content of the file is generated
                    automatically by searching the class path for widget sets (with the
                    <literal>vaadin:update-widgetset</literal> as explained later), but
                    you need to create an empty file.
                </para>

                <para>
                    Create a widget set directory in your project source directory.
                </para>

                <screen><prompt>$</prompt> <command>mkdir</command> <parameter>project-name/src/main/java/your/company/gwt</parameter></screen>

                <para>
                    Then create a <filename>ProjectNameWidgetSet.gwt.xml</filename> file
                    in the directory with an empty <literal>&lt;module&gt;</literal>
                    element as follows:
                </para>

                <programlisting><![CDATA[<module>
</module>]]></programlisting>

                <indexterm startref="term.addons.maven.widgetset.module" class="endofrange"/>
            </simplesect>

            <simplesect xml:id="addons.maven.widgetset.web">
                <title>Enabling the Widget Set in the Application</title>

                <para>
                    The project widget set needs to be enabled in the
                    <filename>web.xml</filename> deployment descriptor in the application.
                    Edit the <filename>src/main/webapp/WEB-INF/web.xml</filename> file and
                    add or modify the <literal>widgetset</literal> parameter for the
                    servlet as follows.
                </para>

                <programlisting>&lt;servlet&gt;
  ...
  &lt;init-param&gt;
    &lt;description&gt;Widget Set to Use&lt;/description&gt;
    &lt;param-name&gt;widgetset&lt;/param-name&gt;
    &lt;param-value&gt;<emphasis role="bold">your.company.gwt.ProjectNameWidgetSet</emphasis>&lt;/param-value&gt;
  &lt;/init-param&gt;
&lt;/servlet&gt;</programlisting>

                <para>
                    The parameter is the class name of the widget set, that is, without
                    the <filename>.gwt.xml</filename> extension and with the Java dot
                    notation for class names that include the package name.
                </para>
            </simplesect>

            <para>
                This should complete the task of enabling a widget set compilation and use
                in your project. Next, you need to update the project widget set, as
                described in the next section.
            </para>
        </section>

        <section xml:id="addons.maven.update-widgetset">
            <title>Updating and Compiling the Project Widget Set</title>

            <para>
                If you have enabled widget set compilation as described earlier and
                created the project widget set, you need to update the widget set to
                include the default widget set and any widget sets included in
                add-ons. You can do this simply by running the
                <literal>vaadin:update-widgetset</literal> goal in the project directory.
            </para>

            <screen><prompt>$</prompt> <command>mvn</command> <parameter>vaadin:update-widgetset</parameter>
...
[INFO] auto discovered modules [your.company.gwt.ProjectNameWidgetSet]
[INFO] Updating widgetset your.company.gwt.ProjectNameWidgetSet
[ERROR] 27.10.2011 19:22:34 com.vaadin.terminal.gwt.widgetsetutils.ClassPathExplorer getAvailableWidgetSets
[ERROR] INFO: Widgetsets found from classpath:
[ERROR]         your.company.gwt.ProjectNameWidgetSet in file:/home/magi/itmill/maventest/project-name/src/main/java
[ERROR]         com.vaadin.terminal.gwt.DefaultWidgetSet in jar:file:/home/magi/.m2/repository/com/vaadin/vaadin/6.7.1/vaadin-6.7.1.jar!/
[ERROR] 
[ERROR] 27.10.2011 19:22:34 com.vaadin.terminal.gwt.widgetsetutils.ClassPathExplorer getAvailableWidgetSets
[ERROR] INFO: Search took 8ms
...
</screen>

            <para>
                Do not mind the "ERROR" labels, they are just an issue with the Vaadin
                Plugin for Maven.
            </para>

            <para>
                If you later add other add-ons in the project, or remove some, you need to
                run the widget set update again.
            </para>

            <para>
                The project widget set also needs to be compiled using the GWT
                Compiler. We enabled the Maven add-ons for GWT compilation in the previous
                section. You can compile the widget set with the
                <literal>gwt:compile</literal> goal as follows:
            </para>

            <screen><prompt>$</prompt> <command>mvn</command> <parameter>gwt:compile</parameter></screen>

            <para>
                You need to recompile the widget set if you upgrade to a new version of
                Vaadin or any of the included widget sets. It is <emphasis>not</emphasis>
                done automatically by the <literal>package</literal> goal. If you have
                added or removed add-ons, you also need to run the
                <literal>vaadin:update-widgetset</literal> goal before the compilation.
            </para>

            <para>
                This concludes the compilation of add-on widget sets. You still need to
                compile and package the actual application with the
                <literal>package</literal> goal, as described in <xref
                linkend="getting-started.maven"/>.
            </para>
        </section>

        <indexterm startref="term.addons.maven" class="endofrange"/>
    </section>
</chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: xml
sgml-omittag:nil
sgml-shorttag:nil
sgml-namecase-general:nil
sgml-general-insert-case:lower
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:4
sgml-indent-data:t
sgml-parent-document:nil
sgml-exposed-tags:nil
sgml-local-catalogs:("/etc/sgml/catalog" "/usr/share/xemacs21/xemacs-packages/etc/psgml-dtds/CATALOG")
sgml-local-ecat-files:("ECAT" "~/sgml/ECAT" "/usr/share/sgml/ECAT" "/usr/local/share/sgml/ECAT" "/usr/local/lib/sgml/ECAT")
End:
-->
