<?xml version="1.0" encoding="UTF-8"?>

<chapter xml:id="testbench">
	<title>Vaadin TestBench</title>

    <para>
        This chapter describes the installation and use of the commercial Vaadin TestBench
        product.
    </para>

    <section xml:id="testbench.overview">
        <title>Overview</title>

        <para>
            Quality assurance is one of the cornerstones of modern software
            development. Extending throughout the entire development process, quality
            assurance is the thread that binds the end product to the requirements. In
            iterative development processes, with ever shorter release cycles and
            continuous integration, the role of regression testing is central. The special
            nature of web applications creates many unique requirements for regression
            testing.
        </para>

        <para>
            Vaadin TestBench makes it possible to automate the regression testing of web
            applications that use Vaadin. You record test cases by interacting with your
            application. After recording, you can compile the tests as JUnit tests and run
            them for as many times as you want, on multiple platforms and browsers. The
            test results can be collected for later analysis and quality assurance.
        </para>

		<figure xml:id="figure.testbench.workflow">
			<title>TestBench Workflow</title>
			<mediaobject>
				<imageobject role="html">
					<imagedata align="center" fileref="img/testbench/tt-workflow-lo.png"/>
				</imageobject>
				<imageobject role="fo">
					<imagedata scale="60" smallscale="90%" align="center" fileref="img/testbench/tt-workflow-hi.png"/>
				</imageobject>
			</mediaobject>
		</figure>

        <para>The main features of Vaadin TestBench are:</para>

        <itemizedlist>
            <listitem>
                <para>Recording and playing back test cases using a recorder in browser</para>
            </listitem>
            <listitem>
                <para>Validating UI state by assertion points and screen capture comparison</para>
            </listitem>
            <listitem>
                <para>Screen capture comparison with difference highlighting</para>
            </listitem>
            <listitem>
                <para>Execution of tests through JUnit</para>
            </listitem>
            <listitem>
                <para>Distributed test grid for running tests</para>
            </listitem>
            <listitem>
                <para>Integration with unit testing</para>
            </listitem>
        </itemizedlist>

        <para>
            Execution of tests can be distributed over a grid of test nodes, which speeds
            up testing. The grid nodes can run different operating systems and have
            different browsers installed. In a minimal setup, such as for recording the
            tests, you can use Vaadin TestBench on just a single computer.
        </para>

        <para>Vaadin TestBench is based on the Selenium testing framework and Selenium
            Grid for distributed testing. Selenium is augmented with Vaadin-specific
            extensions, such as the screen capture feature.
        </para>

        <simplesect>
            <title>Licensing and Trial Period</title>

            <para>
                Vaadin TestBench is a commercial product sold under the Commercial Vaadin
                Add-On License (CVAL). You can purchase and download TestBench from the
                Vaadin Directory.
            </para>

            <para>
                You may try out the product for a free 30-day trial period, after which
                you are required to acquire the needed licenses.
            </para>
        </simplesect>
    </section>

    <section xml:id="testbench.components">
        <title>TestBench Components</title>

        <para>
            The main components of Vaadin TestBench are:
        </para>

        <itemizedlist>
            <listitem>
                <para>Vaadin TestBench Recorder</para>
            </listitem>
            <listitem>
                <para>Vaadin TestBench Library</para>
            </listitem>
            <listitem>
                <para>Vaadin TestBench Grid Hub</para>
            </listitem>
            <listitem>
                <para>Vaadin TestBench Grid Remote Control</para>
            </listitem>
        </itemizedlist>

        <para>
            The components and a basic setup are illustrated in <xref
            linkend="figure.testbench.architecture"/>.
        </para>

		<figure xml:id="figure.testbench.architecture">
			<title>Vaadin TestBench Architecture</title>
			<mediaobject>
				<imageobject role="html">
					<imagedata align="center" fileref="img/testbench/tt-architecture-simple-lo.png"/>
				</imageobject>
				<imageobject role="fo">
					<imagedata scale="60" smallscale="100%" align="center" fileref="img/testbench/tt-architecture-simple-hi.png"/>
				</imageobject>
			</mediaobject>
		</figure>

        <para>
            Recording test cases requires Vaadin TestBench Recorder, which is a Mozilla
            Firefox extension that you install in your browser. It provides a control
            panel to record test cases and play them back. You can play test cases right
            in the recorder and later automatically by the Grid Node Remote Control, which
            opens a browser and starts the recorder in playback mode.
        </para>

        <para>
            The test suite and results from test runs are stored on a test server. A test
            suite includes recorded test cases and possible reference images for
            similarity tests.
        </para>

        <para>
            Vaadin TestBench Library provides the central control logic for:
        </para>

        <itemizedlist>
            <listitem>
                <para>
                    Converting tests from recordings to JUnit tests
                </para>
            </listitem>
            <listitem>
                <para>
                    Comparing screen captures with reference images
                </para>
            </listitem>
            <listitem>
                <para>
                    Controlling the execution of tests on the VaadinTestBench Grid Hub
                </para>
            </listitem>
        </itemizedlist>

        <para>
            Vaadin TestBench Grid Hub is a service that distributes testing tasks to nodes
            on the test grid. It contacts a Grid Node Controller on a node and asks it to
            open a browser to run the current test on. The Grid Hub runs on a server which
            can be dedicated, one of the grid nodes, or the test server itself.
        </para>

        <para>
            Vaadin TestBench Grid Node Controller is a service that runs on each grid
            node. It is able to open any of the browsers installed in a node and run
            commands for tests on the browsers. It receives requests to execute test
            commands from the Grid Hub and reports the results back.
        </para>

        <para>
            A basic Vaadin TestBench environment consists of:
        </para>

        <itemizedlist>
            <listitem>
                <para>
                    A workstation with Firefox and the TestBench Recorder for recording tests
                </para>
            </listitem>
            <listitem>
                <para>
                    A build/test server used to build, launch, and test the web application
                </para>
            </listitem>
            <listitem>
                <para>
                    A server running the Grid Hub
                </para>
            </listitem>
            <listitem>
                <para>
                    One or more servers running Grid Remote Controls
                </para>
            </listitem>
        </itemizedlist>

        <para>
            The workstation and servers can be separate computers or one computer can work in multiple roles.
        </para>
    </section>

    <section xml:id="testbench.requirements">
        <title>Requirements</title>

        <simplesect>
            <title>Requirements for Vaadin TestBench Recorder</title>

            <para>
                For recording and playback with Vaadin TestBench Recorder:
            </para>

            <itemizedlist>
                <listitem>
                    <para>Mozilla Firefox 3.x or newer</para>
                </listitem>
            </itemizedlist>
        </simplesect>

        <simplesect>
            <title>Requirements for Automated Testing</title>

            <para>
                For running tests:
            </para>

            <itemizedlist>
                <listitem>
                    <para>Java JDK 1.5 or newer</para>
                </listitem>
                <listitem>
                    <para>Browsers installed on test nodes</para>
                </listitem>
                <listitem>
                    <para>Apache Ant or some other way to run Ant scripts (recommended)</para>
                </listitem>
            </itemizedlist>
        </simplesect>

        <simplesect>
            <title>Continuous Integration Compatibility</title>

            <para>
                Vaadin TestBench works with continuous integration systems that support
                JUnit testing. It is tested to work on the TeamCity build management and
                continuous integration server.
            </para>
        </simplesect>

        <simplesect>
            <title>Known Compatibility Problems</title>

            <variablelist>
                <varlistentry>
                    <term><para>Firebug should be disabled</para></term>
                    <listitem>
                        <para>
                            In some cases, Firebug injects a <literal>&lt;div
                            id="_firebugConsole"&gt;</literal> element under the
                            <literal>&lt;body&gt;</literal> element (the element is
                            invisible in the Firebug's HTML structure browser). This can
                            disturb recording of test cases, especially when closing
                            notifications. Firebug 1.6 should fix this issue, but we still
                            encourage TestBench users to disable Firebug when recording or
                            playing test cases.
                        </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term><para>Screenshots when running Internet Explorer 9 in Compatibility Mode</para></term>
                    <listitem>
                        <para>
                            Internet Explorer prior to version 9 adds a two-pixel border
                            around the content area. Version 9 no longer does this and as
                            a result screenshots taken using Internet Explorer 9 running
                            in compatibility mode (IE7/IE8) will include the two pixel
                            border, contrary to what the older versions of Internet
                            Explorer do.
                        </para>
                    </listitem>
                </varlistentry>
            </variablelist>
        </simplesect>
    </section>

    <section xml:id="testbench.installation">
        <title>Installing Vaadin TestBench</title>

        <para>
            Installation of Vaadin TestBench covers the following tasks:
        </para>

        <itemizedlist>
            <listitem>
                <para>Download and unpack the Vaadin TestBench installation package</para>
            </listitem>
            <listitem>
                <para>Install Vaadin TestBench Recorder</para>
            </listitem>
            <listitem>
                <para>Install Vaadin TestBench Library and launch scripts</para>
            </listitem>
            <listitem>
                <para>Install Vaadin TestBench Grid Hub</para>
            </listitem>
            <listitem>
                <para>Install Vaadin TestBench Grid Remote Controls</para>
            </listitem>
        </itemizedlist>

        <para>
            At first, you only need to install the Recorder. It allows you to record and play
            back tests in the browser. The rest of the installation tasks are for running
            automated tests from a test server using a grid.
        </para>

        <para>
            Two basic installation types are covered in these instructions:
        </para>

        <itemizedlist>
            <listitem>
                <para>Test development installation on a workstation</para>
            </listitem>
            <listitem>
                <para>Distributed grid installation</para>
            </listitem>
        </itemizedlist>

        <section xml:id="testbench.installation.development">
            <title>Test Development Installation</title>

            <para>
                In a typical small test development setup, you will install all the
                components on a single workstation. See <xref
                linkend="testbench.installation.workstation-playback"/> for a quick test
                development setup.
            </para>

            <para>
                The default values in the <filename>example/test.xml</filename> Ant script
                in the installation package assumes that the hub is installed on the
                localhost where the script is executed. With the base setup the hub and
                remote control are launched on the localhost.
            </para>
        </section>

        <section xml:id="testbench.installation.distributed">
            <title>A Distributed Test Environment</title>

            <para>
                A Vaadin TestBench grid consists of two categories of components:
            </para>

            <itemizedlist>
                <listitem>
                    <para>Vaadin TestBench Grid Hub service</para>
                </listitem>
                <listitem>
                    <para>Grid nodes running Vaadin TestBench Grid Remote Control</para>
                </listitem>
            </itemizedlist>

            <para>
                The hub is a service that handles communication between the JUnit test runner and
                the node controllers. The node controllers are services that can launch a browser
                and perform the actual execution of test commands in the browser.
            </para>

            <para>
                The hub requires very little resources, so you would typically run it either in
                the test server or on one of the nodes.
            </para>

            <para>
                In a fully distributed setup, you install the Vaadin TestBench components on
                separate hosts. <!-- TODO -->
            </para>
        </section>

        <section xml:id="testbench.installation.downloading">
            <title>Downloading and Unpacking the Installation Package</title>

            <para>
                First, download the installation package
                <filename>vaadin-testbench-&version.testbench;.zip</filename> and extract
                the installation package where you can find it.
            </para>

            <simplesect>
                <title>Windows</title>

                <para>
                    In Windows, use the default ZIP decompression feature to extract the
                    package into your chosen directory, for example,
                    <filename>C:\dev</filename>.
                </para>

                <warning>
                    <para>
                        The default decompression program in Windows XP and Vista as well
                        as some versions of WinRAR cannot unpack the installation package
                        properly in certain cases. Decompression can result in an error
                        such as: "The system cannot find the file specified." This can
                        happen because the default decompression program is unable to
                        handle long file paths where the total length exceeds 256
                        characters. This occurs, for example, if you try to unpack the
                        package under Desktop. You should unpack the package directly into
                        <filename>C:\dev</filename> or some other short path or use
                        another decompression program.
                    </para>
                </warning>
            </simplesect>

            <simplesect>
                <title>Linux, MacOS X, and other UNIX</title>

                <para>
                    In Linux, Mac OS X, and other UNIX-like systems, use Info-ZIP or other ZIP
                    software with the command:
                </para>

                <screen><prompt>$</prompt> <command>unzip</command> <parameter>vaadin-testbench-&version.testbench;.zip</parameter></screen>

                <para>
                    The contents of the installation package will be extracted under the
                    <filename>vaadin-testbench</filename> installation directory in the
                    chosen directory.
                </para>
            </simplesect>
        </section>

        <section xml:id="testbench.installation.recorder">
            <title>Installing the Recorder</title>

            <para>
                You need the Vaadin TestBench Recorder in a test development environment
                for recording test cases and to play them back.
            </para>

            <para>
                After extracting the files from the installation package, do the following:
            </para>

            <orderedlist>
                <listitem>
                    <para>Change to the <filename>vaadin-testbench-recorder</filename> directory under the installation directory.</para>
                </listitem>
                <listitem>
                    <para>Open Mozilla Firefox</para>
                </listitem>
                <listitem>
                    <para>
                        Either drag and drop the
                        <filename>vaadin-testbench-recorder-&version.testbench;.xpi</filename> to an
                        open Firefox window or open it from the <guimenu>File</guimenu>
                        menu.
                    </para>
                </listitem>
                <listitem>
                    <para>
                        Firefox will ask if you want to install the TestBench Recorder extension. Click
                        <guibutton>Install Now</guibutton>.
                    </para>

                    <figure xml:id="figure.testbench.installation.recorder">
                        <title>Installing Vaadin TestBench Recorder</title>
                        <mediaobject>
                            <imageobject role="html">
                                <imagedata align="center" fileref="img/testbench/screenshots/tt-recorder-install.png"/>
                            </imageobject>
                            <imageobject role="fo">
                                <imagedata scale="60" smallscale="100%" align="center" fileref="img/testbench/screenshots/tt-recorder-install.png"/>
                            </imageobject>
                        </mediaobject>
                    </figure>
                </listitem>
                <listitem>
                    <para>
                        After the installation of the add-on is finished, Firefox offers
                        to restart. Click <guibutton>Restart Now</guibutton>.
                    </para>
                </listitem>
            </orderedlist>

            <para>
                Installation of a new version of Vaadin TestBench Recorder will
                overwrite an existing previous version.
            </para>

            <para>
                After Firefox has restarted, navigate to a Vaadin application for which
                you want to record test cases, such as <ulink
                url="http://demo.vaadin.com/colorpicker">http://demo.vaadin.com/colorpicker</ulink>.
            </para>
        </section>

        <section xml:id="testbench.installation.workstation-playback">
            <title>Quick Setup for Playback on a Workstation</title>

            <para>
                You can run the grid hub and a remote control on your workstation when developing
                tests. The configuration uses the localhost as default, so you do not need to edit
                the configuration files at this point.
            </para>

            <simplesect>
                <title>Windows</title>

                <orderedlist>
                    <listitem>
                        <para>
                            Navigate to <filename>grid/hub/</filename> in the installation
                            directory and run <filename>hub.bat</filename> to start the
                            hub on port 4444.
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            Navigate to <filename>grid/remote-control/</filename> in the
                            installation directory and run <filename>rc.bat</filename> to
                            start the remote control on the local machine and have it
                            connect to the hub.
                        </para>
                    </listitem>
                </orderedlist>
            </simplesect>

            <simplesect>
                <title>Linux, Mac OS X, and other UNIX</title>

                <orderedlist>
                    <listitem>
                        <para>
                            Open a terminal window and change to
                            <filename>grid/hub/</filename> under the installation
                            directory
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            Edit hub configuration file
                            <filename>grid_configuration.yml</filename> and check that it
                            includes your environment, as described in <xref
                            linkend="testbench.hub-installation.predefined-targets"/>. Especially
                            in Linux, if using Firefox, edit the path to the
                            <filename>firefox-bin</filename> executable.
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            Run <filename>hub.sh</filename> to start the hub on port 4444.
                        </para>

                        <screen><prompt>$</prompt> <command>cd</command> <parameter>vaadin-testbench-&version.testbench;/grid/hub</parameter>
<prompt>$</prompt> <command>sh</command> hub.sh</screen>
                    </listitem>
                    <listitem>
                        <para>
                            Open a second terminal window and change to
                            <filename>grid/node-controller/</filename> under the
                            installation directory
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            Edit the remote configuration file
                            <filename>rc_configuration.xml</filename>, disable the Windows
                            targets and enable the targets for your environment, as
                            described in <xref
                            linkend="testbench.rc-installation.configuration"/>.
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            Run <filename>rc.bat</filename> to start the node controller
                            on the local machine and have it connect to the hub.
                        </para>

                        <screen><prompt>$</prompt> <command>cd</command> <parameter>vaadin-testbench-&version.testbench;/grid/remote-control</parameter>
<prompt>$</prompt> <command>sh</command> rc.sh</screen>

                    </listitem>
                </orderedlist>

                <para>
                    Check that the remote control registers correctly by opening <ulink
                        url="http://localhost:4444/console">http://localhost:4444/console</ulink> in a web
                    browser.
                </para>

                <para>
                    Next, change to the <filename>example/</filename> directory.
                </para>

                <screen><prompt>$</prompt> <command>cd</command> vaadin-testbench-&version.testbench;/example</screen>

                <para>
                    Open the <filename>test.xml</filename> file in an editor and edit the
                    list of browsers (target environment names) to match your system and
                    the installed browsers.
                </para>

                <programlisting><![CDATA[<property name="browsers"
          value="winxp-ie8,winxp-firefox3" />]]></programlisting>

                <para>
                    The value must be a comma-separated list of target names. A complete
                    list of predefined browsers (target environments) is given in <xref
                    linkend="testbench.hub-installation.predefined-targets"/>. If your
                    environment is not included in the predefined entries, you need to
                    edit the hub and remote control configurations before starting
                    them. Notice that the target name is merely an alias for a browser
                    identifier, and you could use "<literal>winxp-firefox3</literal>" in
                    Linux or Mac OS X as well, assuming that Firefox is installed on the
                    host.
                </para>

                <para>
                    When you feel that the configuration is OK, run the script:
                </para>

                <screen><prompt>$</prompt> <command>ant</command> <parameter>-f test.xml</parameter></screen>

                <para>
                    The script will convert, compile, run the recorded test and give a brief output on
                    the success or failure of the test.
                </para>
            </simplesect>
        </section>
    </section>

    <section xml:id="testbench.hub-installation">
        <title>Setting Up the Grid Hub</title>

        <para>
            The grid hub can be installed in the same server where the tests are run, in one
            of the grid nodes, or on a dedicated server. In a test development installation,
            you can install it on the same workstation or server with all the other
            components.
        </para>

        <para>
            You can find the grid hub from the full installation package and from the
            separate <literal>vaadin-testbench-grid</literal> package.
        </para>

        <section xml:id="testbench.hub-installation.configuration">
            <title>Configuring the Hub</title>

            <para>
                The hub is configured in the
                <filename>grid_configuration.yml</filename> file. You need to edit
                this file if the predefined list of targets does not cover all the
                wanted targets, that is, the operating system + browser combinations
                that you wish to test.
            </para>

            <para>
                The first line contains the "<literal>hub</literal>" tag, after which
                should come the port definition. A hub uses the port 4444 by
                default. After the "<literal>environments:</literal>" tag comes a list
                of name-browser pairs that each define a target.
            </para>

            <informaltable frame="all">
                <tgroup cols="2">
                    <thead>
                        <row>
                            <entry>
                                <para>Parameter</para>
                            </entry>
                            <entry>
                                <para>Description</para>
                            </entry>
                        </row>
                    </thead>
                    <tbody>
                        <row>
                            <entry><para>name</para></entry>
                            <entry>
                                <para>
                                    Corresponds to the Target value in a remote
                                    control in a node. The name can be defined as
                                    anything, but may not contain commas, which act as
                                    separator characters in the environment variable
                                    of the remote control configuration.
                                </para>
                            </entry>
                        </row>
                        <row>
                            <entry><para>browser</para></entry>
                            <entry>
                                <para>
                                    Identifies a browser run by this target. The
                                    browser identifiers are prefixed with an asterisk
                                    and can be appended with an exact path to the
                                    browser executable. A list of allowed browser
                                    identifiers and a description of the executable
                                    paths is given in <xref
                                        linkend="testbench.hub-installation.browser-identifiers"/>.
                                </para>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </informaltable>

            <para>
                For example:
            </para>

            <programlisting><?pocket-size 70% ?><![CDATA[hub:
    port: 4444
    remoteControlPollingIntervalInSeconds: 120
    sessionMaxIdleTimeInSeconds: 90
    newSessionMaxWaitTimeInSeconds: 5
    environments:
        - name:      "winxp-ie7"
          browser:   "*iexplore"
        - name:      "winxp-firefox3"
          browser:   "*firefox"
        - name:      "winxp-googlechrome4"
          browser:   "*googlechrome"

        - name:      "linux-firefox3"
          browser:   "*firefox /usr/lib/firefox/firefox-bin"

        - name:      "osx-firefox35"
          browser:   "*firefox"
        - name:      "osx-safari4"
          browser:   "*safari"]]></programlisting>

            <para>
                A list of the predefined target environments is given in the next
                section.
            </para>
        </section>

        <section xml:id="testbench.hub-installation.predefined-targets">
            <title>Predefined Target Environments</title>

            <para>
                The predefined targets are system-browser combinations mapped to a
                browser identifier. They are as follows:
            </para>

            <informaltable frame="all">
                <tgroup cols="2">
                    <thead>
                        <row>
                            <entry><para>Target Name</para></entry>
                            <entry><para>Browser</para></entry>
                        </row>
                    </thead>
                    <tbody>
                        <row>
                            <entry><para>winxp-ie6</para></entry>
                            <entry><para>*iexplore</para></entry>
                        </row>
                        <row>
                            <entry><para>winxp-ie7</para></entry>
                            <entry><para>*iexplore</para></entry>
                        </row>
                        <row>
                            <entry><para>winxp-ie8</para></entry>
                            <entry><para>*iexplore</para></entry>
                        </row>
                        <row>
                            <entry><para>winxp-firefox3</para></entry>
                            <entry><para>*firefox</para></entry>
                        </row>
                        <row>
                            <entry><para>winxp-firefox36</para></entry>
                            <entry><para>*firefox</para></entry>
                        </row>
                        <row>
                            <entry><para>winxp-safari4</para></entry>
                            <entry><para>*safari</para></entry>
                        </row>
                        <row>
                            <entry><para>winxp-safari5</para></entry>
                            <entry><para>*safariproxy</para></entry>
                        </row>
                        <row>
                            <entry><para>winxp-opera10</para></entry>
                            <entry><para>*opera</para></entry>
                        </row>
                        <row>
                            <entry><para>winxp-googlechrome6</para></entry>
                            <entry><para>*googlechrome</para></entry>
                        </row>
                        <row>
                            <entry><para>linux-firefox3</para></entry>
                            <entry><para>*firefox</para></entry>
                        </row>
                        <row>
                            <entry><para>linux-firefox36</para></entry>
                            <entry><para>*firefox</para></entry>
                        </row>
                        <row>
                            <entry><para>linux-opera10</para></entry>
                            <entry><para>*opera</para></entry>
                        </row>
                        <row>
                            <entry><para>osx-firefox35</para></entry>
                            <entry><para>*firefox</para></entry>
                        </row>
                        <row>
                            <entry><para>osx-safari4</para></entry>
                            <entry><para>*safari</para></entry>
                        </row>
                        <row>
                            <entry><para>osx-opera10</para></entry>
                            <entry><para>*opera</para></entry>
                        </row>
                    </tbody>
                </tgroup>
            </informaltable>
        </section>

        <section xml:id="testbench.hub-installation.browser-identifiers">
            <title>Browser Identifiers</title>

            <para>
                Vaadin TestBench supports the following browser identifiers:
            </para>

            <informaltable frame="all">
                <tgroup cols="2">
                    <thead>
                        <row>
                            <entry><para>Browser Identifier</para></entry>
                            <entry><para>Browser</para></entry>
                        </row>
                    </thead>
                    <tbody>
                        <row>
                            <entry><para><literal>*firefox</literal></para></entry>
                            <entry><para>Mozilla Firefox 2 or 3 (prefers 2)</para></entry>
                        </row>
                        <row>
                            <entry><para><literal>*firefox2</literal></para></entry>
                            <entry><para>Mozilla Firefox 2.x</para></entry>
                        </row>
                        <row>
                            <entry><para><literal>*firefox3</literal></para></entry>
                            <entry><para>Mozilla Firefox 3.x</para></entry>
                        </row>
                        <row>
                            <entry><para><literal>*firefoxchrome</literal></para></entry>
                            <entry><para>Mozilla Firefox</para></entry>
                        </row>
                        <row>
                            <entry><para><literal>*chromec</literal></para></entry>
                            <entry><para>Mozilla Firefox (not Google Chrome!)</para></entry>
                        </row>
                        <row>
                            <entry><para><literal>*iexplore</literal></para></entry>
                            <entry><para>Internet Explorer</para></entry>
                        </row>
                        <row>
                            <entry><para><literal>*safari</literal></para></entry>
                            <entry><para>Apple Safari and other WebKit based browsers</para></entry>
                        </row>
                        <row>
                            <entry><para><literal>*safariproxy</literal></para></entry>
                            <entry><para>Apple Safari 5 requires this identifier</para></entry>
                        </row>
                        <row>
                            <entry><para><literal>*opera</literal></para></entry>
                            <entry><para>Opera</para></entry>
                        </row>
                        <row>
                            <entry><para><literal>*googlechrome</literal></para></entry>
                            <entry><para>Google Chrome</para></entry>
                        </row>
                    </tbody>
                </tgroup>
            </informaltable>

            <para>
                The above list does not include incompatible or otherwise irrelevant browsers.
            </para>
            
            <para>
                Notice that the target <literal>*firefox3</literal> is defined so that, if both Firefox 2 and 3 are
                installed on the system, preference is given to the version 2. This may cause an
                unexpected mix-up, as one would expect Firefox 3 to be launched.
            </para>

            <para>
                In cases where
            </para>

            <itemizedlist>
                <listitem>
                    <para>
                        multiple browsers with the same name are installed, or
                    </para>
                </listitem>
                <listitem>
                    <para>
                        the remote controller can not find the browser because it is not installed to the
                        default location,
                    </para>
                </listitem>
            </itemizedlist>

            <para>
                the browser identifier can be appended with the absolute path to the
                browser executable, separated by a space from the identifier. For example,
                "<literal>*firefox /opt/firefox3.6/firefox-bin</literal>".
            </para>

            <para>
                If you specify the absolute path to the browser, it must be same on all grid nodes
                (remote controls) that support the target environment. If such a browser is
                installed in a different location on different nodes, you need to have a separate
                target environment specified for each.
            </para>

            <para>
                In Linux, using the absolute path for Firefox is necessary, because the
                "<command>firefox</command>" program is just a script that launches the
                actual executable. Stopping the launch script does not close the browser,
                so the Firefox window will not close after the tests are done. If your
                Firefox installation directory is <filename>/opt/firefox</filename>, for
                example, you need to use "<filename>*firefox
                /opt/firefox/firefox-bin</filename>" in the configuration to start
                Firefox.
            </para>

            <para>
                The exact installation directory of Firefox depends on the system and used
                installation method (package management or manual installation). Typical locations
                include the following paths:
            </para>

            <itemizedlist>
                <listitem>
                    <para><filename>/opt/firefox/firefox-bin</filename></para>
                </listitem>
                <listitem>
                    <para><filename>/usr/lib/firefox/firefox-bin</filename></para>
                </listitem>
                <listitem>
                    <para><filename>/usr/local/firefox/firefox-bin</filename></para>
                </listitem>
                <listitem>
                    <para><filename>/usr/local/lib/firefox/firefox-bin</filename></para>
                </listitem>
            </itemizedlist>

            <para>
                The binary itself can also be named something else that firefox-bin.
            </para>
        </section>

        <section xml:id="testbench.hub-installation.starting">
            <title>Starting the Hub</title>

            <para>
                The grid hub is a service bound to a port, 4444 by default.
            </para>

            <para>
                On Windows:
            </para>

            <orderedlist>
                <listitem>
                    <para>
                        Navigate to <filename>grid/hub/</filename> folder in the
                        installation folder, and
                    </para>
                </listitem>
                <listitem>
                    <para>
                        Run <filename>hub.bat</filename> to start the hub on port 4444.
                    </para>
                </listitem>
            </orderedlist>

            <para>
                Closing the console window will stop the service.
            </para>

            <para>
                On Linux, Mac OS X, and other UNIX:
            </para>

            <orderedlist>
                <listitem>
                    <para>
                        Open a terminal window and change to <filename>grid/hub/</filename>
                    </para>
                </listitem>
                <listitem>
                    <para>
                        Run <filename>hub.sh</filename> to start the hub on port 4444.
                    </para>

                    <screen><prompt>$</prompt> <command>cd</command> vaadin-testbench-&version.testbench;/grid/hub
<prompt>$</prompt> <command>sh</command> hub.sh</screen>
                </listitem>
            </orderedlist>
            
            <para>
                The hub service starts attached to the terminal and writes its log to
                standard output. Press
                <keycombo><keycap>Ctrl</keycap><keycap>C</keycap></keycombo> to stop the
                service. You can also daemonize the service.
            </para>
        </section>
    </section>

    <section xml:id="testbench.rc-installation">
        <title>Setting Up Grid Nodes</title>

        <para>
            A grid node is a server, a desktop computer, or a virtual machine running a
            windowed operating system. It needs to have:
        </para>

        <itemizedlist>
            <listitem>
                <para>Java 1.5 JRE (or newer) installed</para>
            </listitem>
            <listitem>
                <para>One or more web browsers installed</para>
            </listitem>
            <listitem>
                <para>Vaadin TestBench Remote Control installed and configured</para>
            </listitem>
        </itemizedlist>

        <para>
            A <emphasis>remote control</emphasis> is a service running on a grid
            node. It acts as a "remote control" for controlling the web browsers
            installed on the node: it can launch and stop browser applications and
            execute test commands in them. A remote control is itself "remote
            controlled" by the grid hub, which delegates the tests to the available
            remote controls.
        </para>

        <para>
            The installation of web browsers is not covered in this manual.
        </para>

        <section xml:id="testbench.rc-installation.configuration">
            <title>Configuring a Remote Control</title>

            <para>
                A remote control should be configured before starting it. The
                configuration is done by editing the
                <filename>rc_configuration.xml</filename> file. Values given in the
                XML configuration file override the default values defined in the run
                script.
            </para>

            <informaltable frame="all">
                <tgroup cols="2">
                    <thead>
                        <row>
                            <entry><para>Parameter</para></entry>
                            <entry><para>Description</para></entry>
                        </row>
                    </thead>
                    <tbody>
                        <row>
                            <entry><para>port</para></entry>
                            <entry>
                                <para>
                                    The port this remote control listens to for
                                    commands from the hub. Default port is 5555.
                                </para>
                            </entry>
                        </row>
                        <row>
                            <entry><para>hubURL</para></entry>
                            <entry><para>The address of the hub as a URL. Local host by default.</para></entry>
                        </row>
                        <row>
                            <entry><para>environment</para></entry>
                            <entry>
                                <para>An environment target (system-browser combination)
                                that this remote control supports. The target must match
                                one of the target names defined in the hub
                                configuration. You can define multiple environments. See
                                2.5.1: Configuring the Hub for more information about the
                                targets and a list of predefined targets.</para>
                            </entry>
                        </row>
                        <row>
                            <entry><para>host</para></entry>
                            <entry>
                                <para>The host name or IP address of this node
                                controller. If the host name is not defined, the hub tries
                                to determine it from the registration request.</para>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </informaltable>

            <para>
                If the hub is running on the same host as the remote control, only the
                environment targets need to be defined.
            </para>
        </section>

        <section xml:id="testbench.rc-installation.runscript">
            <title>Configuring the Run Script</title>

            <para>
                A remote control can also be configured in the run scripts
                (<filename>rc.sh</filename> or <filename>rc.bat</filename>) by defining:
            </para>

            <informaltable frame="all">
                <tgroup cols="2">
                    <thead>
                        <row>
                            <entry><para>Environment Variable</para></entry>
                            <entry><para>Description</para></entry>
                        </row>
                    </thead>
                    <tbody>
                        <row>
                            <entry><para>ENVIRONMENT</para></entry>
                            <entry>
                                <para>Environment targets (system-browser
                                    combinations) supported by this remote control. The
                                    targets in the comma-separated list must match one of
                                    the target names defined in the hub configuration.</para>
                            </entry>
                        </row>
                        <row>
                            <entry><para>USEREXTENSIONS</para></entry>
                            <entry><para>Where user-extensions.js is located.</para></entry>
                        </row>
                    </tbody>
                </tgroup>
            </informaltable>

            <para>
                In this case, you will also need to add the following parameters after
                the <literal>SelfRegisteringRemoteControlLauncher</literal>.
            </para>

            <informaltable frame="all">
                <tgroup cols="2">
                    <thead>
                        <row>
                            <entry><para>Parameter</para></entry>
                            <entry><para>Description</para></entry>
                        </row>
                    </thead>
                    <tbody>
                        <row>
                            <entry><para>hubUrl</para></entry>
                            <entry><para>Address of the hub.</para></entry>
                        </row>
                        <row>
                            <entry><para>port</para></entry>
                            <entry><para>The port that this node controller should listen to.</para></entry>
                        </row>
                    </tbody>
                </tgroup>
            </informaltable>
                
            <para>
                On a Windows machine, you can put an
                <literal>-ensureCleanSession</literal> option in the
                <filename>rc.bat</filename> to have the remote control close all
                running <filename>iexplore.exe</filename> processes.
            </para>
        </section>

        <section xml:id="testbench.rc-installation.starting">
            <title>Starting the Remote Control</title>

            <para>
                A remote control is a service bound to a port, 5555 by default.
            </para>

            <para>
                On Windows, navigate to <filename>grid/remote-control/</filename> folder
                under the installation folder and run <filename>rc.bat</filename> to start
                the remote control. Closing the console window will stop the service.
            </para>

            <para>
                On Linux, Mac OS X, or other UNIX:
            </para>

            <orderedlist>
                <listitem>
                    <para>
                        Open a terminal window and change to
                        <filename>grid/remote-control/</filename>
                    </para>
                </listitem>
                <listitem>
                    <para>
                        Run <filename>rc.sh</filename> to start the remote control.
                    </para>

                    <screen><prompt>$</prompt> <command>cd</command> vaadin-testbench-&version.testbench;/grid/remote-control
<prompt>$</prompt> <command>sh</command> rc.sh</screen>
                </listitem>
            </orderedlist>

            <para>
                The remote control service starts attached to the terminal and writes its
                log to standard output. Press
                <keycombo><keycap>Ctrl</keycap><keycap>C</keycap></keycombo> to stop the
                service. You can make the service run in the background by daemonizing it.
            </para>
        </section>

        <section xml:id="testbench.rc-installation.nohub">
            <title>Running Tests Without a Grid Hub</title>

            <para>
                You can run tests on a single testing node also without a grid hub, with
                just a remote control installed. The used remote control needs to be a
                clean Selenium remote control that is started with the command:
            </para>

            <screen><prompt>$</prompt> <command>java</command> -jar selenium-server.jar -userExtensions user-extensions.js</screen>

            <para>
                The <filename>user-extensions.js</filename> file can be found in the
                <filename>grid/remote-control/</filename> folder.
            </para>

            <para>
                When running the tests through JUnit, as described in <xref
                linkend="testbench.junit"/>, you need to:
            </para>

            <orderedlist>
                <listitem>
                    <para>
                        Set the <literal>com.vaadin.testbench.tester.host</literal>
                        property to point to the server on which the remote control runs
                        instead of a hub host.
                    </para>
                </listitem>
                <listitem>
                    <para>
                        You need to list the browsers installed in the RC host in the
                        browsers property, either in the Ant script or in
                        command-line. See the list of allowed browser identifiers in <xref
                        linkend="testbench.hub-installation.configuration"/>.
                    </para>

                    <programlisting><?pocket-size 75% ?><![CDATA[<property name="browsers" value="*firefox"/>]]></programlisting>

                    <para>
                        You can also specify the browser executable path here, as
                        described in <xref
                        linkend="testbench.hub-installation.configuration"/>.
                    </para>

                    <programlisting><?pocket-size 75% ?><![CDATA[<property name="browsers"
          value="*firefox /opt/firefox/firefox-bin"/>]]></programlisting>
                </listitem>
            </orderedlist>
        </section>

        <section xml:id="testbench.rc-installation.browser-settings">
            <title>Browser settings</title>

            <para>
                Turn off pop-up blockers for all browsers.
            </para>

            <variablelist>
                <varlistentry>
                    <term>Internet Explorer</term>
                    <listitem>
                        <para>
                            Make the settings in
                            <menuchoice><guimenu>Tools</guimenu><guisubmenu>Pop-up
                            Blocker</guisubmenu><guimenuitem>Turn Off Pop-up
                            Blocker</guimenuitem></menuchoice>
                        </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term>Safari</term>
                    <listitem>
                        <para>
                            Make the settings in
                            <menuchoice><guimenu>Edit</guimenu><guimenuitem>Block Pop-up
                            Windows</guimenuitem></menuchoice>
                        </para>
                    </listitem>
                </varlistentry>
            </variablelist>

            <para>
                Also turn off default browser checks for all browsers.
            </para>
        </section>

        <section xml:id="testbench.rc-installation.os-settings">
            <title>Operating system settings</title>

            <para>
                Make any operating system settings that might interfere with the browser and how
                it is opened or closed. Typical problems include crash handler dialogs.
            </para>

            <para>
                On Windows, disable error reporting in case a browser crashes as follows:
            </para>

            <orderedlist>
                <listitem>
                    <para>
                        Open <menuchoice><guimenu>control panel</guimenu><guimenuitem>System</guimenuitem></menuchoice>
                    </para>
                </listitem>
                <listitem>
                    <para>
                        Select <guilabel>Advanced</guilabel> tab
                    </para>
                </listitem>
                <listitem>
                    <para>
                        Select <guilabel>Error reporting</guilabel>
                    </para>
                </listitem>
                <listitem>
                    <para>
                        Check that <guilabel>Disable error reporting</guilabel> is selected
                    </para>
                </listitem>
                <listitem>
                    <para>
                        Check that <guilabel>But notify me when critical errors occur</guilabel> is not selected
                    </para>
                </listitem>
            </orderedlist>
        </section>

        <section xml:id="testbench.rc-installation.screenshot-settings">
            <title>Settings for Screenshots</title>

            <para>
                The screenshot comparison feature requires that the user interface of
                the browser stays constant. The exact features that interfere with
                testing depend on the browser and the operating system.
            </para>

            <para>
                In general:
            </para>

            <itemizedlist>
                <listitem>
                    <para>
                        Disable the auto-hide function for the toolbar
                    </para>
                </listitem>
                <listitem>
                    <para>
                        Check that the toolbar is either locked or unlocked on all test hosts
                    </para>
                </listitem>
                <listitem>
                    <para>
                        Disable blinking cursor
                    </para>
                </listitem>
                <listitem>
                    <para>
                        Use the same screen resolution on all test machines and check
                        that the maximized window is always the same size
                    </para>
                </listitem>
                <listitem>
                    <para>
                        Configure browsers in the same manner on all machines (same toolbars visible, same
                        themes, etc)
                    </para>
                </listitem>
                <listitem>
                    <para>
                        Use identical operating system themeing on every host
                    </para>
                </listitem>
                <listitem>
                    <para>
                        Turn off any software that may suddenly pop up a new window
                    </para>
                </listitem>
                <listitem>
                    <para>
                        Turn off screen saver
                    </para>
                </listitem>
            </itemizedlist>

            <para>
                If using Windows and Internet Explorer, you should give also the
                following setting:
            </para>

            <itemizedlist>
                <listitem>
                    <para>
                        Turn on <guilabel>Allow active content to run in files on My
                            Computer</guilabel> under <guilabel>Security
                            settings</guilabel>
                    </para>
                </listitem>
            </itemizedlist>
        </section>
    </section>

    <section xml:id="testbench.recorder">
        <title>Using Vaadin TestBench Recorder</title>

        <para>
            Tests are recorded using the Vaadin TestBench Recorder. You can play back
            recoded test cases and use the Recorder to make assertions and take
            screenshots for screen capture comparison.
        </para>
        
		<figure xml:id="figure.testbench.recorder.workflow">
			<title>Recorder Workflow</title>
			<mediaobject>
				<imageobject role="html">
					<imagedata align="center" fileref="img/testbench/tt-recorder-workflow-lo.png"/>
				</imageobject>
				<imageobject role="fo">
					<imagedata scale="60" smallscale="90%" align="center" fileref="img/testbench/tt-recorder-workflow-hi.png"/>
				</imageobject>
			</mediaobject>
		</figure>

        <para>
            The Recorder is available only for Mozilla Firefox. To run the recorded tests
            in other browsers, you need to compile them as JUnit tests and run them with
            JUnit, as described in <xref linkend="testbench.junit"/>. It also allows
            automating the testing.
        </para>

        <section xml:id="testbench.recorder.starting">
            <title>Starting the Recorder</title>

            <para>
                To start the Recorder:
            </para>

            <orderedlist>
                <listitem>
                    <para>Open Mozilla Firefox</para>
                </listitem>
                <listitem>
                    <para>Open the page with the application that you want to test</para>
                </listitem>
                <listitem>
                    <para>Select <menuchoice><guimenu>Tools</guimenu><guimenuitem>Vaadin
                    TestBench Recorder</guimenuitem></menuchoice> in the Firefox
                    menu</para>
        
                    <figure xml:id="figure.testbench.recorder.open">
                    <title>Starting Vaadin TestBench Recorder</title>
                        <mediaobject>
                            <imageobject role="html">
                                <imagedata align="center" fileref="img/testbench/screenshots/tt-recorder-open.png"/>
                            </imageobject>
                            <imageobject role="fo">
                                <imagedata scale="60" smallscale="80%" align="center" fileref="img/testbench/screenshots/tt-recorder-open.png"/>
                            </imageobject>
                        </mediaobject>
                    </figure>
                </listitem>
            </orderedlist>
            
            <para>
                The Vaadin TestBench Recorder window will open, as shown in Figure 4.
            </para>

            <figure xml:id="figure.testbench.recorder.calc-1">
                <title>Vaadin TestBench Recorder running with the Calc demo</title>
                <mediaobject>
                    <imageobject role="html">
                        <imagedata align="center" fileref="img/testbench/screenshots/tt-recorder-calc-1.png"/>
                    </imageobject>
                    <imageobject role="fo">
                        <imagedata scale="60" smallscale="100%" align="center" fileref="img/testbench/screenshots/tt-recorder-calc-1.png"/>
                    </imageobject>
                </mediaobject>
            </figure>

            <para>
                Recording is automatically enabled when the Recorder starts. This is
                indicated by the pressed <inlinegraphic
                fileref="img/testbench/inline/inline-record-button.png"/>
                <guibutton>Record</guibutton> button.
            </para>
        </section>

        <section xml:id="testbench.recorder.recording">
            <title>Recording</title>

            <para>
                While recording, you can interact with the application in (almost) any way
                you like. The Recorder records the interaction as commands in a test
                script, which is shown in tabular format in the Table tab and as HTML
                source code in the Source tab.
            </para>

            <figure xml:id="figure.testbench.recorder.recording">
                <title>User interaction recorded as commands</title>
                <mediaobject>
                    <imageobject role="html">
                        <imagedata align="center" fileref="img/testbench/screenshots/tt-recorder-recording.png"/>
                    </imageobject>
                    <imageobject role="fo">
                        <imagedata scale="60" smallscale="100%" align="center" fileref="img/testbench/screenshots/tt-recorder-recording.png"/>
                    </imageobject>
                </mediaobject>
            </figure>

            <para>
                Please note the following:
            </para>

            <itemizedlist>
                <listitem>
                    <para>
                        Changing browser tabs or opening a new browser window is not
                        recommended, as any clicks and other actions will be recorded
                    </para>
                </listitem>
                <listitem>
                    <para>
                        Passwords are considered to be normal text input and are stored in
                        plain text
                    </para>
                </listitem>
            </itemizedlist>

            <para>
                While recording, you can insert various commands such as assertions or
                take a screenshot by selecting the command from the Command list.
            </para>

            <para>
                When you are finished, click the <inlinegraphic
                fileref="img/testbench/inline/inline-record-button.png"/>
                <guibutton>Record</guibutton> button to stop recording.
            </para>
        </section>

        <section xml:id="testbench.recorder.playback">
            <title>Playing Back Tests</title>

            <para>
                After you have stopped recording, reset the application to the initial
                state and press <inlinegraphic
                fileref="img/testbench/inline/inline-play-button.png"/> <guibutton>Play
                current test</guibutton> to run the test again. You can use the
                <literal>&amp;restartApplication</literal> parameter for an application in
                the URL to restart it.
            </para>

            <para>
                You can also play back saved tests by opening a target test in the
                Recorder with
                <menuchoice><guimenu>File</guimenu><guimenuitem>Open</guimenuitem></menuchoice>.
            </para>

            <para>
                You can use the <inlinegraphic
                fileref="img/testbench/inline/inline-slider-fastslow.png"/> slider to
                control the playback speed, click <guibutton>Pause</guibutton> to
                interrupt the execution and <guibutton>Resume</guibutton> to
                continue. While paused, you can click <guibutton>Step</guibutton> to
                execute the script step-by-step.
            </para>

            <para>
                Check that the test works as intended and no unintended or invalid commands are
                found; a test should run without errors.
            </para>
        </section>

        <section xml:id="testbench.recorder.editing">
            <title>Editing Tests</title>

            <para>
                You can insert various commands, such as assertions or taking a
                screenshot, in the test script during or after recording,
            </para>

            <para>
                You insert a command by selecting an insertion point in the test script
                and right-clicking an element in the browser. A context menu opens and
                shows a selection of Recorder commands at the bottom. Selecting
                <guimenuitem>Show All Available Commands</guimenuitem> shows more
                commands. Commands inserted from the sub-menu are automatically added to
                the top-level context menu.
            </para>

            <para>
                <xref linkend="figure.testbench.recorder.inserting"/> shows adding an
                assertion after calculating "6*7=" with the Calc demo.
            </para>

            <figure xml:id="figure.testbench.recorder.inserting">
                <title>Inserting commands in a test script</title>
                <mediaobject>
                    <imageobject role="html">
                        <imagedata align="center" fileref="img/testbench/screenshots/tt-recorder-inserting.png"/>
                    </imageobject>
                    <imageobject role="fo">
                        <imagedata scale="60" smallscale="75%" align="center" fileref="img/testbench/screenshots/tt-recorder-inserting.png"/>
                    </imageobject>
                </mediaobject>
            </figure>

            <para>
                Inserting a command from the context menu automatically selects the
                command in the <guilabel>Command</guilabel> field and fills in the target
                and value parameters.
            </para>

            <para>
                You can also select the command manually from the
                <guilabel>Command</guilabel> list. The new command or comment will be
                added at the selected location, moving the selected location down. If the
                command requires a target element, click <guilabel>Select</guilabel> and
                then click an element in your application. A reference to the element is
                shown in the <guilabel>Target</guilabel> field and you can highlight the
                element by clicking <guilabel>Find</guilabel>. If the command expects some
                value, such as for comparing the element value, give it in the
                <guilabel>Value</guilabel> field.
            </para>

            <para>
                Commands in a test script can be changed by selecting a command and
                changing the command, target, or value.
            </para>

            <para>
                The commands specific to Vaadin TestBench are documented in <xref
                linkend="testbench.commands"/>.
            </para>
        </section>

        <section xml:id="testbench.recorder.saving">
            <title>Saving Tests</title>

            <section xml:id="testbench.recorder.saving.individual">
                <title>Saving Individual Tests</title>

                <para>
                    You can save a test by selecting
                    <menuchoice><guimenu>File</guimenu><guimenuitem>Save
                    Test</guimenuitem></menuchoice>. If you are just learning to use the
                    Recorder, give the <filename>example/testscripts/</filename> folder
                    below the Vaadin TestBench installation folder as the target folder.
                </para>

                <para>
                    Vaadin TestBench stores the tests and test suites as HTML files. This
                    makes it easy to review saved test scripts with a web browser and edit
                    them manually.
                </para>
            </section>

            <section xml:id="testbench.recorder.saving.testsuites">
                <title>Saving Test Suites</title>

                <para>
                    You can save multiple tests as a test suite with
                    <menuchoice><guimenu>File</guimenu><guimenuitem>Save Test
                    Suite</guimenuitem></menuchoice>. If you are just learning to use the
                    Recorder, give <filename>example/testscripts/</filename> folder below
                    the Vaadin TestBench installation folder as the target folder.
                </para>

                <para>
                    An entire test suite is executed as a single JUnit test. However, the
                    success or failure is reported for the entire suite, which may be
                    undesired. It is usually more useful to get the result for each test
                    separately.
                </para>

                <para>
                    Test suites are nevertheless useful for composing larger tests from
                    separate test phases. For example, you could have all your tests as
                    test suites, and each would have a "login test" as the first phase,
                    followed by some test case specific phases. You can also use the
                    <command>includeTest</command> command for the same purpose
                </para>
            </section>
        </section>

        <section xml:id="testbench.recorder.invalid">
            <title>Invalid Tests</title>

            <para>
                Tests can become invalid due to intentional changes to the
                application. Normally, it involves changes in elements so that the Vaadin
                TestBench element locator can't find the correct element.
            </para>

            <para>
                If the problem is that an element can not be found, press <inlinegraphic
                fileref="img/testbench/inline/inline-play-button.png"/> to play back the
                test. Find the problem position and check with the
                <guibutton>Find</guibutton> button that the element can not be found (for
                example, it is a problem with timing so that the element just is not
                available yet). You can re-select the element easily with the
                <guilabel>Select</guilabel> button that will update the target.
            </para>
        </section>
    </section>

    <section xml:id="testbench.commands">
        <title>Test Script Commands</title>

        <para>
            Vaadin TestBench Recorder is based on the Selenium IDE, so the Selenium
            documentation provides a complete reference of all the commands available
            in the Selenium IDE and therefore in the Recorder.
        </para>

        <para>
            Vaadin TestBench Recorder has the following special commands:
        </para>

        <itemizedlist>
            <listitem>
                <para>screenCapture</para>
            </listitem>
            <listitem>
                <para>showTooltip</para>
            </listitem>
            <listitem>
                <para>assertText</para>
            </listitem>
            <listitem>
                <para>assertCSSClass</para>
            </listitem>
            <listitem>
                <para>includeTest</para>
            </listitem>
            <listitem>
                <para>expectDialog</para>
            </listitem>
            <listitem>
                <para>uploadFile</para>
            </listitem>
        </itemizedlist>

        <para>
            These special commands are described next.
        </para>

        <section xml:id="testbench.commands.screenCapture">
            <title>Taking Screen Captures: <command>screenCapture</command></title>

            <para>
                The <command>screenCapture</command> command orders the Remote Control
                to take a screen capture of the browser view and compare the result
                against a reference image, if one is available. If a reference image
                is not available, the command will save the screen capture and fail
                the test. You can then later copy the captured image as the reference
                image.
            </para>

            <para>
                Observe that the screenshots are <emphasis>not</emphasis> taken by the
                Recorder, for example when you are playing back a test case in the
                Recorder. They are taken by the Remote Control only afterward, when
                you run the tests from the test server that controls the Remote
                Control (through the hub).
            </para>

            <para>
                The <guilabel>Value</guilabel> field can be used to define an
                identifier string for the screenshot. If the value is empty, a running
                number starting from 1 will be used as the identifier. Using a given
                identifier is more reliable than the numbers if the test is changed
                and screenshots are added or removed.
            </para>

            <para>
                The naming convention for screenshot file names is automated and has
                the following format:
            </para>

            <para>
                <filename>TestName_OS_BrowserName_BrowserMajorNumber_ID.png</filename>
            </para>

            <para>
                Comparison and storage of screenshots is described in <xref
                linkend="testbench.junit.comparing"/>.
            </para>
        </section>

        <section xml:id="testbench.commands.shotTooltip">
            <title>Recording Tooltips: <command>showTooltip</command></title>

            <para>
                Clicking <inlinegraphic
                    fileref="img/testbench/inline/inline-tooltip.png"/> switches Recorder
                to a tooltip mode that allows making a tooltip appear. Recording is
                done by hovering over the target element until a tooltip appears and
                then moving the mouse away from the element. This will insert a
                <command>showTooltip</command> command and disable the tooltip button.
            </para>

            <para>
                After this command causes a tooltip to appear, its content can be asserted with
                other commands.
            </para>
        </section>

        <section xml:id="testbench.commands.assertText">
            <title>Recording Text Assertion: <command>assertText</command></title>

            <para>
                Clicking <inlinegraphic fileref="img/testbench/inline/inline-assert.png"/>
                allows recording an <command>assertText</command> command on elements
                where the context menu does not work for some reason. When the
                <inlinegraphic fileref="img/testbench/inline/inline-assert.png"/> button
                is active, the Recorder will record an <command>assertText</command>
                command for the next mouse click, with the clicked element as the target.
            </para>
        </section>

        <section xml:id="testbench.recorder.commands.assertCSSClass">
            <title>Asserting CSS Class: <command>assertCSSClass</command></title>

            <para>
                Making an assertion on the CSS class of an element can be useful, for
                example, for determining if a row in a table is selected, and in other
                cases where the use of a normal assertion would be inconvenient. The
                <command>assertCSSClass</command> needs to be manually added and the
                target selected.
            </para>

            <para>
                Note that when selecting the target with the
                <guibutton>Select</guibutton> button, the selected target may be a
                child to the wanted element. In this case the target needs to be
                edited or re-selected so that it points to the correct element.
            </para>
        </section>

        <section xml:id="testbench.commands.assertNotCSSClass">
            <title>Asserting CSS Class: <command>assertNotCSSClass</command></title>
            
            <para>
                The <command>assertNotCSSClass</command> has the reverse function to
                <command>assertCSSClass</command>. This one is useful for detecting
                cases where a class should have been removed from an element, but is
                not.
            </para>
        </section>

        <section xml:id="testbench.commands.includeTest">
            <title>Connecting Tests Together: <command>includeTest</command></title>

            <para>
                Vaadin TestBench allows connecting tests together. This is done by
                inserting the <command>includeTest</command> command, where
                <guilabel>Value</guilabel> is the path to the test to be inserted. The
                path can be relative to the directory from which TestConverter is
                executed or an absolute path. Target test will be added in full at the
                position with <command>includeTest</command>. Inclusion only works
                when converting to JUnit tests with TestConverter.
            </para>
        </section>

        <section xml:id="testbench.commands.expectDialog">
            <title>Handling a Confirmation Box: <command>expectDialog</command></title>

            <para>
                The commands <command>expectDialog</command> +
                <command>assertCommand</command> are needed when a click event opens
                up a Confirmation dialog.
            </para>
        </section>

        <section xml:id="testbench.recorder.commands.uploadFile">
            <title>Uploading Files: <command>uploadFile</command></title>

            <para>
                Vaadin TestBench supports uploading of files for the Firefox
                browser. File uploads are recorded automatically in the recorder and
                can be replayed as such. The <command>uploadFile</command> command
                differs from default behavior in Selenium in the way that there is no
                need to deploy the file to a URL that is accessible from all remote
                controls, but the file is passed along to the remote controls, which
                then use the local copy when running the test. The file can be placed
                in the same location as your test scripts (see <xref
                    linkend="testbench.recorder.saving"/>) as long as the name is not
                changed. This file is sent to the remote controls if found, otherwise
                the file is read from the absolute path given in the
                <guilabel>Value</guilabel> property of the command.
            </para>

            <para>
                Vaadin TestBench is not aware of when the upload has been completed, so
                you need to add a command such as <command>waitForElementVisible</command>
                if there is a component that is added after the upload. For example, the
                application might have a <classname>Label</classname> showing "Upload
                Finished". Otherwise, Vaadin TestBench will continue with the next command
                before the upload has finished, which may cause problems if it has not
                been taken into account.
            </para>

            <note>
                <para>
                    Playback of the <command>uploadFile</command> command in the TestBench
                    Recorder will currently not succeed if using Vaadin locators in
                    Firefox 3.x due to security restrictions in the browser. This is a
                    restriction in Recorder only and <command>uploadFile</command> in
                    TestBench Remote Control works correctly also when using a Vaadin
                    locator. In order for replay to work in Recorder in Firefox 3.x, the
                    Target should be changed to a standard XPath selector string by
                    choosing one from the <guilabel>Target</guilabel> drop down menu. This
                    problem has been fixed in Firefox 4.
                    </para>
            </note>
        </section>

        <section xml:id="testbench.commands.keyPressSpecial">
            <title>Shortcut Keys: <command>keyPressSpecial</command></title>

            <para>
                For testing shortcut keys (<keycap>Ctrl</keycap>,
                <keycap>Alt</keycap>, <keycap>Shift</keycap> + key) the command
                <command>keyPressSpecial</command> can be used. Combinations using
                arrow keys will be automatically recorded.
            </para>

            <para>
                The value for <command>keyPressSpecial</command> should be a string
                with a space-separated list of modifier keys, and finalle the target
                key. For example, "<literal>ctrl a</literal>" or "<literal>alt shift
                    a</literal>".
            </para>

            <para>
                Note that the alphabetical key names are case-dependent and that
                Vaadin <classname>ShortcutAction.KeyCode</classname> responds to
                uppercase letters.

                <!-- TODO: So why the above examples use lower-case? -->
            </para>
        </section>
    </section>

    <section xml:id="testbench.junit">
        <title>Compiling and Executing JUnit Tests</title>

        <para>
            JUnit allows running tests remotely on a variety of different web browsers
            installed in grid nodes. The test scripts need to be first compiled from the
            HTML scripts saved with Recorder to Java classes. Vaadin TestBench Library
            includes a converter from the HTML format to Java source files, which you can
            then compile with a Java compiler.
        </para>

        <figure xml:id="figure.testbench.junit.workflow">
            <title>JUnit Workflow</title>
            <mediaobject>
                <imageobject role="html">
                    <imagedata align="center" fileref="img/testbench/tt-junit-workflow-lo.png"/>
                </imageobject>
                <imageobject role="fo">
                    <imagedata scale="60" smallscale="90%" align="center" fileref="img/testbench/tt-junit-workflow-hi.png"/>
                </imageobject>
            </mediaobject>
        </figure>

        <para>
            The recommended way to compile and run JUnit tests is to use an Ant script, as
            described in <xref linkend="testbench.junit.ant-configuration"/>. The
            subsequent sections give more details regarding the tasks and their
            configuration options and describe how to use the tools from command-line.
        </para>

        <para>
            A complete testing process involves the following tasks:
        </para>

        <orderedlist>
            <listitem><para>Start Vaadin TestBench Grid Hub</para></listitem>
            <listitem><para>Start Vaadin TestBench Remote Control on each test node</para></listitem>
            <listitem><para>Build the application to be tested</para></listitem>
            <listitem><para>Convert and compile the tests</para></listitem>
            <listitem><para>Deploy the application to be tested (start the server)</para></listitem>
            <listitem><para>Remove old error screens for screenshot directory</para></listitem>
            <listitem><para>Run the compiled JUnit tests</para></listitem>
            <listitem><para>Collect test results</para></listitem>
            <listitem><para>Clean up temporary files (source and compiled java files)</para></listitem>
            <listitem><para>Undeploy the application (stop the server)</para></listitem>
            <listitem><para>Analyze test results</para></listitem>
        </orderedlist>

        <para>
            The exact order of the tasks may vary, especially for the conversion and
            compilation of tests, which can be done also before the step 1 or somewhere
            between the steps 3 and 5. Also deployment and the collection of test results
            varies.
        </para>

        <para>
            Building the application and how it is deployed is out of the context of this
            chapter. Java applications are typically built with build systems such as Ant
            or Maven. Such a build system can be integrated with a continuous integration
            system that not only builds the application, but also runs tests and collects
            test results. Support for JUnit tests in Vaadin TestBench allows integration
            with any continuous integration system that supports JUnit tests.
        </para>

        <section xml:id="testbench.junit.ant-configuration">
            <title>Configuring the Ant Script</title>

            <para>
                The recommended way to compile and run JUnit tests is to use an Ant
                script. An example script is given in the examples directory in the
                installation package. It will convert, compile, and run the tests.
            </para>

            <para>
                You can make the settings either by editing the Ant script or by giving
                the settings as property definitions from the command-line, for example:
            </para>

            <screen><prompt>$</prompt> <command>ant</command> -Dcom.vaadin.testbench.tester.host=<parameter>localhost</parameter> ...</screen>

            <section xml:id="testbench.junit.ant-configuration.mandatory">
                <title>Mandatory Settings</title>

                <para>
                    Define required system property values to the java virtual machine:
                </para>

                <variablelist>
                    <varlistentry>
                        <term><literal>com.vaadin.testbench.tester.host</literal></term>
                        <listitem>
                            <para>
                                Host name or IP address of the Vaadin TestBench Grid Hub. For
                                example, "<literal>localhost</literal>. The port number should
                                not be given in this parameter. If you have just a single test
                                node and do not need the hub, you can give the address of the
                                node.
                            </para>
                        </listitem>
                    </varlistentry>
                    <varlistentry>
                        <term><literal>com.vaadin.testbench.deployment.url</literal></term>
                        <listitem>
                            <para>
                                Base URL of the Vaadin application to be tested, for
                                example, "<uri><link
                                xlink:href="http://demo.vaadin.com/sampler/">http://demo.vaadin.com/sampler/</link></uri>".
                            </para>
                        </listitem>
                    </varlistentry>
                    <varlistentry>
                        <term><literal>com.vaadin.testbench.screenshot.directory</literal></term>
                        <listitem>
                            <para>
                                Base folder for screenshot reference and error images. The
                                reference images are expected to be stored under the
                                <filename>reference</filename> subfolder. Error images are
                                stored by JUnit under the <filename>error</filename>
                                subfolder. On the first run, there are no reference
                                images; you should copy "accepted" screenshots from the
                                <filename>error</filename> directory to the
                                <filename>reference</filename> directory.
                            </para>
                        </listitem>
                    </varlistentry>
                    <varlistentry>
                        <term><literal>browsers</literal></term>
                        <listitem>
                            <para>
                                A comma-separated list of target environments on which the
                                tests should be run. The list entries must match targets
                                defined in the configuration of remote controls in the
                                grid nodes. They must also be listed in the configuration
                                of the hub. The predefined browser names are
                                system-browser pairs.
                            </para>
                        </listitem>
                    </varlistentry>
                </variablelist>
                    
                <para>
                    The default settings in the example test script are:
                </para>

        <programlisting><?pocket-size 75% ?><![CDATA[<!-- Host name or IP address of the host running   -->
<!-- TestBench RemoteControl or TestBench Hub.     -->
<property name="com.vaadin.testbench.tester.host"
          value="127.0.0.1" />

<!-- Base URL where the testable application is    -->
<!-- deployed                                      -->
<property name="com.vaadin.testbench.deployment.url"
          value="http://demo.vaadin.com/" />

<!-- Browsers to use for testing -->
<property name="browsers"
          value="winxp-ie8,winxp-firefox35" />

<!-- Base directory for screenshots.               -->
<property name="com.vaadin.testbench.screenshot.directory"
          value="screenshots" />]]></programlisting>
            </section>

            <section xml:id="testbench.junit.ant-configuration.optional">
                <title>Optional Settings</title>

                <para>
                    Optional property values that can be used:
                </para>

                <variablelist>
                    <varlistentry>
                        <term><literal>com.vaadin.testbench.screenshot.softfail</literal></term>
                        <listitem>
                            <para>
                                If "<literal>true</literal>", a test is allowed to
                                continue even if a screenshot comparison fails.
                            </para>
                            <para>
                                If "<literal>false</literal>", the test is interrupted and
                                testing will continue with the next test.
                            </para>
                        </listitem>
                    </varlistentry>
                    <varlistentry>
                        <term><literal>com.vaadin.testbench.screenshot.onfail</literal></term>
                        <listitem>
                            <para>
                                If "<literal>true</literal>" (default), a screenshot is
                                automatically taken when a test fails. If
                                "<literal>false</literal>", no screenshot is taken.
                            </para>
                        </listitem>
                    </varlistentry>
                    <varlistentry>
                        <term><literal>com.vaadin.testbench.screenshot.cursor</literal></term>
                        <listitem>
                            <para>
                                If "<literal>true</literal>", makes checks whether a
                                comparison error occurs because of a cursor. A blinking
                                cursor can cause unintentional differences in screenshots
                                and this helps with the problem.  <!-- TODO Is this true? 
                                -->
                            </para>
                        </listitem>
                    </varlistentry>
                    <varlistentry>
                        <term><literal>com.vaadin.testbench.screenshot.block.error</literal></term>
                        <listitem>
                            <para>
                                Sets the amount of difference that causes a screenshot
                                comparison to fail. Comparison is done by 16x16 pixel
                                blocks. The difference limit is given as a fraction
                                (0&lt;x&#2264;1) of how much a block can differ from the
                                reference block. Default is 0.025, which means 2.5%
                                difference.
                                <!-- TODO check leq character. -->
                            </para>
                        </listitem>
                    </varlistentry>
                    <varlistentry>
                        <term><literal>com.vaadin.testbench.screenshot.reference.debug</literal></term>
                        <listitem>
                            <para>
                                If "<literal>true</literal>", writes extra output for
                                debugging purposes.
                            </para>
                        </listitem>
                    </varlistentry>
                    <varlistentry>
                        <term><literal>com.vaadin.testbench.screenshot.max.retries</literal></term>
                        <listitem>
                            <para>
                                Defines how many times a screenshot should be taken again
                                if it contains differences from the reference image. This
                                setting tries to eliminate unnecessary differences that
                                are often caused by too slow rendering, so that the
                                screenshot may be taken from an unfinished rendering
                                state. The default is 2 retries.
                            </para>
                        </listitem>
                    </varlistentry>
                    <varlistentry>
                        <term><literal>com.vaadin.testbench.screenshot.resolution</literal> (recommended)</term>
                        <listitem>
                            <para>
                                Specifies the resolution of screenshots as
                                &lt;<literal>width</literal>&gt;<literal>x</literal>&lt;<literal>height</literal>&gt;
                                pixels. For example, "<literal>1024x768</literal>". The
                                browser window will be resized so that the view area has
                                the given size. This setting does not work with Opera,
                                which requires a custom profile file
                                "<filename>profile-opera.txt</filename>" in the Remote
                                Controller folder.
                            </para>

                            <para>
                                If tests give faulty croppings and sizes on screenshots,
                                check that the browser canvas fits into the desktop.
                            </para>
                        </listitem>
                    </varlistentry>
                </variablelist>
            </section>
        </section>

        <section xml:id="testbench.junit.converting">
            <title>Converting HTML Tests</title>

            <para>
                The tests are stored in HTML format and need to be converted to Java
                source files before they can be compiled as executable JUnit tests.
            </para>

            <para>
                Converting tests is done by using the TestConverter in the Vaadin
                TestBench Library.
            </para>

            <!-- TODO: Missing something here? -->

            <section xml:id="testbench.junit.converting.testconverter">
                <title>Using the TestConverter</title>

                <para>
                    The <classname>TestConverter</classname> is a utility class included
                    in the Vaadin TestBench Library. You can use it from the command line
                    or with the <literal>create-tests</literal> target in the example Ant
                    script.
                </para>
                <para>
                    To use the converter, you need to add the Vaadin TestBench Library into your build
                    path:
                </para>

                <itemizedlist>
                    <listitem>
                        <para>
                            <filename>vaadin-testbench-&version.testbench;.jar</filename>
                        </para>
                    </listitem>
                </itemizedlist>

                <para>
                    The library is located in the root directory of the Vaadin TestBench installation
                    package.
                </para>
            </section>

            <section xml:id="testbench.junit.converting.command-line">
                <title>Command-Line Interface</title>

                <para>
                    You can use the test converter from command-line as follows:
                </para>

                <screen><prompt>$</prompt> <command>java</command> com.vaadin.testbench.util.TestConverter &lt;<parameter>OutputDir</parameter>&gt; &lt;<parameter>Browsers</parameter>&gt; &lt;<parameter>HTMLTestFiles</parameter>&gt;...</screen>

                <para>
                    You also need to add the
                    <filename>vaadin-testbench-&version.testbench;.jar</filename> in the class path,
                    either with the <parameter>-cp</parameter> command-line parameter or
                    with the <parameter>CLASSPATH</parameter> environment variable.
                </para>

                <para>
                    The parameters are:
                </para>

                <informaltable frame="all">
                    <tgroup cols="2">
                        <thead>
                            <row>
                                <entry><para>Parameter</para></entry>
                                <entry><para>Description</para></entry>
                            </row>
                        </thead>
                        <tbody>
                            <row>
                                <entry><parameter>OutputDir</parameter></entry>
                                <entry>
                                    <para>
                                        Output directory where the generated Java source
                                        files should be written. The source files are
                                        organized in Java packages by test name and target
                                        environment name.
                                    </para>
                                </entry>
                            </row>
                            <row>
                                <entry><parameter>Browsers</parameter></entry>
                                <entry>
                                    <para>
                                        A comma-separated list of target environments. The
                                        target names must match the entries in the hub and
                                        remote control configurations.
                                    </para>
                                </entry>
                            </row>
                            <row>
                                <entry><parameter>HTMLTestFiles</parameter></entry>
                                <entry><para>A space-separated list of test files in HTML format.</para></entry>
                            </row>
                        </tbody>
                    </tgroup>
                </informaltable>

                <para>
                    For example, assuming that you have recorded and saved a test by name
                    mytests/CalcTest.html, as described in <xref
                    linkend="testbench.recorder.saving"/>, you could give the following
                    command in the installation folder:
                </para>

                <screen><prompt>$</prompt> <command>java</command> <parameter>-cp vaadin-testbench-2.0.0.jar</parameter>
  <parameter>com.vaadin.testbench.util.TestConverter</parameter>
  <parameter>java/ linux-firefox36 mytests/CalcTest.html</parameter>

Using output directory: src
Generating test CalcTest for linux-firefox36 in CalcTest.linux_firefox36
Creating src/CalcTest/linux_firefox36/CalcTest.java for CalcTest</screen>

                <para>
                    Here, we assumed that we have a remote control capable of executing
                    tests for the <literal>linux-firefox36</literal> target. The command
                    would create the Java source file
                    <filename>src/CalcTest/linux_firefox36/CalcTest.java</filename>.
                </para>

                <para>
                    The Java package name is determined from the test name and the target
                    environment.
                </para>
            </section>

            <section xml:id="testbench.junit.converting.ant">
                <title>Ant Script</title>

                <para>
                    The example Ant script located in the <filename>example/</filename>
                    folder in the installation package includes a
                    <literal>create-tests</literal> target, which runs the test converter
                    for each HTML test file.
                </para>

                <para>
                    The target is called automatically by the default target in the script, but you
                    can run it separately as well. For example:
                </para>

                <screen><prompt>$</prompt> <command>cd</command> <parameter>example</parameter>
<prompt>$</prompt> <command>ant</command> <parameter>-f test.xml create-tests</parameter>
Buildfile: test.xml

create-tests:
     [echo] Using test scripts: '/opt/vaadin-testbench-2.0.0/example/testscripts/demo.vaadin.com.html'
     [java] Using output directory: temp-dir/src
     [java] Generating test demo_vaadin_com for winxp-ie8 in demo_vaadin_com.winxp_ie8
     [java] Creating temp-dir/src/demo_vaadin_com/winxp_ie8/demo_vaadin_com.java for demo_vaadin_com
     [java] Generating test demo_vaadin_com for winxp-firefox35 in demo_vaadin_com.winxp_firefox35
     [java] Creating temp-dir/src/demo_vaadin_com/winxp_firefox35/demo_vaadin_com.java for demo_vaadin_com

BUILD SUCCESSFUL
Total time: 1 second</screen>

                <para>
                    The example script writes the Java source files under
                    <filename>temp-dir/src</filename> folder, as defined with the
                    <filename>temp-dir</filename> property in the script.
                </para>
            </section>

            <section xml:id="testbench.junit.converting.optional">
                <title>Optional conversion settings</title>

                <variablelist>
                    <varlistentry>
                        <term><literal>com.vaadin.testbench.converter.parameterFile</literal></term>
                        <listitem>
                            <para>
                                Defines a <filename>.properties</filename> file to be used
                                for parametrising TestBench test Values.
                            </para>

                            <para>
                                On command-line, the parameter should be given as a system
                                property
                                (<parameter>-Dcom.vaadin....parameterFile=VALUE</parameter>. In
                                an Ant script it should be given as
                                <literal>&lt;sysproperty key="com.vaadin...parameterFile"
                                value="VALUE" /&gt;</literal>.
                            </para>
                        </listitem>
                    </varlistentry>
                </variablelist>
            </section>
        </section>

        <section xml:id="testbench.junit.compiling">
            <title>Compiling JUnit tests</title>

            <para>
                The Java source files for the JUnit tests need to be compiled. You need to
                include the Vaadin TestBench Library
                <filename>vaadin-testbench-&version.testbench;.jar</filename> in your class path. The
                library is needed also later when running the tests.
            </para>

            <section xml:id="testbench.junit.compiling.command-line">
                <title>Command-Line Compilation</title>

                <para>
                    You can compile the tests with a Java compiler from the command-line,
                    for example as follows:
                </para>

                <screen><prompt>$</prompt> <command>javac</command> -cp vaadin-testbench-2.0.0.jar -d classes
        src/CalcTest/linux_firefox36/CalcTest.java</screen>

                <para>
                    In the above example, we assume that the source file is located in the
                    <filename>src/</filename> directory, where it was written in the
                    example in <xref linkend="testbench.junit.converting"/> earlier. The
                    compiled class files are written to <filename>classes/</filename>.
                </para>
            </section>

            <section xml:id="testbench.junit.compiling.ant">
                <title>Ant Build Script</title>

                <para>
                    The example Ant script located in the <filename>example/</filename>
                    folder in the installation package includes a
                    <literal>compile-tests</literal> target, which compiles all the JUnit
                    test Java sources.
                </para>

                <para>
                    For example:
                </para>

                <screen><prompt>$</prompt> <command>ant</command> <parameter>-f test.xml compile-tests</parameter>
Buildfile: test.xml

create-tests:
     [echo] Using test scripts: '/opt/vaadin-testbench-2.0.0/example/testscripts/demo.vaadin.com.html'
     [java] Using output directory: temp-dir/src
     [java] Generating test demo_vaadin_com for winxp-ie8 in demo_vaadin_com.winxp_ie8
     [java] Creating temp-dir/src/demo_vaadin_com/winxp_ie8/demo_vaadin_com.java for demo_vaadin_com
     [java] Generating test demo_vaadin_com for winxp-firefox35 in demo_vaadin_com.winxp_firefox35
     [java] Creating temp-dir/src/demo_vaadin_com/winxp_firefox35/demo_vaadin_com.java for demo_vaadin_com

compile-tests:
     [mkdir] Created dir: /opt/vaadin-testbench-2.0.0/example/temp-dir/classes
     [javac] Compiling 2 source files to /opt/vaadin-testbench-2.0.0/example/temp-dir/classes

BUILD SUCCESSFUL
Total time: 2 seconds</screen>

                <para>
                    The example script writes the compiled classes under
                    <filename>temp-dir/classes</filename> folder, as defined with the
                    <literal>temp-dir</literal> property in the script.
                </para>
            </section>
        </section>

        <section xml:id="testbench.junit.executing">
            <title>Executing JUnit Tests</title>

            <para>
                Execution of JUnit tests requires:
            </para>

            <itemizedlist>
                <listitem>
                    <para>
                        All tests have been compiled as Java classes (<xref linkend="testbench.junit.compiling" xrefstyle="select:label"/>)
                    </para>
                </listitem>
                <listitem>
                    <para>
                        Vaadin TestBench Grid Hub is running (<xref linkend="testbench.hub-installation" xrefstyle="select:label"/>)
                    </para>
                </listitem>
                <listitem>
                    <para>
                        One or more Vaadin TestBench Remote Controls is running (<xref linkend="testbench.rc-installation" xrefstyle="select:label"/>)
                    </para>
                </listitem>
                <listitem>
                    <para>
                        The Vaadin TestBench Library
                    </para>
                </listitem>
            </itemizedlist>

            <para>
                JUnit and Selenium Remote Control Java Client are included in the Vaadin
                TestBench Library, <filename>vaadin-testbench-&version.testbench;.jar</filename>.
            </para>

            <section xml:id="testbench.junit.executing.parameters">
                <title>Test Execution Parameters</title>

                <para>
                    The following parameters must be defined:
                </para>

                <variablelist>
                    <varlistentry>
                        <term><literal>com.vaadin.testbench.tester.host</literal></term>
                        <listitem>
                            <para>
                                Host name or IP address of the Vaadin TestBench Hub. For
                                example, "<literal>localhost</literal>", as you would have
                                in a test development setup. The address can also be the
                                address of a Remote Control in a single test node
                                installation, as described in <xref
                                linkend="testbench.rc-installation.nohub"/>.
                            </para>
                        </listitem>
                    </varlistentry>
                    <varlistentry>
                        <term><literal>com.vaadin.testbench.deployment.url</literal></term>
                        <listitem>
                            <para>
                                The URL address of the Vaadin application to be
                                tested. For example, "<ulink
                                url="http://demo.vaadin.com/sampler/">http://demo.vaadin.com/sampler/</ulink>".
                            </para>
                        </listitem>
                    </varlistentry>
                    <varlistentry>
                        <term><literal>com.vaadin.testbench.screenshot.directory</literal></term>
                        <listitem>
                            <para>
                                Directory path where the screenshots will be stored,
                                assuming that any are taken. The path may be relative to
                                the directory where JUnit is executed, or absolute.
                            </para>
                        </listitem>
                    </varlistentry>
                </variablelist>
            </section>

            <section xml:id="testbench.junit.executing.command-line">
                <title>Executing JUnit from Command-Line</title>

                <para>
                    Execution of JUnit requires the JUnit libraries, which are included in
                    the Vaadin TestBench Library, and the compiled tests.
                </para>

                <para>
                    In the following example, we assume that we have already converted and
                    compiled a test case for the Calc application and that we have a
                    remote control running and capable of testing the
                    <literal>linux-firefox36</literal> target.
                </para>

                <screen><prompt>$</prompt> <command>java</command> <parameter>-cp vaadin-testbench-2.0.0.jar:classes</parameter>
       <parameter>-Dcom.vaadin.testbench.tester.host=localhost</parameter>
       <parameter>-Dcom.vaadin.testbench.deployment.url=<ulink url="http://demo.vaadin.com/Calc/">http://demo.vaadin.com/Calc/</ulink></parameter>
       <parameter>org.junit.runner.JUnitCore</parameter>
       <parameter>CalcTest.linux_firefox36.CalcTest</parameter>

JUnit version 4.5
Time: 17.964
There was 1 failure:
1) testlinux_firefox36(CalcTest.linux_firefox36.CalcTest)
junit.framework.AssertionFailedError: Test was missing reference images.
at junit.framework.Assert.fail(Assert.java:47)
...
FAILURES!!!
Tests run: 1, Failures: 1</screen>

                <para>
                    In this example, the test failed because we did not have the reference
                    images installed. See <xref linkend="testbench.junit.comparing"/> for
                    instructions on copying the reference images after the first run.
                </para>
            </section>

            <section xml:id="testbench.junit.executing.ant">
                <title>Executing JUnit from an Ant Script</title>

                <para>
                    Apache Ant has an optional <literal>&lt;junit&gt;</literal> task,
                    which makes it easier to run JUnit tests from Ant.
                </para>

                <para>
                    You need to:
                </para>

                <itemizedlist>
                    <listitem>
                        <para>
                            Include Vaadin TestBench Library and the compiled tests in the class path
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            Define the required parameters with <literal>&lt;jvmarg&gt;</literal> elements
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            List the source files of the tests in a <literal>&lt;batchtest&gt;</literal> element
                        </para>
                    </listitem>
                </itemizedlist>

                <para>
                    See the <literal>run-tests</literal> target in
                    <filename>example/test.xml</filename> for an example of using the
                    task.
                </para>

                <programlisting><?pocket-size 65% ?><![CDATA[
<junit fork="yes">
    <classpath>
        <fileset dir=".."
            includes="vaadin-testbench-*.jar" />
        <pathelement path="${temp-dir}/classes" />
    </classpath>

    <!-- Optional -->
    <formatter type="brief" usefile="false" />

    <!-- The required parameters -->
    <jvmarg value="-Dcom.vaadin.testbench.tester.host=${com.vaadi
n.testbench.tester.host}" />
    <jvmarg value="-Dcom.vaadin.testbench.deployment.url=${com.va
adin.testbench.deployment.url}" />
    <jvmarg value="-Dcom.vaadin.testbench.screenshot.directory=${
com.vaadin.testbench.screenshot.directory}" />

    <batchtest>
        <fileset dir="${temp-dir}/src">
            <include name="**/**.java" />
        </fileset>
    </batchtest>
</junit>]]></programlisting>
            </section>

            <section xml:id="testbench.junit.executing.output">
                <title>JUnit Output</title>

                <para>
                    The output of JUnit depends on how it was executed. When executed from
                    command-line, it writes output to standard output. Ant provides
                    possibilities to format the output and to write it to a file. Certain
                    other build systems and continuous integration systems integrate with
                    JUnit and support collecting the results. <!-- TODO: Add reference -->
                </para>

                <para>
                    Screenshots with errors are written to the
                    <filename>errors/</filename> subdirectory under the
                    <filename>screenshot</filename> directory given as a parameter. See
                    <xref linkend="testbench.junit.comparing"/> for more details.
                </para>
            </section>
        </section>

        <section xml:id="testbench.junit.comparing">
            <title>Comparing Screenshots</title>

            <para>
                Vaadin TestBench allows taking screenshots of the web browser window with
                the <command>screenCapture</command> command, as described in <xref
                linkend="testbench.commands.screenCapture"/>.
            </para>

            <para>
                When the tests are executed with JUnit, the captured images are compared
                to reference images. If the images differ more than the allowed amount, as
                defined by the block error parameter (see the optional settings in <xref
                linkend="testbench.junit.ant-configuration"/>), the test produces an
                <classname>AssertionFailedError</classname> exception. The comparison
                results in the same error also when the reference image is missing
                altogether.
            </para>

            <section xml:id="testbench.junit.comparing.error-images">
                <title>Screenshot Comparison Error Images</title>

                <para>
                    Screenshots with errors are written to the
                    <filename>errors/</filename> subfolder under the screenshot folder
                    that given as a parameter to JUnit.
                </para>

                <para>
                    For example, the error caused by a missing reference image in the
                    example in <xref linkend="testbench.junit.executing"/> is
                    written to
                    <filename>screenshot/errors/CalcTest_Linux_Firefox_3_CalcPicture.png</filename>. The
                    image is shown in <xref
                    linkend="figure.testbench.junit.comparing.error-images.calc"/>.
                </para>

                <figure xml:id="figure.testbench.junit.comparing.error-images.calc">
                    <title>A screenshot taken by a test run</title>
                    <mediaobject>
                        <imageobject role="html">
                            <imagedata align="center" fileref="img/testbench/screenshots/tt-screenshot-calc.png"/>
                        </imageobject>
                        <imageobject role="fo">
                            <imagedata scale="60" smallscale="80%" align="center" fileref="img/testbench/screenshots/tt-screenshot-calc.png"/>
                        </imageobject>
                    </mediaobject>
                </figure>

                <para>
                    When taking screenshots, the browser is maximized to full screen. Only the page
                    view area in the browser is captured.
                </para>
            </section>

            <section xml:id="testbench.junit.comparing.reference-images">
                <title>Reference Images</title>

                <para>
                    Reference images are expected to be found in the
                    <filename>reference/</filename> subfolder under the screenshot folder
                    given as a parameter for JUnit. To create a reference image, just copy
                    a screenshot from the <filename>errors/</filename> directory to the
                    <filename>reference/</filename> directory.
                </para>

                <para>
                    For example:
                </para>

                <screen><prompt>$</prompt> <command>cp</command> <parameter>screenshot/errors/CalcTest_Linux_Firefox_3_CalcPicture.png</parameter> <parameter>screenshot/reference/</parameter></screen>

                <para>
                    Now, when the proper reference image exists, rerunning the test that
                    was run the first time in <xref linkend="testbench.junit.executing"/>,
                    outputs success:
                </para>

                <screen><prompt>$</prompt> <command>java</command> ...
JUnit version 4.5
.
Time: 18.222

OK (1 test)</screen>

                <para>
                    You can also supply multiple versions of the reference images by
                    appending an underscore and an index to the filenames. For example:
                </para>

                <screen>CalcTest_Linux_Firefox_3_CalcPicture.png
CalcTest_Linux_Firefox_3_CalcPicture_1.png
CalcTest_Linux_Firefox_3_CalcPicture_2.png</screen>

                <para>
                    This can be useful in certain situations when there actually are more
                    than one "correct" reference.
                </para>
            </section>

            <section xml:id="testbench.junit.comparing.visualization">
                <title>Visualization of Differences in Screenshots with Highlighting</title>

                <para>
                    Vaadin TestBench supports advanced difference visualization between a
                    captured screenshot and the reference image. A difference report is
                    written to a HTML file that has the same name as the failed
                    screenshot, but with <filename>.html</filename> suffix. The reports are
                    written to the same <filename>errors/</filename> folder as the
                    screenshots from the failed tests.
                </para>

                <para>
                    The differences in the images are highlighted with blue
                    squares. Moving the mouse pointer over a square shows the difference
                    area as it appears in the reference image. Clicking the image switches
                    the entire view to the reference image and back. Text "<guilabel>Image
                    for this run</guilabel>" is displayed in the top-left corner to
                    identify the currently displayed screenshot.
                </para>

                <para>
                    <xref
                    linkend="figure.testbench.junit.comparing.visualization.highlighting"/>
                    shows a difference report with three differences. Date fields are a
                    typical cause of differences in screenshots.
                </para>

                <figure xml:id="figure.testbench.junit.comparing.visualization.highlighting">
                    <title>A highlighed error image and the reference image</title>
                    <mediaobject>
                        <imageobject role="html">
                            <imagedata align="center" fileref="img/testbench/screenshots/tt-screenshot-comparison-1.png"/>
                        </imageobject>
                        <imageobject role="fo">
                            <imagedata scale="60" smallscale="80%" align="center" fileref="img/testbench/screenshots/tt-screenshot-comparison-1.png"/>
                        </imageobject>
                    </mediaobject>
                    <mediaobject>
                        <imageobject role="html">
                            <imagedata align="center" fileref="img/testbench/screenshots/tt-screenshot-comparison-2.png"/>
                        </imageobject>
                        <imageobject role="fo">
                            <imagedata scale="60" smallscale="80%" align="center" fileref="img/testbench/screenshots/tt-screenshot-comparison-2.png"/>
                        </imageobject>
                    </mediaobject>
                </figure>
            </section>

            <section xml:id="testbench.junit.comparing.practices">
                <title>Practices for Handling Screenshots</title>

                <para>
                    Access to the screenshot reference image directory should be arranged
                    so that a developer who can view the results can copy the valid images
                    to the reference directory. One possibility is to store the reference
                    images in a version control system and check-out them to the
                    <filename>reference/</filename> directory.
                </para>

                <para>
                    A build system or a continuous integration system can be configured to
                    automatically collect and store the screenshots as build artifacts.
                </para>
            </section>
        </section>
    </section>
</chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: xml
sgml-omittag:nil
sgml-shorttag:nil
sgml-namecase-general:nil
sgml-general-insert-case:lower
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:4
sgml-indent-data:t
sgml-parent-document:nil
sgml-exposed-tags:nil
sgml-local-catalogs:("/etc/sgml/catalog" "/usr/share/xemacs21/xemacs-packages/etc/psgml-dtds/CATALOG")
sgml-local-ecat-files:("ECAT" "~/sgml/ECAT" "/usr/share/sgml/ECAT" "/usr/local/share/sgml/ECAT" "/usr/local/lib/sgml/ECAT")
End:
-->
