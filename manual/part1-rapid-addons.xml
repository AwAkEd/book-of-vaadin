<?xml version="1.0" encoding="UTF-8"?>

<section xml:id="rapid.addons">
    <title>Using Vaadin Add-ons in a Roo project</title>

    <para>
        Complex Vaadin application often need to use some add-ons in addition to the 
        core Vaadin. In our example project we will need the Vaadin Calendar and 
        JPAContainer add-ons for the application. The Vaadin Plugin for Roo supports 
        installing add-ons from the Vaadin Directory and compiling any included 
        widget sets.
    </para>

    <orderedlist>
        <listitem><para>Install the Vaadin Calendar add-on</para></listitem>
        <listitem><para>Compile the widget set</para></listitem>
        <listitem><para>Configure the Deployment Assembly</para></listitem>
    </orderedlist>

    <para>
        The JPAContainer add-on is installed automatically by the Roo plugin, but the
        Calendar add-on needs to be installed manually as described in this section.
    </para>

    <section xml:id="rapid.addons.install">
        <title>Installing Add-ons</title>

        <para>
            Open or select a Roo Shell and enter:
        </para>

        <programlisting><?pocket-size 65% ?><![CDATA[roo> vaadin addon install --artifactId vaadin-calendar]]></programlisting>

        <para>
            You can actually type the beginning of the command up to the
            <literal>--artifactId</literal>, followed by a space, and then hit
            <keycombo><keycap>Ctrl</keycap><keycap>Space</keycap></keycombo> for
            completion. It will list all the available add-ons in the Directory. If you
            enter the beginning of an add-on name, such as <literal>vaadin-</literal>,
            before the completion, it will show just those add-ons, as shown in <xref
            linkend="figure:rapid.addons.install.completion"/>.
        </para>

        <figure xml:id="figure:rapid.addons.install.completion">
            <title>Getting List of Add-ons in Directory</title>
            <mediaobject>
                <imageobject>
                    <imagedata smallscale="80%" align="center" fileref="img/rapid/addon-install-completion.png"/>
                </imageobject>
            </mediaobject>
        </figure>
    </section>

    <section xml:id="rapid.addons.widgetset">
        <title>Compiling the Widget Set</title>

        <para>
            Add-ons that include custom widgets, in this case the Vaadin Calendar
            component, require compilation of a <emphasis>widget set</emphasis>, as
            described in detail in <xref linkend="advanced.addons"/>. Roo makes the
            compilation simple, you only have to enter the following command in the Roo
            Shell:
        </para>

        <programlisting><?pocket-size 65% ?><![CDATA[roo> vaadin widgetset create]]></programlisting>

        <para>
            Executing the command can take considerable time, as it downloads all the
            necessary Maven dependencies on the first run. The actual widget set
            compilation takes usually between 20 to 60 seconds, depending on the
            hardware.
        </para>

        <para>
            This will create a <emphasis>combining widget set</emphasis> that includes all
            the widget sets from different add-ons and also the default widget set of
            Vaadin. The compiled widget set should appear in directory
            <filename>target/rapid-0.1.0-SNAPSHOT/VAADIN/widgetsets/com.vaadin.rapid.web.RapidWidgetset</filename>
            and be referenced in the <filename>web.xml</filename> deployment descriptor of
            the application.
        </para>

        <para>
            Generally, add-ons that introduce an entirely new user interface component
            include a widget set that needs to be compiled. These are the majority of
            Vaadin add-ons. Add-ons providing a theme or container implementation do not
            include a widget set.
        </para>

        <para>
            If you later add other add-ons, you need to issue the <literal>vaadin
            widgetset update</literal> command, which updates the combining widget set
            definition file. The <literal>vaadin widgetset compile</literal> command
            simply recompiles the widget set without updating the combining widget set
            definition file.
        </para>
    </section>    

    <section xml:id="rapid.addons.deployment">
        <title>Configuring the Deployment Assembly</title>

        <para>
            The widget set is compiled under the
            <filename>target/rapid-0.1.0.BUILD-SNAPSHOT</filename> directory, which is not
            included in the deployment path by default.
        </para>

        <orderedlist>
            <listitem><para>Open the project properties for the project</para></listitem>
            <listitem><para>Select <guilabel>Deployment Assembly</guilabel></para></listitem>
            <listitem><para>Click <guibutton>Add</guibutton></para></listitem>
            <listitem><para>Select <menuchoice><guimenu>Folder</guimenu></menuchoice></para></listitem>
            <listitem><para>Select <filename>target/rapid-0.1.0.BUILD-SNAPSHOT</filename></para></listitem>
            <listitem><para>Click <guibutton>Finish</guibutton> and <guibutton>OK</guibutton> to save the settings</para></listitem>
        </orderedlist>
        
        <para>
            In case you are using maven to debug your application you'll face the same issue. As a workaround use target <literal>jetty-run</literal> or <literal>jetty:run-exploded</literal>, which will use the target directory as the base directory for the web app. Another option is to modify gwt-maven-plugin to compile widgetset to src/main/webapp with its <literal>inplace</literal> mode.
        </para>
    </section>
</section>
	
<!-- Keep this comment at the end of the file
Local variables:
mode: xml
sgml-omittag:nil
sgml-shorttag:nil
sgml-namecase-general:nil
sgml-general-insert-case:lower
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:4
sgml-indent-data:t
sgml-parent-document:nil
sgml-exposed-tags:nil
sgml-local-catalogs:("/etc/sgml/catalog" "/usr/share/xemacs21/xemacs-packages/etc/psgml-dtds/CATALOG")
sgml-local-ecat-files:("ECAT" "~/sgml/ECAT" "/usr/share/sgml/ECAT" "/usr/local/share/sgml/ECAT" "/usr/local/lib/sgml/ECAT")
End:
-->
