<?xml version="1.0" encoding="UTF-8"?>

<chapter xml:id="architecture">
	<title>Architecture</title>

	<para>
		This chapter provides an introduction to the architecture of IT Mill Toolkit at
		somewhat technical level.
	</para>

	<section xml:id="architecture.overview">
		<title>Overview</title>

		<para>
			In <xref linkend="intro"/>, we gave a short introduction to the
			general architecture of IT Mill Toolkit. Let us now look deeper into it. <xref
			linkend="figure.architecture.detailed"/> below illustrates the architecture.
		</para>

		<figure xml:id="figure.architecture.detailed">
			<title>IT Mill Toolkit Architecture</title>
			<mediaobject>
				<imageobject role="html">
					<imagedata align="center" fileref="img/intro/architecture-detailed-lo.png"/>
				</imageobject>
				<imageobject role="fo">
					<imagedata scale="60" align="center" fileref="img/intro/architecture-detailed-hi.png"/>
				</imageobject>
			</mediaobject>
		</figure>

		<para>
			IT Mill Toolkit consists of a <emphasis>web application
			API</emphasis>, a horde of <emphasis>user interface
			components</emphasis>, <emphasis>themes</emphasis> for controlling
			the appearance, and a <emphasis>data model</emphasis> that allows
			binding the user interface components directly to data. Behind the
			curtains it also employs a <emphasis>terminal adapter</emphasis> to
			receive requests from web browsers and make responses by rendering the
			pages.
		</para>

		<para>
			An application using IT Mill Toolkit runs as a servlet in a Java web server,
			serving HTTP requests. The terminal adapter receives client requests through
			the web server's Java Servlet API, and inteprets them to user events for a
			particular session. An event is associated with a UI component and delivered
			to the application. As the application logic makes changes to the UI
			components, the terminal adapter renders them in the web browser by generating
			a response. In AJAX rendering mode, a client-side JavaScript component
			receives the responses and uses them to make any necessary changes to the page
			in the browser.
		</para>

		<para>
			The top level of a user application consists of an application class that
			inherits <classname>com.itmill.toolkit.Application</classname>.  It creates the
			UI components (see below) it needs, receives events regarding them,
			and makes necessary changes to the components. For detailed information about
			inheriting the <classname>Application</classname>, see <xref
			linkend="application"/>.
		</para>

		<para>
			The major parts of the architecture and their function are as follows:
		</para>
		
		<variablelist>
			<varlistentry>
				<term>User Interface Components</term>
				<listitem>
					<para>
						The user interface consists of UI components that are created and
						laid out by the application. Each server-side component has a
						client-side counterpart, with which the user interacts. The
						server-side components can serialize themselves over the client
						connection using a terminal adapter. The client-side components,
						in turn, can serialize user interaction back to the application,
						which is received in the server-side components as events. The
						components relay these events to the application logic. Most
						components are bound to a data source (see below). For a complete
						description of UI component architecture, see <xref
						linkend="components"/>.
					</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term>Client-Side Engine</term>
				<listitem>
					<para>
						The Client-Side Engine of IT Mill Toolkit manages the rendering in
						the web browser using Google Web Toolkit (GWT). It communicates
						user interaction and UI changes with the server-side Terminal
						Adapter using the User Interface Definition Language (UIDL), a
						JSON-based language. The communications are done using
						asynchronous HTTP or HTTPS requests. See <xref
						linkend="architecture.client-side"/>.
					</para>
				</listitem>
			</varlistentry>
			
			<varlistentry>
				<term>Terminal Adapter</term>
				<listitem>
					<para>
						The UI components do not render themselves directly as a web page,
						but use a <emphasis>Terminal Adapter</emphasis>.  This abstraction layer
						allows users to use IT Mill Toolkit applications with practically
						any web browser. Releases 3 and 4 of IT Mill Toolkit supported
						HTML and simple AJAX based rendering, while Release 5 supports
						advanced AJAX-based rendering using Google Web Toolkit (GWT). You
						could imagine some other browser technology, not even based on
						HTML, and you - or we for that matter - could make it work just by
						writing a new adapter. Your application would still just see the
						Toolkit API. To allow for this sort of abstraction, UI components
						communicate their changes to the Terminal Adapter, which renders
						them for the user's browser. When the user does something in the web
						page, the events are communicated to the terminal adapter (through
						the web server) as asynchronous AJAX requests. The terminal
						adapter delivers the user events to the UI components, which
						deliver them to the application's UI logic.
					</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term>Themes</term>
				<listitem>
					<para>
						The user interface separates between presentation and logic. While
						the UI logic is handled as Java code, the presentation is defined
						in <emphasis>themes</emphasis> as CSS. IT Mill Toolkit provides a
						default themes. User themes can, in addition to style sheets,
						include HTML templates that define custom layouts and other
						resources, such as images. Themes are discussed in detail in <xref
						linkend="themes"/>.
					</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term>UIDL</term>
				<listitem>
					<para>
						The Terminal Adapter draws the user interface to the web page and
						any changes to it using a special User Interface Definition
						Language (UIDL). The UIDL communications are done using JSON
						(JavaScript Object Notation), which is a lightweight data
						interchange format that is especially efficient for interfacing
						with JavaScript-based AJAX code in the browser. See <xref
						linkend="architecture.technology.json"/> and <xref
						linkend="uidl"/> for details.
					</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term>Events</term>
				<listitem>
					<para>
						User interaction with UI components creates events, which are first
						processed on the client side with JavaScript and then passed all the way
						through the HTTP server, terminal adapter, and user component layers to the
						application. See <xref linkend="architecture.events"/>.
					</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term>Data Model</term>
				<listitem>
					<para>
						In addition to the user interface model, IT Mill Toolkit provides a
						<emphasis>data model</emphasis> for interfacing data presented in UI
						components. Using the data model, the user interface components can
						update the application data directly, without the need for any control
						code. All the UI components use this data model internally, but they can
						be bound to a separate data source as well. For example, you can bind a
						table component to an SQL query response. For a complete overview of the
						IT Mill Toolkit Data Model, please refer to <xref
						linkend="datamodel"/>.
					</para>
				</listitem>
			</varlistentry>

		</variablelist>

	</section>

	<section xml:id="architecture.technology">
		<title>Technological Background</title>

		<para>
			This section provides an introduction to the various technologies and designs
			on which IT Mill Toolkit is based: AJAX-based web applications in general,
			Google Web Toolkit, and JSON data interchange format. This knowledge is not
			necessary for using IT Mill Toolkit, but provides some background if you need
			to make low-level extensions to IT Mill Toolkit.
		</para>

		<section xml:id="architecture.technology.ajax">
			<title>AJAX</title>
			<para>
				AJAX (Asynchronous JavaScript and XML) is a technique for developing web
				applications with responsive user interaction, similar to traditional
				desktop applications. While conventional JavaScript-enabled HTML pages can
				receive new content only with page updates, AJAX-enabled pages send user
				interaction to the server using an asynchronous request and receive
				updated content in the response. This way, only small parts of the page
				data can be loaded. This goal is archieved by the use of a certain set of
				technologies: XHTML, CSS, DOM, JavaScript, XMLHttpRequest, and XML.
			</para>

			<para>
				AJAX, with all the fuss and pomp it receives, is essentially made possible
				by a simple API, namely the <methodname>XMLHttpRequest</methodname> class
				in JavaScript. The API is available in all major browsers and, as of 2006,
				the API is under way to become a W3C standard.
			</para>

			<para>
				Communications between the browser and the server usually require some
				sort of <emphasis>serialization</emphasis> (or
				<emphasis>marshalling</emphasis>) of data objects. AJAX suggests the use
				of XML for data representation in communications between the browser and
				the server. While IT Mill Toolkit Release 4 used XML for data interchange,
				Release 5 uses the more efficient JSON. For more information about JSON
				and its use in IT Mill Toolkit, see <xref
				linkend="architecture.technology.json"/> below.
			</para>

			<para>
				If you're a newcomer to Ajax, <xref linkend="advanced.application.pages"/>
				discusses the history and motivations for AJAX-based web applications, as
				well as some special characteristics that differ from both traditional web
				applications and desktop applications.
			</para>
		</section>

		<section xml:id="architecture.technology.gwt">
			<title>Google Web Toolkit</title>

			<para>
				Google Web Toolkit is a software development kit for developing
				client-side web applications easily, without having to use JavaScript or
				other browser technologies directly. Applications using GWT are developed
				with Java and compiled into JavaScript with the GWT Compiler.
			</para>

			<para>
				GWT is essentially a client-side technology, normally used to develop user
				interface logic in the web browser. GWT applications still need to
				communicate with a server using RPC calls and by serializing any data. IT
				Mill Toolkit effectively hides all client-server communications, allows
				handling user interaction logic in a server application, and allows
				software development in a single server-side application. This makes the
				architecture of an AJAX-based web application much simpler.
			</para>

			<para>
				IT Mill Toolkit uses GWT to render user interfaces in the web browser and
				handle the low-level tasks of user interaction in the browser. Use of GWT is
				largely invisible in IT Mill Toolkit for applications that do not need any
				custom GWT components.
			</para>

			<para>
				See <xref linkend="architecture.client-side"/> for a description of
				how GWT is used in the Client-Side Engine of IT Mill Toolkit. <xref
				linkend="gwt"/> provides information about the integration of
				GWT-based user interface components with IT Mill Toolkit.
			</para>
		</section>

		<section xml:id="architecture.technology.json">
			<title>JSON</title>

			<para>
				JSON is a lightweight data-interchange format that is easy and fast to
				generate and parse. JSON messages are said to be possibly a hundred times
				faster to parse than XML with current browser technology. The format is a
				subset of the JavaScript language, which makes it possible to evaluate
				JSON messages directly as JavaScript expressions. This makes JSON very
				easy to use in JavaScript applications and therefore also for AJAX
				applications.
			</para>

			<para>
				The Client-Side Engine of IT Mill Toolkit uses JSON through Google Web
				Toolkit, which supports JSON communications in the
				<classname>com.google.gwt.json.client</classname> package.  Together with
				advanced update optimization and caching, IT Mill Toolkit is able to
				update changes in the user interface to the browser in an extremely
				efficient way.
			</para>

			<para>
				The use of JSON is completely invisible to a developer using IT Mill
				Toolkit. Implementation of client-server serialization in custom widgets
				uses abstract interfaces that may be implemented as any low-level
				interchange format, such as XML or JSON. Details on JSON communications
				are given in <xref linkend="uidl.json"/>.
			</para>
		</section>

	</section>

	<section xml:id="architecture.server-side">
		<title>Applications as Java Servlet Sessions</title>

		<para>
			IT Mill Toolkit framework does basically everything it does on top of the Java
			Servlet API, which lies hidden deep under the hood, with the terminal adapter
			being the lowest level layer for handling requests from the web
			container.
        </para>

        <para>
            When the web container gets the first request for a URL registered for an
            application, it creates an instance of the
            <classname>ApplicationServlet</classname> class in IT Mill Toolkit framework
            that inherits the <classname>HttpApplet</classname> class defined in Java
            Servlet API. It follows sessions by using <classname>HttpSession</classname>
            interface and associates an <classname>Application</classname> instance with
            each session. During the lifetime of a session, the framework relays user
            actions to the proper application instance, and further to a user interface
            component.
		</para>
    </section>
		
	<section xml:id="architecture.client-side">
		<title>Client-Side Engine</title>

		<para>
			This section gives an overview of the client-side architecture of IT Mill
			Toolkit. Knowledge of the client-side technologies is generally not needed
			unless you develop or use custom GWT components. The client-side engine is
			based on Google Web Toolkit (GWT), which allows the development of the engine
			and client-side components solely with Java.
		</para>

		<para>
			<xref linkend="gwt"/> provides information about the integration of
			GWT-based user interface components with IT Mill Toolkit.
		</para>

		<figure xml:id="figure.architecture.client-side">
			<title>Architecture of IT Mill Toolkit Client-Side Engine</title>
			<mediaobject>
				<imageobject role="html">
					<imagedata align="center" fileref="img/arch/clientside-arch-lo.png"/>
				</imageobject>
				<imageobject role="fo">
					<imagedata scale="75" align="center" fileref="img/arch/clientside-arch-hi.png"/>
				</imageobject>
			</mediaobject>
		</figure>

		<para>
			<xref linkend="figure.architecture.client-side"/> illustrates the architecture
			of the client-side engine using a button component as an example. The user
			interface is managed by the <classname>ApplicationConnection</classname>
			class, which handles AJAX requests to the server and renders the user
			interface according to responses. Communications are done over HTTP(S) using
			the JSON data interchange format and the User Interface Definition Language
			(UIDL). In the server-side application, the button is used with the
			<classname>Button</classname> class of IT Mill Toolkit. On the client-side,
			the user interface consists of various GWT components that inherit
			<classname>Widget</classname> class. In the figure above, the GWT class
			<classname>Button</classname> is used to render the button in the browser (the
			inheritance of <classname>Button</classname> is simplified in the figure). IT
			Mill Toolkit provides an <classname>IButton</classname> class, which implements
			the <classname>Paintable</classname> interface needed for rendering the
			component with GWT.
		</para>

		<para>
			The actual initial web page that is loaded in the browser is an empty page
			that loads the JavaScript code of the IT Mill Toolkit Client-Side Engine.
			After it is loaded and started, it handles the AJAX requests to the
			server. All server communications are done through the
			<classname>ApplicationConnection</classname> class.
		</para>

		<para>
			The communication with the server is done as UIDL (User Interface Definition
			Language) messages using the JSON message interchange format over a HTTP(S)
			connection. UIDL is described in <xref linkend="uidl"/> and JSON in
			<xref linkend="architecture.technology.json"/> and <xref
			linkend="uidl.json"/>.
		</para>

	</section>

	<section xml:id="architecture.events">
		<title>Events and Listeners</title>

		<para>
			When a user does something, such as clicks a button or selects an item, the
			application needs to know about it. Many Java-based user interface
			frameworks follow the <emphasis>Observer</emphasis> design pattern to
			communicate user input to the application logic. So does IT Mill
			Toolkit. The design pattern involves two kinds of elements: an object
			and a number of observers that listen for events regarding the
			object. When an event related to the object occurs, the observers
			receive a notification regarding the event. In most cases there is
			only one observer, defined in the application logic, but the pattern
			allows for multiple observers. As in the event-listener framework of
			Java SE, we call the observing objects
			<emphasis>listeners</emphasis>.
		</para>

		<para>
			In the ancient times of C programming, <emphasis>callback functions</emphasis>
			filled largely the same need as listeners do now. In object-oriented
			languages, we have only classes and methods, not functions, so the application
			has to give a class interface instead of a callback function pointer to the
			framework. However, IT Mill Toolkit supports defining a method as a listener
			as well.
		</para>

		<para>
			Events can serve many kinds of purposes. In IT Mill Toolkit, the
			usual purpose of events is handling user interaction in a user interface. Session
			management can require special events, such as time-out, in which
			case the event is actually the lack of user interaction. Time-out is a special
			case of timed or scheduled events, where an event occurs at a
			specific date and time or when a set time has passed. Database and
			other asynchronous communications can cause events too.
		</para>

		<para>
			To receive events of a particular type, an application must include a
			class that implements the corresponding listener interface. In small
			applications, the application class itself could implement the needed
			listener interfaces. Listeners are managed by the
			<classname>AbstractComponent</classname> class, the base class of all
			user interface components. This means that events regarding any
			component can listened to. The listeners are registered in the
			components with <methodname>addListener()</methodname> method.
		</para>

		<para>
			Most components that have related events define their own
			event class and corresponding listener classes. For example, the
			<classname>Button</classname> has
			<classname>Button.ClickEvent</classname> events, which can be
			listened to through the <classname>Button.ClickListener</classname>
			interface. This allows an application to listen to many different
			kinds of events and to distinguish between them at class level. This
			is usually not enough, as applications usually have many components
			of the same class and need to distinguish between the particular
			components too. We will look into that more closely below. The
			purpose of this sort of class level separation is to avoid having to
			make type conversions in the handlers.
		</para>

		<para>
			Notice that many listener interfaces inherit the
			<classname>java.util.EventListener</classname> superinterface, but it
			is not generally necessary to inherit it.
		</para>


		<figure xml:id="figure.eventlistenerdiagram">
			<title>Class Diagram of a Button Click Listener</title>
			<mediaobject>
				<imageobject role="html">
					<imagedata align="center" fileref="img/arch/events-classdiagram.png"/>
				</imageobject>
				<imageobject role="fo">
					<imagedata scale="75" align="center" fileref="img/arch/events-classdiagram.png"/>
				</imageobject>
			</mediaobject>
		</figure>

		<para>
			<xref linkend="figure.eventlistenerdiagram"/> illustrates an example
			where an application-specific class inherits the
			<classname>Button.ClickListener</classname> interface to be able to
			listen for button click events. The application must instantiate the
			listener class and register it with
			<methodname>addListener()</methodname>. When an event occurs, an
			event object is instantiated, in this case a
			<classname>ClickEvent</classname>. The event object knows the related
			UI component, in this case the <classname>Button</classname>.
		</para>

        <para>
            <xref linkend="application.events"/> goes into details of handling events in
            practice.
        </para>

	</section>

</chapter>
<!-- Keep this comment at the end of the file
Local variables:
mode: xml
sgml-omittag:nil
sgml-shorttag:nil
sgml-namecase-general:nil
sgml-general-insert-case:lower
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:4
sgml-indent-data:t
sgml-parent-document:nil
sgml-exposed-tags:nil
sgml-local-catalogs:("/etc/sgml/catalog" "/usr/share/xemacs21/xemacs-packages/etc/psgml-dtds/CATALOG")
sgml-local-ecat-files:("ECAT" "~/sgml/ECAT" "/usr/share/sgml/ECAT" "/usr/local/share/sgml/ECAT" "/usr/local/lib/sgml/ECAT")
End:
-->
