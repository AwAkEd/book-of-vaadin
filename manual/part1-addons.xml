<?xml version="1.0" encoding="UTF-8"?>

<chapter xml:id="addons">
	<title>Using Add-on Components</title>

	<para>
		This chapter describes the installation of add-on components from the Vaadin
		Directory and the use of commercial add-ons offered by Vaadin.
	</para>

	<section xml:id="addons.overview">
		<title>Overview</title>

		<para>
            In addition to the components, layouts, themes, and data sources built in into
            the core Vaadin library, many others are available as add-ons, either from the
            Vaadin Directory or from independent sources. Both commercial and free
            components exist under various licenses.
        </para>

		<para>
            Installation of themes, data sources, and components built with server-side
            component composition is simple, just dropping a JAR package in a project
            and, usually, compiling the included widget set (the client-side
            implementation).
        </para>
	</section>

    <section xml:id="addons.downloading">
        <title>Downloading Add-ons from Vaadin Directory</title>

        <para>
            Vaadin Directory at <uri>http://vaadin.com/directory/</uri> provides a rich
            collection of add-ons for Vaadin. You can download Directory add-on packages
            from the details page of an add-on.
        </para>

        <orderedlist>
            <listitem>
                <para>
                    Select the version; some add-ons have several versions available.
                    The latest is shown by default, but you can choose another the
                    version to download from the dropdown menu in the header of the
                    details page.
                </para>
            </listitem>
            <listitem>
                <para>
                    Click <guibutton>Download Now</guibutton> and save the JAR or Zip
                    file on your computer.
                </para>
            </listitem>
            <listitem>
                <para>
                    If the add-on is packaged in a Zip package, unzip the package and
                    follow any instructions provided inside the package. Typically,
                    you just need to copy a JAR file to your web project under the
                    <filename>WEB-INF/lib</filename> directory.
                </para>
            </listitem>

            <listitem>
                <para>
                    Update and recompile your project. In Eclipse, select the project
                    and press F5.
                </para>
            </listitem>

            <listitem>
                <para>
                    You need to compile the client-side implementations of the add-on
                    components, that is, a <emphasis>widget set</emphasis>. This is
                    the case for majority of add-ons, except for pure server-side,
                    theme, or data binding add-ons. You must recompile the widget set
                    if you install a new version of the add-on or the Vaadin
                    library. See the subsequent sections for detailed instructions for
                    compiling widget sets.
                </para>
            </listitem>
            
            <listitem>
                <para>
                    Update the project in web server and possibly restart the server.
                </para>
            </listitem>
        </orderedlist>

        <para>
            After trying out an add-on, you can give some feedback to the author of
            the add-on by rating the add-on with one to five stars and optionally
            leaving a comment.
        </para>

        <para>
            Please note the add-on license. While most commercial add-ons can be
            downloaded directly, you should note their license and other terms and
            conditions. Many are offered under a dual licensing agreement so that they
            can be used in open source projects for free, and many have a trial period
            for closed-source development.
        </para>
    </section>

    <section xml:id="advanced.addons.compiling-eclipse">
        <title>Compiling Add-on Widget Sets in Eclipse</title>

        <para>
            To be able to compile widget sets in Eclipse, you need to have the Vaadin
            Plugin for Eclipse installed, as instructed in <xref
                linkend="getting-started.environment.eclipse-plugin"/>.
        </para>

        <para>
            An application can only have one widget set, so if you use multiple
            add-ons and possibly your own custom widgets, they need to be combined to
            a single widget set that inherits them. You can create the combining
            widget set manually and the Eclipse plugin simply update it when you add
            new add-ons. Otherwise, the Eclipse plugin automatically creates a
            project-specific widget set under the project root source folder.
        </para>

        <para>
            The Eclipse plugin compiles widget sets automatically by default. They do
            not normally need to be recompiled after changes to server-side classes,
            so if the automatic recompilation get annoying, disable it from the
            project settings.
        </para>

        <para>
            To compile the widget set(s) manually, click the <guilabel>Compile Vaadin
                widgets</guilabel> button in Eclipse toolbar or press
            <keycombo><keycap>Ctrl</keycap><keycap>6</keycap></keycombo>. You must
            recompile the widget set(s) always when you install a new version of the
            add-on or of the Vaadin library.
        </para>

        <!-- TODO: Better icon as requested in #3692. -->
        <figure xml:id="figure.advanced.addons.compiling-eclipse.toolbar">
            <title>The <guibutton>Compile Vaadin widgets</guibutton> Button in Eclipse Toolbar</title>
            <mediaobject>
                <imageobject role="html">
                    <imagedata align="center" fileref="img/eclipse/widgetset-compiling-toolbar-lo.png"/>
                </imageobject>
                <imageobject role="fo">
                    <imagedata scale="100" smallscale="70%" align="center" fileref="img/eclipse/widgetset-compiling-toolbar-hi.png"/>
                </imageobject>
            </mediaobject>
        </figure>

        <para>
            Further information on defining and compiling widget sets is given in
            <xref linkend="gwt.eclipse.compiling"/>, <xref linkend="gwt.widgetset"/>,
            and <xref linkend="gwt.development.compiler"/>.
        </para>
    </section>

    <section xml:id="addons.compiling-ant">
        <title>Compiling Add-on Widget Sets with an Ant Script</title>

        <para>
            The Vaadin installation package (the Zip package) includes an example Ant
            build script for compiling a widget set. The script is located in
            <filename>WebContent/docs/example-source/build-widgetset.xml</filename>. Once
            you have unpacked the installation package and changed to the directory in
            a command-line window, you can enter:
        </para>

        <screen><prompt>$</prompt> <command>ant -f WebContent/docs/example-source/build-widgetset.xml</command></screen>

        <para>
            You can copy the build script to your project. See <xref
                linkend="gwt.development.compiler"/> for details on configuring the build
            script and the available build targets, and <xref
                linkend="gwt.widgetset"/> for information on the widget set definition
            file.
        </para>

        <para>
            If you are using an IDE such as Eclipse, <emphasis>always</emphasis>
            remember to refresh the project after compiling the widget set.
        </para>
    </section>

    <section xml:id="advanced.addons.troubleshooting">
        <title>Troubleshooting</title>
        
        <para>
            If you experience problems, do the following:
        </para>

        <itemizedlist>
            <listitem>
                <para>
                    Check the <filename>.gwt.xml</filename> widget set definition file
                    under the widget set folder in the project root package. For
                    example, if the project root package is
                    <filename>com.example.myproject</filename>, the widget set
                    definition file would be
                    <filename>com.example.myproject.widgetset.MyprojectWidgetset.gwt.xml</filename>. See
                    <xref linkend="gwt.widgetset"/> for details on the contents of the
                    widget set definition file.
                </para>
            </listitem>

            <listitem>
                <para>
                    Check the <filename>WEB-INF/web.xml</filename> deployment descriptor
                    and see that the servlet for your application has a widget set
                    parameter, such as the following:
                </para>

                <programlisting><?pocket-size 65% ?><![CDATA[<init-param>
  <description>Application widgetset</description>
  <param-name>widgetset</param-name>
  <param-value>com.example.myproject.widgetset.MyprojectWidgetset</param-value>
</init-param>]]></programlisting>
                </listitem>

            <listitem>
                <para>
                    See the <filename>VAADIN/widgetsets</filename> directory and check
                    that the widget set appears there. You can remove it and recompile to
                    see that compilation works properly.
                </para>
            </listitem>
            <listitem>
                <para>
                    Use the <guilabel>Net</guilabel> tab in Firebug to see that the widget
                    set (and theme) is loaded properly.
                </para>
            </listitem>
            <listitem>
                <para>
                    Use the <uri>?debug</uri> parameter for the application to see if
                    there is any version conflict between the widget set and the Vaadin
                    library, or the themes. See <xref
                        linkend="advanced.debug-production-modes.debug.mode"/> for details.
                </para>
            </listitem>
            <listitem>
                <para>
                    Refresh and recompile the project. In Eclipse, select the project and
                    press <keycap>F5</keycap>, stop the server, clean the server temporary
                    directories, and restart it.
                </para>
            </listitem>
            <listitem>
                <para>
                    Check the Error Log view in Eclipse (or the IDE you use).
                </para>
            </listitem>
        </itemizedlist>

        <para>
            For more specific problems related to widget sets definition and compilation,
            see <xref linkend="gwt.development.troubleshooting"/>.
        </para>
    </section>

    <section xml:id="addons.removing">
        <title>Removing Widget Sets</title>

        <para>
            Version mismatch problems with custom widget sets are a common source of grief
            for many beginners in Vaadin. If you need add-ons or your own custom
            components that include widget sets, you of course need to compile them, but
            otherwise it is unnecessary.
        </para>

        <para>
            If you do not use any such add-ons or your own custom components, do the
            following:
        </para>

        <orderedlist>
            <listitem>
                <para>
                    If you are using the Eclipse plugin, disable automatic widget set
                    compilation from project preferences, in the
                    <guilabel>Vaadin</guilabel> category, by selecting <guilabel>Suspend
                    automatic widgetset builds</guilabel>. This prevents accidental
                    compilation of the unnecessary widget sets. You may want to do this
                    anyhow as the automatic builds can be annoying. You can still always
                    build the widget set with the button in the toolbar.
                    </para>
            </listitem>
            <listitem>
                <para>
                    Remove all widget set folders from under the
                    <filename>VAADIN/widgetsets</filename> folder.
                </para>
            </listitem>
            <listitem>
                <para>
                    Edit the <filename>WEB-INF/web.xml</filename> file and remove the
                    <parameter>widgetset</parameter> init parameter from the servlet. It
                    looks as follows:
                </para>

                <programlisting><?pocket-size 65% ?><![CDATA[<init-param>
  <description>Application widgetset</description>
  <param-name>widgetset</param-name>
  <param-value>com.vaadin.demo.colorpicker.widgetset.ColorPickerWidgetSet</param-value>
</init-param>]]></programlisting>
                </listitem>

            <listitem>
                <para>
                    Refresh the project. In Eclipse, select the project and press F5,
                    stop the server, clean the server temporary directories, and
                    restart it.
                </para>
            </listitem>
        </orderedlist>

        <para>
            At least in development environments, if you have extracted Vaadin themes to
            the <filename>VAADIN/themes</filename> folder, you should remove them and let
            them be loaded dynamically from the Vaadin JAR.
        </para>
    </section>
</chapter>
<!-- Keep this comment at the end of the file
Local variables:
mode: xml
sgml-omittag:nil
sgml-shorttag:nil
sgml-namecase-general:nil
sgml-general-insert-case:lower
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:4
sgml-indent-data:t
sgml-parent-document:nil
sgml-exposed-tags:nil
sgml-local-catalogs:("/etc/sgml/catalog" "/usr/share/xemacs21/xemacs-packages/etc/psgml-dtds/CATALOG")
sgml-local-ecat-files:("ECAT" "~/sgml/ECAT" "/usr/share/sgml/ECAT" "/usr/local/share/sgml/ECAT" "/usr/local/lib/sgml/ECAT")
End:
-->
