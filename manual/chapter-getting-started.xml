<?xml version="1.0" encoding="UTF-8"?>

<chapter xml:id="getting-started">
	<title>Getting Started with Vaadin</title>

	<para>
		This chapter gives practical instructions for installing the recommended toolchain
		and either the Vaadin Plugin for Eclipse or, if you use another IDE or no IDE at
		all, the Vaadin JAR.
	</para>

	<section xml:id="getting-started.environment">
		<title>Setting up the Development Environment</title>
		
		<para>
			This section gives a step-by-step guide for setting up a development
			environment. Vaadin supports a wide variety of tools, so you can use any IDE
			for writing the code, most web browsers for viewing the results, any operating
			system or processor supported by the Java 1.5 platform, and almost any Java
			web server for deploying the application.
		</para>

		<para>
			In this example, we use the following toolchain:
        </para>

        <itemizedlist>
            <listitem><link xlink:href="http://www.microsoft.com/windowsxp/">Windows XP</link>, Linux, or Mac OS X</listitem>
            <listitem><link xlink:href="http://java.sun.com/javase/downloads/index.jsp">Sun Java 2 Standard Edition 6.0</link> (JDK 1.6 or newer is required)</listitem>
            <listitem><link xlink:href="http://www.eclipse.org/downloads/">Eclipse IDE for Java EE Developers</link></listitem>
            <listitem><link xlink:href="http://tomcat.apache.org/">Apache Tomcat 7.0 (Core) or newer</link></listitem>
            <listitem><link xlink:href="http://www.getfirefox.com/">Mozilla Firefox</link> browser</listitem>
            <listitem><link xlink:href="http://www.getfirebug.com/">Firebug</link> debug tool (optional)</listitem>
            <listitem><link xlink:href="http://vaadin.com/download/">Vaadin Framework</link></listitem>
        </itemizedlist>

        <para>
			The above reference toolchain is a good choice of tools, but you can use
			almost any tools you are comfortable with.
		</para>

		<figure xml:id="figure.toolchain">
			<title>Development Toolchain and Process</title>
			<mediaobject>
				<imageobject role="html">
					<imagedata align="center" fileref="img/intro/toolchain-lo.png"/>
				</imageobject>
				<imageobject role="fo">
					<imagedata scale="75" smallscale="100%" align="center" fileref="img/intro/toolchain-hi.png"/>
				</imageobject>
			</mediaobject>
		</figure>

		<para>
			<xref linkend="figure.toolchain"/> illustrates the development environment and
			process. You develop your application as an Eclipse project. The project must
			include, in addition to your source code, the Vaadin Library. It can also
			include project-specific themes.
		</para>

		<para>
			You must compile and deploy a project to a web container before you can use
			use it. You can deploy a project through the Web Tools Platform for Eclipse,
			which allows automatic deployment of web applications from Eclipse. You can
			deploy a project also manually, by creating a web application archive (WAR)
			and deploying it through the web container's interface.
		</para>

		<section xml:id="getting-started.environment.java">
			<title>Installing Java SDK</title>

			<para>
				Java SDK is required by Vaadin and also by the Eclipse IDE.
				Vaadin is compatible with Java 1.6 and later editions. 
			</para>

			<section>
				<title>Windows</title>

				<orderedlist>
					<listitem>
						<para>
							Download Sun Java 2 Standard Edition 6.0 from 
							<link xlink:href="http://java.sun.com/javase/downloads/index.jsp">
							http://java.sun.com/javase/downloads/index.jsp</link>
						</para>
					</listitem>
					
					<listitem>
						<para>
							Install the Java SDK by running the installer. The default options 
							are fine.
						</para>
					</listitem>
				</orderedlist>			 
			</section>

			<section>
				<title>Linux / UNIX</title>

				<orderedlist>
					<listitem>
						<para> 
						Download Sun Java 2 Standard Edition 6.0 from <link xlink:href="http://java.sun.com/javase/downloads/index.jsp">
						http://java.sun.com/javase/downloads/index.jsp</link>
						</para>
					</listitem>
					<listitem>
						<para>
						Decompress it under a suitable base directory, such as
					<filename>/opt</filename>. For example, for Java SDK, enter (either as
					root or with <command>sudo</command> in Linux):

					<screen><prompt>#</prompt> <command>cd</command> <replaceable>/opt</replaceable>
<prompt>#</prompt> <command>sh</command> <replaceable>(path-to-installation-package)/jdk-6u1-linux-i586.bin</replaceable></screen>

					and follow the instructions in the installer.
						
						</para>
						</listitem>
					</orderedlist>
			</section>
		</section>
		
		<section xml:id="getting-started.environment.eclipse">
			<title>Installing Eclipse IDE</title>

			<section>
				<title>Windows</title>

				<orderedlist>
					<listitem>
						<para>
							Download Eclipse IDE for Java EE Developers (Ganymede version) from 
							<link xlink:href="http://www.eclipse.org/downloads/">
							http://www.eclipse.org/downloads/</link>
						</para>
					</listitem>
					
					<listitem>
						<para>
							Decompress the Eclipse IDE package to a suitable
							directory. You are free to select any directory and to use any
							ZIP decompressor, but in this example we decompress the ZIP
							file by just double-clicking it and selecting "Extract all
							files" task from Windows compressed folder task. In our
							installation example, we use <filename>C:\dev</filename> as
							the target directory.
						</para>
					</listitem>
										
					<para>
						Eclipse is now installed in
						<filename>C:\dev\eclipse</filename> and can be started from
						there (by double clicking eclipse.exe).
					</para>
					
				</orderedlist>
			</section>

			<section>
				<title>Linux / UNIX</title>

				<para>
					You have two basic options for installing Eclipse in Linux and UNIX:
					you can either install it using the package manager of your
					operating system or by downloading and installing the packages
					manually. The <emphasis>manual installation method is
					recommended</emphasis>, because the latest versions of the packages
					available in a Linux package repository may be incompatible with
					Eclipse plugins that are not installed using the package
					manager.
				</para>

                <orderedlist>
					<listitem>
						<para>
                            Download Download Eclipse IDE for Java EE Developers (Ganymede version) from  
							<link xlink:href="http://www.eclipse.org/downloads/">
								http://www.eclipse.org/downloads/</link>
                        </para>
					</listitem>
					<listitem>
                        <para>
                            Decompress the Eclipse package into a suitable base directory.
                            It is important to make sure that there is no old Eclipse
                            installation in the target directory. Installing a new version
                            on top of an old one probably renders Eclipse unusable.
                        </para>
					</listitem>
					<listitem>
                        <para>
                            Eclipse should normally be installed as a regular user, as
                            this makes installation of plugins easier. Eclipse also stores
                            some user settings in the installation directory. To install
                            the package, enter:

                            <screen><prompt>$</prompt> <command>tar</command> zxf <replaceable>(path-to-installation-package)/eclipse-jee-ganymede-SR2-linux-gtk.tar.gz</replaceable></screen>

                            This will extract the package to a subdirectory with the name
                            <filename>eclipse</filename>.
                        </para>
					</listitem>

                    <listitem>
                        <para>
                            You may wish to add the Eclipse installation directory and the
                            <filename>bin</filename> subdirectory in the installation directory of
                            Java SDK to your system or user PATH.
                        </para>
                    </listitem>
				</orderedlist>

				<para>
					An alternative to the above procedure is to use the package management
					system of your operating system. For example, in Ubuntu Linux, which
					includes Sun Java SDK and Eclipse in its APT repository, you can
					install the programs from a package manager GUI or from command-line
					with a command such as:
				</para>

                <screen><prompt>$</prompt> <command>sudo apt-get</command> install sun-java6-jdk eclipse</screen>

				<para>
					This is, however, <emphasis>not recommended</emphasis>, because the
					Eclipse package may not include all the necessary Java EE tools, most
					importantly the Web Standard Tools, and it may cause incompatibilities
					with some components that are not installed with the package
					management system of your operating system.
				</para>

			</section>
		</section>

		<section xml:id="getting-started.environment.tomcat">
			<title>Installing Apache Tomcat</title>

			<para>
				Apache Tomcat is a lightweight Java web server suitable for both
				development and production. There are many ways to install it, but here we
				simply decompress the installation package.
			</para>

			<para>
				<emphasis>Apache Tomcat should be installed with user
				permissions.</emphasis> During development, you will be running 
				Eclipse or some other IDE with user permissions, but deploying 
				web applications to a Tomcat server that is installed system-wide 
				requires administrator or root permissions.
			</para>

			<orderedlist>
				<listitem>
					<para>
						Download the installation package:
					</para>
					<para>
						Apache Tomcat 7.0 (Core Binary Distribution) from
						<uri>http://tomcat.apache.org/</uri>
					</para>
				</listitem>
	
				<listitem>
					<para>
						Decompress Apache Tomcat package to a suitable target directory,
						such as <filename>C:\dev</filename> (Windows) or
						<filename>/opt</filename> (Linux or Mac OS X). The Apache Tomcat
						home directory will be
						<filename>C:\dev\apache-tomcat-7.0.x</filename> or
						<filename>/opt/apache-tomcat-7.0.x</filename>,
						respectively.
					</para>
				</listitem>
										
			</orderedlist>			 
		</section>

		<section xml:id="getting-started.environment.firebug">
			<title>Firefox and Firebug</title>

			<para>
				Vaadin supports many web browsers and you can use any of them for
				development. If you plan to create a custom theme, customized layouts, or
				create new components, we recommend that you use Firefox together with
				Firebug.
			</para>
			
			<para>
				If you do not have Firefox installed already, go to <link
				xlink:href="http://www.getfirefox.com/"> www.getfirefox.com</link> and
				download and run the installer. In Linux, you can install it also with a
				package manager.
			</para>

			<para>
				<emphasis>Optional</emphasis>. After installing Firefox, use it to open <link
				xlink:href="http://www.getfirebug.com/"> http://www.getfirebug.com/</link>. Follow
				the instructions on the site to install the latest stable version of Firebug 
				available for the browser. You might need to tell Firefox to allow the installation
				by clicking the yellow warning bar at the top of the browser-window.
			</para>
			
			<para>
                When Firebug is installed, it can be enabled at any time from the corner
                of the Firefox window. <xref linkend="figure.firebug.calc"/> shows an
                example of what Firebug looks like.
            </para>

			 <figure xml:id="figure.firebug.calc">
				<title>Firebug Debugger for Firefox</title>
				<mediaobject>
					<imageobject role="html">
						<imagedata align="center" fileref="img/intro/firebug.png"/>
					</imageobject>
					<imageobject role="fo">
						<imagedata scale="90" smallscale="100%" align="center" fileref="img/intro/firebug.png"/>
					</imageobject>
				</mediaobject>
			</figure>

			<para>
				Now that you have installed the development environment, you can proceed to
				creating your first application.
			</para>
		</section>
    </section>

	<section xml:id="getting-started.package">
		<title>Installing Vaadin</title>

		<para>
			This section gives instructions for installing Vaadin in your development
			environment. You have two basic options for installing:
		</para>

        <orderedlist>
            <listitem>If you use Eclipse, we recommend that you can install the Vaadin Plugin for Eclipse, as described in <xref linkend="getting-started.environment.eclipse-plugin"/></listitem>
            <listitem>Otherwise, download and install the JAR package, as described in <xref linkend="getting-started.package.installing"/>.</listitem>
        </orderedlist>

        <para>
            These options are explained in detail in the following sections.
        </para>

		<section xml:id="getting-started.environment.eclipse-plugin">
			<title>Vaadin Plugin for Eclipse</title>
	
			<para>
				If you are using the Eclipse IDE, using the Vaadin plugin should help
				greatly. The plugin includes:
			</para>

			<itemizedlist>
				<listitem>
					<para>An integration plugin with <emphasis>wizards</emphasis> for
					creating new Vaadin-based projects, themes, and client-side widgets
					and widget sets.</para>
				</listitem>
				<listitem>
					<para>A <emphasis>visual editor</emphasis> for editing custom
					composite user interface components in a WYSIWYG fashion. With full
					round-trip support from source code to visual model and back, the
					editor integrates seamlessly with your development process.</para>
				</listitem>
				<listitem>
					<para>A version of <emphasis>Book of Vaadin</emphasis> that you can
					browse in the Eclipse Help system.</para>
				</listitem>
			</itemizedlist>

			<para>
				You can install the plugin as follows:
			</para>
	
			<orderedlist>
				<listitem>
					<para>Start Eclipse.</para>
				</listitem>
				<listitem>
                    <para>Select <menuchoice><guimenu>Help</guimenu><guimenuitem>Software
                    Updates...</guimenuitem></menuchoice>.</para>
				</listitem>
				<listitem>
                    <para>Select the <guibutton>Available Software</guibutton> tab.</para>
				</listitem>
				<listitem>
					<para>Add the Vaadin plugin update site by clicking <guibutton>Add
					Site...</guibutton>.</para>

                    <screenshot>
                        <mediaobject>
                            <imageobject role="html">
                                <imagedata align="center" fileref="img/eclipse/plugin-install-addsite.png"/>
                            </imageobject>
                            <imageobject role="fo">
                                <imagedata scale="70" smallscale="100%" align="center" fileref="img/eclipse/plugin-install-addsite.png"/>
                            </imageobject>
                        </mediaobject>
                    </screenshot>
                    
                    <para>Enter the URL of the Vaadin Update Site: <link
                    xlink:href="http://vaadin.com/eclipse">http://vaadin.com/eclipse</link>
                    and click <guibutton>OK</guibutton>. The Vaadin site should now appear
                    in the <guilabel>Software Updates</guilabel> window.</para>
				</listitem>
	
				<listitem>
					<para>Select all the Vaadin plugins in the tree.</para>

                    <screenshot>
                        <mediaobject>
                            <imageobject role="html">
                                <imagedata align="center" fileref="img/eclipse/plugin-install-available.png"/>
                            </imageobject>
                            <imageobject role="fo">
                                <imagedata scale="70" smallscale="100%" align="center" fileref="img/eclipse/plugin-install-available.png"/>
                            </imageobject>
                        </mediaobject>
                    </screenshot>

					<para>Finally, click <guibutton>Install</guibutton>.</para>
				</listitem>
			</orderedlist>
	
			<para>
				Detailed and up-to-date installation instructions for the Eclipse plugin can be found at 
				<link xlink:href="http://vaadin.com/eclipse">http://vaadin.com/eclipse</link>. 
			</para>
			
			<section>
				<title>Updating the Vaadin Plugin</title>
				
                <para>
                    If you have automatic updates enabled in Eclipse (see
                    <menuchoice><guimenu>Window</guimenu>
                    <guisubmenu>Preferences</guisubmenu>
                    <guisubmenu>Install/Update</guisubmenu><guimenuitem>Automatic
                    Updates</guimenuitem></menuchoice>), the Vaadin plugin will be updated
                    automatically along with other plugins. Otherwise, you can update the
                    Vaadin plugin (there are actually multiple plugins) manually as
                    follows:
                </para>

                <orderedlist>
                    <listitem>
                        <para>Select
                        <menuchoice><guimenu>Help</guimenu><guimenuitem>Software
                        Updates...</guimenuitem></menuchoice>, the <guilabel>Software
                        Updates and Add-ons</guilabel> window will open.</para>
                    </listitem>
                    <listitem>
                        <para>Select the <guilabel>Installed Software</guilabel>
                        tab.</para>
                    </listitem>
                    <listitem>
                        <para>If you want to update only the Vaadin plugins, select them
                        in the list by clicking the plugins and holding the
                        <keycap>Ctrl</keycap> key pressed for all but the first.</para>

                        <screenshot>
                            <mediaobject>
                                <imageobject role="html">
                                    <imagedata align="center" fileref="img/eclipse/plugin-update-installed.png"/>
                                </imageobject>
                                <imageobject role="fo">
                                    <imagedata scale="70" smallscale="100%" align="center" fileref="img/eclipse/plugin-update-installed.png"/>
                                </imageobject>
                            </mediaobject>
                        </screenshot>

                    </listitem>
                    <listitem>
                        <para>
                            Click <guibutton>Update</guibutton>.
                        </para>
                    </listitem>
                </orderedlist>

                <para>
                    Notice that updating the Vaadin plugin updates only the plugin and
                    <emphasis>not</emphasis> the Vaadin library, which is project
                    specific. See below for instructions for updating the library.
                </para>
			</section>
	
			<section>
                <title>Updating the Vaadin Library</title>

                <para>
                    Updating the Vaadin plugin does not update Vaadin library. The library
                    is project specific, as a different version might be required for
                    different projects, so you have to update it separately for each
                    project. To change the library to a newer (or some other) version, do
                    as follows:
                </para>

                <orderedlist>
                    <listitem>
                        <para>
                            Select the project in the <guilabel>Project
                            Explorer</guilabel> and select
                            <menuchoice><guimenu>Project</guimenu><guimenuitem>Preferences</guimenuitem></menuchoice>
                            or press
                            <keycombo><keycap>Alt</keycap><keycap>Enter</keycap></keycombo>.
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            In the project preferences window that opens, select
                            <menuchoice><guimenu>Vaadin</guimenu><guimenuitem>Vaadin
                            Version</guimenuitem></menuchoice>.
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            If the version that you want to use is not included in the
                            <guilabel>Vaadin version</guilabel> drop-down list, click
                            <guibutton>Download</guibutton> to open the download
                            window.
                        </para>

                        <screenshot>
                            <mediaobject>
                                <imageobject role="html">
                                    <imagedata align="center" fileref="img/intro/myproject-vaadinversion-shorter.png"/>
                                </imageobject>
                                <imageobject role="fo">
                                    <imagedata scale="70" smallscale="100%" align="center" fileref="img/intro/myproject-vaadinversion-shorter.png"/>
                                </imageobject>
                            </mediaobject>
                        </screenshot>

                        <para>
                            If you want to use a development version, select
                            <guilabel>Show pre-release versions and nightly
                            builds</guilabel>. Select the version that you want to
                            download and click <guibutton>OK</guibutton>.
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            Select the version that you want to use from the
                            <guilabel>Vaadin version</guilabel> down-down list and click
                            <guibutton>Apply</guibutton>.
                        </para>
                    </listitem>
                </orderedlist>

                <para>
                    You can observe that the new library appears in the
                    <filename>WebContent/WEB-INF/lib</filename> folder.
                </para>
            </section>
		</section>

		<section xml:id="getting-started.package.installing">
			<title>Installing the JAR Package</title>

			<para>
				You can install the Vaadin JAR package in a few simple steps:
			</para>

			<orderedlist>
				<listitem>
					<para>
						Download the newest Vaadin JAR package from the download
						page at <link
						xlink:href="http://vaadin.com/download/">http://vaadin.com/download/</link>.
					</para>
				</listitem>
				<listitem>
					<para>
						Put the JAR in the <filename>WEB-APP/lib</filename> web library
						folder in the project.
					</para>
				</listitem>
			</orderedlist>

            <para>
                 The location of the <filename>WEB-APP/lib</filename> folder depends on
                 the project organization.
            </para>

            <itemizedlist>
                <listitem>
                    <para>
                        In Eclipse projects: <filename>WebContent/WEB-INF/lib</filename>.
                    </para>
                </listitem>
                <listitem>
                    <para>
                        In Maven projects: <filename>src/main/webapp/WEB-INF/lib</filename>.
                    </para>
                </listitem>
            </itemizedlist>
		</section>
	</section>

	<section xml:id="getting-started.first-project">
		<title>Your First Project with Vaadin</title>

		<para>
			This section gives instructions for creating a new Eclipse project using the
			Vaadin Plugin. The task will include the following steps:
		</para>

		<orderedlist>
			<listitem>
				<para>Create a new project</para>
			</listitem>
			<listitem>
				<para>Write the source code</para>
			</listitem>
			<listitem>
				<para>Configure and start Tomcat (or some other web server)</para>
			</listitem>
			<listitem>
				<para>Open a web browser to use the web application</para>
			</listitem>
		</orderedlist>

		<para>
			We also show how you can debug the application in the debug mode in Eclipse.
		</para>
		
		<para>
			This walkthrough assumes that you have already installed the Vaadin Plugin and
			set up your development environment, as instructed in <xref
			linkend="getting-started.package.installing"/> and <xref
			linkend="getting-started.environment"/>.
		</para>

		<section xml:id="getting-started.first-project.creation">
			<title>Creating the Project</title>

			<para>
				Let us create the first application project with the tools installed in
				the previous section. First, launch Eclipse and follow the following
				steps:
			</para>

			<orderedlist>
				<listitem>
					Start creating a new project by selecting from the menu
					<menuchoice><guimenu>File</guimenu><guisubmenu>New</guisubmenu><guimenuitem>Project...</guimenuitem></menuchoice>.
				</listitem>

				<?dbfo-need height="8cm" ?>
				<listitem>
					In the <guilabel>New Project</guilabel> window that opens, select
					<menuchoice><guimenu>Web</guimenu><guimenuitem>Vaadin
					Project</guimenuitem></menuchoice> and click
					<guibutton>Next</guibutton>.

					<screenshot>
						<mediaobject>
							<imageobject role="html">
								<imagedata align="center" fileref="img/intro/myproject-new-vaadin.png"/>
							</imageobject>
							<imageobject role="fo">
								<imagedata scale="70" smallscale="100%" align="center" fileref="img/intro/myproject-new-vaadin.png"/>
							</imageobject>
						</mediaobject>
					</screenshot>
				</listitem>

				<?dbfo-need height="8cm" ?>
				<listitem>
					<para>
                        In the <guilabel>Vaadin Project</guilabel> step, you need to set
                        the basic web project settings. You need to give at least the
                        project name and the runtime; the default values should be good
                        for the other settings.
					</para>

					<screenshot>
						<mediaobject>
							<imageobject role="html">
								<imagedata align="center" fileref="img/intro/myproject-settings.png"/>
							</imageobject>
							<imageobject role="fo">
								<imagedata scale="70" smallscale="100%" align="center" fileref="img/intro/myproject-settings.png"/>
							</imageobject>
						</mediaobject>
					</screenshot>

                    <variablelist>
                        <varlistentry>
                            <term><guilabel>Project name</guilabel></term>
                            <listitem>
                                <para>
                                    Give the project a name. The name should be a valid
                                    identifier usable cross-platform as a filename and
                                    inside a URL, so using only lower-case alphanumerics,
                                    underscore, and minus sign is recommended.
                                </para>
                            </listitem>
                        </varlistentry>
                        <varlistentry>
                            <term><guilabel>Use default</guilabel></term>
                            <listitem>
                                <para>
                                    Defines the directory under which the project is
                                    created. You should normally leave it as it is. You
                                    may need to set the directory, for example, if you are
                                    creating an Eclipse project on top of a
                                    version-controlled source tree.
                                </para>
                            </listitem>
                        </varlistentry>
                        <varlistentry>
                            <term><guilabel>Target runtime</guilabel></term>
                            <listitem>
                                <para>
                                    Defines the application server to use for deploying
                                    the application. The server that you have installed,
                                    for example Apache Tomcat, should be selected
                                    automatically. If not, click
                                    <guibutton>New</guibutton> to configure a new server under Eclipse.
                                </para>
                            </listitem>
                        </varlistentry>
                        <varlistentry>
                            <term><guilabel>Configuration</guilabel></term>
                            <listitem>
                                <para>
                                    Select the configuration to use; you should normally
                                    use the default configuration for the application
                                    server. If you need to modify the project facets,
                                    click <guibutton>Modify</guibutton>.
                                </para>
                            </listitem>
                        </varlistentry>
                        <varlistentry>
                            <term><guilabel>Deployment configuration</guilabel></term>
                            <listitem>
                                <para>
									This setting defines the environment to which the
									application will be deployed, to generate the
									appropriate project directory layout and configuration
									files. The choises are:
								</para>

								<itemizedlist>
									<listitem><guilabel>Servlet</guilabel> (default)</listitem>
									<listitem><guilabel>Google App Engine Servlet</guilabel></listitem>
									<listitem><guilabel>Generic Portlet (Portlet 2.0)</guilabel></listitem>
									<listitem><guilabel>Old Portlet (Portlet 1.0)</guilabel></listitem>
								</itemizedlist>

								<para>
									The further steps in the New Project Wizard depend on
									the selected deployment configuration; the steps
									listed in this section are for the default servlet
									configuration. See <xref linkend="advanced.gae"/> and
									<xref linkend="portal"/> for instructions regarding
									the use of Vaadin in the alternative environments.
                                </para>
                            </listitem>
                        </varlistentry>
                        <varlistentry>
                            <term><guilabel>Vaadin version</guilabel></term>
                            <listitem>
                                <para>
                                    Select the Vaadin version to use. The drop-down list
                                    shows, by default, the latest available version of
                                    Vaadin. If you want to use another version, click
                                    <guibutton>Download</guibutton>. The dialog that opens
                                    lists all official releases of Vaadin.
                                </para>

                                <screenshot>
                                    <mediaobject>
                                        <imageobject role="html">
                                            <imagedata align="center" fileref="img/intro/myproject-vaadinversion-shorter.png"/>
                                        </imageobject>
                                        <imageobject role="fo">
                                            <imagedata scale="60" smallscale="100%" align="center" fileref="img/intro/myproject-vaadinversion-shorter.png"/>
                                        </imageobject>
                                    </mediaobject>
                                </screenshot>

                                <para>
                                    If you want to use a pre-release version or a nightly
                                    development build, select <guilabel>Show pre-release
                                    versions and nightly builds</guilabel>. Select a
                                    version and click <guibutton>Ok</guibutton> to
                                    download it. It will appear as a choise in the
                                    drop-down list.
                                </para>

                                <para>
                                    If you want to change the project to use another
                                    version of Vaadin, for example to upgrade to a newer
                                    one, you can go to project settings and download and
                                    select the other version.
                                </para>
                            </listitem>
                        </varlistentry>
                    </variablelist>

                    <!-- TODO: Is this any longer necessary?
					<para>
						Change the configuration to <guilabel>Vaadin Project</guilabel>. If that 
						configuration is not available, install Vaadin Eclipse Plugin as described in the section
						<xref linkend="getting-started.environment.eclipse-plugin"/>.
					</para> -->

					<para>You can click <guibutton>Finish</guibutton> here to use the
					defaults for the rest of the settings, or click
					<guibutton>Next</guibutton>.</para>

				</listitem>

				<?dbfo-need height="8cm" ?>
				<listitem>
                    <para>
                        The settings in the <guilabel>Web Module</guilabel> step define
                        the basic servlet-related settings and the structure of the web
                        application project. All the settings are pre-filled, and you
                        should normally accept them as they are.
                    </para>

					<screenshot>
						<mediaobject>
							<imageobject role="html">
								<imagedata align="center" fileref="img/intro/myproject-web.png"/>
							</imageobject>
							<imageobject role="fo">
								<imagedata scale="70" smallscale="100%" align="center" fileref="img/intro/myproject-web.png"/>
							</imageobject>
						</mediaobject>
					</screenshot>

                    <variablelist>
                        <varlistentry>
                            <term><guilabel>Context Root</guilabel></term>
                            <listitem>
                                <para>
                                    The context root (of the application) identifies the
                                    application in the URL used for accessing it. For
                                    example, if the server runs in the
                                    <literal>apps</literal> context and the application
                                    has <literal>myproject</literal> context, the URL
                                    would be <uri>http://example.com/app/url</uri>. The
                                    wizard will suggest <filename>myproject</filename> for
                                    the context name.
                                </para>
                            </listitem>
                        </varlistentry>
                        <varlistentry>
                            <term><guilabel>Content Directory</guilabel></term>
                            <listitem>
                                <para>
                                    The directory containing all the content to be
                                    included in the servlet and served by the web
                                    server. The directory is relative to the root
                                    directory of the project.
                                </para>
                            </listitem>
                        </varlistentry>
                        <varlistentry>
                            <term><guilabel>Java Source Directory</guilabel></term>
                            <listitem>
                                <para>
                                    The default source directory containing the
                                    application sources. The <filename>src</filename>
                                    directory is suggested; another convention common in
                                    web applications is to use
                                    <filename>WebContent/WEB-INF/src</filename>, in which
                                    case the sources are included in the servlet (but not
                                    served in HTTP requests).
                                </para>
                            </listitem>
                        </varlistentry>
                        <varlistentry>
                            <term><guilabel>Generate deployment descriptor</guilabel></term>
                            <listitem>
                                <para>
                                    Should the wizard generate the
                                    <filename>web.xml</filename> deployment descriptor
                                    required for running the servlet in the
                                    <filename>WebContent/WEB-INF</filename>
                                    directory. Strongly recommended. See <xref
                                    linkend="application.environment.web-xml"/> for more details.
                                </para>
                            </listitem>
                        </varlistentry>
                    </variablelist>

					<para>
						 This will be the sub-path in the URL, for example
						<filename>http://localhost:8080/myproject</filename>. The default for the
						application root will be <filename>/</filename> (root).
					</para>
			
					<para>
						You can just accept the defaults and click
						<guibutton>Next</guibutton>.
					</para>
				</listitem>

				<?dbfo-need height="8cm" ?>
				<listitem>
					<para>
						The <guilabel>Vaadin project</guilabel> step page has various
						Vaadin-specific application settings. If you are trying Vaadin out
						for the first time, you should not need to change anything. You
						can set most of the settings afterwards, except the creation of
						the portlet configuration.
					</para>
				
					<screenshot>
						<mediaobject>
							<imageobject role="html">
								<imagedata align="center" fileref="img/intro/myproject-vaadin.png"/>
							</imageobject>
							<imageobject role="fo">
								<imagedata scale="50" smallscale="100%" align="center" fileref="img/intro/myproject-vaadin.png"/>
							</imageobject>
						</mediaobject>
					</screenshot>

                    <variablelist>
                        <varlistentry>
                            <term><guilabel>Create project template</guilabel></term>
                            <listitem>
                                <para>
                                    Make the wizard create an application class
                                    stub.
                                </para>
                            </listitem>
                        </varlistentry>
                        <varlistentry>
                            <term><guilabel>Application Name</guilabel></term>
                            <listitem>
                                <para>
                                    The name of the application appears in the browser
                                    window title.
                                </para>
                            </listitem>
                        </varlistentry>
                        <varlistentry>
                            <term><guilabel>Base package name</guilabel></term>
                            <listitem>
                                <para>
                                    The name of the Java package under which the
                                    application class is to be placed.
                                </para>
                            </listitem>
                        </varlistentry>
                        <varlistentry>
                            <term><guilabel>Application class name</guilabel></term>
                            <listitem>
                                <para>
                                    Name of the Vaadin application class.
                                </para>
                            </listitem>
                        </varlistentry>
                        <varlistentry>
                            <term><guilabel>Create portlet configuration</guilabel></term>
                            <listitem>
                                <para>
                                    When this option is selected, the wizard will create
                                    the files needed for running the application in a
                                    portal. See <xref linkend="portal"/> for more
                                    information on portlets.
                                </para>
                            </listitem>
                        </varlistentry>
                    </variablelist>

                    <para>
                        Finally, click <guibutton>Finish</guibutton> to create the project.
                    </para>
				</listitem>

				<listitem>
					<para>
						Eclipse may ask to switch to J2EE perspective. A Dynamic Web
						Project uses an external web server and the J2EE perspective
						provides tools to control the server and manage application
						deployment. Click <guibutton>Yes</guibutton>.
					</para>
				</listitem>
			</orderedlist>
		</section>

		<section xml:id="getting-started.first-project.coding">
			<title>Exploring the Project</title>

			<para>
				After the <guilabel>New Project</guilabel> wizard exists, it has done all
				the work for us: Vaadin libraries are installed in the
				<filename>WebContent/WEB-INF/lib</filename> directory, an application
				class skeleton has been written to <filename>src</filename> directory, and
				<filename>WebContent/WEB-INF/web.xml</filename> already contains a
				deployment descriptor.
			</para>

			<figure>
				<title>A New Dynamic Web Project</title>
				<mediaobject>
					<imageobject role="html">
						<imagedata align="center" fileref="img/intro/myproject-created.png"/>
					</imageobject>
					<imageobject role="fo">
						<imagedata scale="65" smallscale="100%" align="center" fileref="img/intro/myproject-created.png"/>
					</imageobject>
				</mediaobject>
			</figure>

			<para>
				The application class created by the plugin contains the following code:
			</para>

            <programlisting><?pocket-size 75% ?><![CDATA[package com.example.myproject;

import com.vaadin.ui.*;
import com.vaadin.terminal.WrappedRequest;

public class MyprojectRoot extends Root {
    @Override
    public void init(WrappedRequest request) {
        Label label = new Label("Hello Vaadin user");
        addComponent(label);
    }
}]]></programlisting>

			<para>
				Let us add a button to the application to make it a bit more
				interesting. The resulting <methodname>init()</methodname> method could
				look something like:
			</para>

<programlisting><![CDATA[@Override
public void init(WrappedRequest request) {
    Label label = new Label("Hello Vaadin user");
    addComponent(label);

    addComponent(new Button("What is the time?",
                            new Button.ClickListener() {
        public void buttonClick(ClickEvent event) {
            Notification.show("The time is " + new Date());
        }
    }));
}]]></programlisting>

			<para>
				The deployment descriptor <filename>WebContent/WEB-INF/web.xml</filename>
				defines Vaadin framework servlet, the application class, and servlet
				mapping:
			</para>

			<example xml:id="ex.web.calc">
				<title><filename>web.xml</filename> Deployment Descriptor for our project</title>

                <para>
                    Below is a deployment descriptor for the Hello World application.
                </para>

				<programlisting><?pocket-size 65% ?><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
  xmlns="http://java.sun.com/xml/ns/javaee" 
  xmlns:web="http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd" 
  id="WebApp_ID" version="2.5">

  <display-name>myproject</display-name>

  <context-param>
  	<description>Vaadin production mode</description>
  	<param-name>productionMode</param-name>
  	<param-value>false</param-value>
  </context-param>

  <servlet>
  	<servlet-name>Myproject Application</servlet-name>
  	<servlet-class>
  	  com.vaadin.terminal.gwt.server.ApplicationServlet
  	</servlet-class>
  	<init-param>
      <description>Vaadin root class to use</description>
      <param-name>root</param-name>
      <param-value>
        com.example.myproject.MyprojectRoot
      </param-value>
  	</init-param>
  </servlet>

  <servlet-mapping>
  	<servlet-name>Myproject Application</servlet-name>
  	<url-pattern>/*</url-pattern>
  </servlet-mapping>
</web-app>
]]></programlisting>
			</example>
			
			<para>
				For a more detailed treatment of the <filename>web.xml</filename> file,
				see <xref linkend="application.environment.web-xml"/>.
			</para>
		</section>
			
		<section xml:id="getting-started.first-project.server">
			<title>Setting Up and Starting the Web Server</title>

			<para>
				Eclipse IDE for Java EE Developers has the Web Standard Tools package
				installed, which supports control of various web servers and automatic
				deployment of web content to the server when changes are made to a
				project.
			</para>

			<para>
				Make sure that Tomcat was installed with user permissions. Configuration
				of the web server in Eclipse will fail if the user does not have write
				permissions to the configuration and deployment directories under the
				Tomcat installation directory.
			</para>

			<para>
				Follow the following steps.
			</para>

			<orderedlist>
				<listitem>
					Switch to the <guimenuitem>Servers</guimenuitem> tab in the lower panel in
					Eclipse. List of servers should be empty after Eclipse is
					installed. Right-click on the empty area in the panel and select
					<menuchoice><guimenu>New</guimenu><guimenuitem>Server</guimenuitem></menuchoice>.

					<screenshot>
						<mediaobject>
							<imageobject role="html">
								<imagedata align="center" fileref="img/intro/tomcat-startserver-1.png"/>
							</imageobject>
							<imageobject role="fo">
								<imagedata scale="65" smallscale="100%" align="center" fileref="img/intro/tomcat-startserver-1.png"/>
							</imageobject>
						</mediaobject>
					</screenshot>
				</listitem>

				<listitem>
					Select <menuchoice><guimenu>Apache</guimenu><guimenuitem>Tomcat v7.0
					Server</guimenuitem></menuchoice> and set <guilabel>Server's host
					name</guilabel> as <literal>localhost</literal>, which should be the
					default. If you have only one Tomcat installed, <guilabel>Server
					runtime</guilabel> has only one choice. Click
					<guibutton>Next</guibutton>.

					<screenshot>
						<mediaobject>
							<imageobject role="html">
								<imagedata align="center" fileref="img/intro/tomcat-startserver-2.png"/>
							</imageobject>
							<imageobject role="fo">
								<imagedata scale="50" smallscale="100%" align="center" fileref="img/intro/tomcat-startserver-2.png"/>
							</imageobject>
						</mediaobject>
					</screenshot>
					
				</listitem>

				<listitem>
					Add your project to the server by selecting it on the left and
					clicking <guibutton>Add</guibutton> to add it to the configured
					projects on the right. Click <guibutton>Finish</guibutton>.

					<screenshot>
						<mediaobject>
							<imageobject role="html">
								<imagedata align="center" fileref="img/intro/tomcat-startserver-3.png"/>
							</imageobject>
							<imageobject role="fo">
								<imagedata scale="50" smallscale="100%" align="center" fileref="img/intro/tomcat-startserver-3.png"/>
							</imageobject>
						</mediaobject>
					</screenshot>
				</listitem>

				<listitem>
					The server and the project are now installed in Eclipse and are shown
					in the <guilabel>Servers</guilabel> tab. To start the server,
					right-click on the server and select
					<guimenuitem>Debug</guimenuitem>. To start the server in non-debug
					mode, select <guimenuitem>Start</guimenuitem>.

					<screenshot>
						<mediaobject>
							<imageobject role="html">
								<imagedata align="center" fileref="img/intro/tomcat-startserver-4.png"/>
							</imageobject>
							<imageobject role="fo">
								<imagedata scale="65" smallscale="100%" align="center" fileref="img/intro/tomcat-startserver-4.png"/>
							</imageobject>
						</mediaobject>
					</screenshot>
				</listitem>

				<listitem>
					The server starts and the WebContent directory of the project is
					published to the server on <uri>http://localhost:8080/myproject/</uri>.

					<screenshot>
						<mediaobject>
							<imageobject role="html">
								<imagedata align="center" fileref="img/intro/tomcat-startserver-5.png"/>
							</imageobject>
							<imageobject role="fo">
								<imagedata scale="65" smallscale="100%" align="center" fileref="img/intro/tomcat-startserver-5.png"/>
							</imageobject>
						</mediaobject>
					</screenshot>
				</listitem>
			</orderedlist>
		</section>

		<section xml:id="getting-started.first-project.run">
			<title>Running and Debugging</title>
	
			<para>
				Starting your application is as easy as selecting <guilabel>myproject</guilabel> from the 
				<guilabel>Project Explorer</guilabel> and then <menuchoice><guimenu>Run</guimenu>
				<guimenuitem>Debug As</guimenuitem><guimenuitem>Debug on Server</guimenuitem></menuchoice>. 
				Eclipse then opens the application in built-in web browser.
			</para>
			
			<figure>
				<title>Running a Vaadin Application</title>
				<mediaobject>
					<imageobject role="html">
						<imagedata align="center" fileref="img/intro/runningMyProject.png"/>
					</imageobject>
					<imageobject role="fo">
						<imagedata scale="50" smallscale="100%" align="center" fileref="img/intro/runningMyProject.png"/>
					</imageobject>
				</mediaobject>
			</figure>
			
			<para>
				You can insert break points in the
				Java code by double-clicking on the left margin bar of the source code
				window. For example, if you
				insert a breakpoint in the <methodname>buttonClick()</methodname> method
				and click the <guibutton>What is the time?</guibutton> button, Eclipse will ask
				to switch to the Debug perspective. Debug perspective will show where the execution stopped at the
				breakpoint. You can examine and change the state of the application. To continue execution, select <guimenuitem>Resume</guimenuitem> from
				<guimenu>Run</guimenu> menu.
			</para>
			
			<figure>
				<title>Debugging a Vaadin Application</title>
				<mediaobject>
					<imageobject role="html">
						<imagedata align="center" fileref="img/intro/debuggingMyProject.png"/>
					</imageobject>
					<imageobject role="fo">
						<imagedata scale="40" smallscale="100%" align="center" fileref="img/intro/debuggingMyProject.png"/>
					</imageobject>
				</mediaobject>
			</figure>

			<para>
				Above, we described how to debug a server-side application. Debugging
				client-side widgets is described in <xref linkend="gwt.debugging"/>.
			</para>

            <note>
                <title>Restarting Application Session</title>

                <para>
                    When you open the URL for the application, it creates a new user
                    session. The session is preserved even if you reload the
                    page. Moreover, as Eclipse likes to do hot deployment to Tomcat, and
                    Tomcat likes to persist sessions on server shutdown, you may
                    experience a problem that the application doesn't return to its
                    initial state after modifying code or even restarting the server.
                </para>

                <para>
                    Adding the <uri>?restartApplication</uri> parameter in the URL tells
                    the Vaadin servlet to create a new application instance (user session)
                    when reloading the page.
                </para>
            </note>
		</section>
	</section>

	<section xml:id="getting-started.netbeans">
		<title>Creating a Project with NetBeans</title>

        <para>
            Vaadin has no official plugin for NetBeans at the moment, so the tasks have to
            be done more manually than with Eclipse.
        </para>

        <para>
            You have two choices to create a Vaadin project in NetBeans: as a regular web
            application project or as a Maven project. We cover these both ways in the
            following sections.
        </para>

        <section xml:id="getting-started.netbeans.webapp">
            <title>Regular Web Application Project</title>

            <para>
                This section describes the basic way of creating a Vaadin application
                project in NetBeans. This approach is useful if you do not wish to use
                Maven, but requires more manual work.
            </para>

            <orderedlist>
                <listitem>
                    <para>
                        Open <menuchoice><guimenu>File</guimenu><guimenuitem>New
                        Project</guimenuitem></menuchoice>.
                    </para>
                </listitem>
                <listitem>
                    <para>
                        Select <menuchoice><guimenu>Java Web</guimenu><guimenuitem>Web
                        Application</guimenuitem></menuchoice> and click
                        <guibutton>Next</guibutton>.
                    </para>
                </listitem>
                <listitem>
                    <para>
                        Give a project name, such as <filename>myproject</filename>. As
                        the project name is by default also used as the context path, it
                        should contain only alphanumerics, underscore and minus
                        sign. Click <guibutton>Next</guibutton>.
                    </para>
                </listitem>
                <listitem>
                    <para>
                        Select a server. The reference toolchain recommends Apache Tomcat,
                        as many instructions in this book are given specifically for
                        Tomcat, but any other server should work just as fine. Click
                        <guibutton>Next</guibutton>.
                    </para>
                </listitem>
                <listitem>
                    <para>
                        Click <guibutton>Finish</guibutton>.
                    </para>
                </listitem>
            </orderedlist>

            <para>
                The project is created. However, it is a simple skeleton for a JSP-based
                web application project. To make it a proper Vaadin project, you need to
                include the Vaadin library, create the application class, and define the
                <filename>web.xml</filename> deployment descriptor.
            </para>
        </section>

        <section xml:id="getting-started.netbeans.maven">
            <title>Maven Project from Vaadin Archetype</title>
            
            <para>
                Creating a Maven project with the Vaadin archetype is simpler than as a
                normal web application project in NetBeans. It creates an application
                skeleton, defines the <filename>web.xml</filename> deployment descriptor,
                and also retrieves the latest Vaadin library automatically.
            </para>

            <orderedlist>
                <listitem>
                    <para>
                        Select <menuchoice><guimenu>File</guimenu><guimenuitem>New Project</guimenuitem></menuchoice>.
                    </para>
                </listitem>
                <listitem>
                    <para>
                        Select <menuchoice><guimenu>Maven</guimenu><guimenuitem>Project
                        from Archetype</guimenuitem></menuchoice> and click
                        <guibutton>Next</guibutton>.
                    </para>
                </listitem>
                <listitem>
                    <para>
                        Select an archetype from a repository:
                    </para>

                    <itemizedlist>
                        <listitem>
                            <para>
                                If you have used Vaadin with Maven before, you might
                                already have the archetype in local repository - select
                                <guilabel>Archetypes from Local Repository</guilabel>.
                            </para>
                        </listitem>
                        <listitem>
                            <para>
                                Add a new archetype by clicking
                                <guibutton>Add</guibutton>. For <guilabel>Group
                                Id</guilabel>, given <literal>com.vaadin</literal>. For
                                <guilabel>Artifact Id</guilabel>, give
                                <literal>vaadin-archetype-clean</literal> for a normal
                                project, <literal>vaadin-archetype-widget</literal> for a
                                custom GWT widget project, or
                                <literal>vaadin-archetype-sample</literal> for a more
                                advanced application skeleton. For
                                <guilabel>Version</guilabel>, give
                                <literal>LATEST</literal> or a specific version
                                number. Then, click <guibutton>OK</guibutton>.
                            </para>

                            <figure xml:id="figure.getting-started.netbeans.maven.new-archetype">
                                <title>Adding a New Maven Archetype in NetBeans</title>
                                <mediaobject>
                                    <imageobject role="html">
                                        <imagedata align="center" fileref="img/intro/netbeans-maven-new-archetype.png"/>
                                    </imageobject>
                                    <imageobject role="fo">
                                        <imagedata scale="75" smallscale="80%" align="center" fileref="img/intro/netbeans-maven-new-archetype.png"/>
                                    </imageobject>
                                </mediaobject>
                            </figure>

                            <para>
                                Then select the <guilabel>Custom archetype -
                                vaadin-archetype-clean (LATEST)</guilabel> from the
                                selection tree.
                            </para>
                        </listitem>
                    </itemizedlist>
                    <para>
                        Click <guilabel>Next</guilabel>.
                    </para>
                </listitem>
                <listitem>
                    <para>
                        In the <guilabel>Name and Location</guilabel> step, enter
                        <guilabel>Project Name</guilabel>, which is recommended to be only
                        lower-case alphabetics, as it is used also as a suggestion for the
                        Java package name of the project. Modify the other parameters for
                        your project and click <guibutton>Finish</guibutton>.
                    </para>

                    <figure xml:id="figure.getting-started.netbeans.maven.new-project">
                        <title>Adding a New Maven Project in NetBeans</title>
                        <mediaobject>
                            <imageobject role="html">
                                <imagedata align="center" fileref="img/intro/netbeans-maven-newproject-name.png"/>
                            </imageobject>
                            <imageobject role="fo">
                                <imagedata scale="75" smallscale="100%" align="center" fileref="img/intro/netbeans-maven-newproject-name.png"/>
                            </imageobject>
                        </mediaobject>
                    </figure>
                </listitem>
            </orderedlist>

            <para>
                Creating the project can take a while as Maven loads all the needed
                dependencies. Once created, you can run it by right-clicking on the
                project in the <guilabel>Projects</guilabel> view and selecting
                <guilabel>Run</guilabel>. In the <guilabel>Select deployment
                server</guilabel> window that opens, select <guilabel>Apache
                Tomcat</guilabel> and click <guibutton>OK</guibutton>. If all goes well,
                NetBeans starts the server and launches the default browser to display the
                web application.
            </para>
        </section>
    </section>

	<section xml:id="getting-started.maven">
		<title>Creating a Project with Maven</title>

        <indexterm xml:id="term.maven.creating" class="startofrange">
            <primary>Maven</primary>
            <secondary>creating a project</secondary>
        </indexterm>

        <para>
            The Vaadin core library and all Vaadin add-ons are available through a Maven
            repository and can thereby be easily used with Apache Maven. You can use a
            Maven with a front-end from Eclipse or NetBeans, or by using the command-line
            as described in this section.
        </para>
        
        <para>
            You can create a new Maven project with the following command:
        </para>

        <screen><prompt>$</prompt> <command>mvn</command> archetype:generate
    -DarchetypeGroupId=com.vaadin
    -DarchetypeArtifactId=vaadin-archetype-clean
    -DarchetypeVersion=LATEST
    -DgroupId=<parameter>your.company</parameter>
    -DartifactId=<parameter>project-name</parameter>
    -Dversion=<parameter>1.0</parameter>
    -Dpackaging=war</screen>

        <para>
            The parameters are as follows:
        </para>

        <variablelist>
            <varlistentry>
                <term><parameter>archetypeGroupId</parameter></term>
                <listitem>
                    <para>
                        The group ID of the archetype is <literal>com.vaadin</literal> for
                        Vaadin archetypes.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term><parameter>archetypeArtifactId</parameter></term>
                <listitem>
                    <para>
                        The archetype ID. Vaadin currently supports the following
                        archetypes:
                    </para>
                    <itemizedlist>
                        <listitem>
                            <literal>vaadin-archetype-clean</literal> is a new
                            project with a barebone skeleton for a regular Vaadin
                            application. The <filename>pom.xml</filename> includes
                            out-commented definitions for additional widgets.
                        </listitem>
                    </itemizedlist>
                    <itemizedlist>
                        <listitem>
                            <literal>vaadin-archetype-widget</literal> is a skeleton
                            for a project with custom widgets.
                        </listitem>
                    </itemizedlist>
                    <itemizedlist>
                        <listitem>
                            <literal>vaadin-archetype-sample</literal> is also for
                            project with custom widgets, but the skeleton includes
                            the Color Picker example used in <xref linkend="gwt"/>.
                        </listitem>
                    </itemizedlist>
                    <itemizedlist>
                        <listitem>
                            <literal>vaadin-archetype-addon</literal> is for Vaadin add-on
                            projects. It packages the add-on so that it can be published
                            in Vaadin Directory. The archetype is for server-side add-ons
                            and does not include definitions needed for building a widget
                            set. If your add-on includes or requires other than the
                            widgets in the Vaadin core library, you need to copy the
                            required definitions from a POM of a
                            <literal>vaadin-archetype-clean</literal> project.
                        </listitem>
                    </itemizedlist>
                    <itemizedlist>
                        <listitem>
                            <literal>vaadin-archetype-touchkit</literal> is for
                            projects using Vaadin TouchKit, described in <xref
                                linkend="mobile"/>. Notice that this archetype uses the
                            AGPL-licensed version of TouchKit, which requires that
                            your project must also be licensed under the AGPL
                            license.
                        </listitem>
                    </itemizedlist>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term><parameter>archetypeVersion</parameter></term>
                <listitem>
                    <para>
                        Version of the archetype to use. This should normally be
                        <literal>LATEST</literal>.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term><parameter>groupId</parameter></term>
                <listitem>
                    <para>
                        A Maven group ID for your project. It is used for the Java package
                        name and should normally be your domain name reversed, such as
                        <uri>com.example.myproject</uri>. The group ID is used also for
                        the Java source package name of your project, so it should be Java
                        compatible - only alphanumerics and an underscore.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term><parameter>artifactId</parameter></term>
                <listitem>
                    <para>
                        Identifier of the artifact, that is, your project. The
                        identifier may contain alphanumerics, minus, and underscore.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term><parameter>version</parameter></term>
                <listitem>
                    <para>
                        Initial version number of your application. The number must
                        obey the Maven version numbering format.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term><parameter>packaging</parameter></term>
                <listitem>
                    <para>
                        How will the project be packaged. It is normally
                        <literal>war</literal>.
                    </para>
                </listitem>
            </varlistentry>
        </variablelist>

        <para>
            Creating a project can take a while as Maven fetches all the
            dependencies. The created project structure is shown in <xref
                linkend="figure.getting-started.maven.archetype.created"/>.
        </para>

        <figure xml:id="figure.getting-started.maven.archetype.created">
            <title>A New Vaadin Project with <literal>vaadin-archetype-clean</literal></title>
            <mediaobject>
                <imageobject role="html">
                    <imagedata align="center" fileref="img/intro/maven-project-created.png"/>
                </imageobject>
                <imageobject role="fo">
                    <imagedata scale="75" smallscale="75%" align="center" fileref="img/intro/maven-project-created.png"/>
                </imageobject>
            </mediaobject>
        </figure>

        <simplesect>
            <title>Compiling and Running the Application</title>

            <indexterm xml:id="term.maven.compiling" class="startofrange">
                <primary>Maven</primary>
                <secondary>compiling</secondary>
            </indexterm>

            <para>
                Before the application can be deployed, it must be compiled and packaged
                as a WAR package. You can do this with the <literal>package</literal> goal
                as follows:
            </para>

            <screen><prompt>$</prompt> <command>mvn</command> package</screen>

            <para>
                The location of the resulting WAR package should be displayed in the
                command output. You can then deploy it to your favorite application
                server.
            </para>

            <para>
                The easiest way to run Vaadin applications with Maven is to use the
                light-weight Jetty web server. After compiling the package, all you need
                to do is type:
            </para>

            <screen><prompt>$</prompt> <command>mvn</command> jetty:run</screen>

            <para>
                The special goal starts the Jetty server in port 8080 and deploys the
                application. You can then open it in a web browser at
                <uri>http://localhost:8080/project-name</uri>.
            </para>

            <indexterm startref="term.maven.compiling" class="endofrange"/>
        </simplesect>

        <simplesect>
            <title>Using Add-ons and Custom Widget Sets</title>

            <indexterm xml:id="term.maven.addons" class="startofrange">
                <primary>Maven</primary>
                <secondary>using add-ons</secondary>
            </indexterm>

            <para>
                If you use Vaadin add-ons that include a widget set or make your custom
                widgets, you need to enable widget set compilation in the POM. The
                required configuration is described in <xref linkend="addons.maven"/>.
            </para>
        </simplesect>

        <indexterm startref="term.maven.addons" class="endofrange"/>
        <indexterm startref="term.maven.creating" class="endofrange"/>
    </section>
</chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: xml
sgml-omittag:nil
sgml-shorttag:nil
sgml-namecase-general:nil
sgml-general-insert-case:lower
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:4
sgml-indent-data:t
sgml-parent-document:nil
sgml-exposed-tags:nil
sgml-local-catalogs:("/etc/sgml/catalog" "/usr/share/xemacs21/xemacs-packages/etc/psgml-dtds/CATALOG")
sgml-local-ecat-files:("ECAT" "~/sgml/ECAT" "/usr/share/sgml/ECAT" "/usr/local/share/sgml/ECAT" "/usr/local/lib/sgml/ECAT")
End:
-->
