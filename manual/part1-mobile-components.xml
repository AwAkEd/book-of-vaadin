<?xml version="1.0" encoding="UTF-8"?>

<section xml:id="mobile.components">
	<title>Mobile User Interface Components</title>

    <para>
        TouchKit introduces a number of components special to mobile device user
        interfaces.
    </para>

    <section xml:id="mobile.components.navigationview">
        <title><classname>NavigationView</classname></title>

        <para>
            The <classname>NavigationView</classname> is a layout component that consists
            of a navigation bar and a content area. The content area is scrollable, so
            there is no need to use an inner panel component. In addition, there can be an
            optional toolbar component at the bottom of the
            view. <classname>NavigationView</classname> is often used inside a
            <classname>NavigationManager</classname> to get view change animations.
        </para>

        <figure xml:id="figure:mobile.components.navigationview">
            <title>Layout of the <classname>NavigationView</classname></title>
            <mediaobject>
                <imageobject role="html">
                    <imagedata align="center" fileref="img/mobile/navigationview-lo.png"/>
                </imageobject>
                <imageobject role="fo">
                    <imagedata smallscale="100%" scale="70" align="center" fileref="img/mobile/navigationview-hi.png"/>
                </imageobject>
            </mediaobject>
        </figure>

        <para>
            <classname>NavigationView</classname> has a full size by default. The content
            area is expanding, so that it takes all the space left over from the navigation
            bar and toolbar.
        </para>

        <section xml:id="mobile.components.navigationview.navigationbar">
            <title>Navigation Bar</title>

            <para>
                The navigation bar at the top of <classname>NavigationView</classname> is
                a <classname>NavigationBar</classname> component. It has two component
                slots, with one on the left and one on the right. On the middle, there is
                a caption. You can use the <classname>NavigationBar</classname> elsewhere
                as well, such as for the toolbar.
            </para>

            <para>
                The left slot is automatically filled with a <guibutton>Back</guibutton>
                button if you set the previous component with
                <methodname>setPreviousComponent()</methodname>. If you use the
                <classname>NavigationView</classname> inside a
                <classname>NavigationManager</classname>, the manager automaticaly sets
                the previous view when you navigate to it from another managed view.
            </para>

            <para>
                You can get access to the navigation bar component with
                <methodname>getNavigationBar()</methodname> to use its manipulator methods
                directly, but <classname>NavigationView</classname> also offers some
                shorthand methods: <methodname>setLeftComponent()</methodname>,
                <methodname>setRightComponent()</methodname>, and a setter and a getter
                for the caption.
            </para>
        </section>

        <section xml:id="mobile.components.navigationview.toolbar">
            <title>Toolbar</title>

            <para>
                A slot for an optional toolbar is located at the bottom of the
                <classname>NavigationView</classname>. The toolbar can be any component,
                but a <classname>Toolbar</classname> component made for this purpose is
                included in TouchKit. It is described in <xref
                linkend="mobile.components.toolbar"/>. You could also use a
                <classname>HorizontalLayout</classname> or
                <classname>CssLayout</classname>.
            </para>

            <para>
                You usually fill the tool bar with <classname>Button</classname>
                components with an icon and no textual caption. You set the toolbar with
                <methodname>setToolbar()</methodname>.
            </para>
        </section>

        <section xml:id="mobile.components.navigationview.css">
            <title>Styling with CSS</title>

            <programlisting><![CDATA[.v-touchkit-navview { }
  .v-touchkit-navview-wrapper {}
  .v-touchkit-navview-toolbar {}
.v-touchkit-navview .v-touchkit-navview-notoolbar {}]]></programlisting>

            <para>
                The root element has the <literal>v-touchkit-navview</literal> class. The
                content area is wrapped inside a
                <literal>v-touchkit-navview-wrapper</literal> element. If the view has a
                toolbar, the toolbar slot has the
                <literal>v-touchkit-navview-toolbar</literal> style, but if not, the
                top-level element has the <literal>v-touchkit-navview-notoolbar</literal>
                style.
            </para>
        </section>
    </section>

    <!-- TODO <section xml:id="mobile.components.navigationbar">
    <title><classname>NavigationBar</classname></title>

        <para>
            
        </para>
    </section> -->

    <section xml:id="mobile.components.toolbar">
        <title><classname>Toolbar</classname></title>

        <para>
            The <classname>Toolbar</classname> is a layout component that extends
            <classname>CssLayout</classname>, usually containing
            <classname>Button</classname> components. The toolbar has by default 100%
            horizontal width and a fixed height. The components are spread evenly
            in the horizontal direction. <classname>Toolbar</classname> is typically used
            in a <classname>NavigationView</classname>, as described in <xref
            linkend="mobile.components.navigationview" xrefstyle="select:label"/>.
        </para>

        <para>
            For a description of the inherited features, please refer to <xref
            linkend="layout.components.orderedlayout"/>.
        </para>

        <section xml:id="mobile.components.toolbar.css">
            <title>Styling with CSS</title>

            <programlisting><![CDATA[.v-touchkit-toolbar { }]]></programlisting>

            <para>
                The component has an overall <literal>v-touchkit-toolbar</literal> style in
                addition to the <literal>v-csslayout</literal> style of the
                superclass. Other style names are as for 
                <classname>CssLayout</classname>.
            </para>
        </section>
    </section>

    <section xml:id="mobile.components.navigationpanel">
        <title><classname>NavigationManager</classname></title>

        <para>
            The <classname>NavigationManager</classname> is a visual effect component that
            gives sliding animation when switching between views. You can register
            three components: the currently displayed component,
            the previous one on the left, and the next component on the right. You can set
            these components with <methodname>setCurrentComponent()</methodname>,
            <methodname>setPreviousComponent()</methodname>, and
            <methodname>setNextComponent()</methodname>, respectively. 
        </para>

        <para>
            The <classname>NavigationManager</classname> component is illustrated in <xref
            linkend="figure:mobile.components.navigationpanel"/>.
        </para>

        <figure xml:id="figure:mobile.components.navigationpanel">
            <title><classname>NavigationManager</classname> with Three <classname>NavigationView</classname>s</title>
            <mediaobject>
                <imageobject role="html">
                    <imagedata align="center" fileref="img/mobile/navigationpanel-lo.png"/>
                </imageobject>
                <imageobject role="fo">
                    <imagedata smallscale="100%" scale="80" align="center" fileref="img/mobile/navigationpanel-hi.png"/>
                </imageobject>
            </mediaobject>
        </figure>

        <para>
            The navigation manager is important for responsiveness, because the previous and
            next components are cached and the slide animation started before server is
            contacted to load the new next or previous views.
        </para>

        <para>
            Switching between the views is done programmatically according to user
            interaction; swipe gestures are not supported at the moment.
        </para>

        <section xml:id="mobile.components.navigationpanel.breadcrump">
            <title>Handling View Changes</title>

            <para>
                While you can put any components in the manager, some special features are
                enabled when using the <classname>NavigationView</classname>. When a view
                becomes visible, the <methodname>onBecomingVisible()</methodname> method
                in the view is called. You can override it, just remember to call the
                superclass method.
            </para>

            <programlisting><![CDATA[@Override
protected void onBecomingVisible() {
    super.onBecomingVisible();

    ...
}]]></programlisting>
        </section>

        <section xml:id="mobile.components.navigationpanel.breadcrump">
            <title>Tracking Breadcrumbs</title>

            <para>
                <classname>NavigationManager</classname> also handles
                <emphasis>breadcrumb</emphasis> tracking. The
                <methodname>navigateTo()</methodname> pushes the current view on the top
                of the breadcrumb stack and <methodname>navigateBack()</methodname> can be
                called to return to the previous breadcrumb level.
            </para>

            <para>
                Notice that calling <methodname>navigateTo()</methodname> with the
                "previous" component is equivalent to calling
                <methodname>navigateBack()</methodname>.
            </para>
        </section>
    </section>

    <section xml:id="mobile.components.navigationbutton">
        <title><classname>NavigationButton</classname></title>

        <para>
            The <classname>NavigationButton</classname> is a special version of the
            regular <classname>Button</classname> designed for navigation inside a
            <classname>NavigationManager</classname>, as described in <xref
            linkend="mobile.components.navigationpanel"
            xrefstyle="select:label"/>. Clicking the button will automatically navigate to
            the defined target view. The view change animation does not need to make a
            server request first, but starts immediately after clicking the button. If you
            leave the target view empty, an empty placeholder view is shown in the
            animation. The view is filled after it gets the content from the server.
        </para>

        <para>
            You can give the target view either in the constructor or with
            <methodname>setTargetView()</methodname>.
        </para>

        <programlisting><?pocket-size 75% ?><![CDATA[
NavigationView view = new NavigationView("A View");
...
NavigationButton button = new NavigationButton("Click");
button.setTargetView(view);
...]]></programlisting>

        <para>
            Notice that the automatic navigation will only work if the button is inside a
            <classname>NavigationManager</classname> (in a view inside it). If you just
            want to use the button as a visual element, you can use it like a regular
            <classname>Button</classname> and handle the click events with a
            <classname>ClickListener</classname>.
        </para>

        <section xml:id="mobile.components.navigationbutton.css">
            <title>Styling with CSS</title>

            <programlisting><![CDATA[.v-touchkit-navbutton { }
  .v-touchkit-navbutton-desc { }]]></programlisting>

            <para>
                The component has an overall <literal>v-touchkit-navbutton</literal> style. If
                the component description is set with
                <methodname>setDescription()</methodname>, it is shown in a separate
                <literal>&lt;span&gt;</literal> element with the
                <literal>v-touchkit-navbutton-desc</literal> style.
            </para>
        </section>
    </section>

    <section xml:id="mobile.components.popover">
        <title><classname>Popover</classname></title>

        <para>
            <classname>Popover</classname> is much like a regular Vaadin sub-window,
            useful for quickly displaying some options or a small form related to an
            action. Unlike regular sub-windows, it does not support dragging or resizing
            by the user. It can have a caption, but usually does not. As sub-windows
            usually require a rather large screen size, the <classname>Popover</classname>
            is mainly applicable to tablet devices, but can be used also in phones with
            full size with <methodname>setSizeFull()</methodname>.
        </para>

        <para>
            In the following, we extend <classname>Popover</classname> to use it. It is
            modal by default. Notice that the screen size is not available in the
            constructor, so we have to postpone using it to the
            <methodname>attach()</methodname> method.
        </para>

        <programlisting><?pocket-size 65% ?><![CDATA[public class ComposeView extends Popover {
    ...
    public ComposeView(boolean smartphone) {
        setClosable(false);

        ...

        // In phones use all space, in tablets just vertically
        if (smartphone) {
            setSizeFull();
        } else {
            setHeight("100%");
            center();
        }
    }

    @Override
    public void attach() {
        super.attach();

        // If tablet is wide, leave some space horizontally
        if (!smartphone) {
            if (getParent().getWidth() > 800) {
                setWidth("80%");
            } else {
                setWidth("100%");
            }
        }
    }
    ...
}]]></programlisting>

        <para>
            You add popover windows to an application-level <classname>Window</classname>
            object with <methodname>addWindow()</methodname>, just like sub-windows in a
            regular Vaadin application.
        </para>

        <programlisting><?pocket-size 65% ?><![CDATA[if (event.getButton() == emailButton) {
    ComposeView composeView = new ComposeView(smartphone);
    getWindow().addWindow(composeView);
    return;
}]]></programlisting>

        <para>
            The resulting user interface in a tablet device is shown in <xref
            linkend="figure:mobile.components.popover"/>.
        </para>

        <figure xml:id="figure:mobile.components.popover">
            <title><classname>Popover</classname> in a Tablet Device</title>
            <mediaobject>
                <imageobject>
                    <imagedata smallscale="100%" scale="70" align="center" fileref="img/mobile/touchkitsubwindow.png"/>
                </imageobject>
            </mediaobject>
        </figure>

        <para>
            Alternatively, you can call the <methodname>showRelativeTo()</methodname>,
            which displays the sub-window relative to an existing component in the user
            interface.
        </para>

        <programlisting><?pocket-size 65% ?><![CDATA[Popover popover = new Popover();
popover.setContent(mailboxHierarchyView);
popover.setClosable(true);
popover.showRelativeTo(showMailboxHierarchyButton);
popover.setHeight(getParent().getHeight() - 100, UNITS_PIXELS);]]></programlisting>

        <para>
            In this case, you should not call <methodname>addWindow()</methodname>
            explicitly.
        </para>

        <section xml:id="mobile.components.popover.css">
            <title>Styling with CSS</title>

            <programlisting><![CDATA[.v-touchkit-popover .v-touchkit-fullscreen { }
  .v-touchkit-popover .v-touchkit-relative { }
  .v-touchkit-popover .v-touchkit-plain { }]]></programlisting>

            <para>
                The component has an overall <literal>v-touchkit-popover</literal> style. If
                full-screen, it also has the <literal>v-touchkit-fullscreen</literal> style, if
                positioned relatively it has <literal>v-touchkit-relative</literal>, and if not,
                the <literal>v-touchkit-plain</literal> style.
            </para>
        </section>
    </section>

    <section xml:id="mobile.components.switch">
        <title><classname>Switch</classname></title>

        <para>
            The <classname>Switch</classname> component is a
            <classname>CheckBox</classname> that looks like the switch button in Apple
            iOS.
        </para>

        <programlisting><![CDATA[Switch switch = new Switch();
switch.setCaption("Do I look like iOS?");
layout.addComponent(switch);]]></programlisting>

        <section xml:id="mobile.components.switch.css">
            <title>Styling with CSS</title>

            <programlisting><![CDATA[.v-touchkit-switch { }
  .v-touchkit-switch-slider { }]]></programlisting>

            <para>
                The component has an overall <literal>v-touchkit-switch</literal> style. The slider
                element has <literal>v-touchkit-switch-slider</literal> style.
            </para>
        </section>
    </section>

    <section xml:id="mobile.components.componentgroup">
        <title><classname>ComponentGroup</classname></title>

        <para>
            The <classname>ComponentGroup</classname> is a layout component for grouping
            components. It uses margins, background color, and rounded corners to
            visualize the grouping. It extends <classname>CssLayout</classname> and
            behaves otherwise as such, except in having 100% default width. There is a
            vertical and a horizontal version of the component.
        </para>

        <programlisting><![CDATA[VerticalComponentGroup componentGroup = new VerticalComponentGroup();

// Name field
Component textField = new TextField("Name");
textField.setWidth("100%");
componentGroup.addComponent(textField);

// Email field
EmailField emailField = new EmailField("Email");
emailField.setWidth("100%");
componentGroup.addComponent(emailField);

// Number field
NumberField numberField = new NumberField("Age");
numberField.setWidth("100%");
componentGroup.addComponent(numberField);]]></programlisting>

        <section xml:id="mobile.components.componentgroup.css">
            <title>Styling with CSS</title>

            <programlisting><![CDATA[.v-touchkit-componentgroup { }
.v-touchkit-componentgroup-h { }]]></programlisting>

            <para>
                The component has an overall <literal>v-touchkit-componentgroup</literal> style if
                vertical and <literal>v-touchkit-componentgroup-h</literal> if horizontal. If the
                component has a caption, the <literal>v-touchkit-has-caption</literal> style is
                added.
            </para>
        </section>
    </section>

    <section xml:id="mobile.components.emailfield">
        <title><classname>EmailField</classname></title>

        <para>
            The <classname>EmailField</classname> is just like the regular
            <classname>TextField</classname>, except that it has automatic capitalization
            and correction turned off. Mobile devices also recognize the field as an email
            field and can offer a virtual keyboard for the purpose, so that it includes
            the at (<literal>@</literal>) and period (<literal>.</literal>) characters,
            and possibly a shorthand for <literal>.com</literal>.
        </para>
    </section>

    <section xml:id="mobile.components.numberfield">
        <title><classname>NumberField</classname></title>

        <para>
            The <classname>NumberField</classname> is just like the regular
            <classname>TextField</classname>, except that it is marked as a numeric input
            field for mobile devices, so that they will show a numeric virtual keyboard
            rather than the default alphanumeric.
        </para>
    </section>
</section>

<!-- Keep this comment at the end of the file
Local variables:
mode: xml
sgml-omittag:nil
sgml-shorttag:nil
sgml-namecase-general:nil
sgml-general-insert-case:lower
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:4
sgml-indent-data:t
sgml-parent-document:nil
sgml-exposed-tags:nil
sgml-local-catalogs:("/etc/sgml/catalog" "/usr/share/xemacs21/xemacs-packages/etc/psgml-dtds/CATALOG")
sgml-local-ecat-files:("ECAT" "~/sgml/ECAT" "/usr/share/sgml/ECAT" "/usr/local/share/sgml/ECAT" "/usr/local/lib/sgml/ECAT")
End:
-->
