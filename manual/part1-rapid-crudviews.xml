<?xml version="1.0" encoding="UTF-8"?>

<section xml:id="rapid.crudviews">
    <title>Creating CRUD Views</title>
    
    <para>
        Spring Roo is basically a code generator. As already seen in the data model part of this tutorial, it will write a whole bunch of boiler plate code for JPA entities. Even greater advantage one gets when simple UI around the domain models is needed. By default Spring Roo uses jsp pages (Spring MVC to be more specific) to create basic CRUD (create, remove, update, delete) views. This is covered in Roo's own tutorials. At this point we'll choose a bit different route and use Vaadin plugin to create an advanced Vaadin based server side RIA UI for our backend.
    </para>

    <para>
        First we will use vaadin setup command to create some basic stuff needed for all Vaadin appliactions. Issue the following command in the Roo shell:
    </para>
    <programlisting><?pocket-size 65% ?><![CDATA[vaadin setup --applicationPackage ~.web --baseName RapidWorkHours --themeName rapid --useJpaContainer true]]></programlisting>
    
    
    <para>The command creates you need or might need later during your development:</para>
    <orderedlist>
        <listitem>a package "web" where all your Vaadin related code will added</listitem>
        <listitem>an Application class</listitem>
        <listitem>a web.xml file to configure Vaadin application for servlet containers</listitem>
        <listitem>a theme</listitem>
    <orderedlist>
    <para>With --useJpaContainer we instruct the application to use JpaContainer later in its CRUD views. This will save some memory in our application server in case the database grows a lot.</para>

    <para>Next we will create the actual CRUD views into our application. Issue the following command in the Roo shell:</para>

    <programlisting><?pocket-size 65% ?><![CDATA[vaadin generate all --package ~.web.ui --visuallyComposable true]]></programlisting>

    <para>The command creates CRUD views for all domain objects into web.ui package. The visuallyComposable parameter instructs the Roo plugin to build views in such a way that we can later modify them with Vaadin VisualDesigner. Without this parameter views are constructed in bit different manner, which may be bit more maintainable for advanced Vaadin users.</para>

    <para>In case you add new domain objects later, you may issue this command again to create views for new domain objects.</para>
    
    <para>
        At this point we have a working Vaadin application ready so we naturally want to see it in action. In STS IDE one can simply select the project and use "Run->Run as->Run on server". Pre-installed VMware vFabric server suits fine, but any other servlet container (e.g. Jetty based JEE Preview) should work fine.
    </para>
    <para>
        In case you feel more comfortable in the maven world, the project can also be deployed for testing with e.g. jetty:run target. The jetty plugin is automatically installed for the generated project.
    </para>
    
</section>

<!-- Keep this comment at the end of the file
Local variables:
mode: xml
sgml-omittag:nil
sgml-shorttag:nil
sgml-namecase-general:nil
sgml-general-insert-case:lower
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:4
sgml-indent-data:t
sgml-parent-document:nil
sgml-exposed-tags:nil
sgml-local-catalogs:("/etc/sgml/catalog" "/usr/share/xemacs21/xemacs-packages/etc/psgml-dtds/CATALOG")
sgml-local-ecat-files:("ECAT" "~/sgml/ECAT" "/usr/share/sgml/ECAT" "/usr/local/share/sgml/ECAT" "/usr/local/lib/sgml/ECAT")
End:
-->
