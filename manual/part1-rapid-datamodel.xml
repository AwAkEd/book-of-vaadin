<?xml version="1.0" encoding="UTF-8"?>

<section xml:id="rapid.datamodel">
	<title>Creating the Domain Model</title>
	
	<para>
        Spring Roo automates the creation of a domain model. Using simple commands, it
        creates the entity classes and their property fields. As we enabled persistence
        for the project earlier, creating the entities also creates the JPA mappings
        between the domain objects and their underlying database representation.
	</para>

    <section xml:id="rapid.datamodel.design">
        <title>Domain Model Design</title>
        
        <para>
            The domain model of the work hour reporting system consists of three
            entities. Employees working on projects are represented as
            <classname>RapidUser</classname> entities, which also represent users of the
            system. Authorization is managed simply with an <literal>admin</literal> flag.
        </para>

        <para>
            An employee uses the system to enter work entries, represented with the
            <classname>WorkEntry</classname> class. Each entry has starts and ends at a
            specific date and time and has a comment.  A work entry is always associated
            with a project, represented in the <classname>Project</classname> class. A
            project has a name and ended projects can be disabled so that they can no
            longer be selected.
        </para>

        <!--
           Diagram:

    		RapidUser
    		+username: String // min size 2
    		+password: String // min size 4
    		+admin: boolean

    		Project
    		+name // min size 2, not null
    		+enabled: boolean // default

    		WorkEntry
    		+comment: String
    		+project: Project // not null
    		+employer: RapidUser // not null
    		+startTime: Date
    		+endTime: Date
        -->		

        <figure xml:id="figure:rapid.datamodel.entity-diagram">
            <title>Entity Diagram of the Domain Model</title>
            <mediaobject>
                <imageobject role="html">
                    <imagedata align="center" fileref="img/rapid/domain-model-lo.png"/>
                </imageobject>
                <imageobject role="fo">
                    <imagedata smallscale="80%" align="center" fileref="img/rapid/domain-model-hi.png"/>
                </imageobject>
            </mediaobject>
        </figure>
	</section>

    <section xml:id="rapid.datamodel.creating">
        <title>Creating the Model in Roo</title>
        
        <para>
            Roo Shell helps you to create your model objects. The <command>entity</command>
            command creates a new entity class, specified with the
            <parameter>--class</parameter> parameter. Tilde (~) can be used to refer to
            the project package. The <parameter>--testAutomatically</parameter> option
            creates integration tests for the entity. As always with Roo Shell, 
            hitting CTRL-SPACE can hint or autocomplete your commands.
        </para>

        <screen><?pocket-size 70% ?><prompt>roo&gt;</prompt> <command>entity</command> <parameter>--class</parameter> ~.domain.RapidUser <parameter>--testAutomatically</parameter></screen>

        <para>
            The <command>field</command> command in Roo creates class properties. The
            first parameter for the command is the field type, such as
            <parameter>string</parameter>, <parameter>boolean</parameter>, or
            <parameter>date</parameter>. The name of the field is specified with the
            <parameter>--fieldName</parameter> parameter. The
            <parameter>--notNull</parameter> specifies that the field value may not be
            null. The <parameter>string</parameter> type as additional options, such as
            minimum (<parameter>--sizeMin</parameter>) and maximum
            (<parameter>--sizeMax</parameter>) length.
        </para>

        <screen><?pocket-size 70% ?><prompt>roo&gt;</prompt> <command>field string</command> <parameter>--fieldName</parameter> username <parameter>--notNull --sizeMin</parameter> 2</screen>

        <para>
            To create the domain model described earlier, the following commands need to
            be issued in all (including the ones explained above):
        </para>

        <screen><?pocket-size 65% ?>entity --class ~.domain.RapidUser --testAutomatically
field string --fieldName username --notNull --sizeMin 2
field string --fieldName password --notNull --sizeMin 4
field boolean --fieldName admin --primitive

entity --class ~.domain.Project --testAutomatically
field string --fieldName name --notNull --sizeMin 2 --sizeMax 255
field boolean --fieldName enabled --primitive

entity --class ~.domain.WorkEntry --testAutomatically
field string --fieldName comment --sizeMax 255
field reference --fieldName project --type ~.domain.Project --notNull
field reference --fieldName employee --type ~.domain.RapidUser --notNull
field date --fieldName startTime --type java.util.Date --notNull
field date --fieldName endTime --type java.util.Date --notNull</screen>

        <para>
            The <parameter>reference</parameter> field type is used for references to
            other entities. The entity type is given with the
            <parameter>--type</parameter> option.
        </para>
	
        <para>
            As we gave the <parameter>--testAutomatically</parameter> parameter when we
            created domain objects, Roo should have generated some tests automatically. To
            validate the domain model, type the following command in the Roo Shell:
        </para>

        <screen><prompt>roo&gt;</prompt> <command>perform tests</command></screen>
    </section>
</section>

<!-- Keep this comment at the end of the file
Local variables:
mode: xml
sgml-omittag:nil
sgml-shorttag:nil
sgml-namecase-general:nil
sgml-general-insert-case:lower
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:4
sgml-indent-data:t
sgml-parent-document:nil
sgml-exposed-tags:nil
sgml-local-catalogs:("/etc/sgml/catalog" "/usr/share/xemacs21/xemacs-packages/etc/psgml-dtds/CATALOG")
sgml-local-ecat-files:("ECAT" "~/sgml/ECAT" "/usr/share/sgml/ECAT" "/usr/local/share/sgml/ECAT" "/usr/local/lib/sgml/ECAT")
End:
-->
