<?xml version="1.0" encoding="UTF-8"?>

<section xml:id="rapid.viewcustomization">
    <title>Customizing Views</title>
    
    <para>
        For basic use, the entity views created by Roo work just fine. In some cases,
        modifying the form or changing visible properties in the table component may be
        needed to satisfy critical end users. But when we aim for better usability, we
        might want to build some custom solutions. In this section, we discuss some
        methods how you can modify the application skeleton generated by Roo.
    </para>
    
    <section xml:id="rapid.viewcustomization.modify">

        <title>Modifying Roo generated entity form</title>

        <para>
            As discussed in <xref linkend="rapid.crudviews.skeleton"/> entity forms
            generated by Roo can be made compatible with the Vaadin VisualEditor. If you
            gave the <parameter>--visuallyComposable true</parameter> parameter for Roo
            when creating the views, you can open for example the
            <filename>WorkEntryForm.java</filename> file with Vaadin Visual Designer. For
            example, right-click on the the file in the <guilabel>Project
            Explorer</guilabel> view. Then, choosing the <guilabel>Design</guilabel> view
            from the bottom of the screen will open the form generated by Roo in a
            graphical editor. Use the editor to organize the view according to your
            preferences. Also, add a <classname>Label</classname> component to the view
            and name it as <parameter>hoursLabel</parameter>.
        </para>
        
        <para>
            When you switch back to the source view, you can immediately see the changes
            made by the visual mode. To fill proper value for the newly created
            <parameter>hoursLabel</parameter>, modify the
            <methodname>setItemDataSource()</methodname> method to call an
            <methodname>updateDuration()</methodname> method that you create to calculate
            the duration between start and the end times. The resulting value should be
            shown in the label. You might also call this method from a value change
            listener hooked to start and end time fields.
        </para>

        <para>
            At any time you may switch between the source code editor and the visual
            editor without losing changes done on the other side. Just make sure not to
            modify parts of the code (methods and field declarations) that are marked with
            <literal>@AutoGenerated</literal> annotation.
        </para>
    </section>

    <section xml:id="rapid.viewcustomization.calendarview">
        <title>Creating a Calendar View for Filling Work Entries</title>
        
        <para>
            In this section, we build an alternative view for
            <classname>WorkEntry</classname> entities built around the Vaadin Calendar
            add-on. The Calendar displays filled entries for the end user in a nice
            graphical presentation. User can get a quick overview of what he has done
            during the week and it is also easy to spot if there is some missing
            entries. The user can also select and modify time ranges visually with the
            calendar, which speeds up the daily tasks.
        </para>
        
        <para>
            Start by sketching the view with the Visual Designer.
        </para>

        <orderedlist>
            <listitem>
                <para>
                    Choose
                    <menuchoice><guimenu>File</guimenu><guisubmenu>New</guisubmenu><guisubmenu>Vaadin</guisubmenu><guimenuitem>Composite</guimenuitem></menuchoice>
                </para>
            </listitem>
            <listitem>
                <para>
                    Fill in the proper package and class name (such as
                    <filename>~web.ui</filename> and <classname>CalendarView</classname>).
                    The Vaadin Plugin for Eclipse creates a class that extends
                    <classname>CustomComponent</classname>.
                </para>
            </listitem>
            <listitem>
                <para>
                    Switch to the <guilabel>Design</guilabel> tab using the tab selector
                    below the source code and the visual editor opens.
                </para>
            </listitem>
        </orderedlist>

        <para>
            For our view we will need three components: two
            <classname>ComboBox</classname>es to select the project and employee, and a
            <classname>Calendar</classname> from the add-on that we installed
            previously. Filtering may help you in finding them from the component
            list. Drag them to the the composite and sketch the view according to your
            preferences. Also use the <guilabel>Properties</guilabel> tab to give
            components more meaningful names and possibly fill in a suitable caption. When
            you return to the source code view, you can see the generated code.
        </para>

        <section xml:id="rapid.viewcustomization.calendarview.codecustomization">
            <title>Customizing Generated Code</title>
        
            <para>
                The constructor has a comment to indicate the place where you should add
                your custom code. To make our view display some data, we need to connect
                the combo boxes to the data sources and provide events to the
                <classname>Calendar</classname> component via its
                <classname>CalendarEventProvider</classname> interface. For the project
                and employee selectors, the easiest option is to use the
                <classname>JPAContainer</classname>.
            </para>

            <para>
                When implementing the <classname>CalendarEventProvider</classname>, you
                will need to extend the data model with a method that lists
                <classname>WorkEntry</classname> objects within a specific time ranges and
                also implement a light-weight wrapper for <classname>WorkEntry</classname>
                to make them compatible with the <classname>Calendar</classname>
                component.
            </para>
        </section>

        <section xml:id="rapid.viewcustomization.calendarview.usingviews">
            <title>Using Custom Views</title>
        
            <para>
                Once you have some data sources connected, you most probably want to check
                out how your new view looks in the application. The Vaadin application
                skeleton generated by Roo uses the Navigator add-on and a generated
                <literal>RapidEntityManagerView</literal> (where Rapid is the application
                base name) class as the view controller. For complex applications, you
                might want to build your own navigation system, but for this application
                we can just modify the <classname>RapidEntityManagerView</classname> to
                include our custom views.
            </para>

            <para>
                Let the composite implement the
                <classname>org.vaadin.navigator.Navigator.View</classname> interface and
                modify <methodname>addEntityViewsToList()</methodname> method in
                <classname>RapidEntityManagerView</classname> to include your custom view
                to the navigation. After that, deploy the application and verify the view
                is shown. You may add some test data in the
                <classname>WorkEntry</classname> views generated by Roo and check that it
                is shown in the <classname>CalendarView</classname>.
            </para>
        </section>

        <section xml:id="rapid.viewcustomization.calendarview.usingviews">
            <title>Using Custom Views</title>

            <para>
                To allow users to add new entries via Calendar, implement a
                <classname>RangeSelectHandler</classname> and register it to the
                Calendar. In the handler, you can create an new instance of
                <classname>WorkEntry</classname>. Fill in the time range from the provided
                event object and default values for the project and employee fields that
                you can find through the combo boxes that we created earlier.
            </para>
        
            <para>
                The new <classname>WorkEntry</classname> object now contains the most
                essential information, but it still has the default comment field. The
                user might also want to review the new entry. Here we can use the
                previously fine-tuned <classname>WorkEntry</classname> form that was
                originally automatically created by the Roo. Wrap the
                <classname>WorkEntry</classname> object in a
                <classname>BeanItem</classname> and pass it to a
                <classname>WorkEntryForm</classname> instance. As our Calendar component
                consumes quite a lot of space on the screen, it is best to show the editor
                form in a modal Window. Again, use your existing Java know-how and extract
                the recyclable parts to helper methods (such as
                <methodname>showEditorPopup(WorkEntry)</methodname>).
            </para>

            <para>
                To fine tune the usability of the view you may add more hooks the the Calendar:
            </para>

            <itemizedlist>
                <listitem><classname>EventClickHandler</classname> to open editor for existing event</listitem>
                <listitem><classname>EventMoveHandler</classname> to adjust the time range</listitem>
                <listitem><classname>EventResizeHandler</classname> to adjust the time range</listitem>
            </itemizedlist>
        </section>
    </section>
    
    <section xml:id="rapid.viewcustomization.reportview">
        <title>Creating a Custom View for Reporting</title>
        
        <para>
            Our example project also has a report view for easy listing of work
            entries. The query can be filtered by project, employee and the time
            range. Most of the process is similar to creating the calendar view, but in
            the <classname>ReportView</classname> one can survive with just standard
            Vaadin components. The table component at the bottom of the view lists entries
            matching the criteria defined by the controls above it.
        </para>

        <para>
            When you have sketched the view connect selects to the data sources. Also hook
            a <classname>JPAContainer</classname> to the <classname>Table</classname>. Add
            <classname>ChangeListener</classname> to all fields and update filters in the
            <classname>JPAContainer</classname> instance hooked to the result table.
        </para>

    </section>

</section>

<!-- Keep this comment at the end of the file
Local variables:
mode: xml
sgml-omittag:nil
sgml-shorttag:nil
sgml-namecase-general:nil
sgml-general-insert-case:lower
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:4
sgml-indent-data:t
sgml-parent-document:nil
sgml-exposed-tags:nil
sgml-local-catalogs:("/etc/sgml/catalog" "/usr/share/xemacs21/xemacs-packages/etc/psgml-dtds/CATALOG")
sgml-local-ecat-files:("ECAT" "~/sgml/ECAT" "/usr/share/sgml/ECAT" "/usr/local/share/sgml/ECAT" "/usr/local/lib/sgml/ECAT")
End:
-->
