<?xml version="1.0" encoding="UTF-8"?>

<chapter xml:id="getting-started">
	<title>Getting Started with Vaadin</title>

	<para>
		This chapter gives practical instructions for installing Vaadin and the reference
		toolchain, installing the Vaadin plugin in Eclipse, and running and debugging the
		demo applications.
	</para>

	<section xml:id="getting-started.package">
		<title>Installing Vaadin</title>

		<para>
			This section gives an overview of the Vaadin package and its installation. You
			have two options for installing:
		</para>

        <orderedlist>
            <listitem>Install the installation package</listitem>
            <listitem>If you use Eclipse, you can install the Vaadin plugin for Eclipse, as described in <xref linkend="getting-started.environment.eclipse-plugin"/></listitem>
        </orderedlist>

        <para>
            Even if you use Eclipse, you can install the installation package and import
            it under Eclipse as the QuickStart project. It allows you to run and debug the
            demo applications.
        </para>

		<section xml:id="getting-started.package.installing">
			<title>Installing the Installation Package</title>

			<para>
				You can install the Vaadin installation package in a few simple steps:
			</para>

			<orderedlist>
				<listitem>
					<para>
						Download the newest Vaadin installation package from the download
						page at <link
						xlink:href="http://vaadin.com/download/">http://vaadin.com/download/</link>. Select
						the proper download package for your operating system: Windows,
						Linux, or Mac OS X.
					</para>
				</listitem>
				<listitem>
					<para>
						Unpack the installation package to a directory using an
						decompression program appropriate for the package type (see below)
						and your operating system.
					</para>

					<itemizedlist>
						<listitem>
							<para>
								In Windows, use the default ZIP decompression program to unpack the package into
								your chosen directory e.g. <filename>C:\dev</filename>.
							</para>

							<warning>
								At least the Windows XP default decompression program and
								some versions of WinRAR cannot unpack the installation
								package properly in certain cases. Decompression can
								result in an error such as "<emphasis>The system cannot
								find the file specified.</emphasis>" This happens because
								the decompression program is unable to handle long file
								paths where the total length exceeds 256 characters. This
								occurs, for example, if you try to unpack the package
								under Desktop. You should unpack the package directly into
								<filename>C:\dev</filename> or some other short path or
								use another decompression program.
							</warning>

						</listitem>
						<listitem>
							<para>
								In Linux, use GNU <filename>tar</filename> and BZIP2
								decompression with <command>tar jxf
								vaadin-linux-6.x.x.tar.bz2</command> command.
							</para>
						</listitem>
						<listitem>
							<para>
								In Mac OS X, use <filename>tar</filename> and Gzip
								decompression with <command>tar zxf
								vaadin-mac-6.x.x.tar.gz</command> command.
							</para>
							<!-- para>
								In Mac OS X, unpack the DMG file to your chosen
								directory.
							</para -->
						</listitem>
					</itemizedlist>

					<para>
						The files will be, by default, decompressed into a directory with the name
						<filename>vaadin-<emphasis>&lt;operatingsystem&gt;</emphasis>-6.x.x</filename>.
					</para>
				</listitem>
			</orderedlist>
			
			<!--
			<para>
				The installation directory can be renamed later if you wish, especially if you wish
				to use the installation as a skeleton for your own project, as described
				in <xref linkend="getting-started.quickstart.skeleton"/> below.
			</para>
			
			<para>
				When using Vaadin in a project, you will need to copy or import
				the JAR packages of the library to the web application, and possibly also
				to your project directory during development, depending on your
				development environment. This is the case at least with Eclipse. See <xref
				linkend="getting-started.environment"/> below for details.
			</para>
			-->
			
		</section>

		<section xml:id="getting-started.package.demo.start">
			<title>Starting the Content Browser</title>

			<para>
				The Content Browser is your best friend when using Vaadin. It
				allows you to browse documentation and example source code, and run the
				demo applications. The demo applications demonstrate most of the core
				features of Vaadin.  You can find the demo applications also at
				the vaadin website: <link
				xlink:href="http://vaadin.com/demo">http://vaadin.com/demo</link>.
                <!-- TODO: More specific address. -->
			</para>

			<para>
				To start the Content Browser, run the start script in the Vaadin
				installation directory as instructed below. The start script
				launches a stand-alone web server running on the local host at port 8888,
				and a web browser at address <link
				xlink:href="http://localhost:8888/">http://localhost:8888/</link>.
			</para>

			<para>
				The Content Browser will open the default web browser configured in your
				system. If your default browser is not compatible with Vaadin 
				the demo applications may not work properly. In that case launch a 
				supported browser manually and navigate to <link
				xlink:href="http://localhost:8888/">http://localhost:8888/</link>.
			</para>

			<para>
				If the Content Browser fails to start, make sure that no other service is
				using port 8888.
			</para>

			<note>
				<title>JRE must be installed</title>

				You must have Java Runtime Environment (JRE) installed or the batch
				file will fail and close immediately. A JRE can be downloaded from 
				<link xlink:href="http://java.sun.com/javase/downloads/index.jsp">http://java.sun.com/javase/downloads/index.jsp</link>.
			</note>

			<note>
				<title>Firewall software</title>

				Executing the Content Browser locally may cause a security
				warning from your firewall software because of the started web server.
				You need to allow connections to port 8888 for the Content Browser to work.
			</note>

			<section>
				<title>Windows</title>
				<para>
					Run the <filename>start.bat</filename> batch file by double-clicking
					on the icon. Wait until the web server and web browser has started, it can take a while.
				</para>
			</section>

			<section>
				<title>Linux / UNIX</title>
				<para>
					Open a shell window, change to the Vaadin installation
					directory, and run the <filename>start.sh</filename> shell script. You
					have to run it with the following command:
				</para>

				<screen><prompt>$</prompt> <command>sh start.sh</command>
-------------------------------------------------
Starting Vaadin in Desktop Mode.
Running in http://localhost:8888
-------------------------------------------------

2007-12-04 12:44:55.657::INFO:  Logging to STDERR via org.mortbay.log.StdErrLog
2007-12-04 12:44:55.745::INFO:  jetty-6.1.5
2007-12-04 12:45:03.642::INFO:  NO JSP Support for , did not find org.apache.jasper.servlet.JspServlet
2007-12-04 12:45:03.821::INFO:  Started SelectChannelConnector@0.0.0.0:8888</screen>

				<para>
					Wait until the web server and web browser has started, it can take a while.
				</para>

				<note>
					<title>Browser support</title>
					
					Vaadin supports the most commonly used web browsers, including 
					Internet Explorer 6-8, Firefox 3, Safari 3 and Opera 9.6. In addition
					to these, most of the modern web browsers also work event if they
					are not supported. The definitive list of supported browsers can be
					found on <link xref="http://vaadin.com/features">http://vaadin.com/features</link>.
				</note>
			</section>

			<section>
				<title>Mac OS X</title>

				<para>
					Double-click on the <guibutton>Start Vaadin</guibutton>
					icon. Wait until the web server and web browser has started, it can take a while.
				</para>

				<para>
					If the start icon fails in your environment for some reason, you can
					start the Content Browser by following the instructions for Linux/UNIX
					above: open a shell window, change to the installation directory, and
					execute <command>sh start.sh</command>.
				</para>
			</section>
		</section>

        <section xml:id="getting-started.package.contents">
			<title>Package Contents</title>

			<para>
				At the root of installation directory, you can find the
				<filename>start.bat</filename> (Windows) or <filename>start.sh</filename>
				(Linux and Mac) script that launches the Vaadin Content Browser, which
				allows you to run the demo applications and read the documentation
				included in the package.
			</para>

			<figure xml:id="figure.package-contents">
				<title>Vaadin Package Contents</title>
				<mediaobject>
					<imageobject role="html">
						<imagedata align="center" fileref="img/intro/toolkit-package-lo.png"/>
					</imageobject>
					<imageobject role="fo">
						<imagedata scale="60" smallscale="100%" align="center" fileref="img/intro/toolkit-package-hi.png"/>
					</imageobject>
				</mediaobject>
			</figure>

			<para>
				The <filename>WebContent</filename> directory contains all files related
				to Vaadin and the Content Browser. If you do not
				wish to or can not run the Content Browser, you can open 
				<filename>index.html</filename> in a web browser to view the
				installation package contents and documentation. The demos will
				not be usable though. The <filename>release-notes.html</filename> file contains
				information about changes in the latest release and the release
				history. The <filename>license</filename> subdirectory contains licensing guidelines
				(<filename>licensing-guidelines.html</filename>) for Vaadin and licenses
				for other libraries included in the installation package. The <filename>COPYING</filename> 
				file in the installation root also contains license information.
			</para>

			<para>
				 The Vaadin Library itself is located at
				 <filename>WebContent/vaadin-6.x.x.jar</filename>. The JAR package
				 contains, in addition to the compiled files, the full source code of the
				 library.
			</para>

			<para>
				The <filename>WebContent/docs</filename> directory contains full
				documentation for Vaadin, including JavaDoc API Reference
				Documentation (<filename>api</filename> subdirectory) and this manual in both 
				HTML and printable PDF format.
			</para>

			<para>
				The <filename>WebContent/WEB-INF</filename> directory contains source code
				for the demo applications in the <filename>src</filename> subdirectory and
				the required libraries in the <filename>lib</filename> subdirectory.
			</para>

			<para>
				The <filename>gwt</filename> folder contains the full Google Web Toolkit
				installation package, including runtime libraries for the selected
				operating system, full documentation, and examples. You will need GWT if
				you intend to compile custom client-side widgets for Vaadin (described in
				<xref linkend="gwt"/>).
			</para>

			<para>
				In addition, the installation directory contains project files to allow
				importing the installation package as a project into the Eclipse IDE. 
				See <xref linkend="getting-started.quickstart"/> for details on how to
				do this. 
			</para>
		</section>


		<section xml:id="getting-started.package.demo.run">
			<title>Demo Applications</title>

			<para>
				The Content Browser allows you to run several demo applications included
				in the installation package. The applications demonstrate how you can use
				Vaadin for different tasks. Below is a selection of the included
				demos. Notice that the source code for all demos is included in the
				installation package and you can directly modify them if you import the
				package as a project in Eclipse, as instructed in <xref
				linkend="getting-started.quickstart"/>.
			</para>

			<variablelist>
				<varlistentry>
					<term>Sampler</term>
					<listitem>
						Sampler demonstrates the various standard components and features
						of Vaadin. Clicking on one of the available sample icons will take
						you to the sample page, where you can see a live version of the
						sample together with a short description of feature. The Sampler
						allows you to view the full source code of each sample and
						provides links to the API documentation and to related
						samples. Sampler is the best place to get an overview of what is
						included in Vaadin.
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>Address Book Tutorial</term>
					<listitem>
						This step-by-step tutorial covers everything needed to build a
						Vaadin application. The tutorial shows how you create
						layouts/views, implement navigation between views, bind components
						to a data source, use notifications, and much more. It also
						includes a section on how to create a custom theme for your
						application.
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>Reservation Application</term>
					<listitem>
						The Reservation Application demonstrates the use of various
						components in a semi-real application connected to a local
						database. It also shows how to integrate a Google Maps view inside
						an application.
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>Coverflow</term>
					<listitem>
						A simple example on how you can integrate Vaadin with Flex.
					</listitem>
				</varlistentry>
				<varlistentry>
					<term>VaadinTunes</term>
					<listitem>
						A non-functional application that demonstrates how you can create
						complex layouts using Vaadin.
					</listitem>
				</varlistentry>
			</variablelist>

            <para>
                <emphasis>Note: starting the demo applications can take several seconds.</emphasis>
            </para>
		</section>
	</section>
	
	
	<section xml:id="getting-started.environment">
		<title>Setting up the Development Environment</title>
		
		<para>
			This section gives a step-by-step guide for setting up
			a development environment. Vaadin supports a
			wide variety of tools, so you can use any IDE for
			writing the code, most web browsers for viewing the
			results, any operating system or processor supported
			by the Java 1.5 platform, and almost any Java server for
			deploying the results.
		</para>

		<para>
			In this example, we use the following toolchain:

			<itemizedlist>
				<listitem><link xlink:href="http://www.microsoft.com/windowsxp/">Windows XP</link> or Linux or Mac</listitem>
				<listitem><link xlink:href="http://java.sun.com/javase/downloads/index.jsp">Sun Java 2 Standard Edition 6.0</link> (Java 1.5 or newer is required)</listitem>
				<listitem><link xlink:href="http://www.eclipse.org/downloads/">Eclipse IDE for Java EE Developers (Ganymede version)</link></listitem>
				<listitem><link xlink:href="http://tomcat.apache.org/">Apache Tomcat 6.0 (Core)</link></listitem>
				<listitem><link xlink:href="http://www.getfirefox.com/">Firefox 3.0.7</link></listitem>
				<listitem><link xlink:href="http://www.getfirebug.com/">Firebug 1.3.3 (optional)</link></listitem>
				<listitem><link xlink:href="http://vaadin.com/download/">Vaadin 6.x.x</link></listitem>
			</itemizedlist>

			The above is a good choice of tools, but you can use almost any tools you are comfortable with.
		</para>

		<figure xml:id="figure.toolchain">
			<title>Development Toolchain and Process</title>
			<mediaobject>
				<imageobject role="html">
					<imagedata align="center" fileref="img/intro/toolchain-lo.png"/>
				</imageobject>
				<imageobject role="fo">
					<imagedata scale="75" smallscale="100%" align="center" fileref="img/intro/toolchain-hi.png"/>
				</imageobject>
			</mediaobject>
		</figure>

		<para>
			<xref linkend="figure.toolchain"/> illustrates the development
			environment and process. You develop your application as an Eclipse
			project. The project must include, in addition to your source code, the Vaadin
			Library. It can also include your project-specific themes.
		</para>

		<para>
			You must compile and deploy a project to a web container before you can use
			use it. You can deploy a project through the Web Tools Platform for Eclipse,
			which allows automatic deployment of web applications from Eclipse. You can
			deploy a project also manually, by creating a web application archive (WAR)
			and deploying it through the web container's interface.
		</para>

		<section xml:id="getting-started.environment.java">
			<title>Installing Java SDK</title>

			<para>
				Java SDK is required by Vaadin and also by the Eclipse IDE.
				Vaadin is compatible with Java 1.5	and later editions. 
			</para>

			<section>
				<title>Windows</title>

				<orderedlist>
					<listitem>
						<para>
							Download Sun Java 2 Standard Edition 6.0 from 
							<link xlink:href="http://java.sun.com/javase/downloads/index.jsp">
							http://java.sun.com/javase/downloads/index.jsp</link>
						</para>
					</listitem>
					
					<listitem>
						<para>
							Install the Java SDK by running the installer. The default options 
							are fine.
						</para>
					</listitem>
				</orderedlist>			 
			</section>

			<section>
				<title>Linux / UNIX</title>

				<orderedlist>
					<listitem>
						<para> 
						Download Sun Java 2 Standard Edition 6.0 from <link xlink:href="http://java.sun.com/javase/downloads/index.jsp">
						http://java.sun.com/javase/downloads/index.jsp</link>
						</para>
					</listitem>
					<listitem>
						<para>
						Decompress it under a suitable base directory, such as
					<filename>/opt</filename>. For example, for Java SDK, enter (either as
					root or with <command>sudo</command> in Linux):

					<screen><prompt>#</prompt> <command>cd</command> <replaceable>/opt</replaceable>
<prompt>#</prompt> <command>sh</command> <replaceable>(path-to-installation-package)/jdk-6u1-linux-i586.bin</replaceable></screen>

					and follow the instructions in the installer.
						
						</para>
						</listitem>
					</orderedlist>
			</section>
		</section>
		
		<section xml:id="getting-started.environment.eclipse">
			<title>Installing Eclipse IDE</title>

			<section>
				<title>Windows</title>

				<orderedlist>
					<listitem>
						<para>
							Download Eclipse IDE for Java EE Developers (Ganymede version) from 
							<link xlink:href="http://www.eclipse.org/downloads/">
							http://www.eclipse.org/downloads/</link>
						</para>
					</listitem>
					
					<listitem>
						<para>
							Decompress the Eclipse IDE package to a suitable
							directory. You are free to select any directory and to use any
							ZIP decompressor, but in this example we decompress the ZIP
							file by just double-clicking it and selecting "Extract all
							files" task from Windows compressed folder task. In our
							installation example, we use <filename>C:\dev</filename> as
							the target directory.
						</para>
					</listitem>
										
					<para>
						Eclipse is now installed in
						<filename>C:\dev\eclipse</filename> and can be started from
						there (by double clicking eclipse.exe).
					</para>
					
				</orderedlist>
			</section>

			<section>
				<title>Linux / UNIX</title>

				<para>
					You have two basic options for installing Eclipse in Linux and UNIX:
					you can either install it using the package manager of your
					operating system or by downloading and installing the packages
					manually. The <emphasis>manual installation method is
					recommended</emphasis>, because the latest versions of the packages
					available in a Linux package repository may be incompatible with
					Eclipse plugins that are not installed using the package
					manager.
				</para>

			<orderedlist>
					<listitem>
						<para>
					Download Download Eclipse IDE for Java EE Developers (Ganymede version) from  
							<link xlink:href="http://www.eclipse.org/downloads/">
								http://www.eclipse.org/downloads/</link>
					</para>
					</listitem>
					<listitem>
					<para>
					Decompress the Eclipse package into a suitable base directory.  It is
					important to make sure that there is no old Eclipse installation in the 
					target directory. Installing a new version on top of an	old one probably 
					renders Eclipse unusable.
					</para>
					</listitem>
					<listitem>
					<para>
					Eclipse should normally be installed as a regular user, as this makes
					installation of plugins easier. Eclipse also stores some user settings
					in the installation directory. To install the package, enter:

					<screen><prompt>$</prompt> <command>tar</command> zxf <replaceable>(path-to-installation-package)/eclipse-jee-ganymede-SR2-linux-gtk.tar.gz</replaceable></screen>

					This will extract the package to a subdirectory with the name
					<filename>eclipse</filename>.
					</para>
					</listitem>

				<listitem>
				<para>
					You may wish to add the Eclipse installation directory and the
					<filename>bin</filename> subdirectory in the installation directory of
					Java SDK to your system or user PATH.
				</para>
				</listitem>
				</orderedlist>
				
				<para>
					An alternative to the above procedure is to use the package management 
					system of your operating system. For example, in Ubuntu Linux, which includes
					Sun Java SDK and Eclipse in its APT repository, you can install the
					programs from a package manager GUI or from command-line with a
					command such as:
				</para>

					<screen><prompt>$</prompt> <command>sudo apt-get</command> install sun-java6-jdk eclipse</screen>

				<para>
					This is, however, <emphasis>not recommended</emphasis>, because the
					Eclipse package may not include all the necessary Java EE tools, most
					importantly the Web Standard Tools, and it may cause incompatibilities
					with some components that are not installed with the package
					management system of your operating system.
				</para>

			</section>
		</section>

		<section xml:id="getting-started.environment.tomcat">
			<title>Installing Apache Tomcat</title>

			<para>
				Apache Tomcat is a lightweight Java web server suitable for both
				development and production. There are many ways to install it, but here we
				simply decompress the installation package.
			</para>

			<para>
				<emphasis>Apache Tomcat should be installed with user
				permissions.</emphasis> During development, you will be running 
				Eclipse or some other IDE with user permissions, but deploying 
				web applications to a Tomcat server that is installed system-wide 
				requires administrator or root permissions.
			</para>

			<orderedlist>
				<listitem>
					<para>
						Download the installation package:
					</para>
					<para>
						Apache Tomcat 6.0 (Core Binary Distribution) from
						<uri>http://tomcat.apache.org/</uri>
					</para>
				</listitem>
	
				<listitem>
					<para>
						Decompress Apache Tomcat package to a suitable target directory,
						such as <filename>C:\dev</filename> (Windows) or
						<filename>/opt</filename> (Linux or Mac OS X). The Apache Tomcat
						home directory will be
						<filename>C:\dev\apache-tomcat-6.0.x</filename> or
						<filename>/opt/apache-tomcat-6.0.x</filename>,
						respectively.
					</para>
				</listitem>
										
			</orderedlist>			 
		</section>

		<section xml:id="getting-started.environment.firebug">
			<title>Firefox and Firebug</title>

			<para>
				Vaadin supports many web browsers and you can use any of them for
				development. If you plan to create a custom theme, customized layouts or new
				user interface components, we recommend that you use Firefox together with 
				Firebug for debugging. Vaadin contains special support for Firebug
				and can show debug information in its console.
			</para>
			
			<para>
				If you do not have Firefox installed already, go to <link xlink:href="http://www.getfirefox.com/">
				www.getfirefox.com</link> and download and run the installer.
			</para>

			<para>
				<emphasis>Optional</emphasis>. After installing Firefox, use it to open <link
				xlink:href="http://www.getfirebug.com/"> http://www.getfirebug.com/</link>. Follow
				the instructions on the site to install the latest stable version of Firebug 
				available for the browser. You might need to tell Firefox to allow the installation
				by clicking the yellow warning bar at the top of the browser-window.
			</para>
			
			<para>When Firebug is installed, it can be enabled at any time from the bottom
			right corner of the Firefox window. <xref
			linkend="figure.firebug.calc"/> shows an example of what Firebug looks like.</para>

			 <figure xml:id="figure.firebug.calc">
				<title>Firebug Debugger for Firefox</title>
				<mediaobject>
					<imageobject role="html">
						<imagedata align="center" fileref="img/intro/firebug.png"/>
					</imageobject>
					<imageobject role="fo">
						<imagedata scale="90" smallscale="100%" align="center" fileref="img/intro/firebug.png"/>
					</imageobject>
				</mediaobject>
			</figure>

			<para>
				Now that you have installed the development environment, you can proceed to
				creating your first application.
			</para>
		</section>
		
		<section xml:id="getting-started.environment.eclipse-plugin">
			<title>Vaadin Plugin for Eclipse</title>
	
			<para>
				You can develop Vaadin applications with any IDE or even without an IDE. For Eclipse IDE
				users, Vaadin includes a special integration plugin that makes the development process easier. The plugin
				includes wizards for creating new Vaadin-based projects, UI components (composites), themes,
				client-side widgets and widgetsets. Plugin includes a WYSIWYG editor for editing your custom
				UI components visually. It has a full round-trip support to make WYSIWYG editor integrate 
				seamlessy to your development process. Plugin even includes a copy of this book to make 
				it browseable directly inside Eclipse IDE.
			</para>
			
			<para>
				The plugin can be installed as follows:
			</para>
	
			<orderedlist>
				<listitem>
					Start Eclipse.
				</listitem>
				<listitem>
						Select 
						<menuchoice><guimenu>Help</guimenu><guimenuitem>Software Updates...</guimenuitem></menuchoice>.
				</listitem>
				<listitem>
						Select <guibutton>Available Software</guibutton> tab.
				</listitem>
				<listitem>
					Add the Vaadin plugin update-site by pressing <guibutton>Add Site...</guibutton>. The URL of
					the site is <link xlink:href="http://vaadin.com/eclipse">http://vaadin.com/eclipse</link>.
				</listitem>
	
				<listitem>
					Select to install all pluging on the Vaadin Update Site from the tree and press <guibutton>Install...</guibutton>
				</listitem>
			</orderedlist>
	
			<para>
				Detailed and up-to-date installation instructions for the Eclipse plugin can be found in 
				<link xlink:href="http://vaadin.com/eclipse">http://vaadin.com/eclipse</link>. 
			</para>
			
			<note>
				<title>Eclipse plugin includes everything you need </title>
	
				The plugin includes Vaadin library and documentation. Thus it is not completely necessary
				to download Vaadin distribution package if you are installing the plugin.
			</note>
	
		</section>

	</section>

	<section xml:id="getting-started.quickstart">
		<title>QuickStart with Eclipse</title>

		<para>
			Eager to start developing you own applications using Vaadin? This section 
			presents a QuickStart into running and debugging Vaadin demos under Eclipse. 
			The	QuickStart includes a web server, so you do not need to have a full-weight
			web container such as Apache Tomcat installed.
		</para>

		<section>
			<title>Starting Eclipse</title>
			
			<para>
				If you have followed the instructions in <xref
				linkend="getting-started.environment"/> you can start Eclipse by
				running <filename>C:\dev\eclipse\eclipse.exe</filename> (Windows)
				or <filename>/opt/eclipse/eclipse</filename> (Linux or OS X).
			</para>

			<para>
				When starting Eclipse for the first time, it asks where to save
				the workspace. You can select any directory, but here we select
				<filename> C:\dev\workspace</filename> (Windows) or
				<filename>/home/&lt;user&gt;/workspace</filename> (Linux or OS
				X). We suggest that you also set this as the default.
			</para>

			<para>
				Close the Eclipse "Welcome" -screen when you are ready to continue.
			</para>
			
		</section>

		<section>
			<title>Importing Vaadin as a Project</title>

			<para>
				If you have not yet downloaded the Vaadin package, instructions
				for downloading and unpacking are available at <xref
				linkend="getting-started.package.installing"/>.
			</para>
			
			<para>
				The installation directory of Vaadin contains all necessary
				files to allow importing it as a ready-to-run Eclipse project:
			</para>

			<orderedlist>
				<listitem>
					<para>
						Start Eclipse with any workspace you like. Switch to the Java Perspective 
						through 
						<menuchoice><guimenu>Window</guimenu><guisubmenu>Open
						Perspective</guisubmenu><guimenuitem>Java</guimenuitem></menuchoice>.
					</para>
				</listitem>

				<listitem>
					<para>
						Select <menuchoice><guimenu>File</guimenu>
						<guimenuitem>Import...</guimenuitem></menuchoice> to open the import dialog.
					</para>
				</listitem>

				<listitem>
					<para>
						In the <guilabel>Import</guilabel> dialog, select
						<menuchoice><guimenu>General</guimenu> <guimenuitem>Existing
						Projects into Workspace</guimenuitem></menuchoice> and click
						<guibutton>Next</guibutton>.
					</para>
				</listitem>

				<listitem>
					<para>
						In the <menuchoice><guimenuitem>Select root
						directory</guimenuitem></menuchoice> option, click the
						<guibutton>Browse</guibutton> button, and select the folder where
						you unpacked Vaadin, e.g. 
						<filename>c:/dev/vaadin-windows-6.x.x</filename>. Click
						<guibutton>OK</guibutton> in the selection window. The Projects list 
						now shows a project named <guilabel>vaadin-examples</guilabel>. 
						Click <guibutton>Finish</guibutton> in the <guilabel>Import</guilabel>
						window to finish importing the project.
					</para>

					<para>
						The newly imported project should look like <xref
			linkend="figure.toolkit-example-eclipse-project"/>.
					</para>

					<figure xml:id="figure.toolkit-example-eclipse-project">
						<title>Vaadin demo project imported into Eclipse</title>
						<mediaobject>
							<imageobject role="html">
								<imagedata align="center" fileref="img/intro/quickstart-newproject4.png"/>
							</imageobject>
							<imageobject role="fo">
								<imagedata scale="90" smallscale="100%" align="center" fileref="img/intro/quickstart-newproject4.png"/>
							</imageobject>
						</mediaobject>
					</figure>

					<para>
						You can now browse the source code of the demo applications in Eclipse. 
						The next section describes how you can run the demos.
					</para>
				</listitem>

			</orderedlist>

		</section>

		<section xml:id="getting-started.quickstart.demo.run">
			<title>Running the Demo Applications in Eclipse</title>

			<para>
				Once the project is imported, as described above, you can run the Content
				Browser, including the demo applications, as follows:
			</para>

			<orderedlist>
				<listitem>
					From the main menu, select
					<menuchoice><guimenu>Run</guimenu><guimenuitem>Run
					Configurations...</guimenuitem></menuchoice>.
				</listitem>

				<listitem>
					From the list on the left, select <menuchoice><guimenu>Java
					Application</guimenu><guimenuitem>Vaadin Web
					Mode</guimenuitem></menuchoice>.
				</listitem>

				<listitem>
					Click <guibutton>Run</guibutton>.
				</listitem>
			</orderedlist>

			<para>
				Note that after the application has been launched once, it appears in the
				Favorites list. You can then click on the small dropdown arrow on the right side of the
				<guibutton>Run</guibutton> button on Eclipse toolbar and select
				<menuchoice><guimenuitem>Vaadin Web Mode</guimenuitem></menuchoice>.
			</para>

			<screenshot>
				<mediaobject>
					<imageobject role="html">
						<imagedata align="center" fileref="img/intro/quickstart-rundemo1.png"/>
					</imageobject>
					<imageobject role="fo">
						<imagedata scale="50" smallscale="100" align="center" fileref="img/intro/quickstart-rundemo1.png"/>
					</imageobject>
				</mediaobject>
			</screenshot>
			
			<para>
				Running the application in Web Mode will start an embedded web server and 
				open a browser window with the Content Browser. The default system web 
				browser is opened; make sure that the browser is compatible with 
				Vaadin. The <guilabel>Console</guilabel> view in the lower pane 
				of Eclipse will	display text printed to standard output by the application. 
				Clicking on	the red <guibutton>Terminate</guibutton> button will stop the server.
			</para>

			<figure>
				<title>Vaadin Content Browser Started Under Eclipse</title>
				<mediaobject>
					<imageobject role="html">
						<imagedata align="center" fileref="img/intro/quickstart-rundemo3.png"/>
					</imageobject>
					<imageobject role="fo">
						<!--imagedata width="100%" scalefit="1" contentdepth="100%" fileref="img/intro/quickstart-rundemo3.png"/ -->
						<imagedata scale="100" smallscale="100%" fileref="img/intro/quickstart-rundemo3.png"/>
					</imageobject>
				</mediaobject>
			</figure>


			<para>
				Note that executing the web application locally may cause a security
				warning from your firewall software because of the started web server.
				You need to allow connections to port 8888 for the Content Browser to work.
				Also, if the web service fails to start, make sure that no other
				service is using port 8888.
			</para>

			<section>
				<title>Launching the Hosted Mode Browser</title>

				<para>
					The Hosted Mode Browser of Google Web Toolkit is a special web browser
					that runs the client-side GWT Java code as Java runtime instead of
					JavaScript. This allows you to debug the client-side components
					in an IDE such as Eclipse.
				</para>

				<note>
					<title>Hosted Mode Browser in Linux</title>
					
					The Hosted Mode Browser in Google Web Toolkit 1.5.62/Linux is 
					not compatible with Vaadin. If you want to debug client-side code
					in Linux you should download the experimental OOPHM-version of Vaadin.
					This contains a newer GWT which supports using a normal browser for debugging.
					This is explained more in <xref linkend="gwt.development.oophm"/>.
					<emphasis>Note that you should not use the OOPHM version of Vaadin in production
					environments, only for debugging.</emphasis>
				</note>

				<para>
					To run the demo applications in the Hosted Mode Browser of Google Web
					Toolkit, follow the following steps:
				</para>

				<orderedlist>
					<listitem>
						If not already started, start the demo application in Web Mode as
						described above. We only need the server so close the web browser which is
						automatically opened.
					</listitem>

					<listitem>
						From the main menu, select
						<menuchoice><guimenu>Run</guimenu><guimenuitem>Debug Configurations...
						</guimenuitem></menuchoice>.
					</listitem>

					<listitem>
						From the list select <menuchoice><guimenu>Java
						Application</guimenu><guimenuitem>Vaadin Hosted
						Mode</guimenuitem></menuchoice>.
					</listitem>

					<listitem>
						Click <guibutton>Debug</guibutton>.
					</listitem>
				</orderedlist>

				<para>
					<emphasis role="strong">Starting demo applications under the Hosted
					Mode Browser can take considerable time!</emphasis> This is especially
					true for the Reservation and Color Picker applications, which require
					compilation of custom widget sets. During this time, the Hosted Mode
					Browser is unresponsive and does not update its window. Compiling widget sets
					can take 5-30 seconds, depending on the hardware.
				</para>

				<para>
					As with the Web Mode launcher, after you have run the Hosted Mode launcher once, 
					you	can click the dropdown marker on right of the <guibutton>Debug</guibutton> 
					button in the toolbar and select <guimenuitem>Vaadin Hosted Mode</guimenuitem>.
				</para>

				<para>
					To use the Hosted Mode Browser in other projects, you need to
					create a launch configuration in Eclipse. See <xref
					linkend="gwt.hosted-mode"/> for more detailed information
					about the Hosted Mode Browser and how to create the launch
					configuration.
				</para>
			</section>

			<section>
				<title>How to Stop the Run</title>

				<para>
					To stop the launched Jetty web container that serves the Content
					Browser web application, select the <guilabel>Console</guilabel> tab
					and click on the <guibutton>Terminate</guibutton> button.
				</para>

				<figure>
					<title>Terminating a Launch</title>
					<mediaobject>
						<imageobject role="html">
							<imagedata align="center" fileref="img/intro/quickstart-stopdemo1.png"/>
						</imageobject>
						<imageobject role="fo">
							<imagedata scale="50" smallscale="100%" align="center" fileref="img/intro/quickstart-stopdemo1.png"/>
						</imageobject>
					</mediaobject>
				</figure>

				<para>
					To clean up all terminated launches from the
					<guilabel>Console</guilabel> window, click on the <guibutton>Remove
					All Terminated Launches</guibutton> button.
				</para>

				<figure>
					<title>Removing Terminated Launches</title>
					<mediaobject>
						<imageobject role="html">
							<imagedata align="center" fileref="img/intro/quickstart-stopdemo2.png"/>
						</imageobject>
						<imageobject role="fo">
							<imagedata scale="50" smallscale="100%" align="center" fileref="img/intro/quickstart-stopdemo2.png"/>
						</imageobject>
					</mediaobject>
				</figure>
			</section>

		</section>

		<section xml:id="getting-started.quickstart.demo.debug">
			<title>Debugging the Demo Applications in Eclipse</title>
			
			<para>
				At some point when developing an application, you want to debug it. Running a web
				application in debug mode is easy in Eclipse. Next, we will show you how to debug
				the demo applications by inserting a breakpoint in the Calc example.
			</para>

			<orderedlist>
				<listitem>
					Make sure to stop any previous <guilabel>Run</guilabel> command as
					instructed above at the end of <xref
					linkend="getting-started.quickstart.demo.run"/>.
				</listitem>
				<listitem>
					<para>
						Select 
						<menuchoice><guimenu>Run</guimenu><guimenuitem>Debug Configurations...</guimenuitem></menuchoice>
						from the main menu and the Debug configuration window will open.
					</para>
				</listitem>
				<listitem>
					<para>
						Select <menuchoice><guimenu>Java
						Application</guimenu><guimenuitem>Vaadin Web
						Mode</guimenuitem></menuchoice> and click
						<guibutton>Debug</guibutton>. The server will start and the web
						browser will open.
					</para>
				</listitem>
				<listitem>
					<para>
						Open the source code for the Calc program. It is located in
						<filename>WebContent/WEB-INF/src/com.vaadin.demo.Calc</filename>. 
						<filename>WebContent/WEB-INF/src</filename> is the project's source folder, 
						shown right below the JRE System Library. Double-click
						the class to open the source code in the editor.
					</para>
				</listitem>

				<listitem>
					<para>
						Insert a breakpoint in the <methodname>init()</methodname> 
						by right-clicking on the gray bar on the left of the editor window
						to open the context menu, and select
						<menuchoice><guimenuitem>Toggle
						Breakpoint</guimenuitem></menuchoice>.
					</para>
				</listitem>
				<listitem>
					<para>
						Switch to the browser window and click the
						<guibutton>Calc</guibutton> link (below 
						<guilabel>More Examples</guilabel>) to open it.
					</para>
				</listitem>
				<listitem>
					<para>
						Eclipse encouters the breakpoint and asks to switch to the Debug
						perspective. Click <guibutton>Yes</guibutton>. The debug window
						will show the current line where the execution stopped as 
						illustrated in <xref linkend="figure.getting-started.quickstart.debug"/>:
					</para>

					<figure xml:id="figure.getting-started.quickstart.debug">
						<title>Execution Stopped at Breakpoint in Debug Perspective in Eclipse</title>
						<mediaobject>
							<imageobject role="html">
								<imagedata align="center" fileref="img/intro/quickstart-debug-stopped.png"/>
							</imageobject>
							<imageobject role="fo">
								<imagedata scale="75" smallscale="100%" align="center" fileref="img/intro/quickstart-debug-stopped.png"/>
							</imageobject>
						</mediaobject>
					</figure>
				</listitem>
				<listitem>
					<para>
						You can now step forward or use any commands you would normally use when debugging an application in Eclipse.
						Note that you can only debug the application code in this way. If you are running the Hosted Mode browser
						you can also insert break-points in client side component code and debug it.  
					</para>
				</listitem>
			</orderedlist>
		</section>
		
		<section xml:id="getting-started.quickstart.skeleton">
			<title>Using QuickStart as a Project Skeleton</title>

			<para>
				If you like, you can also use the imported Vaadin demo project
				as a skeleton for your own project. Just remove any unnecessary files or 
				files related to the demo applications from the project. 
				
				The proper way of creating a new Vaadin project will be described in the next section:
				<xref
				linkend="getting-started.first-project"/>.
			</para>

		</section>
	</section>
	
	<section xml:id="getting-started.first-project">
		<title>Your First Project with Vaadin</title>

		<para>
			This section gives instructions for creating a new Eclipse project that uses
			Vaadin with the Vaadin Plugin. The task will include the following steps:
		</para>

		<orderedlist>
			<listitem>
				Create a new project
			</listitem>
			<listitem>
				Write the source code
			</listitem>
			<listitem>
				Configure and start Tomcat (or some other web server)
			</listitem>
			<listitem>
				Open a web browser to use the web application
			</listitem>
		</orderedlist>

		<para>
			We also show how you can debug the application in the debug mode in Eclipse.
		</para>
		
		<para>
			This walkthrough assumes that you have already installed the Vaadin Plugin and
			set up your development environment, as instructed in <xref
			linkend="getting-started.package.installing"/> and <xref
			linkend="getting-started.environment"/>.
		</para>

		<section xml:id="getting-started.first-project.creation">
			<title>Creating the Project</title>

			<para>
				Let us create the first application project with the tools installed in
				the previous section. First, launch Eclipse and follow the following
				steps:
			</para>

			<orderedlist>
				<listitem>
					Start creating a new project by selecting from the menu
					<menuchoice><guimenu>File</guimenu><guisubmenu>New</guisubmenu><guimenuitem>Project...</guimenuitem></menuchoice>.
				</listitem>

				<?dbfo-need height="8cm" ?>
				<listitem>
					From the <guilabel>New Project</guilabel> window that opens, select
					<menuchoice><guimenu>Web</guimenu><guimenuitem>Dynamic Web
					Project</guimenuitem></menuchoice> and click
					<guibutton>Next</guibutton>.

					<screenshot>
						<mediaobject>
							<imageobject role="html">
								<imagedata align="center" fileref="img/intro/newProject.png"/>
							</imageobject>
							<imageobject role="fo">
								<imagedata scale="70" smallscale="100%" align="center" fileref="img/intro/newProject.png"/>
							</imageobject>
						</mediaobject>
					</screenshot>
				</listitem>

				<listitem>
					<para>
						Enter the <guilabel>Project name</guilabel>, such as "<literal>myproject</literal>", and leave
						<guilabel>Use default location</guilabel> selected to create the new
						project under the default workspace location. 
					</para>
					<para>
						Check that the <guilabel>Target runtime</guilabel>,
						that is the web container, is correct. For example, if you installed Apache Tomcat, check that
						it is selected here.
					</para>
					<para>
						Change the configuration to <guilabel>Vaadin Project</guilabel>. If that 
						configuration is not available, install Vaadin Eclipse Plugin as described in the section
						<xref linkend="getting-started.environment.eclipse-plugin"/>.
					</para>
					<para>Click <guibutton>Next</guibutton>.</para>

					<screenshot>
						<mediaobject>
							<imageobject role="html">
								<imagedata align="center" fileref="img/intro/myproject-settings.png"/>
							</imageobject>
							<imageobject role="fo">
								<imagedata scale="70" smallscale="100%" align="center" fileref="img/intro/myproject-settings.png"/>
							</imageobject>
						</mediaobject>
					</screenshot>
				</listitem>

				<?dbfo-need height="8cm" ?>
				<listitem>
					<para>
						The wizard will suggest <filename>myproject</filename> for the context
						name. This will be the sub-path in the URL, for example
						<filename>http://localhost:8080/myproject</filename>. The default for the
						application root will be <filename>/</filename> (root).
					</para>
			
					<screenshot>
						<mediaobject>
							<imageobject role="html">
								<imagedata align="center" fileref="img/intro/myproject-web.png"/>
							</imageobject>
							<imageobject role="fo">
								<imagedata scale="70" smallscale="100%" align="center" fileref="img/intro/myproject-web.png"/>
							</imageobject>
						</mediaobject>
					</screenshot>

					<para>
						You can just accept the defaults and click
						<guibutton>Next</guibutton>.
					</para>
				</listitem>

				<?dbfo-need height="8cm" ?>
				<listitem>
					<para>
						The Vaadin project settings page offers to create a project
						template for you. Accept that and set the application name,
						package, and main application class name, or accept the
						defaults. Click <guibutton>Finish</guibutton>. The wizard closes
						and creates the project.
					</para>
				
					<screenshot>
						<mediaobject>
							<imageobject role="html">
								<imagedata align="center" fileref="img/intro/myproject-vaadin.png"/>
							</imageobject>
							<imageobject role="fo">
								<imagedata scale="50" smallscale="100%" align="center" fileref="img/intro/myproject-vaadin.png"/>
							</imageobject>
						</mediaobject>
					</screenshot>
				</listitem>

				<listitem>
					<para>
						Eclipse may ask to switch to J2EE perspective. A Dynamic Web
						Project uses an external web server and the J2EE perspective
						provides tools to control the server and manage application
						deployment. Click <guibutton>Yes</guibutton>.
					</para>
				</listitem>
			</orderedlist>
		</section>

		<section xml:id="getting-started.first-project.coding">
			<title>Exploring the Project</title>

			<para>
				After the <guilabel>New Project</guilabel> wizard exists, it has done all
				the work for us: Vaadin libraries are installed in the
				<filename>WebContent/WEB-INF/lib</filename> directory, an application
				class skeleton has been written to <filename>src</filename> directory, and
				<filename>WebContent/WEB-INF/web.xml</filename> already contains a
				deployment descriptor.
			</para>

			<figure>
				<title>A New Dynamic Web Project</title>
				<mediaobject>
					<imageobject role="html">
						<imagedata align="center" fileref="img/intro/myproject-created.png"/>
					</imageobject>
					<imageobject role="fo">
						<imagedata scale="65" smallscale="100%" align="center" fileref="img/intro/myproject-created.png"/>
					</imageobject>
				</mediaobject>
			</figure>

			<para>
				The application class created by the plugin contains the following code:
			</para>

			<programlisting><?pocket-size 75% ?><![CDATA[package com.example.myproject;

import com.vaadin.Application;
import com.vaadin.ui.*;
public class MyprojectApplication extends Application
{
   @Override 
   public void init() {
      Window mainWindow = 
         new Window("Myproject Application");
      Label label = new Label("Hello Vaadin user");
      mainWindow.addComponent(label);
      setMainWindow(mainWindow);
   }
}
]]></programlisting>

			<para>
				Let us add a button to the application to make it a bit more
				interesting. The resulting <methodname>init()</methodname> method could
				look something like:
			</para>

<programlisting><![CDATA[public void init() {
   final Window mainWindow = 
      new Window("Myproject Application");

   Label label = new Label("Hello Vaadin user");
   mainWindow.addComponent(label);

   mainWindow.addComponent(
      new Button("What is the time?",
         new Button.ClickListener() {
         public void buttonClick(ClickEvent event) {
            mainWindow.showNotification(
               "The time is " + new Date());
         }
      }));

   setMainWindow(mainWindow);
}]]></programlisting>

			<para>
				The deployment descriptor <filename>WebContent/WEB-INF/web.xml</filename>
				defines Vaadin framework servlet, the application class, and servlet
				mapping:
			</para>

			<example xml:id="ex.web.calc">
				<title>Web.xml Deployment Descriptor for our project</title>
				<programlisting><?pocket-size 65% ?><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
  xmlns="http://java.sun.com/xml/ns/javaee" 
  xmlns:web="http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd" 
  id="WebApp_ID" version="2.5">

  <display-name>myproject</display-name>

  <context-param>
  	<description>Vaadin production mode</description>
  	<param-name>productionMode</param-name>
  	<param-value>false</param-value>
  </context-param>

  <servlet>
  	<servlet-name>Myproject Application</servlet-name>
  	<servlet-class>
  	  com.vaadin.terminal.gwt.server.ApplicationServlet
  	</servlet-class>
  	<init-param>
      <description>Vaadin application class to start</description>
      <param-name>application</param-name>
      <param-value>
        com.example.myproject.MyprojectApplication
      </param-value>
  	</init-param>
  </servlet>

  <servlet-mapping>
  	<servlet-name>Myproject Application</servlet-name>
  	<url-pattern>/*</url-pattern>
  </servlet-mapping>
</web-app>
]]></programlisting>
			</example>
			
			<para>
				For a more detailed treatment of the <filename>web.xml</filename> file,
				see <xref linkend="section.web.web-xml"/>.
			</para>
		</section>
			
		<section xml:id="getting-started.first-project.server">
			<title>Setting Up and Starting the Web Server</title>

			<para>
				Eclipse IDE for Java EE Developers has the Web Standard Tools package
				installed, which supports control of various web servers and automatic
				deployment of web content to the server when changes are made to a
				project.
			</para>

			<para>
				Make sure that Tomcat was installed with user permissions. Configuration
				of the web server in Eclipse will fail if the user does not have write
				permissions to the configuration and deployment directories under the
				Tomcat installation directory.
			</para>

			<para>
				Follow the following steps.
			</para>

			<orderedlist>
				<listitem>
					Switch to the <guimenuitem>Servers</guimenuitem> tab in the lower panel in
					Eclipse. List of servers should be empty after Eclipse is
					installed. Right-click on the empty area in the panel and select
					<menuchoice><guimenu>New</guimenu><guimenuitem>Server</guimenuitem></menuchoice>.

					<screenshot>
						<mediaobject>
							<imageobject role="html">
								<imagedata align="center" fileref="img/intro/tomcat-startserver-1.png"/>
							</imageobject>
							<imageobject role="fo">
								<imagedata scale="65" smallscale="100%" align="center" fileref="img/intro/tomcat-startserver-1.png"/>
							</imageobject>
						</mediaobject>
					</screenshot>
				</listitem>

				<listitem>
					Select <menuchoice><guimenu>Apache</guimenu><guimenuitem>Tomcat v6.0
					Server</guimenuitem></menuchoice> and set <guilabel>Server's host
					name</guilabel> as <literal>localhost</literal>, which should be the
					default. If you have only one Tomcat installed, <guilabel>Server
					runtime</guilabel> has only one choice. Click
					<guibutton>Next</guibutton>.

					<screenshot>
						<mediaobject>
							<imageobject role="html">
								<imagedata align="center" fileref="img/intro/tomcat-startserver-2.png"/>
							</imageobject>
							<imageobject role="fo">
								<imagedata scale="50" smallscale="70" align="center" fileref="img/intro/tomcat-startserver-2.png"/>
							</imageobject>
						</mediaobject>
					</screenshot>
					
				</listitem>

				<listitem>
					Add your project to the server by selecting it on the left and
					clicking <guibutton>Add</guibutton> to add it to the configured
					projects on the right. Click <guibutton>Finish</guibutton>.

					<screenshot>
						<mediaobject>
							<imageobject role="html">
								<imagedata align="center" fileref="img/intro/tomcat-startserver-3.png"/>
							</imageobject>
							<imageobject role="fo">
								<imagedata scale="50" smallscale="70" align="center" fileref="img/intro/tomcat-startserver-3.png"/>
							</imageobject>
						</mediaobject>
					</screenshot>
				</listitem>

				<listitem>
					The server and the project are now installed in Eclipse and are shown
					in the <guilabel>Servers</guilabel> tab. To start the server,
					right-click on the server and select
					<guimenuitem>Debug</guimenuitem>. To start the server in non-debug
					mode, select <guimenuitem>Start</guimenuitem>.

					<screenshot>
						<mediaobject>
							<imageobject role="html">
								<imagedata align="center" fileref="img/intro/tomcat-startserver-4.png"/>
							</imageobject>
							<imageobject role="fo">
								<imagedata scale="65" smallscale="100%" align="center" fileref="img/intro/tomcat-startserver-4.png"/>
							</imageobject>
						</mediaobject>
					</screenshot>
				</listitem>

				<listitem>
					The server starts and the WebContent directory of the project is
					published to the server on <uri>http://localhost:8080/myproject/</uri>.

					<screenshot>
						<mediaobject>
							<imageobject role="html">
								<imagedata align="center" fileref="img/intro/tomcat-startserver-5.png"/>
							</imageobject>
							<imageobject role="fo">
								<imagedata scale="65" smallscale="100%" align="center" fileref="img/intro/tomcat-startserver-5.png"/>
							</imageobject>
						</mediaobject>
					</screenshot>
				</listitem>
			</orderedlist>
		</section>

		<section xml:id="getting-started.first-project.run">
			<title>Running and Debugging</title>
	
			<para>
				Starting your application is as easy as selecting <guilabel>myproject</guilabel> from the 
				<guilabel>Project Explorer</guilabel> and then <menuchoice><guimenu>Run</guimenu>
				<guimenuitem>Debug As</guimenuitem><guimenuitem>Debug	 on Server</guimenuitem></menuchoice>. 
				Eclipse then opens the application in built-in web browser.
				
			</para>
			
			<figure>
				<title>Running a Vaadin Application</title>
				<mediaobject>
					<imageobject role="html">
						<imagedata align="center" fileref="img/intro/runningMyProject.png"/>
					</imageobject>
					<imageobject role="fo">
						<imagedata scale="50" smallscale="100%" align="center" fileref="img/intro/runningMyProject.png"/>
					</imageobject>
				</mediaobject>
			</figure>
			
			<para>
				You can insert break points in the
				Java code by double-clicking on the left margin bar of the source code
				window. For example, if you
				insert a breakpoint in the <methodname>buttonClick()</methodname> method
				and click the <guibutton>What is the time?</guibutton> button, Eclipse will ask
				to switch to the Debug perspective. Debug perspective will show where the execution stopped at the
				breakpoint. You can examine and change the state of the application. To continue execution, select <guimenuitem>Resume</guimenuitem> from
				<guimenu>Run</guimenu> menu.
			</para>
			
			<figure>
				<title>Debugging a Vaadin Application</title>
				<mediaobject>
					<imageobject role="html">
						<imagedata align="center" fileref="img/intro/debuggingMyProject.png"/>
					</imageobject>
					<imageobject role="fo">
						<imagedata scale="40" smallscale="100%" align="center" fileref="img/intro/debuggingMyProject.png"/>
					</imageobject>
				</mediaobject>
			</figure>

			<para>
				The procedure described above allows debugging the server-side
				application. For
				more information on debugging client-side widgets, see <xref
				linkend="gwt.hosted-mode"/>.
			</para>
		</section>
	</section>

</chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: xml
sgml-omittag:nil
sgml-shorttag:nil
sgml-namecase-general:nil
sgml-general-insert-case:lower
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:4
sgml-indent-data:t
sgml-parent-document:nil
sgml-exposed-tags:nil
sgml-local-catalogs:("/etc/sgml/catalog" "/usr/share/xemacs21/xemacs-packages/etc/psgml-dtds/CATALOG")
sgml-local-ecat-files:("ECAT" "~/sgml/ECAT" "/usr/share/sgml/ECAT" "/usr/local/share/sgml/ECAT" "/usr/local/lib/sgml/ECAT")
End:
-->
