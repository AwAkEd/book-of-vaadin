<?xml version="1.0" encoding="UTF-8"?>

<!-- ====================================================================== -->
<!-- Converted from the original Calendar Manual in ODT format in July 2011 -->
<!-- Original authors Tomi Virtanen (tomi.virtanen@itmill.com) and          -->
<!-- Risto Yrjana (risto.yrjana@itmill.com)                                 -->
<!-- ====================================================================== -->

<chapter xml:id="calendar">
    <title>Vaadin Calendar</title>

    <para>
        The Vaadin Calendar is a commercial add-on component for organizing and displaying
        calendar events. It can be used to view and manage events in monthly and weekly
        views.
    </para>

    <section xml:id="calendar.overview">
        <title>Overview</title>

        <para>
            The main features of the Vaadin Calendar include:
        </para>

        <itemizedlist>
            <listitem>
                Manage calendar by server-side API
            </listitem>
            <listitem>
                Two types of events: "all-day" events and events with a time range
            </listitem>
            <listitem>
                One minute resolution of the timeline
            </listitem>
            <listitem>
                Monthly, weekly, and daily views
            </listitem>
            <listitem>
                Control the range of the visible dates
            </listitem>
            <listitem>
                Selecting date or time range by dragging
            </listitem>
            <listitem>
                Draggable and resizable events
            </listitem>
            <listitem>
                Support for localization and timezones
            </listitem>
            <listitem>
                Support for most common browsers
            </listitem>
        </itemizedlist>

        <para>
            The API of the <classname>Calendar</classname> component allows managing its
            events, date range, styling, localization, and timezone. The data source of
            the calendar may be practically anything, as its events are queried
            dynamically by the component. You may use containers, or any other data source
            by implementing an <emphasis>event provider</emphasis> for the calendar.
        </para>

        <figure xml:id="figure.addons.calendar.overview.views.monthly" float="center" floatstyle="before">
            <title>Monthly view with All-Day and Normal Events</title>
            <mediaobject>
                <imageobject role="html">
                    <imagedata align="center" fileref="img/addons/calendar-monthly.png"/>
                </imageobject>
                <imageobject role="fo">
                    <imagedata scale="100" smallscale="100%" align="center" fileref="img/addons/calendar-monthly.png"/>
                </imageobject>
            </mediaobject>
        </figure>

        <para>
            Book of Vaadin currently includes only an introduction to Vaadin
            Calendar. Please refer to the product documentation included in the
            installation package for further details.
        </para>

        <simplesect xml:id="calendar.overview.views">
            <title>Views</title>

            <para>
                The Vaadin Calendar has two different type of views that are shown
                depending on the Calendar's date range. The Calendar displays a week by
                default. Calendar will be shown in a monthly view when date range is over
                than one week (seven days) long. Date range is always calculated in a
                accuracy of one millisecond.
            </para>

            <para>
                The monthly view, shown in <xref
                linkend="figure.addons.calendar.overview.views.monthly"/>, can easily be
                used to control all events, but it is best suited for longer
                events. Events that last for several days can easily be displayed and
                moved in the monthly view. In the figure, you can see two longer events
                that are highlighted with a blue and green background color. Other
                markings are shorter day events that last less than a 24 hours. These
                events cant be moved.
            </para>

            <figure xml:id="figure.addons.calendar.overview.views.weekly" float="center" floatstyle="before">
                <title>Weekly View</title>
                <mediaobject>
                    <imageobject role="html">
                        <imagedata align="center" fileref="img/addons/calendar-weekly.png"/>
                    </imageobject>
                    <imageobject role="fo">
                        <imagedata scale="100" smallscale="100%" align="center" fileref="img/addons/calendar-weekly.png"/>
                    </imageobject>
                </mediaobject>
            </figure>

            <para>
                When date range is over seven days long, the weekly view will be used.
                Weekly view can show any number of days from one to seven.
            </para>

            <para>
                In <xref linkend="figure.addons.calendar.overview.views.weekly"/>, you can
                see four normal day events and also all-day events at the top of the time
                line grid.
            </para>
        </simplesect>

        <simplesect xml:id="calendar.overview.event">
            <title>Calendar Event</title>

            <para>
                The Vaadin Calendar handles displayed events through the
                <classname>CalendarEvent</classname> interface. The concrete class of the
                event is decided by the implementor of the specific
                <classname>CalendarEventProvider</classname> used. By default,
                <classname>Calendar</classname> uses a
                <classname>BasicEventProvider</classname> to provide events. The
                <classname>BasicEventProvider</classname> uses
                <classname>BasicEvent</classname> instances.
            </para>

            <para>
                The Vaadin Calendar does not depend on any particular data source
                implementation. Events are queried by the <classname>Calendar</classname>
                from the provider that just has to implement the
                <classname>CalendarEventProvider</classname>. It is up to the event
                provider that <classname>Calendar</classname> gets the correct events.
            </para>

            <para>
                Event queries are done by asking the event provider for all the events
                between two given dates. The range of these dates is guaranteed to be at
                least as long as the start and end dates set for the component. The
                component can, however, ask for a longer range to ensure correct
                rendering. In particular, all start dates are expanded to the start of the
                day, and all end dates are expanded to the end of the day.
            </para>

            <para>
                A calendar event requires a start time and an end time. These are the only
                mandatory properties. In addition, an event can also be set as an all-day
                event by setting the <literal>all-day</literal> property of the event. You
                can also set the <literal>description</literal> of an event, which is
                displayed as a tooltip in the user interface.
            </para>

            <para>
                If the <literal>all-day</literal> field of the event is
                <literal>true</literal>, then the event is always rendered as an all-day
                event. In the monthly view, this means that no start time is displayed in
                the user interface and the event has an colored background. In the weekly
                view, all-day events are displayed in the upper part of the screen, and
                rendered similarly to the monthly view. In addition, when the time range
                of an event is 24 hours or longer, it is rendered as an all-day event in
                the monthly view.
            </para>

            <para>
                When the time range of an event is equal or less than 24 hours, with the
                accuracy of one millisecond, the event is considered as a normal day
                event. Normal event has a start and end times that may be on different
                days.
            </para>
        </simplesect>

        <simplesect xml:id="calendar.overview.interaction">
            <title>Interaction</title>

            <para>
                The date and week captions, as well as events, are clickable and the
                clicks can be listened for by the server. Also date/time range selections,
                event dragging, and event resizing can be listened by the server. Using
                the API, you have full control over the events caused by user interaction.
            </para>

            <para>
                The weekly view has navigation buttons to navigate forward and backward in
                time. These actions are also listened by the server. Custom navigating is
                can be implemented using event handlers<!-- TODO LINK which are described
                in section 2.7.2-->.
            </para>

            <para>
                Most of the handlers related to calendar events have sensible default
                handlers. These are found in the <package>com.vaadin.ui.handler</package>
                package. The default handlers and their functionalities are described
                below.
            </para>

            <itemizedlist>
                <listitem>
                    <classname>BasicBackwardHandler</classname>. Handles clicking the
                    back-button of the weekly view so that the viewed month is changed to
                    the previous one.
                </listitem>

                <listitem>
                    <classname>BasicForwardHandler</classname>. Handles clicking the
                    forward-button of the weekly view so that the viewed month is changed
                    to the next one.
                </listitem>

                <listitem>
                    <classname>BasicWeekClickHandler</classname>. Handles clicking the
                    week numbers int the monthly view so that the viewable date range is
                    changed to the clicked week.
                </listitem>

                <listitem>
                    <classname>BasicDateClickHandler</classname>. Handles clicking the
                    dates on both the monthly view and the weekly view. Changes the
                    viewable date range so that only the clicked day is visible.
                </listitem>

                <listitem>
                    <classname>BasicEventMoveHandler</classname>. Handles moving the
                    events in both monthly view and the weekly view. Events can be moved
                    and their start and end dates are changed correctly, but only if the
                    event implements <classname>CalendarEventEditor</classname>
                    (implemented by <classname>BasicEvent</classname>).
                </listitem>

                <listitem>
                    <classname>BasicEventResizeHandler</classname>. Handles resizing the
                    events in the weekly view. Events can be resized and their start and
                    end dates are changed correctly, but only if the event implements
                    <classname>CalendarEventEditor</classname> (implemented by the
                    <classname>BasicEvent</classname>).
                </listitem>
            </itemizedlist>

            <para>
                All of these handlers are automatically set when creating a new
                <classname>Calendar</classname>. If you wish to disable some of the
                default functionality, you can simply set the corresponding handler to
                <literal>null</literal>. This will prevent the functionality from ever
                appearing on the user interface. For example, if you set the
                <classname>EventMoveHandler</classname> to <literal>null</literal>, the
                user will be unable to move events in the browser.
            </para>
        </simplesect>

    </section>

    <section xml:id="calendar.installing">
        <title>Installing Calendar</title>

        <para>
            It is very easy to get from 0 to ready with the Vaadin Calendar. All you need
            to do is install the JAR and you are ready to go.
        </para>

        <para>
            Vaadin Calendar is available for download from Vaadin Directory and from a
            Maven repository. Installing the add-on is the same as with Vaadin add-ons in
            general, so please refer to <xref linkend="addons"/>. Vaadin Calendar includes
            a widget set, which you need to compile to your project widget set.
        </para>

        <simplesect xml:id="calendar.installing.license">
            <title>Licensing</title>

            <para>
                Vaadin Calendar is a commercial product licensed under a dual-licensing
                scheme. The AGPL (GNU Affero General Public License) allows open-source
                development, while the CVAL (Commercial Vaadin Add-On License) needs to be
                purchased for closed-source use, including web deployments and internal
                use.
            </para>

            <para>
                Commercial licenses can be purchased from the Vaadin Directory, where you
                can also find the license details and download the Vaadin Calendar.
            </para>
        </simplesect>
    </section>

    <section xml:id="calendar.using">
        <title>Basic Use</title>

        <para>
            Use of Calendar requires two things besides creating a
            <classname>Calendar</classname> instance: setting a time range for it and
            providing the calendar events. The time range controls its view mode; whether
            it is a daily, weekly or monthly view.
        </para>

        <para>
            You can provide calendar events in three different ways:
        </para>

        <itemizedlist>
            <listitem>
                Use the <emphasis>event provider</emphasis> mechanism.
            </listitem>

            <listitem>
                Use a <interfacename>Container</interfacename> as a data source.
            </listitem>

            <listitem>
                Add events directly to the calendar using the
                <methodname>addEvent()</methodname>.
            </listitem>
        </itemizedlist>

        <para>
            Vaadin Calendar uses by default a <classname>BasicEventProvider</classname>
            for events and displays a date range of one week.
        </para>

        <section xml:id="calendar.using.daterange">
            <title>Setting the Date Range</title>

            <para>
                One of the first things you'll notice about the Vaadin Calendar is that it
                only displays one week at a time. We can easily change that by using start
                and end dates. The date range must be between one and 60 days. Here we set
                the calendar to show only one day, which is the current day.
            </para>

            <programlisting><![CDATA[cal.setStartDate(new Date());
cal.setEndDate(new Date());]]></programlisting>

            <para>
                Notice that although the range we set above is actually zero time long,
                the calendar still renders the time from 00:00 to 23:59. This is normal,
                as the Vaadin Calendar is guaranteed to render at least the date range
                provided, but may expand it. This is more important when we implement our
                own event providers.
            </para>
        </section>

        <section xml:id="calendar.using.eventprovider">
            <title>Providing Events</title>

            <para>
                The second thing you will probably notice about the Calendar is that it is
                pretty empty. The Calendar allows three different ways to add events:
            </para>

            <itemizedlist>
                <listitem>
                    Using the <emphasis>event provider</emphasis> mechanism. This is the
                    most flexible way of doing things. You need to implement an event
                    provider and set it to the <classname>Calendar</classname> using the
                    <methodname>setEventProvider()</methodname> method.
                </listitem>

                <listitem>
                    Using a <interfacename>Container</interfacename> as a data source. A
                    container is attached to <classname>Calendar</classname> with the
                    <methodname>setContainerDataSource()</methodname> method. You can use
                    any container that implements the
                    <interfacename>Indexed</interfacename> interface with
                    <classname>Calendar</classname>. The container must either use the
                    default property IDs for event data or provide them as parameters for
                    the <methodname>setContainerDataSource()</methodname> method. The
                    <classname>Calendar</classname> will listen to change events from the
                    container as well as write changes to the container.
                </listitem>

                <listitem>
                    You can also add events directly to the calendar using the
                    <methodname>addEvent()</methodname>. You can remove such events with
                    the <methodname>removeEvent()</methodname> methods. These methods will
                    use the underlying event provider as the data source.
                </listitem>
            </itemizedlist>

            <para>
                At first, the default <classname>BasicEventProvider</classname> may
                suffice, but later on you will probably want to create your own event
                provider as described in the next section.
            </para>

            <para>
                As the <classname>BasicEventProvider</classname> is used by default, we
                can just retrieve it from the Calendar and add an event to it.
            </para>

            <programlisting><?pocket-size 65% ?><![CDATA[BasicEvent event = new BasicEvent();
java.util.Calendar calendar = java.util.Calendar.getInstance();
calendar.setTime(new Date());
event.setStart(calendar.getTime());
        
calendar.add(java.util.Calendar.HOUR, 3);
event.setEnd(calendar.getTime());
event.setCaption("FooBar");

BasicEventProvider eventProvider =
        (BasicEventProvider) cal.getEventProvider();
eventProvider.addEvent(event);]]></programlisting>

            <para>
                This adds a new event that lasts for 3 hours. As the BasicEventProvider
                and BasicEvent implement some optional event interfaces provided by the
                calendar package, there is no need to refresh the calendar. Just create
                events, set their properties and add them to the Event Provider.
            </para>
        </section>

        <section xml:id="calendar.using.customevents">
            <para>
                To begin customizing the calendar events for your project, you should
                start by creating an event class that implements the
                <interfacename>CalendarEvent</interfacename> interface. Below is the
                BasicEvent from the com.vaadin.addon.calendar.event package. It nicely
                presents the normal work required for an event.
            </para>

            <programlisting><?pocket-size 65% ?><![CDATA[public class BasicEvent
       implements CalendarEventEditor, EventChangeNotifier {
   ...

   public String getCaption() {
        return caption;
    }

    public String getDescription() {
        return description;
    }

    public Date getEnd() {
        return end;
    }

    public Date getStart() {
        return start;
    }

    public String getStyleName() {
        return styleName;
    }

    public boolean isAllDay() {
        return isAllDay;
    }

    public void setCaption(String caption) {
        this.caption = caption;
        fireEventChange();
    }

    public void setDescription(String description) {
        this.description = description;
        fireEventChange();
    }

    public void setEnd(Date end) {
        this.end = end;
        fireEventChange();
    }

    public void setStart(Date start) {
        this.start = start;
        fireEventChange();
    }

    public void setStyleName(String styleName) {
        this.styleName = styleName;
        fireEventChange();
    }

    public void setAllDay(boolean isAllDay) {
        this.isAllDay = isAllDay;
        fireEventChange();
    }

    public void addListener(EventChangeListener listener) {
        ...
    }
    
    public void removeListener(EventChangeListener listener) {
        ...
    }

    protected void fireEventChange() {...}
}]]></programlisting>

            <para>
                You may have noticed that there was some additional code in the
                <classname>BasicEvent</classname> that was not in the
                <interfacename>CalendarEvent</interfacename> interface. Namely
                <classname>BasicEvent</classname> also implements two additional
                interfaces:
            </para>

            <variablelist>
                <varlistentry>
                    <term><interfacename>CalendarEditor</interfacename></term>
                    <listitem>
                        <para>
                            This interface defines setters for all the fields, and is
                            required for some of the default handlers to work.
                        </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term><interfacename>EventChangeNotifier</interfacename></term>
                    <listitem>
                        <para>
                            This interface adds the possibility to listen for changes in
                            the event, and enables the <classname>Calendar</classname> to
                            render the changes immediately.
                        </para>
                    </listitem>
                </varlistentry>
            </variablelist>

            <para>
                The start time and end time are mandatory, but caption, description, and
                style name are not. The style name is used as a part of the CSS class name
                for the HTML DOM element of the event.
            </para>

            <para>
                Now you can create events for the Calendar. The Calendar needs also a data
                source which is known as an event provider for the Calendar. Let us create
                an example event provider example that implements
                <interfacename>CalendarEventProvider</interfacename>.
            </para>

            <programlisting><?pocket-size 65% ?><![CDATA[public class MyEventProvider implements CalendarEventProvider{
    public List<Event> getEvents(Date startDate, Date endDate){

        List<Event> events = new ArrayList<Event>();
        GregorianCalendar cal = new GregorianCalendar();
        cal.setTime(new Date());

        Date start = cal.getTime();
        cal.add(GregorianCalendar.HOUR, 5);
        Date end = cal.getTime();
        BasicEvent event = new BasicEvent();
        event.setCaption("My Event");
        event.setDescription("My Event Description");
        event.setStart(start);
        event.setEnd(end);
        events.add(event);

        return events;
    }
}]]></programlisting>

            <para>
                <interfacename>CalendarEventProvider</interfacename> has only one method
                to be implemented. Whenever the calendar is painted,
                <methodname>getEvents(Date, Date)</methodname> method is called. In the
                MyEventProvider example, only one event will be returned. It starts from
                the current time and is five hours long.
            </para>

            <para>
                It is important to notice that the <classname>Calendar</classname> may
                query for dates beyond the range defined by start date and end
                date. Particularly, it may expand the date range to make sure the user
                interface is rendered correctly.
            </para>

            <para>
                In addition to the basic event interfaces, you can enhance the
                functionality of your event and event provider classes by using the
                <classname>EventChange</classname> and
                <classname>EventSetChange</classname> events. They let the
                <classname>Calendar</classname> component to know about changes in events
                and update itself accordingly. The <classname>BasicEvent</classname> and
                <classname>BasicEventProvider</classname> examples given earlier include a
                simple implementation of these interfaces.
            </para>
        </section>
    </section>

    <section xml:id="calendar.appearance">
        <title>Appearance</title>

        <section xml:id="calendar.appearance.sizing">
            <title>Sizing</title>

            <para>
                The Vaadin Calendar supports the dynamic size system of Vaadin, with both
                defined and undefined sizes. When using defined sizes, the Calendar calculates
                the correct height for the cells so that it fits to the size given. When using
                an undefined size Calendar, all the sizes come from CSS. In addition, when
                height is undefined a scrollbar is displayed in the weekly view to better fit
                the cells to the UI. See 2.6.1. for information about customizing the
                undefined sizes.
            </para>
        </section>

        <section xml:id="calendar.appearance.styling">
            <title>Styling</title>

            <para>
                The Calendar has a default theme defined in the widget set. You may choose
                to overwrite the style names from the default theme file
                <filename>calendar.css</filename>. The file is located in a folder named
                <filename>public</filename> under the <filename>src</filename> folder in
                the JAR file. Vaadin will find the CSS from inside the JAR package.
            </para>

            <section xml:id="calendar.appearance.styling.undefined">
                <title>Style for Undefined Size</title>

                <para>
                    Usually, you do not need to overwrite any of the default styles, but a
                    Calendar with undefined size is a exception. Below is a list of style
                    names that define the size of a Calendar with undefined size (these
                    are the defaults from <filename>calendar.css</filename>):
                </para>

                <programlisting><?pocket-size 65% ?><![CDATA[.v-calendar-month-sizedheight .v-calendar-month-day {
	height: 100px;
}

.v-calendar-month-sizedwidth .v-calendar-month-day {
	width: 100px;
}

.v-calendar-header-month-Hsized .v-calendar-header-day {
	width: 101px;
}

/* for IE */
.v-ie6 .v-calendar-header-month-Hsized .v-calendar-header-day {
	width: 104px;
}

/* for others */
.v-calendar-header-month-Hsized td:first-child {
	padding-left: 21px;
}

.v-calendar-header-day-Hsized {
	width: 200px;
}

.v-calendar-week-numbers-Vsized .v-calendar-week-number {
	height: 100px;
	line-height: 100px;
}

.v-calendar-week-wrapper-Vsized {
	height: 400px;
	overflow-x: hidden !important;
}

.v-calendar-times-Vsized .v-calendar-time {
	height: 38px;
}

.v-calendar-times-Hsized .v-calendar-time {
	width: 42px;
}

.v-calendar-day-times-Vsized .v-slot,.v-calendar-day-times-Vsized .v-slot-even {
	height: 18px;
}

.v-calendar-day-times-Hsized, .v-calendar-day-times-Hsized .v-slot,.v-calendar-day-times-Hsized .v-slot-even {
	width: 200px;
}]]></programlisting>
            </section>

            <section xml:id="calendar.appearance.styling.event">
                <title>Event Style</title>

                <para>
                    Events can be styled with CSS by setting them a <emphasis>style name
                    suffix</emphasis>. The suffix is retrieved with the
                    <methodname>getStyleName()</methodname> method in
                    <interfacename>CalendarEvent</interfacename>. If you use
                    <classname>BasicEvent</classname> events, you can set the suffix with
                    <methodname>setStyleName()</methodname>.
                </para>

                <programlisting><?pocket-size 75% ?><![CDATA[BasicEvent event = new BasicEvent("Wednesday Wonder", ... );
event.setStyleName("mycolor");
calendar.addEvent(event);]]></programlisting>

                <para>
                    Suffix <literal>mycolor</literal> would create
                    <literal>v-calendar-event-mycolor</literal> class for regular events
                    and <literal>v-calendar-event-mycolor-add-day</literal> for all-day
                    events. You could style the events with the following rules:
                </para>

                <programlisting>.v-calendar .v-calendar-event-mycolor {}
.v-calendar .v-calendar-event-mycolor-all-day {}
.v-calendar .v-calendar-event-mycolor .v-calendar-event-caption {}
.v-calendar .v-calendar-event-mycolor .v-calendar-event-content {}</programlisting>

            </section>
        </section>
    </section>

    <section xml:id="calendar.visible-hours-days">
        <title>Visible hours and days</title>

        <para>
            As we saw in <xref linkend="calendar.using.daterange"/>, you can set the range
            of dates that are shown by the Calendar. But what if you wanted to show the
            entire month but hide weekends? Or show only hours from 8 to 16 when viewing a
            week? The <methodname>setVisibleDays()</methodname> and
            <methodname>setVisibleHours()</methodname> methods help you do that.
        </para>

        <programlisting><?pocket-size 75% ?>calendar.setVisibleDays(1,5);   // Monday to Friday
calendar.setVisibleHours(0,15); // Midnight until 4 pm</programlisting>

        <para>
            After the above settings, only weekdays from Monday to Friday would be
            shown. And when the calendar is in the weekly view, only the time range from
            00:00 to 16:00 would be shown.
        </para>

        <para>
            Note that the excluded times are never shown so you should take care when
            setting the date range. If the date range contains only dates / times that are
            excluded, nothing will be displayed. Also note that even if a date is not
            rendered because these settings, the event provider may still be queried for
            events for that date.
        </para>
    </section>

    <section xml:id="calendar.drag-and-drop">
        <title>Drag and Drop</title>

        <para>
            Vaadin Calendar can act as a drop target for drag and drop, described in <xref
            linkend="advanced.dragndrop"/>. With the functionality, the user could drag
            events, for example, from a table to a calendar.
        </para>

        <para>
            To support dropping, a <classname>Calendar</classname> must have a drop
            handler. When the drop handler is set, the days in the monthly view and the
            time slots in the weekly view can receive drops. Other locations, such as day
            names in the weekly view, can not currently receive drops.
        </para>

        <para>
            Calendar uses its own implementation of
            <interfacename>TargetDetails</interfacename>:
            <classname>CalendarTargetdetails</classname>. It holds information about the
            the drop location, which in the context of <classname>Calendar</classname>
            means the date and time. The drop target location can be retrieved via the
            <methodname>getDropTime()</methodname> method. If the drop is done in the
            monthly view, the returned date does not have exact time information. If the
            drop happened in the weekly view, the returned date also contains the start
            time of the slot.
        </para>

        <para>
            Below is a short example of creating a drop handler and using the drop
            information to create a new event:
        </para>

        <programlisting><?pocket-size 65% ?><![CDATA[private Calendar createDDCalendar() {
  Calendar calendar = new Calendar();
  calendar.setDropHandler(new DropHandler() {
    public void drop(DragAndDropEvent event) {
      CalendarTargetDetails details = 
              (CalendarTargetDetails) event.getTargetDetails();
      
      TableTransferable transferable = 
              (TableTransferable) event.getTransferable();

      createEvent(details, transferable);
      removeTableRow(transferable);
    }

    public AcceptCriterion getAcceptCriterion() {
      return AcceptAll.get();
    }

  });

  return calendar;
}


protected void createEvent(CalendarTargetDetails details,
  TableTransferable transferable) {
  Date dropTime = details.getDropTime();
  java.util.Calendar timeCalendar = details.getTargetCalendar()
                                    .getInternalCalendar();
  timeCalendar.setTime(dropTime);
  timeCalendar.add(java.util.Calendar.MINUTE, 120);
  Date endTime = timeCalendar.getTime();

  Item draggedItem = transferable.getSourceComponent().
                            getItem(transferable.getItemId());

  String eventType = (String)draggedItem.
                            getItemProperty("type").getValue();

  String eventDescription = "Attending: "
             + getParticipantString(
                 (String[]) draggedItem.
                   getItemProperty("participants").getValue());

  BasicEvent newEvent = new BasicEvent();
  newEvent.setAllDay(!details.hasDropTime());
  newEvent.setCaption(eventType);
  newEvent.setDescription(eventDescription);
  newEvent.setStart(dropTime);
  newEvent.setEnd(endTime);

  BasicEventProvider ep = (BasicEventProvider) details
                       .getTargetCalendar().getEventProvider();
  ep.addEvent(newEvent);
}]]></programlisting>
    </section>

    <section xml:id="calendar.localization">
        <title>Localization and Formatting</title>

        <section xml:id="calendar.localization.locale">
            <title>Setting the Locale and Time Zone</title>

            <para>
                Month and weekday names are shown in the language of the locale setting of
                the <classname>Calendar</classname>. The translations are acquired from
                the standard Java locale data. By default, <classname>Calendar</classname>
                uses the system default locale for its internal calendar, but you can
                change it with <methodname>setLocale(Locale locale)</methodname>. Setting
                the locale will update also other location specific date and time
                settings, such as the first day of the week, time zone, and time
                format. However, time zone and time format can be overridden by settings
                in the <classname>Calendar</classname>.
            </para>

            <para>
                For example, the following would set the language to US English:
            </para>

            <programlisting><![CDATA[cal.setLocale(Locale.US);]]></programlisting>

            <para>
                The locale defines the default time zone. You can change it with the
                <methodname>setTimeZone()</methodname> method, which takes a
                <classname>java.util.TimeZone</classname> object as its parameter. Setting
                timezone to null will reset timezone to the locale default.
            </para>

            <para>
                For example, the following would set the Finnish time zone, which is EET
            </para>

            <programlisting><![CDATA[cal.setTimeZone(TimeZone.getTimeZone("Europe/Helsinki"));]]></programlisting>

        </section>

        <section xml:id="calendar.localization.datecaption">
            <title>Time and Date Caption Format</title>

            <para>
                The time may be shown either in 24 or 12 hour format. The default format
                is defined by the locale, but you can change it with the
                <methodname>setTimeFormat()</methodname> method. Giving a
                <literal>null</literal> setting will reset the time format to the locale
                default.
            </para>

            <programlisting><![CDATA[cal.setTimeFormat(TimeFormat.Format12H);]]></programlisting>

            <para>
                You can change the format of the date captions in the week view with the
                <methodname>setWeeklyCaptionFormat(String dateFormatPattern)</methodname>
                method. The date format pattern should follow the format of the standard
                Java <classname>java.text.SimpleDateFormat</classname> class.
            </para>

            <para>
                For example:
            </para>

            <programlisting><![CDATA[cal.setWeeklyCaptionFormat("dd-MM-yyyy");]]></programlisting>
        </section>
    </section>

    <section xml:id="calendar.customizing">
        <title>Tutorial: Customizing the Vaadin Calendar</title>

        <para>
            In this section, we present small tutorial application that demonstrates some
            features of the Vaadin Calendar. The event provider and styling was described
            earlier, so now we concentrate on other features of the Calendar API.
        </para>

        <para>
            The example application source code can be found online with the name
            <filename>CustomizedCalendarDemo</filename>
            (<url>http://dev.vaadin.com/svn/addons/Calendar</url>). Some of the less
            important code for this document has been left out to make the code more
            readable and shorter. Three dots are used to mark places for the missing code.
        </para>

        <section xml:id="calendar.customizing.creating">
            <title>Creating a Calendar</title>

            <para>
                Let us first create a new <classname>Calendar</classname> instance. Here
                we use our own event provider, the <classname>MyEventProvider</classname>
                described earlier in <xref linkend="calendar.using.customevents"/>.
            </para>

            <programlisting><![CDATA[Calendar cal = new Calendar(new MyEventProvider());]]></programlisting>

            <para>
                This initializes the Calendar. To customize the viewable date range, we
                must set a start and end date to it.
            </para>

            <para>
                There is only one visible event in the timeline, starting from the current
                time. That is what our event provider passes to the client. <!-- TODO See
                the figure 3. -->
            </para>

            <!-- TODO Figure 3: Weekly view with  a single visible day and one event. -->

            <para>
                It would be nice to also be able to control the navigation forward and
                backward. The default navigation is provided by the default handlers, but
                perhaps we want to restrict the users so they can only navigate dates in
                the current year. Maybe we also want to pose some other restrictions to
                the clicking week numbers and dates.
            </para>

These restrictions and other custom logic can be imposed by using custom handlers. The handlers can be found in the com.vaadin.addon.calendar.ui.handler package and can be easily extended. Note that if you don't want to extend the default handlers, you are free to implement your own. The interfaces are described in CalendarComponentEvents.

2.10.2.  Backward and forward navigation
In the weekly view, there are navigation buttons in the top left and right corner of the component. See the figure 4. 

Figure 4: Backward and forward navigation buttons.
Backward and forward navigation is handled via BackwardListener and ForwardListener. 
cal.setHandler(new BasicBackwardHandler() {
            
  protected void setDates(BackwardEvent event, Date start, Date end) {

    java.util.Calendar calendar = event.getComponent()
                                  .getInternalCalendar();
    if (isThisYear(calendar, end) 
         && isThisYear(calendar, start)) {
      super.setDates(event, start, end);
    }
  }
});
The forward-handler can be implemented identically. This handler restricts the setting of dates to the current year.

2.10.3.  Date click handling
Date click handling by default switches the current date range to one day. The date click event is handled by a DateClickHandler . The following code snippet will the handle click event so that when the user clicks the date header in the weekly view, it will either show a single day or whole week depending on the current status.
cal.setHandler(new BasicDateClickHandler() {

  public void dateClick(DateClickEvent event) {
    Calendar cal = event.getComponent();
    long currentCalDateRange = cal.getEndDate().getTime()
                               - cal.getStartDate().getTime();
    
    if (currentCalDateRange < VCalendar.DAYINMILLIS) {
      // Change the date range to the current week
      cal.setStartDate(cal.getFirstDateForWeek(event.getDate()));
      cal.setEndDate(cal.getLastDateForWeek(event.getDate()));

    } else {
      // Default behaviour, change date range to one day
      super.dateClick(event);
    }
  }
});

2.10.4.  Week click handling
In the monthly view, on the left side of the date grid, there are clickable week numbers. You can handle the click event by setting a WeekClickHandler for the Calendar. The default handler changes the date range to be the clicked week.
In the following code snippet we add a week click handler that changes the Calendar's date range to one week only if the start and end dates of the week are in the current month.
cal.setHandler(new BasicWeekClickHandler() {

  protected void setDates(WeekClick event, Date start, Date end) {
    java.util.Calendar calendar = event.getComponent()
                                  .getInternalCalendar();
    if (isThisMonth(calendar, start) 
        && isThisMonth(calendar,  end)) {
      super.setDates(event, start, end);
    }
  }
});
2.10.5.  Event click handling
Monthly and weekly view's Calendar events are clickable, but they have no default handler. Just like the date and week click handlers, event click handling is enabled by setting an EventClickHandler  for the Calendar. The clicked event will be available by the EventClick.getCalendarEvent() method. Example code below.
cal.addListener(new EventClickListener() {

    public void eventClick(EventClick event) {
        BasicEvent e = (BasicEvent) event.getCalendarEvent();
          getMainWindow().showNotification(
                        "Event clicked: " + e.getCaption(),
                        e.getDescription());
    }
});
2.10.6.  Event dragging
An event can be dragged to change its position. The default handler for event dragging sets the events start and end dates accordingly. To restrict event moving, we can set a customized move handler
Below we add a EventMoveHandler to the Calendar. The event handler will update the new position to the datasource, if the new dates are in the current month. Also some other changes must be made to our Event Provider class. 
cal.setHandler(new BasicEventMoveHandler() {
  private java.util.Calendar javaCalendar;

  public void eventMove(MoveEvent event) {
    javaCalendar = event.getComponent().getInternalCalendar();
    super.eventMove(event);
  }

  
  protected void setDates(CalendarEventEditor event,
                          Date start, Date end) {
    if (isThisMonth(javaCalendar, start)
        && isThisMonth(javaCalendar, end)) {
      super.setDates(event, start, end);
    }
  }
});
Our Event Provider needs to be slightly changed so that it doesn't always create a new event when getEvents is called.
public static class MyEventProvider implements CalendarEventProvider {

  private List<CalendarEvent> events = new ArrayList<CalendarEvent>();

  public MyEventProvider() {
    events = new ArrayList<CalendarEvent>();
    GregorianCalendar cal = new GregorianCalendar();
    cal.setTime(new Date());

    Date start = cal.getTime();
    cal.add(GregorianCalendar.HOUR, 5);
    Date end = cal.getTime();
    BasicEvent event = new BasicEvent();
    event.setCaption("My Event");
    event.setDescription("My Event Description");
    event.setStart(start);
    event.setEnd(end);
    events.add(event);
  }

  public void addEvent(CalendarEvent BasicEvent) {
    events.add(BasicEvent);
  }

  public List<CalendarEvent> getEvents(Date startDate, 
                                       Date endDate) {
    return events;
  }
}
After these changes users can move events around, but when they drop them the start and end dates are checked by the server. Note that as the server-side must move the event in order for it to render to the place it was dropped. The server can also reject moves by not doing anything when the event is received.
2.10.7.  Drag selection handling
Drag selection works in both monthly and weekly view. To listen for drag selection, add RangeSelectListener  to the Calendar. There is no default handler for range select.
In the code example below, we create an new event to the Calendar when any date range is selected. Drag selection will open a window where user is asked for a caption for the new event. After confirming, new event will be passed to our event provider and calendar will be updated. Note that as our Event Provider and Event classes do not implement the event change interface, we must refresh the Calendar manually after changing our events.
cal.setHandler(new RangeSelectHandler() {

  public void rangeSelect(RangeSelectEvent event) {
    BasicEvent calendarEvent = new BasicEvent();
    calendarEvent.setStart(event.getStart());
    calendarEvent.setEnd(event.getEnd());

    // Create popup window and add a form in it.
    VerticalLayout layout = new VerticalLayout();
    layout.setMargin(true);
    layout.setSpacing(true);

    final Window w = new Window(null, layout);
    ...

    // Wrap the calendar event to a BeanItem 
    // and pass it to the form
    final BeanItem<CalendarEvent> item = 
                         new BeanItem<CalendarEvent>(myEvent);

    final Form form = new Form();
    form.setItemDataSource(item);
    ...

    layout.addComponent(form);

    HorizontalLayout buttons = new HorizontalLayout();
    buttons.setSpacing(true);
    buttons.addComponent(new Button("OK", new ClickListener() {

        public void buttonClick(ClickEvent event) {
            form.commit();
            // Update event provider's data source
            provider.addEvent(item.getBean());
            // Calendar needs to be repainted
            cal.requestRepaint();
            getMainWindow().removeWindow(w);
        }
    }));

    ...
  }
});
2.10.8.  Event resizing
An Event can be resized from both ends to change its start or end time. This offers the users a convenient way to change event times without the need to type anything. The default resize handler sets the events start and end times according to the resize.
In the code below, we set a custom handler for resize events. This handler prevents any event to be resized over 12 hours in length. Note that this does not prevent the user from resizing an event over 12 hours in the client. The resize will just be corrected by the server.
cal.setHandler(new BasicEventResizeHandler() {
  private static final long twelveHoursInMs = 12*60*60*1000;

  protected void setDates(CalendarEventEditor event, 
                          Date start, Date end) {
    long eventLength = end.getTime() - start.getTime();
    if (eventLength <= twelveHoursInMs) {
      super.setDates(event, start, end);
    }
  }
});

</chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: xml
sgml-omittag:nil
sgml-shorttag:nil
sgml-namecase-general:nil
sgml-general-insert-case:lower
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:4
sgml-indent-data:t
sgml-parent-document:nil
sgml-exposed-tags:nil
sgml-local-catalogs:("/etc/sgml/catalog" "/usr/share/xemacs21/xemacs-packages/etc/psgml-dtds/CATALOG")
sgml-local-ecat-files:("ECAT" "~/sgml/ECAT" "/usr/share/sgml/ECAT" "/usr/local/share/sgml/ECAT" "/usr/local/lib/sgml/ECAT")
End:
-->
