<?xml version="1.0" encoding="UTF-8"?>
<!-- <part label="I"> -->
<!--	<title>Guide</title> -->

<!-- This file preveiously contained all the chapters, but they were moved to separate
    files, so now it contains just some unfinished sections which have been left out. -->

<!-- chapter xml:id="chapter.patterns">
	<title>Patterns in Application Design</title>

	<para>
		This chapter introduces a number of design patterns for applications
		using Vaadin.
	</para>

	<para>
		We also look into special characteristics of AJAX-based web
		applications. For example, the concept of pages familiar from traditional
		web application has less meaning in AJAX applications.
	</para>

	<section>
		<title>Overview</title>

		<para>
			Design of a user interface depends on the application platform. Use
			of Vaadin, or AJAX frameworks generally, suggests for
			certain user interface design patterns. For example, absolute
			majority of desktop applications have a main window with a main menu,
			possibly some toolbars, and a main display area. This applies as well
			to web browsers, which show a web page on their main display
			area. This type of user interface is ideal for document-based
			applications with a very flexible workflow, where you have a document
			on which the user works or just views. It is less ideal for
			applications where you need a more controlled workflow. There are
			solutions such as wizards that provide a very linear workflow.
		</para>

		<para>
			Most web applications, on the other hand, have a somewhat different
			design, based on pages. You might have a main page, various pages for
			different functionalities, a login page, and pages that provide
			content. As discussed in <xref linkend="advanced.application.pages"/>,
			using pages with different URIs is not a feasible user interface
			solution in AJAX applications.
		</para>

	</section>

	<section>
		<title>Screen Manager</title>

		<para>
		</para>
	</section>

	<section>
		<title>Stacked Screens</title>
		<para></para>
	</section>

</chapter -->

<!--
<chapter xml:id="chapter.debugging">
	<title>Debugging and Quality Assurance</title>

	<para>
		This chapter takes a look into various development tools that allow debugging
		applications made with Vaadin both in the server and the browser. We also
		give details about the Automatic Test Framework of Vaadin.
	</para>

	<section>
		<title>Overview</title>

		<para>
		</para>
	</section>

	<section>
		<title>Error Handling</title>

		<para>
			Error handling is an important part of quality assurance. Possible errors
			should not make software unstable or cause data corruption. Much of such error
			handling is application dependent, but the application framework can provide
			ways to make applications more stable.
		</para>

	</section>

	<section>
		<title>Debugging Under Eclipse</title>

		<para>
		</para>

	</section>

	<section xml:id="section.debugging.firebug">
		<title>Firebug</title>

		<para>
			<application>Firebug</application> is an extension for <application>Mozilla
			Firefox</application> that allows debugging, editing, and modifying HTML, CSS,
			DOM, and JavaScript code of a web page. It also allows tracking, browsing, and
			profiling any network traffic.
		</para>

		<para>
			Installation of Firefox and Firebug is covered in <xref
			linkend="section.install.fire"/>.
		</para>

		<section>
			<title>Inspecting and Editing HTML Tree</title>

			<section>
				<title>Editing CSS on the Fly</title>
				
			</section>
		</section>

		<section>
			<title>Monitoring Network Traffic</title>

		</section>
	</section>

	<section>
		<title>Automated Test Framework</title>

		<para>
			The Automated Test Framework (ATF) for Vaadin allows recording user
			interaction and playing it, thus allowing easy automation of testing. It
			supports advanced scripting, to allow testing with possibly a large number of
			different parameters and variations.
		</para>

		<para>
			Vaadin ATF Server is available under a proprietary license. The
			current test release, version 0.9.1, can be used with Vaadin Demo
			License.
		</para>

		<section>
			<title>Requirements</title>

			<para>
				Vaadin ATF has the following requirements:
			</para>

			<itemizedlist>
				<listitem>
					<para>
						Vaadin: Application to be tested needs at least
						Vaadin version 4.0.3.
					</para>
				</listitem>
				<listitem>
					<para>
						Any Java Servlet Container.
					</para>
				</listitem>
				<listitem>
					<para>
						<application>SSH</application> (Secure Shell) Server needed on all testing hosts.
					</para>
				</listitem>
				<listitem>
					<para>
						Web Browser: Firefox 2.
					</para>
				</listitem>
				<listitem>
					<para>
						Operating System: At least Windows XP. Any Linux platform should also work.
					</para>
				</listitem>
				<listitem>
					<para>
						Windows installations need <command>psexec.exe</command> and
						<command>taskkill.exe</command> executables. Included at least in
						<application>Windows XP</application>.
					</para>
				</listitem>
			</itemizedlist>
		</section>

		<section>
			<title>Installation</title>

			<para>
				Use of ATF required installation of <application>Vaadin ATF
				Server</application>. You can install the ATF Server as follows:
			</para>

			<orderedlist>
				<listitem>
					<para>
						Download <uri>http://toolkit.itmill.com/ATF-0.9.1.war</uri>.
					</para>
				</listitem>
				<listitem>
					<para>
						Install the WAR package in any Application Server (or Java Servlet
						Container) under <filename>/ATF</filename> context. 
					</para>
				</listitem>

			</orderedlist>

			<para>
				For example, in Apache Tomcat, simply rename the
				<filename>ATF-&lt;version&gt;.war</filename> to
				<filename>ATF.war</filename> and copy it to <filename>webapps</filename>
				directory.
			</para>

			<para>The ATF Server stores all configuration and test data into an SQL
			database. By default, the database is located under Application Server
			directory structure. For example, with Apache Tomcat, the database files are
			located as
			<filename>apache-tomcat-&lt;version&gt;\ATFServerDatabase.*</filename>
			file. If you need to change the location of the database, you have to override
			the following context-wide parameter:</para>

		<programlisting><![CDATA[<context-param>
  <param-name>ATFServerDatabaseURL</param-name>
  <param-value>jdbc:hsqldb:file:ATFServerDatabase</param-value>
  <description>Automated Test Framework (ATF) Server Database URL</description>
</context-param>]]></programlisting>

			<para>
				Specify explicit path after <parameter>file</parameter> tag,
				e.g. <filename>C:\ATF\mydatabase</filename>. Overriding
				<filename>web.xml</filename> parameters is Java Application Server
				specific, but one option is to unzip ATF.war, edit
				<filename>web.xml</filename> by hand and rezipping ATF.war.
			</para>

			<para>
				When <filename>ATF.war</filename> is redeployed, an existing database is
				reused, so it is safe to upgrade the WAR without database maintenance
				operations.
			</para>

		</section>
	</section>
</chapter>
-->

<!--  The rest of the capters are commented you until it is
written

	<section>
		<title>Adapters</title>
		<para></para>
	</section>

	<section>
		<title>Resources</title>
		<para></para>
	</section>
	
	
	<section>
	<title>Web Themes</title>
	<section>
	<title>Web adapter</title>
	<para></para>
	</section>
	<section>
	<title>Theme structure</title>
	<para></para>
	</section>
	<section>
	<title>Custom layouts</title>
	<para></para>
	</section>
	<section>
	<title>Variable handling</title>
	<para></para>
	</section>
	<section>
	<title>Creating a new theme</title>
	<para></para>
	</section>
	</section>
	
	</chapter>
	
	<chapter>
	<title>
	Design patterns
	</title>
	<para></para>
	
	</chapter>
	<chapter>
	<title>
	Advanced topics
	</title>
	<section>
	<title>Direct access to HttpServlet</title>
	<section>
	<title>Application lifecycle</title>
	<para></para>
	</section>
	<section>
	<title>HttpRequest and HttpResponse</title>
	<para></para>
	</section>
	<section>
	<title>HttpSession</title>
	<para></para>
	</section>
	</section>
	<section>
	<title>Embedding the server</title>
	<para></para>
	</section>
	<section>
	<title>Server push</title>
	<para></para>
	</section>
	<section>
	<title>
	Upgrading from Millstone User Interface Library
	</title>
	<section>
	<title>Naming conventions</title>
	<para></para>
	</section>
	<section>
	<title>Web Adapter Themes</title>
	<para></para>
	</section>
	<section>
	<title>Ajax Adapter Themes</title>
	<para></para>
	</section>
	</section>
	
	</chapter>
-->

<!--
<bibliography xml:id="bibliography">
	<title>Bibliography</title>
	
	<biblioentry xreflabel="biblio.gwt-guide">
		<title>Google Web Toolkit Developer Guide</title>
		<para><uri>http://code.google.com/webtoolkit/documentation/com.google.gwt.doc.DeveloperGuide.html</uri></para>
	</biblioentry>
</bibliography>

-->

<!-- </part> -->
<!-- Keep this comment at the end of the file
Local variables:
mode: xml
sgml-omittag:nil
sgml-shorttag:nil
sgml-namecase-general:nil
sgml-general-insert-case:lower
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:4
sgml-indent-data:t
sgml-parent-document:nil
sgml-exposed-tags:nil
sgml-local-catalogs:("/etc/sgml/catalog" "/usr/share/xemacs21/xemacs-packages/etc/psgml-dtds/CATALOG")
sgml-local-ecat-files:("ECAT" "~/sgml/ECAT" "/usr/share/sgml/ECAT" "/usr/local/share/sgml/ECAT" "/usr/local/lib/sgml/ECAT")
End:
-->

