# SOME DESCRIPTIVE TITLE.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"Report-Msgid-Bugs-To: http://bugs.kde.org\n"
"POT-Creation-Date: 2012-03-23 14:18+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <kde-i18n-doc@kde.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. Tag: title
#: chapter-gwt.xml:4
#, no-c-format
msgid "Developing New Components"
msgstr ""

#. Tag: primary
#: chapter-gwt.xml:7 chapter-gwt.xml:102 chapter-gwt.xml:158 chapter-gwt.xml:198 chapter-gwt.xml:1525
#, no-c-format
msgid "Google Web Toolkit"
msgstr ""

#. Tag: secondary
#: chapter-gwt.xml:8
#, no-c-format
msgid "<secondary>widgets</secondary>"
msgstr ""

#. Tag: primary
#: chapter-gwt.xml:10
#, no-c-format
msgid "<primary>widgets</primary>"
msgstr ""

#. Tag: para
#: chapter-gwt.xml:12
#, no-c-format
msgid "This chapter describes how you can create custom client-side components as Google Web Toolkit (GWT) widgets and how you integrate them with Vaadin. The client-side implementations of all standard user interface components in Vaadin use the same client-side interfaces and patterns."
msgstr ""

#. Tag: para
#: chapter-gwt.xml:19
#, no-c-format
msgid "Google Web Toolkit is intended for developing browser-based user interfaces using the Java language, which is compiled into JavaScript that is executed in the browser. Knowledge of such client-side technologies is usually not needed with Vaadin, as its built-in repertoire of user interface components should be sufficient for most applications. The easiest way to create custom components in Vaadin is to make composite components with the <classname>CustomComponent</classname> class, as described in <xref linkend=\"components.customcomponent\"/>. In some cases, however, you may need to make modifications to existing components, integrate existing GWT widgets with your application, or create entirely new ones."
msgstr ""

#. Tag: para
#: chapter-gwt.xml:32
#, no-c-format
msgid "Creation of new widgets involves a number of rather intricate tasks. The Vaadin Plugin for Eclipse makes many of the tasks much easier, so if you are using Eclipse and the plugin, you should find <xref linkend=\"gwt.eclipse\"/> helpful."
msgstr ""

#. Tag: para
#: chapter-gwt.xml:38
#, no-c-format
msgid "If you need more background on the architecture, <xref linkend=\"architecture.client-side\"/> gives an introduction to the architecture of the Vaadin Client-Side Engine. If you are new to Google Web Toolkit, <xref linkend=\"architecture.technology.gwt\"/> gives an introduction to GWT and its role in the architecture of Vaadin."
msgstr ""

#. Tag: title
#: chapter-gwt.xml:47
#, no-c-format
msgid "On Terminology"
msgstr ""

#. Tag: primary
#: chapter-gwt.xml:49
#, no-c-format
msgid "widget, definition"
msgstr ""

#. Tag: para
#: chapter-gwt.xml:49
#, no-c-format
msgid "Google Web Toolkit uses the term <emphasis>widget</emphasis> for user interface components. In this book, we use the term widget to refer to client-side components made with <indexterm><primary>Google Web Toolkit</primary></indexterm>Google Web Toolkit, while using the term <emphasis>component</emphasis> in a general sense and also in the special sense for server-side components."
msgstr ""

#. Tag: title
#: chapter-gwt.xml:61
#, no-c-format
msgid "Overview"
msgstr ""

#. Tag: primary
#: chapter-gwt.xml:64
#, no-c-format
msgid "Client-Side Engine"
msgstr ""

#. Tag: primary
#: chapter-gwt.xml:65
#, no-c-format
msgid "JavaScript"
msgstr ""

#. Tag: para
#: chapter-gwt.xml:65
#, no-c-format
msgid "The Client-Side Engine of Vaadin runs in the web browser as a JavaScript program and renders the user interface components according to state data received from the server. For each server-side component, there is a client-side widget, which renders the content of the particular component type. <indexterm> <primary>Google Web Toolkit</primary> <secondary>GWT Compiler</secondary> </indexterm> <indexterm><primary>Java</primary></indexterm> The client-side engine and all the built-in client-side widgets of Vaadin have been programmed in Java with GWT, and compiled into JavaScript with the GWT Compiler. Developing custom Vaadin components and integrating existing GWT widgets is easy, requiring only Java programming."
msgstr ""

#. Tag: primary
#: chapter-gwt.xml:86 chapter-gwt.xml:148
#, no-c-format
msgid "Paintable"
msgstr ""

#. Tag: para
#: chapter-gwt.xml:86
#, no-c-format
msgid "You can start with any existing GWT widget or design a new one. To integrate it with Vaadin, you have to implement the <classname>Paintable</classname> interface of the client-side engine that provides the AJAX communications with the server-side application. You can find the interface in the <package>com.vaadin.terminal.gwt.client</package> package. You can also choose to extend an existing Vaadin client-side widget in the <package>com.vaadin.terminal.gwt.client.ui</package> package. You can find the source code for the built-in widgets in the Vaadin JAR."
msgstr ""

#. Tag: primary
#: chapter-gwt.xml:99
#, no-c-format
msgid "DefaultWidgetSet"
msgstr ""

#. Tag: primary
#: chapter-gwt.xml:100 chapter-gwt.xml:151
#, no-c-format
msgid "widget set"
msgstr ""

#. Tag: secondary
#: chapter-gwt.xml:103 chapter-gwt.xml:159
#, no-c-format
msgid "<secondary>GWT Module Descriptor</secondary>"
msgstr ""

#. Tag: para
#: chapter-gwt.xml:104
#, no-c-format
msgid "To use custom widgets, you need to define a <emphasis>widget set</emphasis> that inherits the <classname>DefaultWidgetSet</classname>, which contains the standard widgets, or some other widget set. You can also define stylesheets for custom widgets. A widget set is defined in a GWT Module Descriptor."
msgstr ""

#. Tag: para
#: chapter-gwt.xml:112
#, no-c-format
msgid "For the server-side API, you need a server-side component that can serialize and deserialize its attributes to and from the client-side counterpart. <indexterm> <primary>AbstractComponent</primary> <secondary><methodname>paintContent()</methodname></secondary> <secondary><methodname>paint()</methodname></secondary> </indexterm> <indexterm> <primary>AbstractField</primary> <secondary><methodname>paintContent()</methodname></secondary> <secondary><methodname>paint()</methodname></secondary> </indexterm> A server-side component usually inherits the <classname>AbstractComponent</classname> or <classname>AbstractField</classname> class and implements either the <methodname>paintContent()</methodname> or the more generic <methodname>paint()</methodname> method to serialize its data to the client. <indexterm><primary>UIDL</primary></indexterm> These methods \"paint\" the component in the browser by generating a UIDL element that is sent to the client. The UIDL element contains all the relevant information about the component, and you can easily add your own attributes to it. Upon reception of UIDL messages, the client-side engine creates or updates user interface widgets as needed."
msgstr ""

#. Tag: para
#: chapter-gwt.xml:143
#, no-c-format
msgid "To summarize, you need to do the following:"
msgstr ""

#. Tag: listitem
#: chapter-gwt.xml:149
#, no-c-format
msgid "Implement the <classname>Paintable</classname> interface of Vaadin in a GWT widget"
msgstr ""

#. Tag: listitem
#: chapter-gwt.xml:152
#, no-c-format
msgid "Define a widget set that extends an existing widget set with the new widget"
msgstr ""

#. Tag: primary
#: chapter-gwt.xml:154
#, no-c-format
msgid "<primary>CSS</primary>"
msgstr ""

#. Tag: listitem
#: chapter-gwt.xml:155
#, no-c-format
msgid "Create a default CSS style sheet for the widget set (optional)"
msgstr ""

#. Tag: primary
#: chapter-gwt.xml:161
#, no-c-format
msgid "<primary>GWT Module Descriptor</primary>"
msgstr ""

#. Tag: listitem
#: chapter-gwt.xml:163
#, no-c-format
msgid "Create a GWT Module Descriptor (<filename>.gwt.xml</filename>) that defines the widget set and the optional style sheet"
msgstr ""

#. Tag: primary
#: chapter-gwt.xml:166
#, no-c-format
msgid "server-side component"
msgstr ""

#. Tag: listitem
#: chapter-gwt.xml:167
#, no-c-format
msgid "Create a server-side counterpart for the client-side widget"
msgstr ""

#. Tag: primary
#: chapter-gwt.xml:172
#, no-c-format
msgid "Color Picker"
msgstr ""

#. Tag: para
#: chapter-gwt.xml:172
#, no-c-format
msgid "illustrates the folder hierarchy of the Color Picker example used in this chapter."
msgstr ""

#. Tag: title
#: chapter-gwt.xml:179
#, no-c-format
msgid "Color Picker Package"
msgstr ""

#. Tag: para
#: chapter-gwt.xml:190
#, no-c-format
msgid "The <filename>ColorPickerApplication.java</filename> application provides an example of using the custom <classname>ColorPicker</classname> component. The source code for the server-side implementation of the component is located in the same folder."
msgstr ""

#. Tag: secondary
#: chapter-gwt.xml:198
#, no-c-format
msgid "GWT Compiler"
msgstr ""

#. Tag: para
#: chapter-gwt.xml:198
#, no-c-format
msgid "The GWT Compiler takes the root folder of the client-side source code as its argument and compiles all the Java source files into JavaScript. A client-side widget set must therefore be contained within a single package, which in the Color Picker example is the <filename>com.vaadin.demo.colorpicker.gwt.client</filename> package. The inherited widget set and an optional style sheet are specified in a <filename>.gwt.xml</filename> descriptor for the GWT Compiler. In the example, the client-side widget is split in two classes: <classname>GwtColorPicker</classname>, a pure GWT widget, and <classname>VColorPicker</classname> that provides the integration with Vaadin. The default style sheet for the widget set is defined in the descriptor and located in the <filename>gwt/public/colorpicker/styles.css</filename> subfolder."
msgstr ""

#. Tag: title
#: chapter-gwt.xml:218
#, no-c-format
msgid "Doing It the Simple Way in Eclipse"
msgstr ""

#. Tag: primary
#: chapter-gwt.xml:221
#, no-c-format
msgid "Eclipse"
msgstr ""

#. Tag: secondary
#: chapter-gwt.xml:222
#, no-c-format
msgid "widget development"
msgstr ""

#. Tag: para
#: chapter-gwt.xml:225
#, no-c-format
msgid "While you can develop new widgets with any IDE or even without, you may find Eclipse and the Vaadin Plugin for it useful, as it automates all the basic routines of widget development, most importantly the creation of new widgets."
msgstr ""

#. Tag: title
#: chapter-gwt.xml:232
#, no-c-format
msgid "Creating a Widget"
msgstr ""

#. Tag: para
#: chapter-gwt.xml:234
#, no-c-format
msgid "You can create a new widget as follows:"
msgstr ""

#. Tag: para
#: chapter-gwt.xml:240
#, no-c-format
msgid "Select <menuchoice><guimenu>File</guimenu><guisubmenu>New</guisubmenu><guimenuitem>Other...</guimenuitem></menuchoice> in the main menu <emphasis>or</emphasis> right-click the <guilabel>Project Explorer</guilabel> and select <menuchoice><guimenu>New</guimenu><guimenuitem>Other...</guimenuitem></menuchoice> <emphasis>or</emphasis> press <keycombo><keycap>Ctrl</keycap><keycap>N</keycap></keycombo> to open the <guilabel>New</guilabel> dialog."
msgstr ""

#. Tag: para
#: chapter-gwt.xml:253
#, no-c-format
msgid "In the first, <guilabel>Select a wizard</guilabel> step, select <menuchoice><guimenu>Vaadin</guimenu><guimenuitem>Vaadin Widget</guimenuitem></menuchoice> and click <guibutton>Next</guibutton>."
msgstr ""

#. Tag: para
#: chapter-gwt.xml:274
#, no-c-format
msgid "In the <guilabel>New Component wizard</guilabel> step, fill out the target folder, package, and class information."
msgstr ""

#. Tag: guilabel
#: chapter-gwt.xml:292
#, no-c-format
msgid "Source folder"
msgstr ""

#. Tag: para
#: chapter-gwt.xml:294
#, no-c-format
msgid "The root folder of the entire source tree. The default value is the default source tree of your project, and you should normally leave it unchanged unless you have a different project structure."
msgstr ""

#. Tag: guilabel
#: chapter-gwt.xml:303
#, no-c-format
msgid "Package"
msgstr ""

#. Tag: para
#: chapter-gwt.xml:305
#, no-c-format
msgid "The parent package under which the new server-side component should be created. If it does not already exist, the <filename>.gwt.xml</filename> descriptor that defines the widget set will be created under the <package>widgetset</package> subpackage under this package, and the actual new widget under the <package>widgetset.client.ui</package> subpackage."
msgstr ""

#. Tag: guilabel
#: chapter-gwt.xml:317
#, no-c-format
msgid "<guilabel>Name</guilabel>"
msgstr ""

#. Tag: para
#: chapter-gwt.xml:319
#, no-c-format
msgid "The class name of the new <emphasis>server-side component</emphasis>. The name of the client-side widget stub (if you have its creation enabled) will be the same but with \"<classname>V</classname>-\" prefix, for example, <classname>VMycomponent</classname>. You can rename the classes afterwards."
msgstr ""

#. Tag: guilabel
#: chapter-gwt.xml:330
#, no-c-format
msgid "Superclass"
msgstr ""

#. Tag: para
#: chapter-gwt.xml:332
#, no-c-format
msgid "The superclass of the server-side component. It is <classname>AbstractComponent</classname> by default, but <classname>com.vaadin.ui.AbstractField</classname> or <classname>com.vaadin.ui.AbstractSelect</classname> are other commonly used superclasses. If you are extending an existing component, you should select it as the superclass. You can easily change the superclass later."
msgstr ""

#. Tag: guilabel
#: chapter-gwt.xml:345
#, no-c-format
msgid "Build client-side stub"
msgstr ""

#. Tag: para
#: chapter-gwt.xml:347
#, no-c-format
msgid "When this option is selected (strongly recommended), the wizard will build a stub for the client-side widget."
msgstr ""

#. Tag: para
#: chapter-gwt.xml:356
#, no-c-format
msgid "Finally, click <guibutton>Finish</guibutton> to create the new component."
msgstr ""

#. Tag: para
#: chapter-gwt.xml:362
#, no-c-format
msgid "The wizard will:"
msgstr ""

#. Tag: para
#: chapter-gwt.xml:368
#, no-c-format
msgid "Create a server-side component stub in the base package"
msgstr ""

#. Tag: para
#: chapter-gwt.xml:372
#, no-c-format
msgid "Create a GWT module descriptor file (<filename>.gwt.xml</filename>) in the <filename>widgetset</filename> package under the base package"
msgstr ""

#. Tag: para
#: chapter-gwt.xml:377
#, no-c-format
msgid "Create a client-side widget stub in the <filename>widgetset.client.ui</filename> package under the base package"
msgstr ""

#. Tag: para
#: chapter-gwt.xml:383
#, no-c-format
msgid "Modify the <filename>web.xml</filename> deployment descriptor to specify the widget set class name parameter for the application."
msgstr ""

#. Tag: para
#: chapter-gwt.xml:388
#, no-c-format
msgid "The structure of the server-side component and the client-side widget, and the serialization of component state between them, is explained in the subsequent sections of this chapter."
msgstr ""

#. Tag: para
#: chapter-gwt.xml:394
#, no-c-format
msgid "To compile the widget set, click the <guibutton>Compile widget set</guibutton> button in the Eclipse toolbar. See <xref linkend=\"gwt.eclipse.compiling\"/> for details. After the compilation finishes, you should be able to run your application as before, but using the new widget set. The compilation result is written under the <filename>WebContent/VAADIN/widgetsets</filename> folder. When you need to recompile the widget set in Eclipse, see <xref linkend=\"gwt.eclipse.compiling\"/>. For detailed information on compiling widget sets, see <xref linkend=\"gwt.development.compiler\"/>."
msgstr ""

#. Tag: para
#: chapter-gwt.xml:406
#, no-c-format
msgid "The following setting is inserted in the <filename>web.xml</filename> deployment descriptor to enable the widget set:"
msgstr ""

#. Tag: programlisting
#: chapter-gwt.xml:411
#, no-c-format
msgid ""
      "<?pocket-size 65% ?>&lt;init-param&gt;\n"
      "    &lt;description&gt;Application widgetset&lt;/description&gt;\n"
      "    &lt;param-name&gt;widgetset&lt;/param-name&gt;\n"
      "    &lt;param-value&gt;<emphasis mode=\"bold\">com.example.myproject.widgetset.MyprojectApplicationWidgetset</emphasis>&lt;/param-value&gt;\n"
      "&lt;/init-param&gt;"
msgstr ""

#. Tag: para
#: chapter-gwt.xml:413
#, no-c-format
msgid "You can refactor the package structure if you find need for it, but GWT compiler requires that the client-side code <emphasis>must</emphasis> always be stored under a package named \"<filename>client</filename>\"."
msgstr ""

#. Tag: title
#: chapter-gwt.xml:421
#, no-c-format
msgid "Recompiling the Widget Set"
msgstr ""

#. Tag: para
#: chapter-gwt.xml:423
#, no-c-format
msgid "After you edit a widget, you need to recompile the widget set. Vaadin automatically suggests to compile the widget set every time you save a client-side source file. If this gets annoying, you can disable the automatic recompilation from the Vaadin category in project settings, by selecting the <guilabel>Suspend automatic widgetset builds</guilabel> option."
msgstr ""

#. Tag: para
#: chapter-gwt.xml:431
#, no-c-format
msgid "You can recompile the widget set manually by clicking the <guibutton>Compile widgetset</guibutton> button in the Eclipse toolbar, shown in <xref linkend=\"figure.gwt.eclipse.compiling.toolbar\"/> while the project is open and selected."
msgstr ""

#. Tag: title
#: chapter-gwt.xml:440
#, no-c-format
msgid "The <guibutton>Compile Widgetset</guibutton> Button in Eclipse Toolbar"
msgstr ""

#. Tag: para
#: chapter-gwt.xml:451
#, no-c-format
msgid "The compilation progress is shown in the <guilabel>Console</guilabel> panel in Eclipse, as illustrated in <xref linkend=\"figure.gwt.eclipse.compiling\"/>."
msgstr ""

#. Tag: title
#: chapter-gwt.xml:458
#, no-c-format
msgid "Recompiling a Widget Set"
msgstr ""

#. Tag: para
#: chapter-gwt.xml:469
#, no-c-format
msgid "The compilation output is written under the <filename>WebContent/VAADIN/widgetsets</filename> folder, in a widget set specific folder."
msgstr ""

#. Tag: para
#: chapter-gwt.xml:475
#, no-c-format
msgid "You can speed up the compilation significantly by compiling the widget set only for your browser during development. The generated <filename>.gwt.xml</filename> descriptor stub includes a disabled element that specifies the target browser. See <xref linkend=\"gwt.widgetset\"/> for more details on setting the <literal>user-agent</literal> property."
msgstr ""

#. Tag: para
#: chapter-gwt.xml:483
#, no-c-format
msgid "For detailed information on compiling widget sets, see <xref linkend=\"gwt.development.compiler\"/>. Should you compile a widget set outside Eclipse, you need to refresh the project by selecting it in <guilabel>Project Explorer</guilabel> and pressing <keycap>F5</keycap>."
msgstr ""

#. Tag: title
#: chapter-gwt.xml:492 chapter-gwt.xml:502
#, no-c-format
msgid "Plugin Related Project Settings"
msgstr ""

#. Tag: para
#: chapter-gwt.xml:494
#, no-c-format
msgid "When you have the Eclipse Plugin installed, the project settings will have a <guilabel>Vaadin</guilabel> section, where you can select the Vaadin version and make settings to widget set building. The settings window is shown in <xref linkend=\"figure.gwt.plugin.settings\"/>."
msgstr ""

#. Tag: guilabel
#: chapter-gwt.xml:515
#, no-c-format
msgid "Suspend automatic widgetset builds"
msgstr ""

#. Tag: para
#: chapter-gwt.xml:517
#, no-c-format
msgid "Normally, when this option is unselected, Eclipse will suggest to rebuild the widget set automatically every time you save a widget source file. If this gets annoying, you can suspend the automatic building by enabling this option. You then have to click the widget set build button in the Eclipse toolbar."
msgstr ""

#. Tag: guilabel
#: chapter-gwt.xml:527
#, no-c-format
msgid "JavaScript style"
msgstr ""

#. Tag: para
#: chapter-gwt.xml:529
#, no-c-format
msgid "Normally, GWT outputs obfuscated JavaScript to make the code less readable. The main purpose is to protect the intellectual property, but the obfuscated code is also more compact, reducing the time required to load and parse the files. The <guilabel>Obfuscated</guilabel> mode is the default. The other output types are <guilabel>Pretty</guilabel>, which makes the JavaScript more readable to a human, and <guilabel>Detailed</guilabel>, which is more detailed than the pretty option with, for example, more descriptive variable names."
msgstr ""

#. Tag: guilabel
#: chapter-gwt.xml:544
#, no-c-format
msgid "Compiler threads"
msgstr ""

#. Tag: para
#: chapter-gwt.xml:546
#, no-c-format
msgid "You can set the GWT Compiler to use a specific number of threads to use the available processor cores."
msgstr ""

#. Tag: guilabel
#: chapter-gwt.xml:553
#, no-c-format
msgid "Create development mode launch"
msgstr ""

#. Tag: para
#: chapter-gwt.xml:555
#, no-c-format
msgid "Clicking this button generates a launch configuration for starting the application in GWT Development Mode. You can use the launch configuration to debug client-side code. See <xref linkend=\"gwt.development.development-mode\"/> for detailed information on the GWT Develpment Mode launch configuration."
msgstr ""

#. Tag: para
#: chapter-gwt.xml:566
#, no-c-format
msgid "The plugin will automatically download the GWT version compatible with the selected Vaadin package."
msgstr ""

#. Tag: title
#: chapter-gwt.xml:576
#, no-c-format
msgid "Google Web Toolkit Widgets"
msgstr ""

#. Tag: para
#: chapter-gwt.xml:578
#, no-c-format
msgid "Let us take a look into how you create custom GWT widgets. The authoritative sources for developing with GWT are the <emphasis><indexterm><primary>Google Web Toolkit</primary></indexterm>Google Web Toolkit Developer Guide</emphasis> and <emphasis>Google Web Toolkit Class Reference</emphasis>, both available from the GWT website."
msgstr ""

#. Tag: para
#: chapter-gwt.xml:586
#, no-c-format
msgid "Google Web Toolkit offers a variety of ways for creating custom widgets. The easiest way is to create <emphasis>composite</emphasis> widgets by grouping existing basic widgets and adding some interaction logic to them. You can also develop widgets using the lower-level Java interfaces used by the standard GWT widgets or the really low-level JavaScript interfaces."
msgstr ""

#. Tag: para
#: chapter-gwt.xml:594
#, no-c-format
msgid "A custom GWT widget needs to find its place in the GWT class hierarchy. <xref linkend=\"figure.gwt.widgets\"/> illustrates the abstract base classes for GWT widgets."
msgstr ""

#. Tag: title
#: chapter-gwt.xml:601
#, no-c-format
msgid "GWT Widget Base Class Hierarchy"
msgstr ""

#. Tag: para
#: chapter-gwt.xml:612
#, no-c-format
msgid "Each of the base classes offers various services for different types of widgets. Many custom widgets, such as the Color Picker example below, extend the <classname>Composite</classname> class to compose the widget from existing GWT widgets. The other base classes offer various features useful for different kinds of widgets. You can also choose to extend an existing GWT widget, as we have done for most of the standard user interface components of Vaadin, or to extend a Vaadin widget."
msgstr ""

#. Tag: title
#: chapter-gwt.xml:623
#, no-c-format
msgid "Extending a Vaadin Widget"
msgstr ""

#. Tag: para
#: chapter-gwt.xml:625
#, no-c-format
msgid "Extending an existing Vaadin widget is an easy way to add features, such as advanced client-side validation, to existing standard components. Just extend both the server-side component and the client-side widget, and add the needed properties and other functionality."
msgstr ""

#. Tag: para
#: chapter-gwt.xml:632
#, no-c-format
msgid "A few guidelines apply for extending existing components:"
msgstr ""

#. Tag: listitem
#: chapter-gwt.xml:637
#, no-c-format
msgid "Do not redefine the <varname>client</varname> or <varname>id</varname> member variables in the subclass. They should always be defined as <parameter>protected</parameter> and set by the base class where they are defined in <methodname>updateFromUIDL()</methodname>."
msgstr ""

#. Tag: listitem
#: chapter-gwt.xml:643
#, no-c-format
msgid "Call <methodname>super()</methodname> as the first thing in the constructor."
msgstr ""

#. Tag: listitem
#: chapter-gwt.xml:646
#, no-c-format
msgid "In <methodname>updateFromUIDL()</methodname>:"
msgstr ""

#. Tag: listitem
#: chapter-gwt.xml:649
#, no-c-format
msgid "Do not call <methodname>client.updateComponent()</methodname> as it is already called in the superclass. If the superclass calls it in an undesired way, you have to reimplement the entire functionality and not call <methodname>super.updateFromUIDL()</methodname> at all."
msgstr ""

#. Tag: listitem
#: chapter-gwt.xml:656
#, no-c-format
msgid "Call <methodname>super.updateFromUIDL(uidl, client)</methodname>, unless you specifically want to change the behaviour of the superclass implementation of the method. In such case, you have to set the <varname>client</varname> and <varname>id</varname> yourself."
msgstr ""

#. Tag: listitem
#: chapter-gwt.xml:665
#, no-c-format
msgid "Be careful about overloading superclass handlers, etc."
msgstr ""

#. Tag: title
#: chapter-gwt.xml:673
#, no-c-format
msgid "Example: A Color Picker GWT Widget"
msgstr ""

#. Tag: para
#: chapter-gwt.xml:675
#, no-c-format
msgid "In the following example, we present a custom widget composited from the <classname>HorizontalPanel</classname>, <classname>Grid</classname>, <classname>Button</classname>, and <classname>Label</classname> GWT widgets. This widget does not include any Vaadin integration with the server-side code, which will be added in a separate integration widget later in this chapter."
msgstr ""

#. Tag: programlisting
#: chapter-gwt.xml:684
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[package com.vaadin.demo.colorpicker.gwt.client.ui;\n"
      "\n"
      "import com.google.gwt.event.dom.client.*;\n"
      "import com.google.gwt.user.client.*;\n"
      "import com.google.gwt.user.client.ui.*;\n"
      "\n"
      "/**\n"
      " * A regular GWT component without integration with Vaadin.\n"
      " */\n"
      "public class GwtColorPicker extends Composite\n"
      "                            implements ClickHandler {\n"
      "\n"
      "    // The currently selected color name to give client-side \n"
      "    // feedback to the user.\n"
      "    protected Label currentcolor = new Label();\n"
      "\n"
      "    public GwtColorPicker() {\n"
      "        // Create a 4x4 grid of buttons with names for 16 colors\n"
      "        final Grid grid = new Grid(4, 4);\n"
      "        final String[] colors = new String[] { \"aqua\", \"black\",\n"
      "                \"blue\", \"fuchsia\", \"gray\", \"green\", \"lime\",\n"
      "                \"maroon\", \"navy\", \"olive\", \"purple\", \"red\",\n"
      "                \"silver\", \"teal\", \"white\", \"yellow\" };\n"
      "        int colornum = 0;\n"
      "        for (int i = 0; i < 4; i++) {\n"
      "            for (int j = 0; j < 4; j++, colornum++) {\n"
      "                // Create a button for each color\n"
      "                Button button = new Button(colors[colornum]);\n"
      "                button.addClickHandler(this);\n"
      "\n"
      "                // Put the button in the Grid layout\n"
      "                grid.setWidget(i, j, button);\n"
      "\n"
      "                // Set the button background colors.\n"
      "                DOM.setStyleAttribute(button.getElement(),\n"
      "                                      \"background\",\n"
      "                                      colors[colornum]);\n"
      "\n"
      "                // For dark colors, the button label must be\n"
      "                // in white.\n"
      "                if (\"black navy maroon blue purple\"\n"
      "                        .indexOf(colors[colornum]) != -1) {\n"
      "                    DOM.setStyleAttribute(button.getElement(),\n"
      "                                          \"color\", \"white\");\n"
      "                }\n"
      "            }\n"
      "        }\n"
      "\n"
      "        // Create a panel with the color grid and currently\n"
      "        // selected color indicator.\n"
      "        final HorizontalPanel panel = new HorizontalPanel();\n"
      "        panel.add(grid);\n"
      "        panel.add(currentcolor);\n"
      "\n"
      "        // Set the class of the color selection feedback box \n"
      "        // to allow CSS styling. We need to obtain the DOM\n"
      "        // element for the current color label. This assumes \n"
      "        // that the <td> element of the HorizontalPanel is\n"
      "        // the parent of the label element. Notice that the \n"
      "        // element has no parent before the widget has been\n"
      "        // added to the horizontal panel.\n"
      "        final Element panelcell =\n"
      "            DOM.getParent(currentcolor.getElement());\n"
      "        DOM.setElementProperty(panelcell, \"className\",\n"
      "                               \"colorpicker-currentcolorbox\");\n"
      "\n"
      "        // Set initial color. This will be overridden with the\n"
      "        // value read from server.\n"
      "        setColor(\"white\");\n"
      "\n"
      "        // Composite GWT widgets must call initWidget().\n"
      "        initWidget(panel);\n"
      "    }\n"
      "\n"
      "    /** Handles click on a color button. */\n"
      "    @Override\n"
      "    public void onClick(ClickEvent event) {\n"
      "        // Use the button label as the color name to set\n"
      "        setColor(((Button) event.getSource()).getText());\n"
      "    }\n"
      "\n"
      "    /** Sets the currently selected color. */\n"
      "    public void setColor(String newcolor) {\n"
      "        // Give client-side feedback by changing the color\n"
      "        // name in the label.\n"
      "        currentcolor.setText(newcolor);\n"
      "\n"
      "        // Obtain the DOM elements. This assumes that the <td>\n"
      "        // element of the HorizontalPanel is the parent of the\n"
      "        // caption element.\n"
      "        final Element caption = currentcolor.getElement();\n"
      "        final Element cell = DOM.getParent(caption);\n"
      "\n"
      "        // Give feedback by changing the background color\n"
      "        DOM.setStyleAttribute(cell, \"background\", newcolor);\n"
      "        DOM.setStyleAttribute(caption, \"background\", newcolor);\n"
      "        if (\"black navy maroon blue purple\"\n"
      "                .indexOf(newcolor) != -1)\n"
      "            DOM.setStyleAttribute(caption, \"color\", \"white\");\n"
      "        else\n"
      "            DOM.setStyleAttribute(caption, \"color\", \"black\");\n"
      "    }\n"
      "}]]>"
msgstr ""

#. Tag: para
#: chapter-gwt.xml:686
#, no-c-format
msgid "This example demonstrates one reason for making a custom widget: it provides client-side feedback to the user in a way that would not be possible or at least practical from server-side code. Server-side code can only select a static CSS style or a theme, while on the client-side we can manipulate styles of HTML elements flexibly. Notice that manipulation of the DOM tree depends somewhat on the browser. In this example, the manipulation should be rather compatible, but in some cases there could be problems. Thd standard GWT and Vaadin widgets handle many of such compatibility issues, but when doing low-level operations such as DOM manipulation, you may need to consider browser compatibility."
msgstr ""

#. Tag: para
#: chapter-gwt.xml:699
#, no-c-format
msgid "The structure of the DOM tree depends on how GWT renders its widgets in a specific browser. It is also not guaranteed that the rendering does not change in future releases of GWT. You should therefore make as few assumptions regarding the DOM structure as possible. Unfortunately, GWT does not provide a way to set the style of, for example, cells of layout elements. The above example therefore assumes that the <classname>Grid</classname> is a table and the <literal>&lt;button&gt;</literal> elements are inside <literal>&lt;td&gt;</literal> elements of the table. See <xref linkend=\"gwt.widgets.styling\"/> below for more details on compatibility."
msgstr ""

#. Tag: para
#: chapter-gwt.xml:712
#, no-c-format
msgid "The widget will look as shown in <xref linkend=\"figure.gwt.integration.example.colorpicker.nostyle\"/>."
msgstr ""

#. Tag: title
#: chapter-gwt.xml:718
#, no-c-format
msgid "Color Picker Widget Without Styling"
msgstr ""

#. Tag: para
#: chapter-gwt.xml:729
#, no-c-format
msgid "As you may notice, the widget will look rather uninviting without CSS styling. We will next look how to define a default style for a GWT widget."
msgstr ""

#. Tag: title
#: chapter-gwt.xml:736
#, no-c-format
msgid "Styling GWT Widgets"
msgstr ""

#. Tag: para
#: chapter-gwt.xml:738
#, no-c-format
msgid "GWT renders its widgets in the DOM tree of the web browser as HTML elements. Therefore, you can define their style with Cascading Style Sheets (CSS), just as in HTML. The GWT Compiler supports packaging style sheets from the source package tree. The style sheet is defined in the <filename>.gwt.xml</filename> GWT module descriptor file (see <xref linkend=\"gwt.widgetset\"/> for details)."
msgstr ""

#. Tag: programlisting
#: chapter-gwt.xml:747
#, no-c-format
msgid ""
      "<![CDATA[<!-- Default theme for the widget set. -->\n"
      "<stylesheet src=\"colorpicker/styles.css\"/>]]>"
msgstr ""

#. Tag: para
#: chapter-gwt.xml:749
#, no-c-format
msgid "The style sheet path is relative to the <filename>public</filename> folder under the folder containing the <filename>.gwt.xml</filename> file. In Eclipse, you can add the folders as regular folders instead of Java packages."
msgstr ""

#. Tag: para
#: chapter-gwt.xml:756
#, no-c-format
msgid "Let us define the <filename>colorpicker/styles.css</filename> as follows."
msgstr ""

#. Tag: programlisting
#: chapter-gwt.xml:760
#, no-c-format
msgid ""
      "<?pocket-size 75% ?><![CDATA[/* Set style for the color picker table.\n"
      " * This assumes that the Grid layout is rendered\n"
      " * as a HTML <table>. */\n"
      "table.example-colorpicker {\n"
      "    border-collapse: collapse;\n"
      "    border: 0px;\n"
      "}\n"
      "\n"
      "/* Set color picker button style.\n"
      " * This does not make assumptions about the HTML\n"
      " * element tree as it only uses the class attributes\n"
      " * of the elements. */\n"
      ".example-colorpicker .gwt-Button {\n"
      "    height: 60px;\n"
      "    width: 60px;\n"
      "    border: none;\n"
      "    padding: 0px;\n"
      "}\n"
      "\n"
      "/* Set style for the right-hand box that shows the\n"
      " * currently selected color.  While this may work for\n"
      " * other implementations of the HorizontalPanel as well,\n"
      " * it somewhat assumes that the layout is rendered\n"
      " * as a table where cells are <td> elements. */\n"
      ".colorpicker-currentcolorbox {\n"
      "    width: 240px;\n"
      "    text-align: center;\n"
      "    /* Must be !important to override GWT styling: */\n"
      "    vertical-align: middle !important;\n"
      "}]]>"
msgstr ""

#. Tag: para
#: chapter-gwt.xml:762
#, no-c-format
msgid "The stylesheet above makes some assumptions regarding the HTML element structure. First, it assumes that the <classname>Grid</classname> layout is a table. Second, the custom class name, <literal>colorpicker-currentcolorbox</literal>, of the right-hand <classname>HorizontalPanel</classname> cell was inserted in the DOM representation of the widget in the GwtColorPicker implementation. Styling a button makes less assumptions. Using only class names instead of specific element names may make a stylesheet more compatible if the HTML representation is different in different browsers or changes in the future."
msgstr ""

#. Tag: title
#: chapter-gwt.xml:775
#, no-c-format
msgid "Color Picker Widget With Styling"
msgstr ""

#. Tag: title
#: chapter-gwt.xml:790
#, no-c-format
msgid "Integrating a GWT Widget"
msgstr ""

#. Tag: para
#: chapter-gwt.xml:792
#, no-c-format
msgid "Integration of GWT widgets with Vaadin can be done in two basic ways: by modifying the original widget or by extending it and adding the integration code in the subclass. The latter way is actually the way the standard client-side components in Vaadin are done: they simply inherit the corresponding standard GWT widgets. For example, <classname>VButton</classname> inherits GWT <classname>Button</classname>."
msgstr ""

#. Tag: para
#: chapter-gwt.xml:801
#, no-c-format
msgid "The client-side integration code has the following tasks:"
msgstr ""

#. Tag: listitem
#: chapter-gwt.xml:806
#, no-c-format
msgid "Receive component state from server"
msgstr ""

#. Tag: listitem
#: chapter-gwt.xml:808
#, no-c-format
msgid "Send state changes caused by user interaction to server"
msgstr ""

#. Tag: listitem
#: chapter-gwt.xml:810
#, no-c-format
msgid "Manage CSS style class"
msgstr ""

#. Tag: para
#: chapter-gwt.xml:813
#, no-c-format
msgid "The integration is broken down in the following sections into server-client deserialization done in <methodname>updateFromUIDL()</methodname> and client-server serialization done with <methodname>updateVariable()</methodname>. The complete example of the integration of the Color Picker widget is given at the end of this section."
msgstr ""

#. Tag: para
#: chapter-gwt.xml:821
#, no-c-format
msgid "If you are using the Eclipse IDE, the Vaadin Plugin for Eclipse allows easy creation of a stub for a new widget, alongside its server-side component. It also manages the widget set for you automatically. See <xref linkend=\"gwt.eclipse.widget\"/> for detailed instructions."
msgstr ""

#. Tag: title
#: chapter-gwt.xml:829
#, no-c-format
msgid "Naming Conventions"
msgstr ""

#. Tag: para
#: chapter-gwt.xml:831
#, no-c-format
msgid "While the use of Vaadin does not require the use of any particular naming conventions for GWT widgets, some notes regarding naming may be necessary. Even though Java package names make it possible to use identical class names in the same context, it may be useful to try to make them more distinctive to avoid any inconvenience. GWT uses plain names for its standard widgets, such as <classname>Button</classname>. The standard components of Vaadin use identical or similar names, but that does not cause any inconvenience, because the GWT widgets and server-side components of Vaadin are never used in the same context. For the client-side components of Vaadin, we use the \"<literal>V</literal>\" prefix, for example <classname>VButton</classname>. In the Color Picker example, we use <classname>GwtColorPicker</classname> for the GWT widget, <classname>VColorPicker</classname> for the integration implementation, and <classname>ColorPicker</classname> for the server-side component. You may wish to follow similar conventions."
msgstr ""

#. Tag: para
#: chapter-gwt.xml:849
#, no-c-format
msgid "Notice that the naming convention changed when IT Mill Toolkit was renamed as Vaadin. The prefix for client-side widgets in IT Mill Toolkit was <literal>I</literal>, which was changed to <literal>V</literal> in Vaadin. Similarly, CSS style name prefixes were changed from <literal>i-</literal> to <literal>v-</literal>."
msgstr ""

#. Tag: title
#: chapter-gwt.xml:859
#, no-c-format
msgid "Deserialization of Component State from Server"
msgstr ""

#. Tag: para
#: chapter-gwt.xml:861
#, no-c-format
msgid "To receive data from the server, a widget must implement the <classname>Paintable</classname> interface and its <methodname>updateFromUIDL()</methodname> method. The idea is that the method \"paints\" the user interface description by manipulating the HTML tree on the browser. Typically, when using composite GWT components, most of the DOM tree manipulation is done by standard GWT widgets."
msgstr ""

#. Tag: para
#: chapter-gwt.xml:870
#, no-c-format
msgid "An implementation of the <methodname>updateFromUIDL()</methodname> method must include some routine tasks:"
msgstr ""

#. Tag: listitem
#: chapter-gwt.xml:876
#, no-c-format
msgid "Call <methodname>updateComponent()</methodname> and return if it succeeds"
msgstr ""

#. Tag: listitem
#: chapter-gwt.xml:881
#, no-c-format
msgid "Manage the component identifier"
msgstr ""

#. Tag: listitem
#: chapter-gwt.xml:883
#, no-c-format
msgid "Manage a reference to the <classname>ApplicationConnection</classname> object. The widget needs to know it to be able to initiate a server request when a browser event occurs."
msgstr ""

#. Tag: para
#: chapter-gwt.xml:891
#, no-c-format
msgid "The latter two of these tasks are not needed if the widget does not handle any user input that needs to be sent to server."
msgstr ""

#. Tag: para
#: chapter-gwt.xml:896
#, no-c-format
msgid "The following excerpt provides a skeleton for the <methodname>updateFromUIDL()</methodname> method and shows how the component identifier and connection object reference are managed by a widget."
msgstr ""

#. Tag: programlisting
#: chapter-gwt.xml:903
#, no-c-format
msgid ""
      "<![CDATA[    String uidlId;\n"
      "    ApplicationConnection client;\n"
      "\n"
      "    ...\n"
      "\n"
      "    public void updateFromUIDL(UIDL uidl,\n"
      "            ApplicationConnection client) {\n"
      "        if (client.updateComponent(this, uidl, true))\n"
      "            return;\n"
      " \n"
      "        this.client = client;\n"
      "        uidlId = uidl.getId();\n"
      "\n"
      "        ...\n"
      "    }]]>"
msgstr ""

#. Tag: para
#: chapter-gwt.xml:905
#, no-c-format
msgid "The <methodname>updateComponent()</methodname> call has several functions important for different kinds of components. It updates various default attributes, such as <parameter>disabled</parameter>, <parameter>readonly</parameter>, <parameter>invisible</parameter>, and (CSS) <parameter>style</parameter> attributes. If the <parameter>manageCaption</parameter> argument is <literal>true</literal>, the call will also update the caption of the component. By default, the caption is managed by the parent layout of the component. Components, such as a <classname>Button</classname>, that manage the caption themselves, do not need management of the caption."
msgstr ""

#. Tag: para
#: chapter-gwt.xml:918
#, no-c-format
msgid "The <methodname>updateComponent()</methodname> is also part of the transmutation mechanism that allows a single server-side component to have alternative client-side implementations, based on its parameters. For example, the <classname>Button</classname> server-side component can manifest either as a clickable <classname>VButton</classname> or as a switchable <classname>VCheckBox</classname> widget on the client-side. If the parameters are changed, the client-side widget can be replaced with another dynamically. Determination of the correct implementation is done in a <classname>WidgetSet</classname>. If <methodname>updateComponent()</methodname> returns <returnvalue>true</returnvalue>, the client-side engine can attempt to replace the implementation. For more details on the transmutation mechanism, see <xref linkend=\"gwt.widgetset\"/>."
msgstr ""

#. Tag: para
#: chapter-gwt.xml:934
#, no-c-format
msgid "The component identifier is used when the component needs to serialize its updated state to server. The reference to the application connection manager is needed to make the server request. If a component does not have any state changes that need to be sent to the server, management of the variables is not needed. See <xref linkend=\"gwt.integration.serialization\"/> below for further details."
msgstr ""

#. Tag: para
#: chapter-gwt.xml:943
#, no-c-format
msgid "The design of the client-side framework of Vaadin, because the <classname>Paintable</classname> is an interface and can not store any references. Having an API layer between GWT and custom widgets would be a much more complicated solution."
msgstr ""

#. Tag: title
#: chapter-gwt.xml:953
#, no-c-format
msgid "Serialization of Component State to Server"
msgstr ""

#. Tag: para
#: chapter-gwt.xml:955
#, no-c-format
msgid "User input is handled in GWT widgets with events."
msgstr ""

#. Tag: para
#: chapter-gwt.xml:959
#, no-c-format
msgid "User input is passed to the server using the <methodname>updateVariable()</methodname> method. If the <parameter>immediate</parameter> parameter is <parameter>false</parameter>, the value is simply added to a queue to be sent to the server at next AJAX request. If the argument is <parameter>true</parameter>, the AJAX request is made immediately, and will include all queued updates to variables. The <parameter>immediate</parameter> argument is described in more detail below."
msgstr ""

#. Tag: programlisting
#: chapter-gwt.xml:971
#, no-c-format
msgid ""
      "<![CDATA[if (uidl_id == null || client == null)\n"
      "    return;\n"
      "\n"
      "client.updateVariable(uidl_id, \"myvariable\",\n"
      "                      newvalue, immediate);]]>"
msgstr ""

#. Tag: para
#: chapter-gwt.xml:973
#, no-c-format
msgid "The <parameter>client</parameter> of the above example is a reference to the <classname>ApplicationConnection</classname> object that manages server requests. The <parameter>uidl_id</parameter> argument is the UIDL identifier obtained during a <methodname>updateFromUIDL()</methodname> call with <methodname>uidl.getId()</methodname> method."
msgstr ""

#. Tag: para
#: chapter-gwt.xml:981
#, no-c-format
msgid "The <methodname>updateVariable()</methodname> method has several varieties to send variables of different types."
msgstr ""

#. Tag: title
#: chapter-gwt.xml:987
#, no-c-format
msgid "UIDL Variable Types"
msgstr ""

#. Tag: entry
#: chapter-gwt.xml:991
#, no-c-format
msgid "Type"
msgstr ""

#. Tag: entry
#: chapter-gwt.xml:992
#, no-c-format
msgid "Description"
msgstr ""

#. Tag: entry
#: chapter-gwt.xml:993
#, no-c-format
msgid "UIDL Type"
msgstr ""

#. Tag: constant
#: chapter-gwt.xml:998
#, no-c-format
msgid "String"
msgstr ""

#. Tag: entry
#: chapter-gwt.xml:999
#, no-c-format
msgid "String object."
msgstr ""

#. Tag: entry
#: chapter-gwt.xml:1002
#, no-c-format
msgid "<entry>s</entry>"
msgstr ""

#. Tag: constant
#: chapter-gwt.xml:1005
#, no-c-format
msgid "<constant>int</constant>"
msgstr ""

#. Tag: entry
#: chapter-gwt.xml:1006
#, no-c-format
msgid "Native integer value."
msgstr ""

#. Tag: entry
#: chapter-gwt.xml:1009
#, no-c-format
msgid "<entry>i</entry>"
msgstr ""

#. Tag: constant
#: chapter-gwt.xml:1012
#, no-c-format
msgid "long"
msgstr ""

#. Tag: entry
#: chapter-gwt.xml:1013
#, no-c-format
msgid "Native long integer value."
msgstr ""

#. Tag: entry
#: chapter-gwt.xml:1016
#, no-c-format
msgid "<entry>l</entry>"
msgstr ""

#. Tag: constant
#: chapter-gwt.xml:1019
#, no-c-format
msgid "float"
msgstr ""

#. Tag: entry
#: chapter-gwt.xml:1020
#, no-c-format
msgid "Native single-precision floating-point value."
msgstr ""

#. Tag: entry
#: chapter-gwt.xml:1023
#, no-c-format
msgid "<entry>f</entry>"
msgstr ""

#. Tag: constant
#: chapter-gwt.xml:1026
#, no-c-format
msgid "double"
msgstr ""

#. Tag: entry
#: chapter-gwt.xml:1027
#, no-c-format
msgid "Native double-precision floating-point value."
msgstr ""

#. Tag: entry
#: chapter-gwt.xml:1030
#, no-c-format
msgid "<entry>d</entry>"
msgstr ""

#. Tag: constant
#: chapter-gwt.xml:1033
#, no-c-format
msgid "boolean"
msgstr ""

#. Tag: entry
#: chapter-gwt.xml:1034
#, no-c-format
msgid "Native boolean value."
msgstr ""

#. Tag: entry
#: chapter-gwt.xml:1037
#, no-c-format
msgid "<entry>b</entry>"
msgstr ""

#. Tag: constant
#: chapter-gwt.xml:1040
#, no-c-format
msgid "Object[]"
msgstr ""

#. Tag: entry
#: chapter-gwt.xml:1041
#, no-c-format
msgid "Array of object data. The <methodname>toString()</methodname> method is used to serialize each of the objects. The content strings are escaped with <methodname>escapeString()</methodname>, to allow characters such as quotes."
msgstr ""

#. Tag: entry
#: chapter-gwt.xml:1048
#, no-c-format
msgid "<entry>a</entry>"
msgstr ""

#. Tag: para
#: chapter-gwt.xml:1054
#, no-c-format
msgid "This serialization mechanism is intended to be as simple as possible in most cases, when the user input is typically just one state variable, while also allowing the serialization of more complex data, if necessary."
msgstr ""

#. Tag: title
#: chapter-gwt.xml:1062
#, no-c-format
msgid "Immediateness"
msgstr ""

#. Tag: para
#: chapter-gwt.xml:1064
#, no-c-format
msgid "Server-side components that inherit <classname>AbstractComponent</classname> have an <parameter>immediate</parameter> attribute, set with <methodname>setImmediate()</methodname>. This attribute dictates whether a component makes a server request immediately when its state changes, or only afterwards. For example, there is no need to send the contents of a \"Username\" <classname>TextField</classname> before the \"Login\" button has been clicked. On the other hand, the server can set the <classname>TextField</classname> as immediate to receive changes for example when the component loses focus."
msgstr ""

#. Tag: para
#: chapter-gwt.xml:1077
#, no-c-format
msgid "Most widgets should support immediateness by receiving the <parameter>immediate</parameter> attribute from the UIDL message that renders the widget. The following example is extracted from the <classname>VTextField</classname> implementation."
msgstr ""

#. Tag: programlisting
#: chapter-gwt.xml:1084
#, no-c-format
msgid ""
      "<?pocket-size 75% ?><![CDATA[// Store the immediate attribute in a member variable\n"
      "private boolean immediate = false;\n"
      "...\n"
      "\n"
      "public void updateFromUIDL(UIDL uidl,\n"
      "                           ApplicationConnection client) {\n"
      "    if(client.updateComponent(this, uidl, true))\n"
      "        return;\n"
      "\n"
      "    // Receive and store the immediate attribute\n"
      "    immediate  = uidl.getBooleanAttribute(\"immediate\");\n"
      "    ...\n"
      "}\n"
      "\n"
      "public void onChange(Widget sender) {\n"
      "    if(client != null && id != null) {\n"
      "        // Use the stored immediate attribute to say\n"
      "        // whether or not make the server request\n"
      "        //  immediately.\n"
      "        client.updateVariable(id, \"text\", getText(),\n"
      "                              immediate);\n"
      "    }\n"
      "}]]>"
msgstr ""

#. Tag: para
#: chapter-gwt.xml:1086
#, no-c-format
msgid "In some widgets, the <parameter>immediate</parameter> attribute would have little meaning, and in fact an accidental <parameter>false</parameter> value would cause undesired behaviour. For example, a button is always expected to send a request to the server when it is clicked. Such widgets can simply use <parameter>true</parameter> for the <parameter>immediate</parameter> argument in <methodname>updateVariable()</methodname>. For example, <classname>VButton</classname> does as follows:"
msgstr ""

#. Tag: programlisting
#: chapter-gwt.xml:1097
#, no-c-format
msgid ""
      "<![CDATA[public void onClick(Widget sender) {\n"
      "    if (id == null || client == null)\n"
      "        return;\n"
      "    client.updateVariable(id, \"state\", true,\n"
      "                          /* always immediate */ true);\n"
      "}]]>"
msgstr ""

#. Tag: title
#: chapter-gwt.xml:1103
#, no-c-format
msgid "Example: Integrating the Color Picker Widget"
msgstr ""

#. Tag: para
#: chapter-gwt.xml:1105
#, no-c-format
msgid "Below is a complete example of an integration component for the Color Picker example. It demonstrates all the basic tasks needed for the integration of a GWT widget with its server-side counterpart component."
msgstr ""

#. Tag: programlisting
#: chapter-gwt.xml:1111
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[import com.vaadin.terminal.gwt.client.ApplicationConnection;\n"
      "import com.vaadin.terminal.gwt.client.Paintable;\n"
      "import com.vaadin.terminal.gwt.client.UIDL;\n"
      "\n"
      "public class VColorPicker extends GwtColorPicker\n"
      "                          implements Paintable {\n"
      "\n"
      "    /** Set the CSS class name to allow styling. */\n"
      "    public static final String CLASSNAME = \"example-colorpicker\";\n"
      "\n"
      "    /** Component identifier in UIDL communications. */\n"
      "    String uidlId;\n"
      "\n"
      "    /** Reference to the server connection object. */\n"
      "    ApplicationConnection client;\n"
      "\n"
      "    /**\n"
      "     * The constructor should first call super() to initialize\n"
      "     * the component and then handle any initialization relevant\n"
      "     * to Vaadin.\n"
      "     */\n"
      "    public VColorPicker() {\n"
      "        // The superclass has a lot of relevant initialization\n"
      "        super();\n"
      "\n"
      "        // This method call of the Paintable interface sets\n"
      "        // the component style name in DOM tree\n"
      "        setStyleName(CLASSNAME);\n"
      "    }\n"
      "\n"
      "    /**\n"
      "     * This method must be implemented to update the client-side\n"
      "     * component from UIDL data received from server.\n"
      "     * \n"
      "     * This method is called when the page is loaded for the\n"
      "     * first time, and every time UI changes in the component\n"
      "     * are received from the server.\n"
      "     */\n"
      "    public void updateFromUIDL(UIDL uidl,\n"
      "                               ApplicationConnection client) {\n"
      "        // This call should be made first. Ensure correct\n"
      "        // implementation, and let the containing layout\n"
      "        // manage the caption, etc.\n"
      "        if (client.updateComponent(this, uidl, true))\n"
      "            return;\n"
      "\n"
      "        // Save reference to server connection object to be\n"
      "        // able to send user interaction later\n"
      "        this.client = client;\n"
      "\n"
      "        // Save the UIDL identifier for the component\n"
      "        uidlId = uidl.getId();\n"
      "\n"
      "        // Get value received from server and actualize it\n"
      "        // in the GWT component\n"
      "        setColor(uidl.getStringVariable(\"colorname\"));\n"
      "    }\n"
      "\n"
      "    /**\n"
      "     * Override the method to communicate the new value\n"
      "     * to server.\n"
      "     **/\n"
      "    public void setColor(String newcolor) {\n"
      "        // Ignore if no change\n"
      "        if (newcolor.equals(currentcolor.getText()))\n"
      "            return;\n"
      "\n"
      "        // Let the original implementation to do\n"
      "        // whatever it needs to do\n"
      "        super.setColor(newcolor);\n"
      "\n"
      "        // Updating the state to the server can not be done\n"
      "        // before the server connection is known, i.e., before\n"
      "        // updateFromUIDL() has been called.\n"
      "        if (uidlId == null || client == null)\n"
      "            return;\n"
      "\n"
      "        // Communicate the user interaction parameters to server.\n"
      "        // This call will initiate an AJAX request to the server.\n"
      "        client.updateVariable(uidlId, \"colorname\",\n"
      "                              newcolor, true);\n"
      "    }\n"
      "}]]>"
msgstr ""

#. Tag: title
#: chapter-gwt.xml:1117
#, no-c-format
msgid "Defining a Widget Set"
msgstr ""

#. Tag: para
#: chapter-gwt.xml:1119
#, no-c-format
msgid "The client-side components, or in GWT terminology, widgets, must be made usable in the client-side GWT application by defining a widget set. A widget set is actually a GWT application and needs to be defined in the <emphasis>GWT module descriptor</emphasis> as the entry point of the client-side engine. A GWT module descriptor is an XML file with extension <filename>.gwt.xml</filename>."
msgstr ""

#. Tag: para
#: chapter-gwt.xml:1128
#, no-c-format
msgid "If you are using the Eclipse IDE, the New Vaadin Widget wizard will automatically create the GWT module descriptor. See <xref linkend=\"gwt.eclipse.widget\"/> for detailed instructions."
msgstr ""

#. Tag: para
#: chapter-gwt.xml:1134
#, no-c-format
msgid "The following example of <filename>ColorPickerWidgetSet.gwt.xml</filename> shows the GWT module descriptor of the Color Picker application. We also define the default stylesheet for the color picker widget, as described above in <xref linkend=\"gwt.widgets.styling\"/>."
msgstr ""

#. Tag: programlisting
#: chapter-gwt.xml:1141
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[<module>\n"
      "        <!-- Inherit the default widget set -->\n"
      "        <inherits name=\"com.vaadin.terminal.gwt.DefaultWidgetSet\" />\n"
      "        \n"
      "        <!-- The default theme of this widget set -->        \n"
      "        <stylesheet src=\"colorpicker/styles.css\"/>\n"
      "</module>]]>"
msgstr ""

#. Tag: para
#: chapter-gwt.xml:1143
#, no-c-format
msgid "Compiling widget sets takes considerable time. You can reduce the compilation time significantly by compiling the widget sets only for your browser, which is useful during development. You can do this by setting the <parameter>user.agent</parameter> property in the <filename>.gwt.xml</filename> GWT module descriptor."
msgstr ""

#. Tag: programlisting
#: chapter-gwt.xml:1151
#, no-c-format
msgid "<?pocket-size 75% ?><![CDATA[<set-property name=\"user.agent\" value=\"gecko1_8\"/>]]>"
msgstr ""

#. Tag: para
#: chapter-gwt.xml:1153
#, no-c-format
msgid "The <parameter>value</parameter> attribute should match your browser. The browsers supported by GWT depend on the GWT version, below is a list of browser identifiers supported by GWT 2.0."
msgstr ""

#. Tag: title
#: chapter-gwt.xml:1160
#, no-c-format
msgid "GWT User Agents"
msgstr ""

#. Tag: entry
#: chapter-gwt.xml:1164
#, no-c-format
msgid "Identifier"
msgstr ""

#. Tag: entry
#: chapter-gwt.xml:1165
#, no-c-format
msgid "<entry>Name</entry>"
msgstr ""

#. Tag: entry
#: chapter-gwt.xml:1170
#, no-c-format
msgid "gecko1_8"
msgstr ""

#. Tag: entry
#: chapter-gwt.xml:1171
#, no-c-format
msgid "Mozilla Firefox 1.5 and later"
msgstr ""

#. Tag: entry
#: chapter-gwt.xml:1174
#, no-c-format
msgid "gecko"
msgstr ""

#. Tag: entry
#: chapter-gwt.xml:1175
#, no-c-format
msgid "Mozilla Firefox 1.0 (<emphasis>obsolete</emphasis>)"
msgstr ""

#. Tag: entry
#: chapter-gwt.xml:1178
#, no-c-format
msgid "<entry>ie6</entry>"
msgstr ""

#. Tag: entry
#: chapter-gwt.xml:1179
#, no-c-format
msgid "Internet Explorer 6"
msgstr ""

#. Tag: entry
#: chapter-gwt.xml:1182
#, no-c-format
msgid "<entry>ie8</entry>"
msgstr ""

#. Tag: entry
#: chapter-gwt.xml:1183
#, no-c-format
msgid "Internet Explorer 8"
msgstr ""

#. Tag: entry
#: chapter-gwt.xml:1186
#, no-c-format
msgid "safari"
msgstr ""

#. Tag: entry
#: chapter-gwt.xml:1187
#, no-c-format
msgid "Apple Safari and other Webkit-based browsers including Google Chrome"
msgstr ""

#. Tag: entry
#: chapter-gwt.xml:1190
#, no-c-format
msgid "opera"
msgstr ""

#. Tag: entry
#: chapter-gwt.xml:1191
#, no-c-format
msgid "Opera"
msgstr ""

#. Tag: para
#: chapter-gwt.xml:1197
#, no-c-format
msgid "For more information about the GWT Module XML Format, please see Google Web Toolkit Developer Guide."
msgstr ""

#. Tag: title
#: chapter-gwt.xml:1204
#, no-c-format
msgid "Server-Side Components"
msgstr ""

#. Tag: para
#: chapter-gwt.xml:1206
#, no-c-format
msgid "Server-side components provide the API for user applications to build their user interface. Many applications do not ever need to bother with the client-side implementation of the standard components, but those that use their own GWT widgets need to have corresponding server-side components."
msgstr ""

#. Tag: para
#: chapter-gwt.xml:1213
#, no-c-format
msgid "If you are using the Vaadin Plugin for Eclipse, the wizard for creating new widgets will also create a stub of the server-side component for you. See <xref linkend=\"gwt.eclipse.widget\"/> for detailed instructions."
msgstr ""

#. Tag: para
#: chapter-gwt.xml:1219
#, no-c-format
msgid "A server-side component has two basic tasks: it has to be able to serialize its state variables to the corresponding client-side component, and deserialize any user input received from the client. Many of these tasks are taken care of by the component framework."
msgstr ""

#. Tag: title
#: chapter-gwt.xml:1227
#, no-c-format
msgid "Binding to the Client-Side Widget"
msgstr ""

#. Tag: para
#: chapter-gwt.xml:1229
#, no-c-format
msgid "A server-side component needs to be bound to a specific client-side widget. This is done with a special annotation. For example, for the <classname>ColorPicker</classname> server-side component, we define:"
msgstr ""

#. Tag: programlisting
#: chapter-gwt.xml:1235
#, no-c-format
msgid ""
      "<![CDATA[import com.vaadin.demo.colorpicker.widgetset.client.ui.VColorPicker;\n"
      "\n"
      "@ClientWidget(VColorPicker.class)\n"
      "public class ColorPicker extends AbstractField {\n"
      "    ...]]>"
msgstr ""

#. Tag: para
#: chapter-gwt.xml:1237
#, no-c-format
msgid "The annotation is read during the compilation of the widget with the GWT Compiler. The compiler invokes a <classname>WidgetMapGenerator</classname> that reads the annotations from the compiled server-side component classes. It is therefore necessary that the server-side components are compiled before the client-side compilation, as noted in <xref linkend=\"gwt.development.compiler\"/>."
msgstr ""

#. Tag: para
#: chapter-gwt.xml:1246
#, no-c-format
msgid "The serialization is broken down into server-client serialization and client-server deserialization in the following sections. We will also present the complete example of the server-side implementation of the Color Picker component below."
msgstr ""

#. Tag: title
#: chapter-gwt.xml:1256
#, no-c-format
msgid "Server-Client Serialization"
msgstr ""

#. Tag: para
#: chapter-gwt.xml:1260
#, no-c-format
msgid "The server-side implementation of a component must be able to serialize its data into a UIDL message that is sent to the client. You need to override the <methodname>paintContent()</methodname> method, defined in <classname>AbstractComponent</classname>. You should call the superclass to allow it to paint its data as well."
msgstr ""

#. Tag: para
#: chapter-gwt.xml:1268
#, no-c-format
msgid "The data is serialized with the variants of the <methodname>addAttribute()</methodname> and <methodname>addVariable()</methodname> methods for different basic data types."
msgstr ""

#. Tag: para
#: chapter-gwt.xml:1275
#, no-c-format
msgid "The UIDL API offered in <classname>PaintTarget</classname> is covered in <xref linkend=\"uidl.painting\"/>."
msgstr ""

#. Tag: title
#: chapter-gwt.xml:1288
#, no-c-format
msgid "Client-Server Deserialization"
msgstr ""

#. Tag: para
#: chapter-gwt.xml:1290
#, no-c-format
msgid "The server-side component must be able to receive state changes from the client-side widget. This is done by overriding the <methodname>changeVariables()</methodname> method, defined in <classname>AbstractComponent</classname>. A component should always call the superclass implementation in the beginning to allow it handle its variables."
msgstr ""

#. Tag: para
#: chapter-gwt.xml:1299
#, no-c-format
msgid "The variables are given as objects in the <parameter>variables</parameter> map, with the same key with which they were serialized on the client-side. The object type is likewise the same as given for the particular variable in <methodname>updateVariable()</methodname> in the client-side."
msgstr ""

#. Tag: programlisting
#: chapter-gwt.xml:1307
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[@Override\n"
      "public void changeVariables(Object source, Map variables) {\n"
      "    // Let superclass read any common variables.\n"
      "    super.changeVariables(source, variables);\n"
      "\n"
      "    // Sets the currently selected color\n"
      "    if (variables.containsKey(\"colorname\") && !isReadOnly()) {\n"
      "        final String newValue = (String)variables.get(\"colorname\");\n"
      "\n"
      "        // Changing the property of the component will\n"
      "        // trigger a ValueChangeEvent\n"
      "        setValue(newValue, true);\n"
      "    }\n"
      "}]]>"
msgstr ""

#. Tag: para
#: chapter-gwt.xml:1309
#, no-c-format
msgid "The above example handles variable changes for a field component inheriting <classname>AbstractField</classname>. Fields have their value as the value property of the object. Setting the value with <methodname>setValue()</methodname>, as above, will trigger a <classname>ValueChangeEvent</classname>, which the user of the component can catch with a <classname>ValueChangeListener</classname>."
msgstr ""

#. Tag: para
#: chapter-gwt.xml:1318
#, no-c-format
msgid "Contained components, such as components inside a layout, are deserialized by referencing them by their <emphasis>paintable identifier</emphasis> or <emphasis>PID</emphasis>."
msgstr ""

#. Tag: title
#: chapter-gwt.xml:1328
#, no-c-format
msgid "Example: Color Picker Server-Side Component"
msgstr ""

#. Tag: para
#: chapter-gwt.xml:1330
#, no-c-format
msgid "The following example provides the complete server-side <classname>ColorPicker</classname> component for the Color Picker example. It has only one state variable: the currently selected color, which is stored as the property of the component. Implementation of the <classname>Property</classname> interface is provided in the <classname>AbstractField</classname> superclass of the component. The UIDL tag name for the component is <literal>colorpicker</literal> and the state is communicated through the <parameter>colorname</parameter> variable."
msgstr ""

#. Tag: programlisting
#: chapter-gwt.xml:1341
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[package com.vaadin.demo.colorpicker;\n"
      "\n"
      "import com.vaadin.demo.colorpicker.widgetset.client.ui.VColorPicker;\n"
      "...\n"
      "\n"
      "/**\n"
      " * Color picker for selecting a color from a palette.\n"
      " * \n"
      " * @author magi\n"
      " */\n"
      "@ClientWidget(VColorPicker.class)\n"
      "public class ColorPicker extends AbstractField {\n"
      "    public ColorPicker() {\n"
      "        super();\n"
      "        setValue(new String(\"white\"));\n"
      "    }\n"
      "\n"
      "    /** The property value of the field is a String. */\n"
      "    @Override\n"
      "    public Class<?> getType() {\n"
      "        return String.class;\n"
      "    }\n"
      "\n"
      "    /** Set the currently selected color. */\n"
      "    public void setColor(String newcolor) {\n"
      "        // Sets the color name as the property of the component.\n"
      "        // Setting the property will automatically cause\n"
      "        // repainting of the component with paintContent().\n"
      "        setValue(newcolor);\n"
      "    }\n"
      "\n"
      "    /** Retrieve the currently selected color. */\n"
      "    public String getColor() {\n"
      "        return (String) getValue();\n"
      "    }\n"
      "\n"
      "    /** Paint (serialize) the component for the client. */\n"
      "    @Override\n"
      "    public void paintContent(PaintTarget target)\n"
      "    throws PaintException {\n"
      "        // Superclass writes any common attributes in the\n"
      "        // paint target.\n"
      "        super.paintContent(target);\n"
      "\n"
      "        // Add the currently selected color as a variable in\n"
      "        // the paint target.  \n"
      "        target.addVariable(this, \"colorname\", getColor());\n"
      "    }\n"
      "\n"
      "    /** Deserialize changes received from the client. */\n"
      "    @Override\n"
      "    public void changeVariables(Object source, Map variables) {\n"
      "        // Sets the currently selected color\n"
      "        if (variables.containsKey(\"colorname\") &&\n"
      "                !isReadOnly()) {\n"
      "            // Changing the property of the component will\n"
      "            // trigger a ValueChangeEvent\n"
      "            setValue((String) variables.get(\"colorname\"), true);\n"
      "        }\n"
      "    }\n"
      "}]]>"
msgstr ""

#. Tag: title
#: chapter-gwt.xml:1347
#, no-c-format
msgid "Using a Custom Component"
msgstr ""

#. Tag: para
#: chapter-gwt.xml:1349
#, no-c-format
msgid "A custom component is used like any other Vaadin component. You will, however, need to compile the client-side widget set with the GWT Compiler. See <xref linkend=\"gwt.development.compiler\"/> for instructions on how to compile widget sets."
msgstr ""

#. Tag: title
#: chapter-gwt.xml:1357
#, no-c-format
msgid "Example: Color Picker Application"
msgstr ""

#. Tag: para
#: chapter-gwt.xml:1359
#, no-c-format
msgid "The following server-side example application shows how to use the Color Picker custom widget. The example includes also server-side feedback of the user input and changing the color selection to show that the communication of the component state works in both directions."
msgstr ""

#. Tag: programlisting
#: chapter-gwt.xml:1366
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[package com.vaadin.demo.colorpicker;\n"
      "\n"
      "import com.vaadin.data.Property.ValueChangeEvent;\n"
      "import com.vaadin.data.Property.ValueChangeListener;\n"
      "import com.vaadin.ui.*;\n"
      "import com.vaadin.ui.Button.ClickEvent;\n"
      "\n"
      "/**\n"
      " * Demonstration application that shows how to use a simple\n"
      " * custom client-side GWT component, the ColorPicker.\n"
      " */\n"
      "public class ColorPickerApplication\n"
      "       extends com.vaadin.Application {\n"
      "    Window main = new Window(\"Color Picker Demo\");\n"
      "    \n"
      "    /* The custom component. */\n"
      "    ColorPicker colorselector = new ColorPicker();\n"
      "    \n"
      "    /* Another component. */\n"
      "    Label colorname;\n"
      "    \n"
      "    public void init() {\n"
      "        setMainWindow(main);\n"
      "        setTheme(\"demo\");\n"
      "        \n"
      "        // Listen for value change events in the custom\n"
      "        // component, triggered when user clicks a button\n"
      "        // to select another color.\n"
      "        colorselector.addListener(new ValueChangeListener() {\n"
      "            public void valueChange(ValueChangeEvent event) {\n"
      "                // Provide some server-side feedback\n"
      "                colorname.setValue(\"Selected color: \" + \n"
      "                                   colorselector.getColor());\n"
      "            }\n"
      "        });\n"
      "        main.addComponent(colorselector);\n"
      "        \n"
      "        // Add another component to give feedback from\n"
      "        // server-side code\n"
      "        colorname = new Label(\"Selected color: \" +\n"
      "                              colorselector.getColor());\n"
      "        main.addComponent(colorname);\n"
      "        \n"
      "        // Server-side manipulation of the component state\n"
      "        Button button = new Button(\"Set to white\");\n"
      "        button.addListener(new Button.ClickListener() {\n"
      "            public void buttonClick(ClickEvent event) {\n"
      "                colorselector.setColor(\"white\");\n"
      "            }\n"
      "        });\n"
      "        main.addComponent(button);\n"
      "    }\n"
      "}]]>"
msgstr ""

#. Tag: title
#: chapter-gwt.xml:1371
#, no-c-format
msgid "Web Application Deployment"
msgstr ""

#. Tag: para
#: chapter-gwt.xml:1373
#, no-c-format
msgid "Deployment of web applications that include custom components is almost identical to the normal case where you use only the default widget set of Vaadin. The default case is documented in <xref linkend=\"section.web.web-xml\"/>. You only need to specify the widget set for the application in the <filename>WebContent/WEB-INF/web.xml</filename> deployment descriptor."
msgstr ""

#. Tag: para
#: chapter-gwt.xml:1382
#, no-c-format
msgid "If you use the Vaadin Plugin for Eclipse to create a new widget in your project, the plugin will modify the deployment descriptor to use the custom widget set."
msgstr ""

#. Tag: para
#: chapter-gwt.xml:1388
#, no-c-format
msgid "The following deployment descriptor specifies the Color Picker Application detailed in the previous section."
msgstr ""

#. Tag: programlisting
#: chapter-gwt.xml:1393
#, no-c-format
msgid ""
      "<?pocket-size 65% ?>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n"
      "&lt;web-app\n"
      "  id=\"WebApp_ID\"\n"
      "  version=\"2.4\"\n"
      "  xmlns=\"http://java.sun.com/xml/ns/j2ee\"\n"
      "  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n"
      "  xsi:schemaLocation=\"http://java.sun.com/xml/ns/j2ee\n"
      "           http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd\"&gt;\n"
      "\n"
      "    &lt;display-name&gt;myproject&lt;/display-name&gt;\n"
      "\n"
      "    &lt;servlet&gt;\n"
      "        &lt;servlet-name&gt;<parameter>ColorPickerServlet</parameter>&lt;/servlet-name&gt;\n"
      "        &lt;servlet-class&gt;\n"
      "            com.vaadin.terminal.gwt.server.ApplicationServlet\n"
      "        &lt;/servlet-class&gt;\n"
      "        &lt;init-param&gt;\n"
      "            &lt;param-name&gt;application&lt;/param-name&gt;\n"
      "            &lt;param-value&gt;\n"
      "                <parameter>com.vaadin.demo.colorpicker.ColorPickerApplication</parameter>\n"
      "            &lt;/param-value&gt;\n"
      "        &lt;/init-param&gt;\n"
      "        &lt;init-param&gt;\n"
      "            &lt;param-name&gt;widgetset&lt;/param-name&gt;\n"
      "            &lt;param-value&gt;\n"
      "                <parameter>com.vaadin.demo.colorpicker.widgetset.ColorPickerWidgetSet</parameter>\n"
      "            &lt;/param-value&gt;\n"
      "        &lt;/init-param&gt;\n"
      "    &lt;/servlet&gt;\n"
      "\n"
      "    &lt;servlet-mapping&gt;\n"
      "        &lt;servlet-name&gt;<parameter>ColorPickerServlet</parameter>&lt;/servlet-name&gt;\n"
      "        &lt;url-pattern&gt;<parameter>/*</parameter>&lt;/url-pattern&gt;\n"
      "    &lt;/servlet-mapping&gt;\n"
      "&lt;/web-app&gt;"
msgstr ""

#. Tag: para
#: chapter-gwt.xml:1396
#, no-c-format
msgid "The project specific parameters are emphasized. Notice that the widget set name is not a file name, but the base name for the <filename>ColorPickerWidgetSet.gwt.xml</filename> module descriptor."
msgstr ""

#. Tag: para
#: chapter-gwt.xml:1402
#, no-c-format
msgid "The Eclipse Plugin will automatically generate the <parameter>init-param</parameter> parameter in the <filename>web.xml</filename> file of your project when you create a new widget."
msgstr ""

#. Tag: para
#: chapter-gwt.xml:1409
#, no-c-format
msgid "As the project context root in the above example is <filename>myproject</filename> and the <parameter>&lt;url-pattern&gt;</parameter> is <filename>/*</filename>, the URL for the application will be <uri>/myproject/</uri>. If you are using an URL pattern such as <filename>/myapp/*</filename>, you need to make an additional mapping to map requests to <filename>/VAADIN/*</filename> context to the same servlet. Otherwise the default widget set and built-in themes in Vaadin will be missing."
msgstr ""

#. Tag: programlisting
#: chapter-gwt.xml:1420
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[  <servlet-mapping>\n"
      "    <servlet-name>Book of Vaadin Examples</servlet-name>\n"
      "    <url-pattern>/VAADIN/*</url-pattern>\n"
      "  </servlet-mapping>]]>"
msgstr ""

#. Tag: title
#: chapter-gwt.xml:1425
#, no-c-format
msgid "GWT Widget Development"
msgstr ""

#. Tag: para
#: chapter-gwt.xml:1427
#, no-c-format
msgid "Development of new GWT widgets includes widget set definition (GWT Module Descriptor), compiling the widgets and the Vaadin Client-Side Engine to JavaScript with the GWT Compiler, and debugging the application in the GWT Development Mode."
msgstr ""

#. Tag: para
#: chapter-gwt.xml:1434
#, no-c-format
msgid "You can use any IDE for developing GWT components for Vaadin. The examples given in this book are for the Eclipse IDE. It allows easy launching of the GWT Development Mode, debugging, and running an external compiler for GWT widget sets."
msgstr ""

#. Tag: title
#: chapter-gwt.xml:1442
#, no-c-format
msgid "Creating a Widget Project"
msgstr ""

#. Tag: para
#: chapter-gwt.xml:1444
#, no-c-format
msgid "Creation of a Vaadin project that uses the default widget set was covered in <xref linkend=\"getting-started.first-project\"/>. Developing custom widgets creates a number of additional requirements for a project."
msgstr ""

#. Tag: para
#: chapter-gwt.xml:1450
#, no-c-format
msgid "Let us review the steps required for creating an application that contains custom widgets. Details for each step are given in the subsequent sections."
msgstr ""

#. Tag: listitem
#: chapter-gwt.xml:1457
#, no-c-format
msgid "Create a new Vaadin project (for Eclipse, see <xref linkend=\"getting-started.first-project.creation\" xrefstyle=\"select:label\"/>)"
msgstr ""

#. Tag: listitem
#: chapter-gwt.xml:1462
#, no-c-format
msgid "Copy or import the GWT JARs to the project and add them to the class path (<xref linkend=\"gwt.development.import-gwt\" xrefstyle=\"select:label\"/>)"
msgstr ""

#. Tag: listitem
#: chapter-gwt.xml:1467
#, no-c-format
msgid "Write the source code for the client-side widgets, their server-side counterparts, and the application (<xref linkend=\"gwt.development.module-creation\" xrefstyle=\"select: label\"/>)"
msgstr ""

#. Tag: para
#: chapter-gwt.xml:1473
#, no-c-format
msgid "Write the <filename>web.xml</filename> Deployment Descriptor for the web application"
msgstr ""

#. Tag: listitem
#: chapter-gwt.xml:1476
#, no-c-format
msgid "Define the widget set used in the application (<xref linkend=\"gwt.usage.deployment\" xrefstyle=\"select:label\"/>)"
msgstr ""

#. Tag: listitem
#: chapter-gwt.xml:1482
#, no-c-format
msgid "Compile the widget set to JavaScript runtime with GWT Compiler (<xref linkend=\"gwt.development.compiler\" xrefstyle=\"select:label\"/>)"
msgstr ""

#. Tag: listitem
#: chapter-gwt.xml:1486
#, no-c-format
msgid "Deploy the project to an application server (for Eclipse and Tomcat see <xref linkend=\"getting-started.first-project.server\" xrefstyle=\"select:label\"/>)"
msgstr ""

#. Tag: para
#: chapter-gwt.xml:1492
#, no-c-format
msgid "Either:"
msgstr ""

#. Tag: listitem
#: chapter-gwt.xml:1495
#, no-c-format
msgid "Open a web browser to use the web application."
msgstr ""

#. Tag: listitem
#: chapter-gwt.xml:1498
#, no-c-format
msgid "Open a web browser in GWT Development Mode to debug the client-side widget code. (<xref linkend=\"gwt.development.development-mode\" xrefstyle=\"select:label\"/>)"
msgstr ""

#. Tag: para
#: chapter-gwt.xml:1508
#, no-c-format
msgid "The contents of a ready widget development project are described in <xref linkend=\"gwt.development.compiler.result\"/>."
msgstr ""

#. Tag: para
#: chapter-gwt.xml:1513
#, no-c-format
msgid "The Vaadin Plugin for Eclipse makes the creation of application custom widgets as well as the application projects easy by taking care of all the above steps (except deployment), so if you use it, please see <xref linkend=\"gwt.eclipse\"/> for detailed instructions."
msgstr ""

#. Tag: title
#: chapter-gwt.xml:1522
#, no-c-format
msgid "Importing GWT Installation Package"
msgstr ""

#. Tag: secondary
#: chapter-gwt.xml:1526
#, no-c-format
msgid "importing"
msgstr ""

#. Tag: para
#: chapter-gwt.xml:1529
#, no-c-format
msgid "You will need to include the Google Web Toolkit in your project to develop custom widgets. You can download it from the GWT website - just make sure the version is compatible with the version of Vaadin that you use. The package includes precompiled libraries and applications for the specific platform of the installation. To use the libraries, you need to configure them in the classpath of your project as described below."
msgstr ""

#. Tag: para
#: chapter-gwt.xml:1538
#, no-c-format
msgid "You can copy or import either the entire GWT directory or just the GWT JARs to your project."
msgstr ""

#. Tag: para
#: chapter-gwt.xml:1543
#, no-c-format
msgid "If you use Eclipse and copy the GWT directory or the libraries to the project with system tools, remember to select your project folder and press <keycap>F5</keycap> to refresh the project. You can also import the directory as follows (importing the JARs is similar):"
msgstr ""

#. Tag: listitem
#: chapter-gwt.xml:1551
#, no-c-format
msgid "Right-click on the project folder in <guilabel>Project Explorer</guilabel> and select <menuchoice><guimenu>Import</guimenu><guimenuitem>Import...</guimenuitem></menuchoice>."
msgstr ""

#. Tag: listitem
#: chapter-gwt.xml:1556
#, no-c-format
msgid "From the Import dialog, select <menuchoice><guimenu>General</guimenu><guimenuitem>File System</guimenuitem></menuchoice> and click <guibutton>Next</guibutton>."
msgstr ""

#. Tag: listitem
#: chapter-gwt.xml:1562
#, no-c-format
msgid "Click <guibutton>Browse</guibutton> button of the \"<guilabel>From directory</guilabel>\" field and browse to the parent directory of the GWT installation directory. Click <guibutton>Ok</guibutton> in the file selection dialog."
msgstr ""

#. Tag: listitem
#: chapter-gwt.xml:1568
#, no-c-format
msgid "Select the <filename>gwt</filename> entry in the list box for importing."
msgstr ""

#. Tag: listitem
#: chapter-gwt.xml:1571
#, no-c-format
msgid "In the \"<guilabel>Into folder</guilabel>\" field, enter <filename>myproject/gwt</filename>. (If you do not set this, all the contents of the <filename>gwt</filename> directory will be imported directly below the root directory of the project which is undesirable.)"
msgstr ""

#. Tag: listitem
#: chapter-gwt.xml:1577 chapter-gwt.xml:1655
#, no-c-format
msgid "Click <guibutton>Finish</guibutton>."
msgstr ""

#. Tag: para
#: chapter-gwt.xml:1582
#, no-c-format
msgid "You must include the GWT libraries in the classpath of the project. If using Eclipse, right-click on the project folder in the <guilabel>Project Explorer</guilabel> in Eclipse and select <menuchoice><guimenu>Properties</guimenu></menuchoice>. Select <menuchoice><guimenu>Java Build Path</guimenu><guimenuitem>Libraries</guimenuitem></menuchoice>."
msgstr ""

#. Tag: title
#: chapter-gwt.xml:1593
#, no-c-format
msgid "Writing the Code"
msgstr ""

#. Tag: title
#: chapter-gwt.xml:1596
#, no-c-format
msgid "Guidelines for the Project Structure"
msgstr ""

#. Tag: para
#: chapter-gwt.xml:1598
#, no-c-format
msgid "The project structure is otherwise free, but if you use the build script described in <xref linkend=\"gwt.development.compiler\"/> or configure the GWT Development Mode, as described in <xref linkend=\"gwt.development.development-mode\"/>, the examples assume that source files are located under the <filename>WebContent/WEB-INF/src</filename> folder."
msgstr ""

#. Tag: para
#: chapter-gwt.xml:1607
#, no-c-format
msgid "We recommend that the name for the package containing the widget set is <filename>widgetset</filename>, but this is not required. GWT does, however, require that the client-side code is written under a <filename>client</filename> package and any stylesheets are located under a <filename>public</filename> directory (not necessarily a package) under the package containing the <filename>.gwt.xml</filename> descriptor."
msgstr ""

#. Tag: para
#: chapter-gwt.xml:1617
#, no-c-format
msgid "See <xref linkend=\"gwt.development.compiler.result\"/> for an example project structure."
msgstr ""

#. Tag: title
#: chapter-gwt.xml:1624
#, no-c-format
msgid "Importing the ColorPicker Demo"
msgstr ""

#. Tag: para
#: chapter-gwt.xml:1626
#, no-c-format
msgid "If you want to use the Color Picker application as an application skeleton, you need to import it under the source folder."
msgstr ""

#. Tag: listitem
#: chapter-gwt.xml:1632
#, no-c-format
msgid "Right-click on the source folder and select <menuchoice><guimenuitem>Import</guimenuitem></menuchoice>."
msgstr ""

#. Tag: listitem
#: chapter-gwt.xml:1636
#, no-c-format
msgid "In the <guilabel>Import</guilabel> dialog, select <menuchoice><guimenu>General</guimenu><guimenuitem>File System</guimenuitem></menuchoice> and click <guibutton>Next</guibutton>."
msgstr ""

#. Tag: listitem
#: chapter-gwt.xml:1642
#, no-c-format
msgid "Browse to <filename>WebContent/WEB-INF/src/com/vaadin/demo/colorpicker/</filename> and click <guibutton>Ok</guibutton> button in the <guilabel>Import from directory</guilabel> dialog."
msgstr ""

#. Tag: listitem
#: chapter-gwt.xml:1648
#, no-c-format
msgid "In the <guilabel>Into folder</guilabel> field, enter <filename>myproject/WebContent/WEB-INF/src/com/vaadin/demo/colorpicker</filename>."
msgstr ""

#. Tag: listitem
#: chapter-gwt.xml:1652
#, no-c-format
msgid "Check the <filename>colorpicker</filename> entry in the list box."
msgstr ""

#. Tag: para
#: chapter-gwt.xml:1660
#, no-c-format
msgid "This will import the directory as <package>com.vaadin.demo.colorpicker</package> package. If you want to use it as a skeleton for your own project, you should refactor it to some other name. Notice that you will need to refactor the package and application name manually in the <filename>web.xml</filename> and <filename>.gwt.xml</filename> descriptor files."
msgstr ""

#. Tag: title
#: chapter-gwt.xml:1673
#, no-c-format
msgid "Compiling GWT Widget Sets"
msgstr ""

#. Tag: para
#: chapter-gwt.xml:1675
#, no-c-format
msgid "You need to compile the Vaadin Client-Side Engine and your custom widget set to JavaScript with the GWT Compiler. The easiest way is to use the Vaadin Plugin for Eclipse, it has a toolbar button that allows you to compile the widget set. See <xref linkend=\"gwt.eclipse.compiling\"/> for instructions."
msgstr ""

#. Tag: para
#: chapter-gwt.xml:1683
#, no-c-format
msgid "If you need to use Ant for compiling a widget set, you can find a script template at the URL <link xlink:href=\"https://vaadin.com/download/misc/build-widgetset.xml\">https://vaadin.com/download/misc/build-widgetset.xml</link>. You can copy the build script to your project and, once configured, enter:"
msgstr ""

#. Tag: screen
#: chapter-gwt.xml:1690 chapter-gwt.xml:1829
#, no-c-format
msgid "<prompt>$</prompt> <command>ant -f build-widgetset.xml</command>"
msgstr ""

#. Tag: para
#: chapter-gwt.xml:1694
#, no-c-format
msgid "To configure the build script, you need to set the paths in the \"<literal>configure</literal>\" target and the widget set class name in the \"<literal>compile-widgetset</literal>\" target to suit your project."
msgstr ""

#. Tag: para
#: chapter-gwt.xml:1700
#, no-c-format
msgid "You can launch the build script from Eclipse, by right-clicking the script in Package Explorer and selecting <menuchoice><guimenu>Run As</guimenu><guimenuitem>Ant Build</guimenuitem></menuchoice>. Progress of the compilation is shown in the <guilabel>Console</guilabel> window."
msgstr ""

#. Tag: para
#: chapter-gwt.xml:1707
#, no-c-format
msgid "After compilation, <emphasis>refresh the project by selecting it and pressing <keycap>F5</keycap></emphasis>. This makes Eclipse scan new content in the file system and become aware of the output of the compilation in the <filename>WebContent/VAADIN/widgetsets/</filename> directory. If the project is not refreshed, the JavaScript runtime is not included in the web application and running the application will result in an error message such as the following:"
msgstr ""

#. Tag: screen
#: chapter-gwt.xml:1717
#, no-c-format
msgid "Requested resource [VAADIN/widgetsets/com.vaadin.demo.colorpicker.gwt.ColorPickerWidgetSet/com.vaadin.demo.colorpicker.gwt.ColorPickerWidgetSet.nocache.js] not found from filesystem or through class loader. Add widgetset and/or theme JAR to your classpath or add files to WebContent/VAADIN folder."
msgstr ""

#. Tag: para
#: chapter-gwt.xml:1719
#, no-c-format
msgid "Compilation with GWT is required also initially when using the GWT Development Mode, which is described in <xref linkend=\"gwt.development.development-mode\"/>. The compilation with the GWT Compiler must be done at least once, as it provides files that are used also by the GWT Development Mode, even though the browser runs the GWT application in Java Virtual Machine instead of JavaScript."
msgstr ""

#. Tag: para
#: chapter-gwt.xml:1729
#, no-c-format
msgid "Because GWT supports a slightly reduced version of Java, GWT compilation can produce errors that do not occur with the Java compiler integrated in the Eclipse IDE."
msgstr ""

#. Tag: para
#: chapter-gwt.xml:1736
#, no-c-format
msgid "Also notice that client-side compilation loads the server-side classes (to find the <literal>@ClientWidget</literal> annotations) and, as a side effect, executes any static code blocks in the classes, even in any non-component classes such as the application class. This could cause unexpected behaviour during the compilation."
msgstr ""

#. Tag: title
#: chapter-gwt.xml:1745
#, no-c-format
msgid "Compiling a Custom Widget Set"
msgstr ""

#. Tag: para
#: chapter-gwt.xml:1747
#, no-c-format
msgid "If you wish to use the build script to compile your own widget sets, open it in an editor. The build script contains some instructions in the beginning of the file."
msgstr ""

#. Tag: para
#: chapter-gwt.xml:1753
#, no-c-format
msgid "First, you need to make some basic configuration in the <parameter>configure</parameter> target:"
msgstr ""

#. Tag: programlisting
#: chapter-gwt.xml:1758
#, no-c-format
msgid ""
      "<?pocket-size 65% ?>&lt;target name=\"configure\"&gt;\n"
      "    &lt;!-- Path from this file to the project root --&gt;\n"
      "    &lt;property name=\"base\"\n"
      "              value=\"../../../\" /&gt;\n"
      "\n"
      "    &lt;!-- Location of GWT distribution --&gt;\n"
      "    &lt;property name=\"gwt-location\"\n"
      "              value=\"${base}gwt\" /&gt;\n"
      "\n"
      "    &lt;!-- Location of Vaadin JAR --&gt;\n"
      "    &lt;property name=\"vaadin-jar-location\"\n"
      "            value=\"${base}WebContent/WEB-INF/lib/vaadin-6.3.3.jar\"/&gt;\n"
      "\n"
      "    &lt;!-- Location of project source code --&gt;\n"
      "    &lt;property name=\"src-location\"\n"
      "              value=\"${base}WebContent/WEB-INF/src\" /&gt;\n"
      "\n"
      "    &lt;!-- Target where to compile server-side classes --&gt;\n"
      "    &lt;property name=\"server-side-destination\"\n"
      "              value=\"${base}WebContent/WEB-INF/classes\"/&gt;\n"
      "\n"
      "    &lt;!-- Target where to compile the widget set --&gt;\n"
      "    &lt;property name=\"client-side-destination\"\n"
      "              value=\"${base}WebContent/VAADIN/widgetsets\" /&gt;\n"
      "&lt;/target&gt;"
msgstr ""

#. Tag: para
#: chapter-gwt.xml:1760
#, no-c-format
msgid "You also need to define the widget set in the <parameter>configure-widgetset</parameter> target:"
msgstr ""

#. Tag: programlisting
#: chapter-gwt.xml:1765
#, no-c-format
msgid ""
      "<?pocket-size 65% ?>&lt;!-- NOTE: Modify this example to compile your own widgetset --&gt;\n"
      "&lt;target name=\"configure-widgetset\"&gt;\n"
      "\n"
      "  &lt;!-- Name of the widget set --&gt;\n"
      "  &lt;property name=\"widgetset\"\n"
      "    value=\"<emphasis role=\"bold\">com.vaadin.demo.colorpicker.gwt.ColorPickerWidgetSet</emphasis>\"/&gt;"
msgstr ""

#. Tag: para
#: chapter-gwt.xml:1767
#, no-c-format
msgid "The widget set class name must match the package and the file name of the <filename>.gwt.xml</filename> descriptor, without the extension."
msgstr ""

#. Tag: para
#: chapter-gwt.xml:1772
#, no-c-format
msgid "You can use the <parameter>compile-widgetset</parameter> target as it is, or as a template for your own configuration:"
msgstr ""

#. Tag: programlisting
#: chapter-gwt.xml:1777
#, no-c-format
msgid ""
      "<?pocket-size 65% ?>&lt;!-- Build the widget set. --&gt;\n"
      "&lt;target name=\"compile-widgetset\"\n"
      "        depends=\"compile-server-side, generate-widgetset\"&gt;\n"
      "    &lt;echo&gt;Compiling ${widgetset}...&lt;/echo&gt;\n"
      "\n"
      "    &lt;java classname=\"com.google.gwt.dev.Compiler\"\n"
      "          failonerror=\"yes\" fork=\"yes\" maxmemory=\"256m\"&gt;\n"
      "        &lt;arg value=\"-war\" /&gt;\n"
      "        &lt;arg value=\"${client-side-destination}\" /&gt;\n"
      "        &lt;arg value=\"${widgetset}\" /&gt;\n"
      "        &lt;jvmarg value=\"-Xss1024k\"/&gt;\n"
      "        &lt;jvmarg value=\"-Djava.awt.headless=true\"/&gt;\n"
      "        &lt;classpath&gt;\n"
      "            &lt;path refid=\"compile.classpath\"/&gt;\n"
      "        &lt;/classpath&gt;\n"
      "    &lt;/java&gt;\n"
      "&lt;/target&gt;"
msgstr ""

#. Tag: para
#: chapter-gwt.xml:1779
#, no-c-format
msgid "Notice that the server-side must be compiled before the client-side and the compiled server-side classes must be included in the class path for the GWT Compiler. The reason is that the annotations that define the component-to-widget mappings are read from the class files during the GWT compilation."
msgstr ""

#. Tag: title
#: chapter-gwt.xml:1788
#, no-c-format
msgid "Google Web Toolkit Version"
msgstr ""

#. Tag: para
#: chapter-gwt.xml:1790
#, no-c-format
msgid "You must use a version of GWT that is compatible with the version of Vaadin you are using. If you use the Vaadin Plugin for Eclipse, it automatically downloads a GWT version that matches the currently used Vaadin version."
msgstr ""

#. Tag: title
#: chapter-gwt.xml:1799
#, no-c-format
msgid "Java Stack Overflow Problems"
msgstr ""

#. Tag: para
#: chapter-gwt.xml:1801
#, no-c-format
msgid "The <parameter>-Xss</parameter> parameter for the Java process may be necessary if you experience stack overflow errors with the default stack size. They occur especially with GWT 1.6, which uses large amount of stack space."
msgstr ""

#. Tag: para
#: chapter-gwt.xml:1808
#, no-c-format
msgid "Notice further that the Windows version of Sun JRE 1.5 has a bug that makes the stack size setting ineffective. The Windows version also has a smaller default stack size than the other platforms. If you experience the problem, we advice that you either use JRE 1.6 on the Windows platform or use a wrapper that circumvents the problem. To use the wrapper, use class <classname>com.vaadin.launcher.WidgetsetCompiler</classname> in the build script instead of the regular compiler."
msgstr ""

#. Tag: para
#: chapter-gwt.xml:1820
#, no-c-format
msgid "The <parameter>-Djava.awt.headless=true</parameter> parameter is necessary in Linux/UNIX platforms to avoid some X11 warnings."
msgstr ""

#. Tag: para
#: chapter-gwt.xml:1825
#, no-c-format
msgid "You can now compile the widget set with the following command:"
msgstr ""

#. Tag: title
#: chapter-gwt.xml:1833
#, no-c-format
msgid "Generating Widget Set Definition"
msgstr ""

#. Tag: para
#: chapter-gwt.xml:1835
#, no-c-format
msgid "If you use libraries containing other widget sets, you may want to automatically generate the <filename>.gwt.xml</filename> GWT Module Descriptor that defines the widget set that combines the Vaadin default widget set, widget sets included in any libraries, and any widget sets defined in your project."
msgstr ""

#. Tag: para
#: chapter-gwt.xml:1843
#, no-c-format
msgid "If you use the <filename>build-widgetset.xml</filename> Ant build script as a template, you need to define the settings required for generating a widget set in the <literal>configure-widgetset</literal> target."
msgstr ""

#. Tag: programlisting
#: chapter-gwt.xml:1850
#, no-c-format
msgid ""
      "<?pocket-size 65% ?>&lt;target name=\"configure-widgetset\"&gt;\n"
      "  &lt;property name=\"widgetset\"\n"
      "         value=\"<emphasis role=\"bold\">com.vaadin.demo.generated.GeneratedWidgetSet</emphasis>\"/&gt;\n"
      "  <emphasis role=\"bold\">&lt;property name=\"generate.widgetset\" value=\"1\"/&gt;</emphasis>\n"
      "  &lt;property name=\"widgetset-path\" value=\"com/vaadin/demo/widgetset\"/&gt;\n"
      "&lt;/target&gt;"
msgstr ""

#. Tag: para
#: chapter-gwt.xml:1852
#, no-c-format
msgid "Define the name of the widget set definition file, without the <filename>.gwt.xml</filename> suffix, in the <literal>widgetset</literal> property. The <literal>generate-widgetset</literal> target is executed only if the <literal>generate.widgetset</literal> property is defined. You also need to give a file path to the widget set directory, relative to the <literal>$src-location directory.</literal>."
msgstr ""

#. Tag: para
#: chapter-gwt.xml:1862
#, no-c-format
msgid "The <literal>generate-widgetset</literal> target is defined as follows:"
msgstr ""

#. Tag: programlisting
#: chapter-gwt.xml:1867
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[<target name=\"generate-widgetset\"\n"
      "        depends=\"compile-server-side, configure-widgetset\"\n"
      "        if=\"generate.widgetset\">\n"
      "    \n"
      "    <!-- Create the directory if it does not already exist. -->\n"
      "    <mkdir dir=\"${src-location}/${widgetset-path}\"/>\n"
      "    \n"
      "    <java classname=\"com.vaadin.terminal.gwt.widgetsetutils.WidgetSetBuilder\"\n"
      "          failonerror=\"yes\" fork=\"yes\" maxmemory=\"256m\">\n"
      "        <arg value=\"${widgetset}\"/>\n"
      "        <jvmarg value=\"-Xss1024k\"/>\n"
      "        <jvmarg value=\"-Djava.awt.headless=true\"/>\n"
      "        <classpath>\n"
      "            <path refid=\"compile.classpath\"/>\n"
      "        </classpath>\n"
      "    </java>\n"
      "</target>]]>"
msgstr ""

#. Tag: para
#: chapter-gwt.xml:1869
#, no-c-format
msgid "The widget set builder assumes that the root of the source directory is the <emphasis>first</emphasis> item in the class path, here defined with the <literal>src-location</literal> property. The location must point to the root of the entire source tree, not the path of the widget set under it. Also the location of compiled server-side classes must be included, here defined with the <literal>server-side-destination</literal> property. In the example script, the class path is defined in the <literal>init</literal> target as follows:"
msgstr ""

#. Tag: programlisting
#: chapter-gwt.xml:1881
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[<path id=\"compile.classpath\">\n"
      "    <pathelement path=\"${src-location}\" />\n"
      "        <pathelement path=\"${server-side-destination}\" />\n"
      "        <pathelement path=\"${toolkit-jar-location}\" />\n"
      "        <pathelement path=\"${gwt-location}/gwt-user.jar\" />\n"
      "        <pathelement path=\"${gwt-location}/gwt-dev-${gwt-platform}.jar\" />\n"
      "    <pathelement path=\"${gwt-location}/validation-api-1.0.0.GA.jar\" />\n"
      "    <pathelement path=\"${gwt-location}/validation-api-1.0.0.GA-sources.jar\" />\n"
      "    <fileset dir=\"${base}WebContent/WEB-INF/lib/\">\n"
      "            <include name=\"*.jar\"/>\n"
      "     </fileset>\n"
      "</path>]]>"
msgstr ""

#. Tag: title
#: chapter-gwt.xml:1887
#, no-c-format
msgid "Ready to Run"
msgstr ""

#. Tag: para
#: chapter-gwt.xml:1889
#, no-c-format
msgid "shows the contents of a ready project."
msgstr ""

#. Tag: title
#: chapter-gwt.xml:1895
#, no-c-format
msgid "Annotated Project Contents"
msgstr ""

#. Tag: para
#: chapter-gwt.xml:1906
#, no-c-format
msgid "Notice that the Package Explorer does not correspond with the file system contents. Eclipse displays the items marked with asterisk (*) in a logical location, instead of the physical location in the file system."
msgstr ""

#. Tag: para
#: chapter-gwt.xml:1912
#, no-c-format
msgid "You can either run the application in web mode, as introduced in <xref linkend=\"getting-started.first-project.run\" xrefstyle=\"select: label\"/>, or debug it in the GWT Development Mode, as detailed in the next section."
msgstr ""

#. Tag: title
#: chapter-gwt.xml:1921 chapter-gwt.xml:1933
#, no-c-format
msgid "GWT Development Mode"
msgstr ""

#. Tag: para
#: chapter-gwt.xml:1923
#, no-c-format
msgid "The GWT Development Mode allows debugging client-side GWT applications in a Java IDE such as Eclipse, as if the applications ran as Java in the browser, even though they actually are JavaScript. This is made possible by the Google Web Toolkit Developer Plugin, which is available for major browsers, such as Mozilla Firefox, Google Chrome, Safari, and Internet Explorer."
msgstr ""

#. Tag: para
#: chapter-gwt.xml:1944
#, no-c-format
msgid "shows the GWT Development Mode in action. On the left, you have the GWT Development Mode window. It displays compilation information and possible errors that occur during compilation. You can open the application in a new browser window by clicking <guibutton>Launch Default Browser</guibutton>."
msgstr ""

#. Tag: para
#: chapter-gwt.xml:1952
#, no-c-format
msgid "The browser window has a <guibutton>Compile/Browse</guibutton> button, which runs the GWT Compiler to produce the runtime code and opens a regular web browser to run the application. Notice that even though it is possible to recompile the program with the button, GWT Compiler must be run at least once before launching the GWT Development Mode, as described in <xref linkend=\"gwt.development.compiler\"/>, as the compiler creates some required files."
msgstr ""

#. Tag: para
#: chapter-gwt.xml:1962
#, no-c-format
msgid "Because GWT supports a slightly reduced version of Java, GWT compilation can produce errors that do not occur with the Java compiler integrated in the Eclipse IDE. Such errors will show up in the GWT Development Mode window."
msgstr ""

#. Tag: title
#: chapter-gwt.xml:1970
#, no-c-format
msgid "Creating a GWT Development Mode Launch Configuration"
msgstr ""

#. Tag: para
#: chapter-gwt.xml:1972
#, no-c-format
msgid "If you use the Vaadin Plugin for Eclipse, you can create a launch configuration for the GWT Development Mode in the project properties. The Vaadin project properties are described in <xref linkend=\"gwt.plugin.settings\"/>. Open the project properties and the Vaadin section, click <guibutton>Create development mode launch</guibutton> and <guibutton>OK</guibutton>. You should see the launch configuration appear in the project."
msgstr ""

#. Tag: para
#: chapter-gwt.xml:1982
#, no-c-format
msgid "You can run a launch configuration in a few different ways. For example, select it, open menu <menuchoice><guimenu>Run</guimenu><guimenuitem>Debug As...</guimenuitem></menuchoice>, and select the launch configuration. The GWT Development Mode window should open."
msgstr ""

#. Tag: title
#: chapter-gwt.xml:1992
#, no-c-format
msgid "Creating a Launch Configuration Manually"
msgstr ""

#. Tag: para
#: chapter-gwt.xml:1994
#, no-c-format
msgid "This section describes how to create a launch configuration for the GWT Development Mode manually in the Eclipse IDE, without using the Vaadin Plugin for Eclipse."
msgstr ""

#. Tag: listitem
#: chapter-gwt.xml:2001
#, no-c-format
msgid "<listitem>Select from menu <menuchoice><guimenu>Run</guimenu><guimenuitem>Debug...</guimenuitem></menuchoice> and the <guilabel>Debug</guilabel> configuration window will open. Notice that it is not purposeful to run the GWT Development Mode in the \"<guilabel>Run</guilabel>\" mode, because its entire purpose is to allow debugging.</listitem>"
msgstr ""

#. Tag: para
#: chapter-gwt.xml:2011
#, no-c-format
msgid "Select the <menuchoice><guimenu>Java Application</guimenu></menuchoice> folder and click on the <guibutton>New</guibutton> button to create a new launch configuration."
msgstr ""

#. Tag: title
#: chapter-gwt.xml:2019
#, no-c-format
msgid "Creating New Launch Configuration"
msgstr ""

#. Tag: listitem
#: chapter-gwt.xml:2031
#, no-c-format
msgid "Click on the created launch configuration to open it on the right-side panel. In the <guilabel>Main</guilabel> tab, give the launch configuration a name. Define the <guilabel>Main class</guilabel> as <classname>com.google.gwt.dev.DevMode</classname>."
msgstr ""

#. Tag: title
#: chapter-gwt.xml:2039
#, no-c-format
msgid "Naming Launch Configuration"
msgstr ""

#. Tag: para
#: chapter-gwt.xml:2052
#, no-c-format
msgid "Switch to the <guilabel>Arguments</guilabel> tab and enter arguments for the application."
msgstr ""

#. Tag: para
#: chapter-gwt.xml:2059
#, no-c-format
msgid "In the <guilabel>Program arguments</guilabel> field, enter:"
msgstr ""

#. Tag: screen
#: chapter-gwt.xml:2062
#, no-c-format
msgid ""
      "-noserver -war WebContent/VAADIN/widgetsets\n"
      "<parameter>com.example.myproject.widgetset.MyProjectWidgetSet</parameter>\n"
      "-startupUrl http://localhost:<parameter>8080</parameter>/<parameter>myproject</parameter>"
msgstr ""

#. Tag: para
#: chapter-gwt.xml:2064
#, no-c-format
msgid "The browser application, <classname>DevMode</classname>, takes as its arguments the following parameters:"
msgstr ""

#. Tag: term
#: chapter-gwt.xml:2071
#, no-c-format
msgid "-noserver"
msgstr ""

#. Tag: para
#: chapter-gwt.xml:2073
#, no-c-format
msgid "Prevents an embedded web server from starting, thereby allowing to use an already running server."
msgstr ""

#. Tag: term
#: chapter-gwt.xml:2078
#, no-c-format
msgid "-whitelist"
msgstr ""

#. Tag: para
#: chapter-gwt.xml:2080
#, no-c-format
msgid "Adds a regular expression to the list of allowed URL patterns for the web browser. Modify the port number from the 8080 given above as necessary."
msgstr ""

#. Tag: term
#: chapter-gwt.xml:2086
#, no-c-format
msgid "-war"
msgstr ""

#. Tag: para
#: chapter-gwt.xml:2088
#, no-c-format
msgid "Output directory for compiling widgets with GWT Compiler. The directory must be <parameter>WebContent/VAADIN/widgetsets</parameter>. You can compile the widgets either from the GWT Development Mode window or externally as explained later in this chapter."
msgstr ""

#. Tag: term
#: chapter-gwt.xml:2097
#, no-c-format
msgid "-startupUrl &lt;URL&gt;"
msgstr ""

#. Tag: para
#: chapter-gwt.xml:2099
#, no-c-format
msgid "The URL to connect to. This must be the same as the whitelist entry given above. The port number must correspond to the port of the running web server. The Jetty web server included in Vaadin will run in port 8888 by default. In contrast, Apache Tomcat installed under Eclipse will run in port 8080 by default."
msgstr ""

#. Tag: para
#: chapter-gwt.xml:2112
#, no-c-format
msgid "In the <guilabel>VM arguments</guilabel> field enter, for example, <parameter>-Xms256M -Xmx512M</parameter> to give the GWT Development Mode more memory than the default amount."
msgstr ""

#. Tag: title
#: chapter-gwt.xml:2122
#, no-c-format
msgid "DevMode Arguments"
msgstr ""

#. Tag: listitem
#: chapter-gwt.xml:2134
#, no-c-format
msgid "In the <guilabel>Classpath</guilabel> tab, you will by default have <parameter>vaadin-examples</parameter>, which contains the default classpath entries for the project. If the classpath entries for the project are sufficient, this should be enough."
msgstr ""

#. Tag: listitem
#: chapter-gwt.xml:2141
#, no-c-format
msgid "Click <guibutton>Apply</guibutton> to save the launch configuration."
msgstr ""

#. Tag: listitem
#: chapter-gwt.xml:2145
#, no-c-format
msgid "Click <guibutton>Debug</guibutton> to launch the GWT Development Mode using the launch configuration."
msgstr ""

#. Tag: para
#: chapter-gwt.xml:2151
#, no-c-format
msgid "See the following section for details on debugging with the GWT Development Mode."
msgstr ""

#. Tag: title
#: chapter-gwt.xml:2158 chapter-gwt.xml:2222
#, no-c-format
msgid "Debugging with GWT Development Mode"
msgstr ""

#. Tag: para
#: chapter-gwt.xml:2160
#, no-c-format
msgid "The purpose of the GWT Development Mode is to allow debugging client-side GWT applications, or in our case, GWT widgets. Below is a checklist for important requirements for launching the GWT Development Mode:"
msgstr ""

#. Tag: listitem
#: chapter-gwt.xml:2168
#, no-c-format
msgid "GWT is installed in the project."
msgstr ""

#. Tag: listitem
#: chapter-gwt.xml:2171
#, no-c-format
msgid "GWT libraries are included in the project classpath."
msgstr ""

#. Tag: listitem
#: chapter-gwt.xml:2174
#, no-c-format
msgid "Widget sets have been compiled with GWT Compiler."
msgstr ""

#. Tag: listitem
#: chapter-gwt.xml:2177
#, no-c-format
msgid "<filename>web.xml</filename> descriptor is configured."
msgstr ""

#. Tag: listitem
#: chapter-gwt.xml:2180
#, no-c-format
msgid "Web server is running and listening to the correct port."
msgstr ""

#. Tag: listitem
#: chapter-gwt.xml:2183
#, no-c-format
msgid "GWT Development Mode launch configuration is configured."
msgstr ""

#. Tag: para
#: chapter-gwt.xml:2188
#, no-c-format
msgid "Once everything is ready to start debugging, just open a source file, for example, the <classname>com.vaadin.demo.colorpicker.gwt.client.ui.GwtColorPicker</classname> class. Find the <methodname>onClick()</methodname> method. At the line containing the <methodname>setColor()</methodname> call, right-click on the leftmost bar in the editor and select <menuchoice><guimenuitem>Toggle Breakpoint</guimenuitem></menuchoice> from the popup menu. A small magnifying glass will appear in the bar to indicate the breakpoint."
msgstr ""

#. Tag: title
#: chapter-gwt.xml:2201
#, no-c-format
msgid "Setting a Breakpoint"
msgstr ""

#. Tag: para
#: chapter-gwt.xml:2212
#, no-c-format
msgid "<para>Select from menu <menuchoice><guimenu>Run</guimenu><guimenuitem>Debug...</guimenuitem></menuchoice> and the <guilabel>Debug</guilabel> configuration window will open. Notice that it is not purposeful to run the GWT Development Mode in the \"<guilabel>Run</guilabel>\" mode, because its entire purpose is to allow debugging.</para>"
msgstr ""

#. Tag: para
#: chapter-gwt.xml:2233
#, no-c-format
msgid "<emphasis role=\"strong\">Starting applications under the GWT Development Mode can take considerable time!</emphasis> Compiling widgets can take 10-60 seconds, depending on the hardware. During this time, the web browser is unresponsive, does not update its window, and appears \"stuck\"."
msgstr ""

#. Tag: para
#: chapter-gwt.xml:2241
#, no-c-format
msgid "Please refer to Eclipse IDE documentation for further instructions on using the debugger."
msgstr ""

#. Tag: title
#: chapter-gwt.xml:2250
#, no-c-format
msgid "Packaging a Widget Set"
msgstr ""

#. Tag: para
#: chapter-gwt.xml:2252
#, no-c-format
msgid "Packaging and reusing custom components is almost as easy as with any Java code, but with a small difference. You can package the <emphasis>source code</emphasis> of a widget set as a JAR. A user can drop the JAR in the project and add it to the class path. If using widgets from multiple widget sets, the user has to inherit the widget set in a combining widget set (which can be generated automatically). The user then has to compile the widget set(s) as described in <xref linkend=\"gwt.development.compiler\"/>."
msgstr ""

#. Tag: para
#: chapter-gwt.xml:2263
#, no-c-format
msgid "While you could, in theory, package precompiled widget sets in the JAR as well, it would create a serious danger for incompatibility between the client-side and server-side versions of Vaadin. The user would anyhow have to recompile the widget set if he uses multiple widget sets packaged in different JARs, or has developed project-specific widgets."
msgstr ""

#. Tag: para
#: chapter-gwt.xml:2271
#, no-c-format
msgid "The widget set build script template, which you can find at the URL <link xlink:href=\"https://vaadin.com/download/misc/build-widgetset.xml\">https://vaadin.com/download/misc/build-widgetset.xml</link>, includes an example <literal>package-jar</literal> target for building a JAR. You can use the example as it is or modify it as you need."
msgstr ""

#. Tag: para
#: chapter-gwt.xml:2278
#, no-c-format
msgid "You need to make the JAR packaging specific configuration in the <literal>configure-jar</literal> target. Change to property values to reflect your widget set."
msgstr ""

#. Tag: programlisting
#: chapter-gwt.xml:2284
#, no-c-format
msgid ""
      "&lt;target name=\"configure-jar\"&gt;\n"
      "    &lt;!-- The compiled JAR name --&gt;\n"
      "    &lt;property name=\"jar-destination\"\n"
      "              value=\"${base}<emphasis role=\"bold\">colorpicker.jar</emphasis>\"/&gt;\n"
      "\n"
      "    &lt;!-- Title of the widget set (for JAR) --&gt;\n"
      "    &lt;property name=\"widgetset-title\"\n"
      "              value=\"<emphasis role=\"bold\">ColorPicker</emphasis>\"/&gt;\n"
      "\n"
      "    &lt;!-- Version of the widget set (for JAR) --&gt;\n"
      "    &lt;property name=\"widgetset-version\" value=\"<emphasis role=\"bold\">1.0</emphasis>\"/&gt;\n"
      "\n"
      "    &lt;!-- Vendor of the widget set (for JAR) --&gt;\n"
      "    &lt;property name=\"widgetset-vendor\"\n"
      "              value=\"<emphasis role=\"bold\">IT Mill Oy</emphasis>\"/&gt;\n"
      "&lt;/target&gt;"
msgstr ""

#. Tag: para
#: chapter-gwt.xml:2286
#, no-c-format
msgid "You may want to check also the <literal>package-jar</literal> target if you want to use other license information or otherwise customize the package content."
msgstr ""

#. Tag: para
#: chapter-gwt.xml:2292
#, no-c-format
msgid "Assuming that you have otherwise configured the build script for your project as described in <xref linkend=\"gwt.development.compiler\"/>, you can build the JAR package with the following command:"
msgstr ""

#. Tag: screen
#: chapter-gwt.xml:2298
#, no-c-format
msgid "<prompt>$</prompt> <command>ant -f build-widgetset.xml package-jar</command>"
msgstr ""

#. Tag: para
#: chapter-gwt.xml:2300
#, no-c-format
msgid "Notice that the <literal>package-jar</literal> target <emphasis>does not</emphasis> depend on the <literal>compile-widgetset</literal> target, as the compiled widget set is not included in the package. If you really wish to do so, add the dependency and include the compiled files as a fileset for the package."
msgstr ""

#. Tag: title
#: chapter-gwt.xml:2310
#, no-c-format
msgid "Troubleshooting"
msgstr ""

#. Tag: para
#: chapter-gwt.xml:2312
#, no-c-format
msgid "Below are some typical cases that may cause you trouble."
msgstr ""

#. Tag: emphasis
#: chapter-gwt.xml:2318
#, no-c-format
msgid "Deferred binding fails"
msgstr ""

#. Tag: para
#: chapter-gwt.xml:2320
#, no-c-format
msgid "The widget set compilation in GWT Development Mode console produces the following error, which is shown in the Eclipse console:"
msgstr ""

#. Tag: programlisting
#: chapter-gwt.xml:2326
#, no-c-format
msgid "<![CDATA[Deferred binding failed for 'com.vaadin.csvalidation.widgetset.client.ui.VJavaScriptEditor' (did you forget to inherit a required module?)]]>"
msgstr ""

#. Tag: para
#: chapter-gwt.xml:2328
#, no-c-format
msgid "This problem occurs if the creation of an instance of a widget fails, usually due to an exception in the constructor. The GWT Development Mode console displays a more detailed exception log."
msgstr ""

#. Tag: emphasis
#: chapter-gwt.xml:2336
#, no-c-format
msgid "Widgets are missing from the widget set"
msgstr ""

#. Tag: para
#: chapter-gwt.xml:2338
#, no-c-format
msgid "The widget set compilation displays the list of widgets included in the widget set. If the list includes only the inherited widgets (built-in Vaadin widgets), but your custom widgets are missing, there is a problem."
msgstr ""

#. Tag: para
#: chapter-gwt.xml:2345
#, no-c-format
msgid "The typical reason is that the server-side classes are not yet compiled or are missing from the classpath. Check that the server-side compilation output folder (such as <filename>build/classes</filename>) is included in the classpath of GWT Compiler and that you compile the server-side components before the client-side, so that they are available in the classpath. The reason for this is that GWT Compiler (or more precisely a Vaadin widget set generator) reads the annotations that define the mappping from server-side components to client-side widgets from compiled class files."
msgstr ""

#. Tag: emphasis
#: chapter-gwt.xml:2360
#, no-c-format
msgid "The correct widget set is not loaded"
msgstr ""

#. Tag: para
#: chapter-gwt.xml:2362
#, no-c-format
msgid "The widget set must be specified in <filename>WebContent/WEB-INF/web.xml</filename> descriptor, as an initialization parameter for the servlet."
msgstr ""

#. Tag: programlisting
#: chapter-gwt.xml:2368
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[<init-param>\n"
      "    <description>Application widgetset</description>\n"
      "    <param-name>widgetset</param-name>\n"
      "    <param-value>com.example.mylibrary.widgetset.MyWidgetset</param-value>\n"
      "</init-param>]]>"
msgstr ""

#. Tag: emphasis
#: chapter-gwt.xml:2373
#, no-c-format
msgid "A generated widget set inherits itself"
msgstr ""

#. Tag: para
#: chapter-gwt.xml:2375
#, no-c-format
msgid "The widget set builder can create a <filename>.gwt.xml</filename> descriptor that inherits the same widget set. This usually occurs when the class path for the source files is set to something different than the root of the entire source tree, so that the package name of the widget set to be defined with the descriptor would be invalid."
msgstr ""

