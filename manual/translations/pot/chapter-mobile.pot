# SOME DESCRIPTIVE TITLE.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"Report-Msgid-Bugs-To: http://bugs.kde.org\n"
"POT-Creation-Date: 2011-11-03 16:13+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <kde-i18n-doc@kde.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. Tag: title
#: part1-mobile.xml:4
#, no-c-format
msgid "Mobile Applications with TouchKit"
msgstr ""

#. Tag: primary
#: part1-mobile.xml:7
#, no-c-format
msgid "TouchKit"
msgstr ""

#. Tag: para
#: part1-mobile.xml:10
#, no-c-format
msgid "This chapter describes how to write mobile applications using the Vaadin TouchKit."
msgstr ""

#. Tag: title
#: part1-mobile.xml:15
#, no-c-format
msgid "Overview"
msgstr ""

#. Tag: para
#: part1-mobile.xml:17
#, no-c-format
msgid "Web browsing is becoming ever increasingly mobile and web applications need to satisfy users with both desktop computers and mobile devices, such as phones and tablets. While the mobile browsers can show the pages just like in regular browsers, the screen size, finger accuracy, and mobile browser features need to be considered to make the experience more pleasant. Vaadin TouchKit gives the power of Vaadin for creating mobile user interfaces that complement the regular web user interfaces of your applications. Just like the purpose of the Vaadin Framework is to make desktop-like web applications, the purpose of TouchKit is to allow creation of web applications that give the look and feel akin to native mobile applications."
msgstr ""

#. Tag: para
#: part1-mobile.xml:30
#, no-c-format
msgid "In this chapter, we first look into the special considerations of mobile browsing. Then, we look how to create a project that uses TouchKit. TouchKit offers a number of specialized mobile components, which are described in a dedicated section. We treat phone and tablet applications separately, and discuss testing briefly. Finally, we discuss the limitations of TouchKit briefly. In the chapter, we use a Mobile Mail application as an example for creating a web application that looks very much like a native mobile application."
msgstr ""

#. Tag: para
#: part1-mobile.xml:41
#, no-c-format
msgid "Vaadin TouchKit is a commercial product licensed under a dual-licensing scheme. The AGPL license allows open-source development, while the CVAL license needs to be purchased for closed-source use, including web deployments and internal use. Commercial licenses can be purchased from the Vaadin Directory, where you can also find the license details and download Vaadin TouchKit."
msgstr ""

#. Tag: chapter
#: part1-mobile.xml:49
#, no-c-format
msgid ""
      "&book.part1.mobile.considerations; &book.part1.mobile.project; &book.part1.mobile.components; <section xml:id=\"mobile.features\"> <title>Mobile Features</title> <section xml:id=\"mobile.considerations.geolocation\"> <title>Geolocation</title> <para> The geolocation feature in TouchKit allows receiving the geographical location from the mobile device. The browser will ask the user to confirm that the web site is allowed to get the location information. Tapping <guibutton>Share Location</guibutton> gives the permission. The browser will give the position acquired by GPS, cellular positioning, or Wi-Fi positioning, as enabled in the device. </para> <para> Geolocation is requested by calling <methodname>detectCurrentPosition()</methodname> in the <classname>TouchKitWindow</classname> main window of the application. You need to give a <classname>PositionCallback</classname> handler that receives the location in <methodname>onSuccess()</methodname> if acquired from the device successfully. The position is given in a <classname>Position</classname> object. </para> <programlisting><?pocket-size 65% ?><![CDATA[mainWindow.detectCurrentPosition(new PositionCallback() {\n"
      "    public void onSuccess(Position position) {\n"
      "        double latitude  = position.getLatitude();\n"
      "        double longitude = position.getLongitude();\n"
      "        double accuracy  = position.getAccuracy();\n"
      "\n"
      "        ...\n"
      "    }\n"
      "\n"
      "    public void onFailure(int errorCode) {\n"
      "        ...\n"
      "    }\n"
      "});]]></programlisting> <para> The position is given as degrees with fractions. The longitude is positive to East and negative to West of the Prime Meridian passing through Greenwich, following the convention for coordinate systems. The accuracy is given in meters. </para> <para> The <methodname>onFailure()</methodname> is called if the positioning fails for some reason. The <parameter>errorCode</parameter> explains the reason. Error 1 is returned if the permission was denied, 2 if the position is unavailable, 3 on positioning timeout, and 0 on an unknown error. </para> <para> Notice that geolocation can take significant time, depending on the location method used by the device. With Wi-Fi and cellular positioning, the time is usually less than 30 seconds. With GPS, it can reach minutes or longer, especially if the reception is bad. </para> </section> </section> &book.part1.mobile.testing;"
msgstr ""

