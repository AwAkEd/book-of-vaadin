# SOME DESCRIPTIVE TITLE.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"Report-Msgid-Bugs-To: http://bugs.kde.org\n"
"POT-Creation-Date: 2012-03-23 14:18+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <kde-i18n-doc@kde.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. Tag: title
#: chapter-mobile.xml:4
#, no-c-format
msgid "Mobile Applications with TouchKit"
msgstr ""

#. Tag: primary
#: chapter-mobile.xml:7
#, no-c-format
msgid "TouchKit"
msgstr ""

#. Tag: para
#: chapter-mobile.xml:10
#, no-c-format
msgid "This chapter describes how to write mobile applications using the Vaadin TouchKit."
msgstr ""

#. Tag: title
#: chapter-mobile.xml:15
#, no-c-format
msgid "Overview"
msgstr ""

#. Tag: para
#: chapter-mobile.xml:17
#, no-c-format
msgid "Web browsing is becoming ever increasingly mobile and web applications need to satisfy users with both desktop computers and mobile devices, such as phones and tablets. While the mobile browsers can show the pages just like in regular browsers, the screen size, finger accuracy, and mobile browser features need to be considered to make the experience more pleasant. Vaadin TouchKit gives the power of Vaadin for creating mobile user interfaces that complement the regular web user interfaces of your applications. Just like the purpose of the Vaadin Framework is to make desktop-like web applications, the purpose of TouchKit is to allow creation of web applications that give the look and feel akin to native mobile applications."
msgstr ""

#. Tag: para
#: chapter-mobile.xml:30
#, no-c-format
msgid "In this chapter, we first look into the special considerations of mobile browsing. Then, we look how to create a project that uses TouchKit. TouchKit offers a number of specialized mobile components, which are described in a dedicated section. We treat phone and tablet applications separately, and discuss testing briefly. Finally, we discuss the limitations of TouchKit briefly. In the chapter, we use a Mobile Mail application as an example for creating a web application that looks very much like a native mobile application."
msgstr ""

#. Tag: para
#: chapter-mobile.xml:41
#, no-c-format
msgid "Vaadin TouchKit is a commercial product licensed under a dual-licensing scheme. The AGPL license allows open-source development, while the CVAL license needs to be purchased for closed-source use, including web deployments and internal use. Commercial licenses can be purchased from the Vaadin Directory, where you can also find the license details and download Vaadin TouchKit."
msgstr ""

#. Tag: title
#: chapter-mobile.xml:52
#, no-c-format
msgid "Considerations Regarding Mobile Browsing"
msgstr ""

#. Tag: para
#: chapter-mobile.xml:54
#, no-c-format
msgid "When developing applications that support mobile browsing, you need to consider various issues that are different from non-mobile use."
msgstr ""

#. Tag: title
#: chapter-mobile.xml:60
#, no-c-format
msgid "Mobile Human Interface"
msgstr ""

#. Tag: para
#: chapter-mobile.xml:62
#, no-c-format
msgid "Mobile devices use very different human interfaces than regular computers. Perhaps the most evident feature is that the user can easily change the orientation of the display to switch between portrait and landscape views. This may change not just the dimensions of the display, but also the most useful layout."
msgstr ""

#. Tag: para
#: chapter-mobile.xml:70
#, no-c-format
msgid "There is often no physical but a virtual keyboard. You need to ensure that, when the virtual keyboard pops up, it does not hide the input field to which the user is trying to enter data. This should be handled by the browser, but you should in any case check that it does. This is largely a testing issue."
msgstr ""

#. Tag: para
#: chapter-mobile.xml:77
#, no-c-format
msgid "There is no \"right-finger-button\" and double-tap is not normally used in mobile user interfaces unlike the double-click with mouse. Instead, a \"long tap\" usually has the same meaning as the double click. Finger gestures also play a large role, such as using a vertical swipe gesture for scrolling instead of a scroll bar."
msgstr ""

#. Tag: para
#: chapter-mobile.xml:85
#, no-c-format
msgid "TouchKit helps with many of these special requirements for mobile applications."
msgstr ""

#. Tag: title
#: chapter-mobile.xml:92
#, no-c-format
msgid "Bandwidth"
msgstr ""

#. Tag: para
#: chapter-mobile.xml:94
#, no-c-format
msgid "Mobile Internet connections are often significantly slower than with fixed lines. With a common 384 kbps connection, just loading the Vaadin client-side engine can take several seconds. This can be helped by compiling a widget set that includes only the used components."
msgstr ""

#. Tag: para
#: chapter-mobile.xml:101
#, no-c-format
msgid "Even with mobile broadband, the latency can be significant factor, especially with highly interactive rich applications. The latency is usually almost unnoticeable in fixed lines, typically less than 100 ms, while mobile Edge connections typically have latency around 500 ms, and sometimes much higher during hiccups. You may need to limit the use of the immediate mode, text change events, and polling."
msgstr ""

#. Tag: title
#: chapter-mobile.xml:112 chapter-mobile.xml:641
#, no-c-format
msgid "Mobile Features"
msgstr ""

#. Tag: para
#: chapter-mobile.xml:114
#, no-c-format
msgid "Phones and tablets have many integrated features that are often available in the browser interface as well. Location-awareness is one of the most recent features. And of course, you can also make phone calls."
msgstr ""

#. Tag: title
#: chapter-mobile.xml:122
#, no-c-format
msgid "Compatibility"
msgstr ""

#. Tag: para
#: chapter-mobile.xml:124
#, no-c-format
msgid "The mobile browsing field is currently evolving at fast pace and the special conventions that are introduced by leading manufacturers may, in the next few years, stabilize as new web standards. The browser support in TouchKit concentrates on WebKit, which appears to be emerging as the leading mobile browser core. In addition to Apple's products, also the default browser in Android uses WebKit as the layout engine. Yet there are differences, as the Android's JavaScript engine, which is highly relevant for Vaadin, is the Google Chrome's V8 engine."
msgstr ""

#. Tag: para
#: chapter-mobile.xml:135
#, no-c-format
msgid "TouchKit aims to follow the quickly evolving APIs of these major platforms, with the assumption that other browsers will follow their lead in standardization. Other platforms will be supported if they rise in popularity."
msgstr ""

#. Tag: title
#: chapter-mobile.xml:142
#, no-c-format
msgid "Back Button"
msgstr ""

#. Tag: para
#: chapter-mobile.xml:144
#, no-c-format
msgid "Some mobile devices, especially Android devices, have a dedicated back button, while iOS devices particularly do not. TouchKit does not provide any particular support for the button, but as it is a regular browser back button, you can handle it with URI fragments, as described in <xref linkend=\"advanced.urifu\"/>. For iOS, the browser back button is hidden if the user adds the application to the home screen, in which case you need to implement application-specific logic for the back-navigation."
msgstr ""

#. Tag: title
#: chapter-mobile.xml:158
#, no-c-format
msgid "Creating a Project Targeting Multiple Devices"
msgstr ""

#. Tag: title
#: chapter-mobile.xml:161
#, no-c-format
msgid "Using TouchKit Add-on in a Project"
msgstr ""

#. Tag: para
#: chapter-mobile.xml:163
#, no-c-format
msgid "You can install TouchKit as a Vaadin add-on or use it with Maven with the <literal>vaadin-touchkit</literal> dependency."
msgstr ""

#. Tag: title
#: chapter-mobile.xml:172
#, no-c-format
msgid "Deployment Descriptor"
msgstr ""

#. Tag: para
#: chapter-mobile.xml:174
#, no-c-format
msgid "You need to use the special <classname>TouchKitApplicationServlet</classname> class instead of the regular <classname>ApplicationServlet</classname> in the <filename>web.xml</filename> deployment descriptor."
msgstr ""

#. Tag: para
#: chapter-mobile.xml:181
#, no-c-format
msgid "As TouchKit comes with a custom widget set, you need to define a combining widget set for your project. The combining widget set descriptor is automatically generated by the Vaadin Plugin for Eclipse and in Maven when you install or define the TouchKit add-on."
msgstr ""

#. Tag: programlisting
#: chapter-mobile.xml:190
#, no-c-format
msgid ""
      "<?pocket-size 65% ?>&lt;servlet&gt;\n"
      "  &lt;servlet-name&gt;Vaadin Application Servlet&lt;/servlet-name&gt;\n"
      "  &lt;servlet-class&gt;com.vaadin.addon.touchkit.server.TouchKitApplicationServlet&lt;/servlet-class&gt;\n"
      "  &lt;init-param&gt;\n"
      "    &lt;description&gt;Vaadin application class to start&lt;/description&gt;\n"
      "    &lt;param-name&gt;application&lt;/param-name&gt;\n"
      "    &lt;param-value&gt;<emphasis role=\"bold\">com.vaadin.demo.mobilemail.MobileMailApplication</emphasis>&lt;/param-value&gt;\n"
      "  &lt;/init-param&gt;\n"
      "  &lt;init-param&gt;\n"
      "    &lt;param-name&gt;widgetset&lt;/param-name&gt;\n"
      "    &lt;param-value&gt;<emphasis role=\"bold\">com.vaadin.demo.mobilemail.gwt.MobileMailWidgetSet</emphasis>&lt;/param-value&gt;\n"
      "  &lt;/init-param&gt;\n"
      "&lt;/servlet&gt;"
msgstr ""

#. Tag: title
#: chapter-mobile.xml:195
#, no-c-format
msgid "Application"
msgstr ""

#. Tag: para
#: chapter-mobile.xml:197
#, no-c-format
msgid "Mobile applications must extend the <classname>TouchKitApplication</classname> instead of the regular <classname>Application</classname> class. Because much of the browser information is not yet available when the <methodname>init()</methodname> method is called, you should only set basic things like the main window and theme there. The main window must be set and must be a <classname>TouchKitWindow</classname>, not a <classname>Window</classname> as in regular Vaadin applications."
msgstr ""

#. Tag: programlisting
#: chapter-mobile.xml:208
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[public class MobileMailApplication extends TouchKitApplication {\n"
      "    @Override\n"
      "    public void init() {\n"
      "        setMainWindow(new TouchKitWindow());\n"
      "\n"
      "        // Using mobile mail theme\n"
      "        setTheme(\"mobilemail\");\n"
      "    }]]>"
msgstr ""

#. Tag: para
#: chapter-mobile.xml:210
#, no-c-format
msgid "Most initialization has to be be done in <methodname>onBrowserDetailsReady()</methodname>, including the decision to use a regular or a mobile browser interface. The decision is usually made using the user-agent information available in the <classname>WebBrowser</classname> class and the width and height of the main window."
msgstr ""

#. Tag: programlisting
#: chapter-mobile.xml:219
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[public void onBrowserDetailsReady() {\n"
      "    WebBrowser browser = getBrowser();\n"
      "    float viewPortWidth = getMainWindow().getWidth();\n"
      "\n"
      "    if (viewPortWidth < 600) {\n"
      "        getMainWindow().setContent(new SmartphoneMainView());\n"
      "    } else {\n"
      "        getMainWindow().setContent(new TabletMainView());\n"
      "    }\n"
      "}]]>"
msgstr ""

#. Tag: para
#: chapter-mobile.xml:221
#, no-c-format
msgid "The demo application does not actually support regular browsers, just notifies about the situation. The special mobile components in TouchKit are not guaranteed to work at all in regular browsers. It does give separate user interfaces for phones and tablets, as described in detail later."
msgstr ""

#. Tag: title
#: chapter-mobile.xml:231
#, no-c-format
msgid "Mobile User Interface Components"
msgstr ""

#. Tag: para
#: chapter-mobile.xml:233
#, no-c-format
msgid "TouchKit introduces a number of components special to mobile device user interfaces."
msgstr ""

#. Tag: classname
#: chapter-mobile.xml:239
#, no-c-format
msgid "NavigationView"
msgstr ""

#. Tag: para
#: chapter-mobile.xml:241
#, no-c-format
msgid "The <classname>NavigationView</classname> is a layout component that consists of a navigation bar and a content area. The content area is scrollable, so there is no need to use an inner panel component. In addition, there can be an optional toolbar component at the bottom of the view. <classname>NavigationView</classname> is often used inside a <classname>NavigationManager</classname> to get view change animations."
msgstr ""

#. Tag: title
#: chapter-mobile.xml:251
#, no-c-format
msgid "Layout of the <classname>NavigationView</classname>"
msgstr ""

#. Tag: para
#: chapter-mobile.xml:262
#, no-c-format
msgid "<classname>NavigationView</classname> has a full size by default. The content area is expanding, so that it takes all the space left over from the navigation bar and toolbar."
msgstr ""

#. Tag: title
#: chapter-mobile.xml:269
#, no-c-format
msgid "Navigation Bar"
msgstr ""

#. Tag: para
#: chapter-mobile.xml:271
#, no-c-format
msgid "The navigation bar at the top of <classname>NavigationView</classname> is a <classname>NavigationBar</classname> component. It has two component slots, with one on the left and one on the right. On the middle, there is a caption. You can use the <classname>NavigationBar</classname> elsewhere as well, such as for the toolbar."
msgstr ""

#. Tag: para
#: chapter-mobile.xml:279
#, no-c-format
msgid "The left slot is automatically filled with a <guibutton>Back</guibutton> button if you set the previous component with <methodname>setPreviousComponent()</methodname>. If you use the <classname>NavigationView</classname> inside a <classname>NavigationManager</classname>, the manager automaticaly sets the previous view when you navigate to it from another managed view."
msgstr ""

#. Tag: para
#: chapter-mobile.xml:288
#, no-c-format
msgid "You can get access to the navigation bar component with <methodname>getNavigationBar()</methodname> to use its manipulator methods directly, but <classname>NavigationView</classname> also offers some shorthand methods: <methodname>setLeftComponent()</methodname>, <methodname>setRightComponent()</methodname>, and a setter and a getter for the caption."
msgstr ""

#. Tag: title
#: chapter-mobile.xml:299
#, no-c-format
msgid "<title>Toolbar</title>"
msgstr ""

#. Tag: para
#: chapter-mobile.xml:301
#, no-c-format
msgid "A slot for an optional toolbar is located at the bottom of the <classname>NavigationView</classname>. The toolbar can be any component, but a <classname>Toolbar</classname> component made for this purpose is included in TouchKit. It is described in <xref linkend=\"mobile.components.toolbar\"/>. You could also use a <classname>HorizontalLayout</classname> or <classname>CssLayout</classname>."
msgstr ""

#. Tag: para
#: chapter-mobile.xml:311
#, no-c-format
msgid "You usually fill the tool bar with <classname>Button</classname> components with an icon and no textual caption. You set the toolbar with <methodname>setToolbar()</methodname>."
msgstr ""

#. Tag: title
#: chapter-mobile.xml:319 chapter-mobile.xml:362 chapter-mobile.xml:480 chapter-mobile.xml:552 chapter-mobile.xml:577 chapter-mobile.xml:602
#, no-c-format
msgid "Styling with CSS"
msgstr ""

#. Tag: programlisting
#: chapter-mobile.xml:321
#, no-c-format
msgid ""
      "<![CDATA[.v-touchkit-navview { }\n"
      "  .v-touchkit-navview-wrapper {}\n"
      "  .v-touchkit-navview-toolbar {}\n"
      ".v-touchkit-navview .v-touchkit-navview-notoolbar {}]]>"
msgstr ""

#. Tag: para
#: chapter-mobile.xml:323
#, no-c-format
msgid "The root element has the <literal>v-touchkit-navview</literal> class. The content area is wrapped inside a <literal>v-touchkit-navview-wrapper</literal> element. If the view has a toolbar, the toolbar slot has the <literal>v-touchkit-navview-toolbar</literal> style, but if not, the top-level element has the <literal>v-touchkit-navview-notoolbar</literal> style."
msgstr ""

#. Tag: classname
#: chapter-mobile.xml:344
#, no-c-format
msgid "<classname>Toolbar</classname>"
msgstr ""

#. Tag: para
#: chapter-mobile.xml:346
#, no-c-format
msgid "The <classname>Toolbar</classname> is a layout component that extends <classname>CssLayout</classname>, usually containing <classname>Button</classname> components. The toolbar has by default 100% horizontal width and a fixed height. The components are spread evenly in the horizontal direction. <classname>Toolbar</classname> is typically used in a <classname>NavigationView</classname>, as described in <xref linkend=\"mobile.components.navigationview\" xrefstyle=\"select:label\"/>."
msgstr ""

#. Tag: para
#: chapter-mobile.xml:356
#, no-c-format
msgid "For a description of the inherited features, please refer to <xref linkend=\"layout.components.orderedlayout\"/>."
msgstr ""

#. Tag: programlisting
#: chapter-mobile.xml:364
#, no-c-format
msgid "<![CDATA[.v-touchkit-toolbar { }]]>"
msgstr ""

#. Tag: para
#: chapter-mobile.xml:366
#, no-c-format
msgid "The component has an overall <literal>v-touchkit-toolbar</literal> style in addition to the <literal>v-csslayout</literal> style of the superclass. Other style names are as for <classname>CssLayout</classname>."
msgstr ""

#. Tag: classname
#: chapter-mobile.xml:376
#, no-c-format
msgid "NavigationManager"
msgstr ""

#. Tag: para
#: chapter-mobile.xml:378
#, no-c-format
msgid "The <classname>NavigationManager</classname> is a visual effect component that gives sliding animation when switching between views. You can register three components: the currently displayed component, the previous one on the left, and the next component on the right. You can set these components with <methodname>setCurrentComponent()</methodname>, <methodname>setPreviousComponent()</methodname>, and <methodname>setNextComponent()</methodname>, respectively."
msgstr ""

#. Tag: para
#: chapter-mobile.xml:388
#, no-c-format
msgid "The <classname>NavigationManager</classname> component is illustrated in <xref linkend=\"figure.mobile.components.navigationpanel\"/>."
msgstr ""

#. Tag: title
#: chapter-mobile.xml:394
#, no-c-format
msgid "<classname>NavigationManager</classname> with Three <classname>NavigationView</classname>s"
msgstr ""

#. Tag: para
#: chapter-mobile.xml:405
#, no-c-format
msgid "The navigation manager is important for responsiveness, because the previous and next components are cached and the slide animation started before server is contacted to load the new next or previous views."
msgstr ""

#. Tag: para
#: chapter-mobile.xml:411
#, no-c-format
msgid "Switching between the views is done programmatically according to user interaction; swipe gestures are not supported at the moment."
msgstr ""

#. Tag: title
#: chapter-mobile.xml:417
#, no-c-format
msgid "Handling View Changes"
msgstr ""

#. Tag: para
#: chapter-mobile.xml:419
#, no-c-format
msgid "While you can put any components in the manager, some special features are enabled when using the <classname>NavigationView</classname>. When a view becomes visible, the <methodname>onBecomingVisible()</methodname> method in the view is called. You can override it, just remember to call the superclass method."
msgstr ""

#. Tag: programlisting
#: chapter-mobile.xml:427
#, no-c-format
msgid ""
      "<![CDATA[@Override\n"
      "protected void onBecomingVisible() {\n"
      "    super.onBecomingVisible();\n"
      "\n"
      "    ...\n"
      "}]]>"
msgstr ""

#. Tag: title
#: chapter-mobile.xml:431
#, no-c-format
msgid "Tracking Breadcrumbs"
msgstr ""

#. Tag: para
#: chapter-mobile.xml:433
#, no-c-format
msgid "<classname>NavigationManager</classname> also handles <emphasis>breadcrumb</emphasis> tracking. The <methodname>navigateTo()</methodname> pushes the current view on the top of the breadcrumb stack and <methodname>navigateBack()</methodname> can be called to return to the previous breadcrumb level."
msgstr ""

#. Tag: para
#: chapter-mobile.xml:441
#, no-c-format
msgid "Notice that calling <methodname>navigateTo()</methodname> with the \"previous\" component is equivalent to calling <methodname>navigateBack()</methodname>."
msgstr ""

#. Tag: classname
#: chapter-mobile.xml:450
#, no-c-format
msgid "NavigationButton"
msgstr ""

#. Tag: para
#: chapter-mobile.xml:452
#, no-c-format
msgid "The <classname>NavigationButton</classname> is a special version of the regular <classname>Button</classname> designed for navigation inside a <classname>NavigationManager</classname>, as described in <xref linkend=\"mobile.components.navigationpanel\" xrefstyle=\"select:label\"/>. Clicking the button will automatically navigate to the defined target view. The view change animation does not need to make a server request first, but starts immediately after clicking the button. If you leave the target view empty, an empty placeholder view is shown in the animation. The view is filled after it gets the content from the server."
msgstr ""

#. Tag: para
#: chapter-mobile.xml:464
#, no-c-format
msgid "You can give the target view either in the constructor or with <methodname>setTargetView()</methodname>."
msgstr ""

#. Tag: programlisting
#: chapter-mobile.xml:469
#, no-c-format
msgid ""
      "<?pocket-size 75% ?><![CDATA[\n"
      "NavigationView view = new NavigationView(\"A View\");\n"
      "...\n"
      "NavigationButton button = new NavigationButton(\"Click\");\n"
      "button.setTargetView(view);\n"
      "...]]>"
msgstr ""

#. Tag: para
#: chapter-mobile.xml:471
#, no-c-format
msgid "Notice that the automatic navigation will only work if the button is inside a <classname>NavigationManager</classname> (in a view inside it). If you just want to use the button as a visual element, you can use it like a regular <classname>Button</classname> and handle the click events with a <classname>ClickListener</classname>."
msgstr ""

#. Tag: programlisting
#: chapter-mobile.xml:482
#, no-c-format
msgid ""
      "<![CDATA[.v-touchkit-navbutton { }\n"
      "  .v-touchkit-navbutton-desc { }]]>"
msgstr ""

#. Tag: para
#: chapter-mobile.xml:484
#, no-c-format
msgid "The component has an overall <literal>v-touchkit-navbutton</literal> style. If the component description is set with <methodname>setDescription()</methodname>, it is shown in a separate <literal>&lt;span&gt;</literal> element with the <literal>v-touchkit-navbutton-desc</literal> style."
msgstr ""

#. Tag: classname
#: chapter-mobile.xml:495
#, no-c-format
msgid "Popover"
msgstr ""

#. Tag: para
#: chapter-mobile.xml:497
#, no-c-format
msgid "<classname>Popover</classname> is much like a regular Vaadin sub-window, useful for quickly displaying some options or a small form related to an action. Unlike regular sub-windows, it does not support dragging or resizing by the user. It can have a caption, but usually does not. As sub-windows usually require a rather large screen size, the <classname>Popover</classname> is mainly applicable to tablet devices, but can be used also in phones with full size with <methodname>setSizeFull()</methodname>."
msgstr ""

#. Tag: para
#: chapter-mobile.xml:507
#, no-c-format
msgid "In the following, we extend <classname>Popover</classname> to use it. It is modal by default. Notice that the screen size is not available in the constructor, so we have to postpone using it to the <methodname>attach()</methodname> method."
msgstr ""

#. Tag: programlisting
#: chapter-mobile.xml:514
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[public class ComposeView extends Popover {\n"
      "    ...\n"
      "    public ComposeView(boolean smartphone) {\n"
      "        setClosable(false);\n"
      "\n"
      "        ...\n"
      "\n"
      "        // In phones use all space, in tablets just vertically\n"
      "        if (smartphone) {\n"
      "            setSizeFull();\n"
      "        } else {\n"
      "            setHeight(\"100%\");\n"
      "            center();\n"
      "        }\n"
      "    }\n"
      "\n"
      "    @Override\n"
      "    public void attach() {\n"
      "        super.attach();\n"
      "\n"
      "        // If tablet is wide, leave some space horizontally\n"
      "        if (!smartphone) {\n"
      "            if (getParent().getWidth() > 800) {\n"
      "                setWidth(\"80%\");\n"
      "            } else {\n"
      "                setWidth(\"100%\");\n"
      "            }\n"
      "        }\n"
      "    }\n"
      "    ...\n"
      "}]]>"
msgstr ""

#. Tag: para
#: chapter-mobile.xml:516
#, no-c-format
msgid "You add popover windows to an application-level <classname>Window</classname> object with <methodname>addWindow()</methodname>, just like sub-windows in a regular Vaadin application."
msgstr ""

#. Tag: programlisting
#: chapter-mobile.xml:522
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[if (event.getButton() == emailButton) {\n"
      "    ComposeView composeView = new ComposeView(smartphone);\n"
      "    getWindow().addWindow(composeView);\n"
      "    return;\n"
      "}]]>"
msgstr ""

#. Tag: para
#: chapter-mobile.xml:524
#, no-c-format
msgid "The resulting user interface in a tablet device is shown in <xref linkend=\"figure.mobile.components.popover\"/>."
msgstr ""

#. Tag: title
#: chapter-mobile.xml:530
#, no-c-format
msgid "<classname>Popover</classname> in a Tablet Device"
msgstr ""

#. Tag: para
#: chapter-mobile.xml:538
#, no-c-format
msgid "Alternatively, you can call the <methodname>showRelativeTo()</methodname>, which displays the sub-window relative to an existing component in the user interface."
msgstr ""

#. Tag: programlisting
#: chapter-mobile.xml:544
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[Popover popover = new Popover();\n"
      "popover.setContent(mailboxHierarchyView);\n"
      "popover.setClosable(true);\n"
      "popover.showRelativeTo(showMailboxHierarchyButton);\n"
      "popover.setHeight(getParent().getHeight() - 100, UNITS_PIXELS);]]>"
msgstr ""

#. Tag: para
#: chapter-mobile.xml:546
#, no-c-format
msgid "In this case, you should not call <methodname>addWindow()</methodname> explicitly."
msgstr ""

#. Tag: programlisting
#: chapter-mobile.xml:554
#, no-c-format
msgid ""
      "<![CDATA[.v-touchkit-popover .v-touchkit-fullscreen { }\n"
      "  .v-touchkit-popover .v-touchkit-relative { }\n"
      "  .v-touchkit-popover .v-touchkit-plain { }]]>"
msgstr ""

#. Tag: para
#: chapter-mobile.xml:556
#, no-c-format
msgid "The component has an overall <literal>v-touchkit-popover</literal> style. If full-screen, it also has the <literal>v-touchkit-fullscreen</literal> style, if positioned relatively it has <literal>v-touchkit-relative</literal>, and if not, the <literal>v-touchkit-plain</literal> style."
msgstr ""

#. Tag: classname
#: chapter-mobile.xml:566
#, no-c-format
msgid "Switch"
msgstr ""

#. Tag: para
#: chapter-mobile.xml:568
#, no-c-format
msgid "The <classname>Switch</classname> component is a <classname>CheckBox</classname> that looks like the switch button in Apple iOS."
msgstr ""

#. Tag: programlisting
#: chapter-mobile.xml:574
#, no-c-format
msgid ""
      "<![CDATA[Switch switch = new Switch();\n"
      "switch.setCaption(\"Do I look like iOS?\");\n"
      "layout.addComponent(switch);]]>"
msgstr ""

#. Tag: programlisting
#: chapter-mobile.xml:579
#, no-c-format
msgid ""
      "<![CDATA[.v-touchkit-switch { }\n"
      "  .v-touchkit-switch-slider { }]]>"
msgstr ""

#. Tag: para
#: chapter-mobile.xml:581
#, no-c-format
msgid "The component has an overall <literal>v-touchkit-switch</literal> style. The slider element has <literal>v-touchkit-switch-slider</literal> style."
msgstr ""

#. Tag: classname
#: chapter-mobile.xml:589
#, no-c-format
msgid "ComponentGroup"
msgstr ""

#. Tag: para
#: chapter-mobile.xml:591
#, no-c-format
msgid "The <classname>ComponentGroup</classname> is a layout component for grouping components. It uses margins, background color, and rounded corners to visualize the grouping. It extends <classname>CssLayout</classname> and behaves otherwise as such, except in having 100% default width. There is a vertical and a horizontal version of the component."
msgstr ""

#. Tag: programlisting
#: chapter-mobile.xml:599
#, no-c-format
msgid ""
      "<![CDATA[VerticalComponentGroup componentGroup = new VerticalComponentGroup();\n"
      "\n"
      "// Name field\n"
      "Component textField = new TextField(\"Name\");\n"
      "textField.setWidth(\"100%\");\n"
      "componentGroup.addComponent(textField);\n"
      "\n"
      "// Email field\n"
      "EmailField emailField = new EmailField(\"Email\");\n"
      "emailField.setWidth(\"100%\");\n"
      "componentGroup.addComponent(emailField);\n"
      "\n"
      "// Number field\n"
      "NumberField numberField = new NumberField(\"Age\");\n"
      "numberField.setWidth(\"100%\");\n"
      "componentGroup.addComponent(numberField);]]>"
msgstr ""

#. Tag: programlisting
#: chapter-mobile.xml:604
#, no-c-format
msgid ""
      "<![CDATA[.v-touchkit-componentgroup { }\n"
      ".v-touchkit-componentgroup-h { }]]>"
msgstr ""

#. Tag: para
#: chapter-mobile.xml:606
#, no-c-format
msgid "The component has an overall <literal>v-touchkit-componentgroup</literal> style if vertical and <literal>v-touchkit-componentgroup-h</literal> if horizontal. If the component has a caption, the <literal>v-touchkit-has-caption</literal> style is added."
msgstr ""

#. Tag: classname
#: chapter-mobile.xml:616
#, no-c-format
msgid "EmailField"
msgstr ""

#. Tag: para
#: chapter-mobile.xml:618
#, no-c-format
msgid "The <classname>EmailField</classname> is just like the regular <classname>TextField</classname>, except that it has automatic capitalization and correction turned off. Mobile devices also recognize the field as an email field and can offer a virtual keyboard for the purpose, so that it includes the at (<literal>@</literal>) and period (<literal>.</literal>) characters, and possibly a shorthand for <literal>.com</literal>."
msgstr ""

#. Tag: classname
#: chapter-mobile.xml:629
#, no-c-format
msgid "NumberField"
msgstr ""

#. Tag: para
#: chapter-mobile.xml:631
#, no-c-format
msgid "The <classname>NumberField</classname> is just like the regular <classname>TextField</classname>, except that it is marked as a numeric input field for mobile devices, so that they will show a numeric virtual keyboard rather than the default alphanumeric."
msgstr ""

#. Tag: title
#: chapter-mobile.xml:644
#, no-c-format
msgid "Geolocation"
msgstr ""

#. Tag: para
#: chapter-mobile.xml:646
#, no-c-format
msgid "The geolocation feature in TouchKit allows receiving the geographical location from the mobile device. The browser will ask the user to confirm that the web site is allowed to get the location information. Tapping <guibutton>Share Location</guibutton> gives the permission. The browser will give the position acquired by GPS, cellular positioning, or Wi-Fi positioning, as enabled in the device."
msgstr ""

#. Tag: para
#: chapter-mobile.xml:655
#, no-c-format
msgid "Geolocation is requested by calling <methodname>detectCurrentPosition()</methodname> in the <classname>TouchKitWindow</classname> main window of the application. You need to give a <classname>PositionCallback</classname> handler that receives the location in <methodname>onSuccess()</methodname> if acquired from the device successfully. The position is given in a <classname>Position</classname> object."
msgstr ""

#. Tag: programlisting
#: chapter-mobile.xml:665
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[mainWindow.detectCurrentPosition(new PositionCallback() {\n"
      "    public void onSuccess(Position position) {\n"
      "        double latitude  = position.getLatitude();\n"
      "        double longitude = position.getLongitude();\n"
      "        double accuracy  = position.getAccuracy();\n"
      "\n"
      "        ...\n"
      "    }\n"
      "\n"
      "    public void onFailure(int errorCode) {\n"
      "        ...\n"
      "    }\n"
      "});]]>"
msgstr ""

#. Tag: para
#: chapter-mobile.xml:667
#, no-c-format
msgid "The position is given as degrees with fractions. The longitude is positive to East and negative to West of the Prime Meridian passing through Greenwich, following the convention for coordinate systems. The accuracy is given in meters."
msgstr ""

#. Tag: para
#: chapter-mobile.xml:674
#, no-c-format
msgid "The <methodname>onFailure()</methodname> is called if the positioning fails for some reason. The <parameter>errorCode</parameter> explains the reason. Error 1 is returned if the permission was denied, 2 if the position is unavailable, 3 on positioning timeout, and 0 on an unknown error."
msgstr ""

#. Tag: para
#: chapter-mobile.xml:682
#, no-c-format
msgid "Notice that geolocation can take significant time, depending on the location method used by the device. With Wi-Fi and cellular positioning, the time is usually less than 30 seconds. With GPS, it can reach minutes or longer, especially if the reception is bad."
msgstr ""

#. Tag: title
#: chapter-mobile.xml:692
#, no-c-format
msgid "Testing and Debugging on Mobile Devices"
msgstr ""

#. Tag: para
#: chapter-mobile.xml:694
#, no-c-format
msgid "Testing places special challenges for mobile devices. The mobile browsers may not have much debugging features and you may not be able to install third-party debugging add-ons, such as Firebug."
msgstr ""

#. Tag: title
#: chapter-mobile.xml:701
#, no-c-format
msgid "Debugging"
msgstr ""

#. Tag: para
#: chapter-mobile.xml:703
#, no-c-format
msgid "The debug mode, as described in <xref linkend=\"advanced.debug-production-modes\"/>, works on mobile browsers as well, even if it is a bit harder to use."
msgstr ""

#. Tag: para
#: chapter-mobile.xml:708
#, no-c-format
msgid "The lack of FireBug and similar tools can be helped with simple client-side coding. For example, you can dump the HTML content of the page with the <parameter>innerHTML</parameter> property in the HTML DOM."
msgstr ""

#. Tag: para
#: chapter-mobile.xml:714
#, no-c-format
msgid "TouchKit supports especially WebKit-based browsers, which are used in iOS and Android devices. You can therefore reach a good compatibility by using a desktop browser based on WebKit. Features such as geolocation are also supported by desktop browsers. If you make your phone/tablet-detection and orientation detection using screen size, you can easily emulate the modes by resizing the browser."
msgstr ""

