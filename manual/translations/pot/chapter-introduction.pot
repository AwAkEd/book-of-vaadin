# SOME DESCRIPTIVE TITLE.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"Report-Msgid-Bugs-To: http://bugs.kde.org\n"
"POT-Creation-Date: 2012-03-23 14:18+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <kde-i18n-doc@kde.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. Tag: title
#: chapter-introduction.xml:4
#, no-c-format
msgid "Introduction"
msgstr ""

#. Tag: para
#: chapter-introduction.xml:6
#, no-c-format
msgid "This chapter gives a brief introduction to software development with Vaadin. We also try to give some insight about the design philosophy behind Vaadin and its history."
msgstr ""

#. Tag: title
#: chapter-introduction.xml:13
#, no-c-format
msgid "Overview"
msgstr ""

#. Tag: para
#: chapter-introduction.xml:15
#, no-c-format
msgid "The core piece of the Vaadin Framework is the Java library that is designed to make creation and maintenance of high quality web-based user interfaces easy. The key idea in the server-driven programming model of Vaadin is that it lets you forget the web and program user interfaces much like you would program any Java desktop application with conventional toolkits such as AWT, Swing, or SWT. But easier."
msgstr ""

#. Tag: para
#: chapter-introduction.xml:24
#, no-c-format
msgid "While traditional web programming is a fun way to spend your time learning new web technologies, you probably want to be productive and concentrate on the application logic. With the server-driven programming model, Vaadin takes care of managing the user interface in the browser and <firstterm>AJAX</firstterm> communications between the browser and the server. With the Vaadin approach, you do not need to learn and debug browser technologies, such as HTML or JavaScript."
msgstr ""

#. Tag: title
#: chapter-introduction.xml:35
#, no-c-format
msgid "General Architecture of Vaadin"
msgstr ""

#. Tag: para
#: chapter-introduction.xml:46
#, no-c-format
msgid "illustrates the basic architecture of web applications made with Vaadin. Vaadin consists of the <emphasis>server-side framework</emphasis> and a <emphasis>client-side engine</emphasis> that runs in the browser as a JavaScript program, rendering the user interface and delivering user interaction to the server. The application runs as a Java Servlet session in a Java application server."
msgstr ""

#. Tag: para
#: chapter-introduction.xml:55
#, no-c-format
msgid "Because HTML, JavaScript, and other browser technologies are essentially invisible to the application logic, you can think of the web browser as only a thin client platform. A thin client displays the user interface and communicates user events to the server at a low level. The control logic of the user interface runs on a Java-based web server, together with your business logic. By contrast, a normal client-server architecture with a dedicated client application would include a lot of application specific communications between the client and the server. Essentially removing the user interface tier from the application architecture makes our approach a very effective one."
msgstr ""

#. Tag: para
#: chapter-introduction.xml:71
#, no-c-format
msgid "As the Client-Side Engine is executed as JavaScript in the browser, no browser plugins are needed for using applications made with Vaadin. This gives it a sharp edge over frameworks based on Flash, Java Applets, or other plugins. Vaadin relies on the support of GWT for a wide range of browsers, so that the developer doesn't need to worry about browser support."
msgstr ""

#. Tag: para
#: chapter-introduction.xml:79
#, no-c-format
msgid "Behind the server-driven development model, Vaadin makes the best use of AJAX (<firstterm>Asynchronous JavaScript and XML</firstterm>) techniques that make it possible to create Rich Internet Applications (RIA) that are as responsive and interactive as desktop applications. If you're a newcomer to AJAX, see <xref linkend=\"architecture.technology.ajax\"/> to find out what it is and how AJAX applications differ from traditional web applications."
msgstr ""

#. Tag: para
#: chapter-introduction.xml:88
#, no-c-format
msgid "Hidden well under the hood, Vaadin uses <firstterm>GWT</firstterm>, the <firstterm>Google Web Toolkit</firstterm>, for rendering the user interface in the browser. <indexterm><primary>Google Web Toolkit</primary></indexterm> <indexterm><primary>JavaScript</primary></indexterm> GWT programs are written in Java, but compiled into JavaScript, thus freeing the developer from learning JavaScript and other browser technologies. GWT is ideal for implementing advanced user interface components (or widgets in GWT terminology) and interaction logic in the browser, while Vaadin handles the actual application logic in the server. Vaadin is designed to be extensible, and you can indeed use any 3rd-party GWT components easily, in addition to the component repertoire offered in Vaadin. The use of GWT also means that all the code you need to write is pure Java."
msgstr ""

#. Tag: para
#: chapter-introduction.xml:117
#, no-c-format
msgid "Vaadin Framework defines a clear separation between user interface presentation and logic and allows you to develop them separately. Our approach to this is <firstterm>themes</firstterm>, which dictate the visual appearance of applications. Themes control the appearance of the user interfaces using CSS and (optional) HTML page templates. As Vaadin provides excellent default themes, you do not usually need to make much customization, but you can if you need to. For more about themes, see <xref linkend=\"themes\"/>."
msgstr ""

#. Tag: para
#: chapter-introduction.xml:127
#, no-c-format
msgid "We hope that this is enough about the basic architecture and features of Vaadin for now. You can read more about it later in <xref linkend=\"architecture\"/>, or jump straight to more practical things in <xref linkend=\"application\"/>."
msgstr ""

#. Tag: title
#: chapter-introduction.xml:136
#, no-c-format
msgid "Example Application Walkthrough"
msgstr ""

#. Tag: para
#: chapter-introduction.xml:138
#, no-c-format
msgid "Let us follow the long tradition of first saying \"Hello World!\" when learning a new programming environment."
msgstr ""

#. Tag: title
#: chapter-introduction.xml:144
#, no-c-format
msgid "HelloWorld.java"
msgstr ""

#. Tag: programlisting
#: chapter-introduction.xml:145
#, no-c-format
msgid ""
      "<?pocket-size 75% ?><![CDATA[import com.vaadin.ui.*;\n"
      "\n"
      "public class HelloWorld extends com.vaadin.Application {\n"
      "\n"
      "    public void init() { \n"
      "        Window main = new Window(\"Hello window\"); \n"
      "        setMainWindow(main);\n"
      "        main.addComponent(new Label(\"Hello World!\")); \n"
      "    }\n"
      "}]]>"
msgstr ""

#. Tag: para
#: chapter-introduction.xml:148
#, no-c-format
msgid "The first thing to note is that every Vaadin application extends the <classname>com.vaadin.Application</classname> class. Instances of the <classname>Application</classname> are essentially user sessions, and one is created for each user who uses the application. In the context of our HelloWorld application, it is sufficient to know that the application object is created when the user first accesses it and at that time <methodname>init()</methodname> method is invoked."
msgstr ""

#. Tag: para
#: chapter-introduction.xml:158
#, no-c-format
msgid "Initialization of the application first creates a new <emphasis>window</emphasis> object and sets \"Hello window\" as its caption. The \"window\" refers to the browser window or tab, although window objects are also used when embedding Vaadin applications to HTML pages. The window is set as the main window of the application; an application can actually have many windows (or tabs or embeddings). This means that when a user opens the application in a browser, the contents of the \"main window\" are shown to the user in the web page. The caption is shown as the title of the (browser) window."
msgstr ""

#. Tag: para
#: chapter-introduction.xml:170
#, no-c-format
msgid "The example creates a new <classname>Label</classname> user interface component, which can show simple text, and sets the text to \"Hello World!\". Finally, the label is added to the main window. So, when the application is opened in a browser, the page shows the text \"Hello World!\"."
msgstr ""

#. Tag: para
#: chapter-introduction.xml:177
#, no-c-format
msgid "The result of the Hello World application is shown in <xref linkend=\"figure.intro.walkthrough\"/>."
msgstr ""

#. Tag: title
#: chapter-introduction.xml:183
#, no-c-format
msgid "Hello World Application"
msgstr ""

#. Tag: para
#: chapter-introduction.xml:191
#, no-c-format
msgid "Note that this example source code is complete and does not need any additional declaratively defined template files to be run. To run the program, you can just package it as a web application and deploy it to a server, as explained in <xref linkend=\"application.environment\"/>."
msgstr ""

#. Tag: title
#: chapter-introduction.xml:200
#, no-c-format
msgid "Support for the Eclipse IDE"
msgstr ""

#. Tag: para
#: chapter-introduction.xml:202
#, no-c-format
msgid "While Vaadin is not bound to any specific IDE, and you can in fact easily use it without any IDE altogether, we provide special support for the Eclipse IDE, which has become the most used environment for Java development. The support is provided in the Vaadin Plugin for Eclipse, which allows you to:"
msgstr ""

#. Tag: para
#: chapter-introduction.xml:211
#, no-c-format
msgid "Create new Vaadin projects"
msgstr ""

#. Tag: para
#: chapter-introduction.xml:215
#, no-c-format
msgid "Create custom themes"
msgstr ""

#. Tag: para
#: chapter-introduction.xml:219
#, no-c-format
msgid "Create custom widgets"
msgstr ""

#. Tag: para
#: chapter-introduction.xml:223
#, no-c-format
msgid "Create composite components with a visual designer"
msgstr ""

#. Tag: para
#: chapter-introduction.xml:227
#, no-c-format
msgid "Easily upgrade to a newer version of the Vaadin library"
msgstr ""

#. Tag: para
#: chapter-introduction.xml:231
#, no-c-format
msgid "The Vaadin Plugin for Eclipse is our recommended way of installing Vaadin for development. Using just the JAR or loading Vaadin from a Maven repository is also possible."
msgstr ""

#. Tag: para
#: chapter-introduction.xml:237
#, no-c-format
msgid "Installing and updating the Eclipse plugin is covered in <xref linkend=\"getting-started.environment.eclipse-plugin\"/> and the creation of a new Vaadin project using the plugin in <xref linkend=\"getting-started.first-project.creation\"/>. See <xref linkend=\"themes.eclipse\"/>, <xref linkend=\"gwt.eclipse\"/>, and <xref linkend=\"eclipse\"/> for instructions on using the different features of the plugin."
msgstr ""

#. Tag: title
#: chapter-introduction.xml:249
#, no-c-format
msgid "Goals and Philosophy"
msgstr ""

#. Tag: para
#: chapter-introduction.xml:251
#, no-c-format
msgid "Simply put, Vaadin's ambition is to be the best possible tool when it comes to creating web user interfaces for business applications. It is easy to adopt, as it is designed to support both entry-level and advanced programmers, as well as usability experts and graphical designers."
msgstr ""

#. Tag: para
#: chapter-introduction.xml:258
#, no-c-format
msgid "When designing Vaadin, we have followed the philosophy inscribed in the following rules."
msgstr ""

#. Tag: title
#: chapter-introduction.xml:264
#, no-c-format
msgid "Right tool for the right purpose"
msgstr ""

#. Tag: para
#: chapter-introduction.xml:266
#, no-c-format
msgid "Because our goals are high, the focus must be clear. This toolkit is designed for creating web applications. It is not designed for creating websites or advertisements demos. For such purposes, you might find (for instance) JSP/JSF or Flash more suitable."
msgstr ""

#. Tag: title
#: chapter-introduction.xml:275
#, no-c-format
msgid "Simplicity and maintainability"
msgstr ""

#. Tag: para
#: chapter-introduction.xml:277
#, no-c-format
msgid "We have chosen to emphasize robustness, simplicity, and maintainability. This involves following the well-established best practices in user interface frameworks and ensuring that our implementation represents an ideal solution for its purpose without clutter or bloat."
msgstr ""

#. Tag: title
#: chapter-introduction.xml:287
#, no-c-format
msgid "XML is not designed for programming"
msgstr ""

#. Tag: para
#: chapter-introduction.xml:288
#, no-c-format
msgid "The Web is inherently document-centered and very much bound to the declarative presentation of user interfaces. The Vaadin framework frees the programmer from these limitations. It is far more natural to create user interfaces by programming them than by defining them in declarative templates, which are not flexible enough for complex and dynamic user interaction."
msgstr ""

#. Tag: title
#: chapter-introduction.xml:299
#, no-c-format
msgid "Tools should not limit your work"
msgstr ""

#. Tag: para
#: chapter-introduction.xml:300
#, no-c-format
msgid "There should not be any limits on what you can do with the framework: if for some reason the user interface components do not support what you need to achieve, it must be easy to add new ones to your application. When you need to create new components, the role of the framework is critical: it makes it easy to create re-usable components that are easy to maintain."
msgstr ""

#. Tag: title
#: chapter-introduction.xml:312
#, no-c-format
msgid "Background"
msgstr ""

#. Tag: para
#: chapter-introduction.xml:314
#, no-c-format
msgid "The Vaadin Framework was not written overnight. After working with web user interfaces since the beginning of the Web, a group of developers got together in 2000 to form IT Mill. The team had a desire to develop a new programming paradigm that would support the creation of real user interfaces for real applications using a real programming language."
msgstr ""

#. Tag: para
#: chapter-introduction.xml:322
#, no-c-format
msgid "The library was originally called Millstone Library. The first version was used in a large production application that IT Mill designed and implemented for an international pharmaceutical company. IT Mill made the application already in the year 2001 and it is still in use. Since then, the company has produced dozens of large business applications with the library and it has proven its ability to solve hard problems easily."
msgstr ""

#. Tag: para
#: chapter-introduction.xml:331
#, no-c-format
msgid "The next generation of the library, IT Mill Toolkit Release 4, was released in 2006. It introduced an entirely new AJAX-based presentation engine. This allowed the development of AJAX applications without the need to worry about communications between the client and the server."
msgstr ""

#. Tag: title
#: chapter-introduction.xml:339
#, no-c-format
msgid "Release 5 Into the Open"
msgstr ""

#. Tag: primary
#: chapter-introduction.xml:342
#, no-c-format
msgid "IT Mill Toolkit"
msgstr ""

#. Tag: primary
#: chapter-introduction.xml:343
#, no-c-format
msgid "AJAX"
msgstr ""

#. Tag: para
#: chapter-introduction.xml:343
#, no-c-format
msgid "IT Mill Toolkit 5, released initially at the end of 2007, took a significant step further into AJAX. The client-side rendering of the user interface was completely rewritten using GWT, the Google Web Toolkit."
msgstr ""

#. Tag: primary
#: chapter-introduction.xml:349
#, no-c-format
msgid "Google Web Toolkit"
msgstr ""

#. Tag: para
#: chapter-introduction.xml:352
#, no-c-format
msgid "IT Mill Toolkit 5 introduced many significant improvements both in the server-side API and in the functionality. Rewriting the Client-Side Engine with GWT allowed the use of Java both on the client and the server-side. The transition from JavaScript to GWT made the development and integration of custom components and customization of existing components much easier than before, and it also allows easy integration of existing GWT components. The adoption of GWT on the client-side did not, by itself, cause any changes in the server-side API, because GWT is a browser technology that is hidden well behind the API. Also themeing was completely revised in IT Mill Toolkit 5."
msgstr ""

#. Tag: para
#: chapter-introduction.xml:365
#, no-c-format
msgid "The Release 5 was published under the Apache License 2, an unrestrictive open source license, to create faster expansion of the user base and make the formation of a developer community possible."
msgstr ""

#. Tag: title
#: chapter-introduction.xml:373
#, no-c-format
msgid "Birth of Vaadin Release 6"
msgstr ""

#. Tag: para
#: chapter-introduction.xml:375
#, no-c-format
msgid "IT Mill Toolkit was renamed as <emphasis>Vaadin Framework</emphasis>, or Vaadin in short, in spring 2009. Later IT Mill, the company, was also renamed as Vaadin Ltd. Vaadin means an adult female semi-domesticated mountain reindeer in Finnish."
msgstr ""

#. Tag: para
#: chapter-introduction.xml:382
#, no-c-format
msgid "Together with the Vaadin 6 was released the Vaadin Plugin for Eclipse. The initially experimental version of the visual editor, which was included with the plugin, has since then grown into to stable development tool."
msgstr ""

#. Tag: para
#: chapter-introduction.xml:388
#, no-c-format
msgid "With Vaadin 6, the number of developers using the framework really exploded. The introduction of Vaadin Directory in early 2010 gave it a further boost, as the number of available components multiplied almost overnight. Many of the originally experimental components have since then matured and are now used by thousands of developers. In 2012, we are seeing tremendous growth in the ecosystem around Vaadin. The size of the user community, at least if measured by forum activity, has already gone past the competing server-side frameworks and even GWT. Whether Vaadin is already past the tipping point can be seen soon."
msgstr ""

#. Tag: para
#: chapter-introduction.xml:400
#, no-c-format
msgid "More technical details about the history of Vaadin can be found from the Release Notes of each version."
msgstr ""

