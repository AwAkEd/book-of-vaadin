msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2009-09-07 14:42+0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. When image changes, this message will be marked fuzzy or untranslated for you.
#. It doesn't matter what you translate it to: it's not used at all.
#: part1-themes.xml:38(None) 
msgid "@@image: 'img/themes/theme-contents-lo.png'; md5=fb8d7dd5fd990ce7d57cce2dab89de75"
msgstr ""

#. When image changes, this message will be marked fuzzy or untranslated for you.
#. It doesn't matter what you translate it to: it's not used at all.
#: part1-themes.xml:41(None) 
msgid "@@image: 'img/themes/theme-contents-hi.png'; md5=33a0dd8edf25308d0f9d017a81a3548c"
msgstr ""

#. When image changes, this message will be marked fuzzy or untranslated for you.
#. It doesn't matter what you translate it to: it's not used at all.
#: part1-themes.xml:173(None) 
msgid "@@image: 'img/themes/themes-css-match-1.png'; md5=acd423f7242dd533d17f4622720929b6"
msgstr ""

#. When image changes, this message will be marked fuzzy or untranslated for you.
#. It doesn't matter what you translate it to: it's not used at all.
#: part1-themes.xml:260(None) part1-themes.xml:263(None) 
msgid "@@image: 'img/themes/themes-css-match-class-2.png'; md5=86e539586d7eb88b01f35388b884e83c"
msgstr ""

#. When image changes, this message will be marked fuzzy or untranslated for you.
#. It doesn't matter what you translate it to: it's not used at all.
#: part1-themes.xml:296(None) part1-themes.xml:299(None) 
msgid "@@image: 'img/themes/themes-css-match-class-3.png'; md5=00b9552e492d5c60b98eaf6420819696"
msgstr ""

#. When image changes, this message will be marked fuzzy or untranslated for you.
#. It doesn't matter what you translate it to: it's not used at all.
#: part1-themes.xml:385(None) 
msgid "@@image: 'img/themes/example-login-default.png'; md5=cb58bcb3c4f5b30774a02e512b63977e"
msgstr ""

#. When image changes, this message will be marked fuzzy or untranslated for you.
#. It doesn't matter what you translate it to: it's not used at all.
#: part1-themes.xml:465(None) 
msgid "@@image: 'img/themes/example-login-mytheme.png'; md5=42af5f98cbb904718e99d8f81c12ba5a"
msgstr ""

#. When image changes, this message will be marked fuzzy or untranslated for you.
#. It doesn't matter what you translate it to: it's not used at all.
#: part1-themes.xml:967(None) part1-themes.xml:970(None) 
msgid "@@image: 'img/themes/eclipse-theme-new.png'; md5=a3085d7f6a6f151d016f3dfa3e9aa948"
msgstr ""

#. When image changes, this message will be marked fuzzy or untranslated for you.
#. It doesn't matter what you translate it to: it's not used at all.
#: part1-themes.xml:1026(None) part1-themes.xml:1029(None) 
msgid "@@image: 'img/themes/eclipse-theme-settings.png'; md5=484af6cd25cb55a65baf364945d4e361"
msgstr ""

#. When image changes, this message will be marked fuzzy or untranslated for you.
#. It doesn't matter what you translate it to: it's not used at all.
#: part1-themes.xml:1052(None) 
msgid "@@image: 'img/themes/eclipse-theme-created-annotated-lo.png'; md5=47472e7b3e06776464cf4b57f404b144"
msgstr ""

#. When image changes, this message will be marked fuzzy or untranslated for you.
#. It doesn't matter what you translate it to: it's not used at all.
#: part1-themes.xml:1055(None) 
msgid "@@image: 'img/themes/eclipse-theme-created-annotated-hi.png'; md5=cdd45af973e5699a36ada47af5b1fc42"
msgstr ""

#: part1-themes.xml:4(title) 
msgid "Themes"
msgstr ""

#: part1-themes.xml:6(para) 
msgid "This chapter provides details about using and creating <emphasis>themes</emphasis> that control the visual look of web applications. Themes consist of Cascading Style Sheets (CSS) and other theme resources such as images. We provide an introduction to CSS, especially concerning the styling of HTML by element classes."
msgstr ""

#: part1-themes.xml:14(title) 
msgid "Overview"
msgstr ""

#: part1-themes.xml:16(para) 
msgid "Vaadin separates the appearance of the user interface from its logic using <emphasis>themes</emphasis>. Themes can include CSS style sheets, custom HTML layouts, and any necessary graphics. Theme resources can also be accessed from an application as <classname>ThemeResource</classname> objects."
msgstr ""

#: part1-themes.xml:23(para) 
msgid "Custom themes are placed under the <filename>WebContents/VAADIN/themes/</filename> folder of the web application. This location is fixed -- the <filename>VAADIN</filename> folder specifies that these are static resources specific to Vaadin. The folder should normally contain also the built-in themes, although you can let them be loaded dynamically from the Vaadin JAR (even though that is somewhat inefficient). <xref linkend=\"figure.themes.theme-contents\"/> illustrates the contents of a theme."
msgstr ""

#: part1-themes.xml:35(title) 
msgid "Contents of a Theme"
msgstr ""

#: part1-themes.xml:46(para) 
msgid "The name of a theme folder defines the name of the theme. The name is used in the <methodname>setTheme()</methodname> call. A theme must contain the <filename>styles.css</filename> stylesheet, but other contents have free naming. We suggest a convention for naming the folders as <filename>img</filename> for images, <filename>layouts</filename> for custom layouts, and <filename>css</filename> for additional stylesheets."
msgstr ""

#: part1-themes.xml:55(para) 
msgid "Custom themes that use an existing complete theme need to inherit the theme. See <xref linkend=\"section.themes.default\"/> and <xref linkend=\"themes.creating.inheritance\"/> for details on inheriting a theme. Copying and modifying a complete theme is also possible, but it may need more work to maintain if the modifications are small."
msgstr ""

#: part1-themes.xml:63(para) 
msgid "You use a theme with a simple <methodname>setTheme()</methodname> method call for the <classname>Application</classname> object as follows:"
msgstr ""

#: part1-themes.xml:76(para) 
msgid "An application can use different themes for different users and switch between themes during execution. For smaller changes, a theme can contain alternate styles for user interface components, which can be changed as needed."
msgstr ""

#: part1-themes.xml:82(para) 
msgid "In addition to style sheets, a theme can contain HTML templates for custom layouts used with <classname>CustomLayout</classname>. See <xref linkend=\"layout.customlayout\"/> for details."
msgstr ""

#: part1-themes.xml:88(para) 
msgid "Resources provided in a theme can also be accessed using the <classname>ThemeResource</classname> class, as described in <xref linkend=\"application.resources.theme\"/>. This allows using theme resources, such as images, for example in <classname>Embedded</classname> objects and other objects that allow inclusion of images using resources."
msgstr ""

#: part1-themes.xml:100(title) 
msgid "Introduction to Cascading Style Sheets"
msgstr ""

#: part1-themes.xml:102(para) 
msgid "Cascading Style Sheets or CSS is a technique to separate the appearance of a web page from the content represented in HTML or XHTML. Let us give a short introduction to Cascading Style Sheets and look how they are relevant to software development with Vaadin."
msgstr ""

#: part1-themes.xml:110(title) 
msgid "Basic CSS Rules"
msgstr ""

#: part1-themes.xml:112(para) 
msgid "A style sheet is a file that contains a set of <emphasis>rules</emphasis>. Each rule consists of one or more <emphasis>selectors</emphasis>, separated with commas, and a <emphasis>declaration block</emphasis> enclosed in curly braces. A declaration block contains a list of <emphasis>property</emphasis> statements. Each property has a label and a value, separated with a colon. A property statement ends with a semicolon."
msgstr ""

#: part1-themes.xml:122(para) 
msgid "Let us look at an example:"
msgstr ""

#: part1-themes.xml:135(para) 
msgid "In the example above, <literal>p</literal> and <literal>td</literal> are element type selectors that match with <literal>&lt;p&gt;</literal> and <literal>&lt;td&gt;</literal> elements in HTML, respectively. The first rule matches with both elements, while the second matches only with <literal>&lt;td&gt;</literal> elements. Let us assume that you have saved the above style sheet with the name <filename>mystylesheet.css</filename> and consider the following HTML file located in the same folder."
msgstr ""

#: part1-themes.xml:145(programlisting) 
#, no-wrap
msgid "&lt;html&gt;\n    &lt;head&gt;\n        &lt;link rel=\"stylesheet\" type=\"text/css\"\n              href=\"mystylesheet.css\"/&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        <emphasis role=\"strong\">&lt;p&gt;</emphasis>This is a paragraph<emphasis role=\"strong\">&lt;/p&gt;</emphasis>\n        <emphasis role=\"strong\">&lt;p&gt;</emphasis>This is another paragraph<emphasis role=\"strong\">&lt;/p&gt;</emphasis>\n        &lt;table&gt;\n            &lt;tr&gt;\n                <emphasis role=\"strong\">&lt;td&gt;</emphasis>This is a table cell<emphasis role=\"strong\">&lt;/td&gt;</emphasis>\n                <emphasis role=\"strong\">&lt;td&gt;</emphasis>This is another table cell<emphasis role=\"strong\">&lt;/td&gt;</emphasis>\n            &lt;/tr&gt;\n        &lt;/table&gt;\n    &lt;/body&gt;\n&lt;/html&gt;"
msgstr ""

#: part1-themes.xml:162(para) 
msgid "The <literal>&lt;link&gt;</literal> element defines the style sheet to use. The HTML elements that match the above rules are emphasized. When the page is displayed in the browser, it will look as shown in the figure below."
msgstr ""

#: part1-themes.xml:170(title) 
msgid "Simple Styling by Element Type"
msgstr ""

#: part1-themes.xml:178(para) 
msgid "CSS has an <emphasis>inheritance</emphasis> mechanism where contained elements inherit the properties of their parent elements. For example, let us change the above example and define it instead as follows:"
msgstr ""

#: part1-themes.xml:189(para) 
msgid "All elements contained in the <literal>&lt;table&gt;</literal> element would have the same properties. For example, the text in the contained <literal>&lt;td&gt;</literal> elements would be in blue color."
msgstr ""

#: part1-themes.xml:195(para) 
msgid "Each HTML element type accepts a certain set of properties. The <literal>&lt;div&gt;</literal> elements are generic elements that can be used to create almost any layout and formatting that can be created with a specific HTML element type. Vaadin uses <literal>&lt;div&gt;</literal> elements extensively, especially for layouts."
msgstr ""

#: part1-themes.xml:204(para) 
msgid "Matching elements by their type is, however, rarely if ever used in style sheets for Vaadin components or Google Web Toolkit widgets."
msgstr ""

#: part1-themes.xml:211(title) 
msgid "Matching by Element Class"
msgstr ""

#: part1-themes.xml:213(para) 
msgid "Matching HTML elements by the <emphasis>class</emphasis> attribute of the elements is the most relevant form of matching with Vaadin. It is also possible to match with the <emphasis>identifier</emphasis> of a HTML element."
msgstr ""

#: part1-themes.xml:220(para) 
msgid "The class of an HTML element is defined with the <parameter>class</parameter> attribute as follows:"
msgstr ""

#: part1-themes.xml:225(programlisting) 
#, no-wrap
msgid "<?pocket-size 70% ?>&lt;html&gt;\n  &lt;body&gt;\n    <emphasis role=\"strong\">&lt;p class=\"normal\"&gt;</emphasis>This is the first paragraph<emphasis role=\"strong\">&lt;/p&gt;</emphasis>\n\n    <emphasis role=\"strong\">&lt;p class=\"another\"&gt;</emphasis>This is the second paragraph<emphasis role=\"strong\">&lt;/p&gt;</emphasis>\n\n    &lt;table&gt;\n      &lt;tr&gt;\n        <emphasis role=\"strong\">&lt;td class=\"normal\"&gt;</emphasis>This is a table cell<emphasis role=\"strong\">&lt;/td&gt;</emphasis>\n        <emphasis role=\"strong\">&lt;td class=\"another\"&gt;</emphasis>This is another table cell<emphasis role=\"strong\">&lt;/td&gt;</emphasis>\n      &lt;/tr&gt;\n    &lt;/table&gt;\n  &lt;/body&gt;\n&lt;/html&gt;"
msgstr ""

#: part1-themes.xml:240(para) 
msgid "The class attributes of HTML elements can be matched in CSS rules with a selector notation where the class name is written after a period following the element name. This gives us full control of matching elements by their type and class."
msgstr ""

#: part1-themes.xml:252(para) 
msgid "The page would look as shown below:"
msgstr ""

#: part1-themes.xml:257(title) 
msgid "Matching HTML Element Type and Class"
msgstr ""

#: part1-themes.xml:268(para) 
msgid "We can also match solely by the class by using the universal selector <literal>*</literal> for the element name, for example <literal>*.normal</literal>. The universal selector can also be left out altogether so that we use just the class name following the period, for example <literal>.normal</literal>."
msgstr ""

#: part1-themes.xml:284(para) 
msgid "In this case, the rule will match with all elements of the same class regardless of the element type. The result is shown in <xref linkend=\"figure.themes.match.class\"/>. This example illustrates a technique to make style sheets compatible regardless of the exact HTML element used in drawing a component."
msgstr ""

#: part1-themes.xml:293(title) 
msgid "Matching Only HTML Element Class"
msgstr ""

#: part1-themes.xml:304(para) 
msgid "To assure compatibility, we recommend that you use only matching based on the element classes and <emphasis>do not</emphasis> match for specific HTML element types in CSS rules, because either Vaadin or GWT may use different HTML elements to render some components in the future. For example, IT Mill Toolkit Release 4 used <literal>&lt;div&gt;</literal> elements extensively for layout components. However, IT Mill Toolkit Release 5 and Vaadin use GWT to render the components, and GWT uses the <literal>&lt;table&gt;</literal> element to implement most layouts. Similarly, IT Mill Toolkit Release 4 used <literal>&lt;div&gt;</literal> element also for buttons, but in Release 5, GWT uses the <literal>&lt;button&gt;</literal> element. Vaadin has little control over how GWT renders its components, so we can not guarantee compatibility in different versions of GWT. However, both <literal>&lt;div&gt;</literal> and <literal>&lt;table&gt;</literal> as well as <literal>&lt;tr&gt;</literal> and <literal>&lt;td&gt;</literal> elements accept most of the same properties, so matching only the class hierarchy of the elements should be compatible in most cases."
msgstr ""

#: part1-themes.xml:326(title) 
msgid "Matching by Descendant Relationship"
msgstr ""

#: part1-themes.xml:328(para) 
msgid "CSS allows matching HTML by their containment relationship. For example, consider the following HTML fragment:"
msgstr ""

#: part1-themes.xml:333(programlisting) 
#, no-wrap
msgid "<?pocket-size 70% ?>&lt;body&gt;\n  &lt;p class=\"mytext\"&gt;Here is some text inside a\n                    paragraph element&lt;/p&gt;\n  &lt;table class=\"<emphasis role=\"strong\">mytable</emphasis>\"&gt;\n    &lt;tr&gt;\n      &lt;td class=\"<emphasis role=\"strong\">mytext</emphasis>\"&gt;Here is text inside\n                      a table and inside a td element.&lt;/td&gt;\n    &lt;/tr&gt;\n  &lt;/table&gt;\n&lt;/body&gt;"
msgstr ""

#: part1-themes.xml:344(para) 
msgid "Matching by the class name <literal>.mytext</literal> alone would match both the <literal>&lt;p&gt;</literal> and <literal>&lt;td&gt;</literal> elements. If we want to match only the table cell, we could use the following selector:"
msgstr ""

#: part1-themes.xml:352(para) 
msgid "To match, a class listed in a rule does not have to be an immediate descendant of the previous class, but just a descendant. For example, the selector \"<literal>.v-panel .v-button</literal>\" would match all elements with class <literal>.v-button</literal> somewhere inside an element with class <literal>.v-panel</literal>."
msgstr ""

#: part1-themes.xml:360(para) 
msgid "Let us give an example with a real case. Consider the following Vaadin component."
msgstr ""

#: part1-themes.xml:377(para) 
msgid "The component will look by default as shown in the following figure."
msgstr ""

#: part1-themes.xml:382(title) 
msgid "Themeing Login Box Example with 'runo' theme."
msgstr ""

#: part1-themes.xml:390(para) 
msgid "Now, let us look at the HTML structure of the component. The following listing assumes that the application contains only the above component in the main window of the application."
msgstr ""

#: part1-themes.xml:396(programlisting) 
#, no-wrap
msgid "<?pocket-size 70% ?>&lt;body&gt;\n   &lt;div id=\"itmtk-ajax-window\"&gt;\n    &lt;div&gt;\n       &lt;div class=\"<emphasis role=\"strong\">v-orderedlayout</emphasis>\"&gt;\n        &lt;div&gt;\n           &lt;div class=\"<emphasis role=\"strong\">v-panel</emphasis>\"&gt;\n            &lt;div class=\"<emphasis role=\"strong\">v-panel-caption</emphasis>\"&gt;<emphasis>Log In</emphasis>&lt;/div&gt;\n            &lt;div class=\"<emphasis role=\"strong\">v-panel-content</emphasis>\"&gt;\n               &lt;div class=\"<emphasis role=\"strong\">v-orderedlayout</emphasis>\"&gt;\n                &lt;div&gt;\n                   &lt;div&gt;\n                    &lt;div class=\"<emphasis role=\"strong\">v-caption</emphasis>\"&gt;\n                      &lt;span&gt;<emphasis>Username:</emphasis>&lt;/span&gt;\n                    &lt;/div&gt;\n                   &lt;/div&gt;\n                   &lt;input type=\"text\" <emphasis role=\"strong\">class=\"v-textfield</emphasis>\"/&gt;\n                &lt;/div&gt;\n                &lt;div&gt;\n                   &lt;div&gt;\n                    &lt;div class=\"<emphasis role=\"strong\">v-caption</emphasis>\"&gt;\n                      &lt;span&gt;<emphasis>Password:</emphasis>&lt;/span&gt;\n                    &lt;/div&gt;\n                   &lt;/div&gt;\n                   &lt;input type=\"password\"\n                          class=\"v-textfield\"/&gt;\n                &lt;/div&gt;\n                &lt;div&gt;\n                  &lt;button type=\"button\"\n                          class=\"<emphasis role=\"strong\">v-button</emphasis>\"&gt;<emphasis>Login</emphasis>&lt;/button&gt;\n                  &lt;/div&gt;\n               &lt;/div&gt;\n            &lt;/div&gt;\n            &lt;div class=\"<emphasis role=\"strong\">v-panel-deco</emphasis>\"/&gt;\n            &lt;/div&gt;\n           &lt;/div&gt;\n        &lt;/div&gt;\n       &lt;/div&gt;\n    &lt;/div&gt;\n&lt;/body&gt;"
msgstr ""

#: part1-themes.xml:436(para) 
msgid "Now, consider the following theme where we set the backgrounds of various elements."
msgstr ""

#: part1-themes.xml:457(para) 
msgid "The coloring has changed as shown in the following figure."
msgstr ""

#: part1-themes.xml:462(title) 
msgid "Themeing Login Box Example with Custom Theme"
msgstr ""

#: part1-themes.xml:470(para) 
msgid "An element can have multiple classes separated with a space. With multiple classes, a CSS rule matches an element if any of the classes match. This feature is used in many Vaadin components to allow matching based on the state of the component. For example, when the mouse is over a <classname>Link</classname> component, <literal>over</literal> class is added to the component. Most of such styling is a feature of Google Web Toolkit."
msgstr ""

#: part1-themes.xml:482(title) 
msgid "Notes on Compatibility"
msgstr ""

#: part1-themes.xml:484(para) 
msgid "CSS was first proposed in 1994. The specification of CSS is maintained by the CSS Working Group of World Wide Web Consortium (W3C). Its versions are specified as <emphasis>levels</emphasis> that build upon the earlier version. CSS Level 1 was published in 1996, Level 2 in 1998. Development of CSS Level 3 was started in 1998 and is still under way."
msgstr ""

#: part1-themes.xml:492(para) 
msgid "While the support for CSS has been universal in all graphical web browsers since at least 1995, the support has been very incomplete at times and there still exists an unfortunate number of incompatibilities between browsers. While we have tried to take these incompatibilities into account in the built-in themes in Vaadin, you need to consider them while developing custom themes."
msgstr ""

#: part1-themes.xml:501(para) 
msgid "Compatibility issues are detailed in various CSS handbooks."
msgstr ""

#: part1-themes.xml:510(title) 
msgid "Creating and Using Themes"
msgstr ""

#: part1-themes.xml:512(para) 
msgid "Custom themes are placed in <filename>VAADIN/themes</filename> folder of the web application (in the <filename>WebContent</filename> directory) as illustrated in <xref linkend=\"figure.themes.theme-contents\"/>. This location is fixed. You need to have a theme folder for each theme you use in your application, although applications rarely need more than a single theme. For example, if you want to define a theme with the name <varname>mytheme</varname>, you will place it in folder <filename>VAADIN/themes/mytheme</filename>."
msgstr ""

#: part1-themes.xml:522(para) 
msgid "A custom theme must also inherit a built-in theme, as shown in the example below:"
msgstr ""

#: part1-themes.xml:533(para) 
msgid "Vaadin 6.0 includes two built-in themes: <literal>reindeer</literal> and <literal>runo</literal>. The latter is a compatibility theme for IT Mill Toolkit 5; there is no longer a \"default\" theme. See <xref linkend=\"section.themes.default\"/> and <xref linkend=\"themes.creating.inheritance\"/> below for details on inheriting themes."
msgstr ""

#: part1-themes.xml:543(title) 
msgid "Styling Standard Components"
msgstr ""

#: part1-themes.xml:545(para) 
msgid "Each user interface component in Vaadin has a set of style classes that you can use to control the appearance of the component. Some components have additional elements that also allow styling."
msgstr ""

#: part1-themes.xml:551(para) 
msgid "The following table lists the style classes of all client-side components of Vaadin. Notice that a single server-side component can have multiple client-side implementations. For example, a <classname>Button</classname> can be rendered on the client side either as a regular button or a check box, depending on the <parameter>switchMode</parameter> attribute of the button. For details regarding the mapping to client-side components, see <xref linkend=\"gwt.widgetset\"/>. Each client-side component type has its own style class and a number of additional classes that depend on the client-side state of the component. For example, a text field will have <literal>v-textfield-focus</literal> class when mouse pointer hovers over the component. This state is purely on the client-side and is not passed to the server."
msgstr ""

#: part1-themes.xml:567(para) 
msgid "Some client-side components can be shared by different server-side components. There is also the <classname>VUnknownComponent</classname>, which is a component that indicates an internal error in a situation where the server asked to render a component which is not available on the client-side."
msgstr ""

#: part1-themes.xml:576(title) 
msgid "Default CSS Style Names of Vaadin Components"
msgstr ""

#: part1-themes.xml:580(entry) 
msgid "Server-Side Component"
msgstr ""

#: part1-themes.xml:581(entry) 
msgid "Client-Side Widget"
msgstr ""

#: part1-themes.xml:582(entry) 
msgid "CSS Class Name"
msgstr ""

#: part1-themes.xml:587(entry) 
msgid "Button"
msgstr ""

#: part1-themes.xml:588(entry) 
msgid "VButton"
msgstr ""

#: part1-themes.xml:589(entry) 
msgid "v-button"
msgstr ""

#: part1-themes.xml:592(entry) 
msgid "VCheckBox"
msgstr ""

#: part1-themes.xml:596(entry) 
msgid "CustomComponent"
msgstr ""

#: part1-themes.xml:597(entry) 
msgid "VCustomComponent"
msgstr ""

#: part1-themes.xml:598(entry) 
msgid "v-customcomponent"
msgstr ""

#: part1-themes.xml:601(entry) 
msgid "CustomLayout"
msgstr ""

#: part1-themes.xml:602(entry) 
msgid "VCustomLayout"
msgstr ""

#: part1-themes.xml:606(entry) 
msgid "DateField"
msgstr ""

#: part1-themes.xml:607(entry) 
msgid "VDateField"
msgstr ""

#: part1-themes.xml:608(entry) 
msgid "v-datefield"
msgstr ""

#: part1-themes.xml:611(entry) 
msgid "VCalendar"
msgstr ""

#: part1-themes.xml:612(entry) 
msgid "v-datefield-entrycalendar"
msgstr ""

#: part1-themes.xml:615(entry) 
msgid "VDateFieldCalendar"
msgstr ""

#: part1-themes.xml:616(entry) part1-themes.xml:620(entry) 
msgid "v-datefield-calendar"
msgstr ""

#: part1-themes.xml:619(entry) 
msgid "VPopupCalendar"
msgstr ""

#: part1-themes.xml:623(entry) 
msgid "VTextualDate"
msgstr ""

#: part1-themes.xml:627(entry) 
msgid "Embedded"
msgstr ""

#: part1-themes.xml:628(entry) 
msgid "VEmbedded"
msgstr ""

#: part1-themes.xml:629(entry) part1-themes.xml:639(entry) part1-themes.xml:644(entry) part1-themes.xml:697(entry) part1-themes.xml:701(entry) part1-themes.xml:705(entry) part1-themes.xml:747(entry) part1-themes.xml:755(entry) part1-themes.xml:757(entry) part1-themes.xml:760(entry) part1-themes.xml:765(entry) part1-themes.xml:770(entry) part1-themes.xml:775(entry) part1-themes.xml:777(entry) part1-themes.xml:780(entry) part1-themes.xml:785(entry) part1-themes.xml:790(entry) 
msgid "-"
msgstr ""

#: part1-themes.xml:632(entry) 
msgid "Form"
msgstr ""

#: part1-themes.xml:633(entry) 
msgid "VForm"
msgstr ""

#: part1-themes.xml:634(entry) 
msgid "v-form"
msgstr ""

#: part1-themes.xml:637(entry) 
msgid "FormLayout"
msgstr ""

#: part1-themes.xml:638(entry) 
msgid "VFormLayout"
msgstr ""

#: part1-themes.xml:642(entry) 
msgid "GridLayout"
msgstr ""

#: part1-themes.xml:643(entry) 
msgid "VGridLayout"
msgstr ""

#: part1-themes.xml:647(entry) 
msgid "Label"
msgstr ""

#: part1-themes.xml:648(entry) 
msgid "VLabel"
msgstr ""

#: part1-themes.xml:649(entry) 
msgid "v-label"
msgstr ""

#: part1-themes.xml:652(entry) 
msgid "Link"
msgstr ""

#: part1-themes.xml:653(entry) 
msgid "VLink"
msgstr ""

#: part1-themes.xml:654(entry) 
msgid "v-link"
msgstr ""

#: part1-themes.xml:657(entry) 
msgid "OptionGroup"
msgstr ""

#: part1-themes.xml:658(entry) 
msgid "VOptionGroup"
msgstr ""

#: part1-themes.xml:659(entry) 
msgid "v-select-optiongroup"
msgstr ""

#: part1-themes.xml:662(entry) 
msgid "HorizontalLayout"
msgstr ""

#: part1-themes.xml:663(entry) 
msgid "VHorizontalLayout"
msgstr ""

#: part1-themes.xml:664(entry) 
msgid "v-horizontallayout"
msgstr ""

#: part1-themes.xml:667(entry) 
msgid "VerticalLayout"
msgstr ""

#: part1-themes.xml:668(entry) 
msgid "VVerticalLayout"
msgstr ""

#: part1-themes.xml:669(entry) 
msgid "v-verticallayout"
msgstr ""

#: part1-themes.xml:672(entry) 
msgid "Panel"
msgstr ""

#: part1-themes.xml:673(entry) 
msgid "VPanel"
msgstr ""

#: part1-themes.xml:674(entry) 
msgid "v-panel (v-panel-caption, v-panel-content, v-panel-deco)"
msgstr ""

#: part1-themes.xml:677(entry) 
msgid "Select"
msgstr ""

#: part1-themes.xml:682(entry) 
msgid "VListSelect"
msgstr ""

#: part1-themes.xml:683(entry) 
msgid "v-listselect"
msgstr ""

#: part1-themes.xml:686(entry) 
msgid "VFilterSelect"
msgstr ""

#: part1-themes.xml:687(entry) 
msgid "v-filterselect"
msgstr ""

#: part1-themes.xml:690(entry) 
msgid "Slider"
msgstr ""

#: part1-themes.xml:691(entry) 
msgid "VSlider"
msgstr ""

#: part1-themes.xml:692(entry) 
msgid "v-slider"
msgstr ""

#: part1-themes.xml:695(entry) 
msgid "SplitPanel"
msgstr ""

#: part1-themes.xml:696(entry) 
msgid "VSplitPanel"
msgstr ""

#: part1-themes.xml:700(entry) 
msgid "VSplitPanelHorizontal"
msgstr ""

#: part1-themes.xml:704(entry) 
msgid "VSplitPanelVertical"
msgstr ""

#: part1-themes.xml:708(entry) 
msgid "Table"
msgstr ""

#: part1-themes.xml:709(entry) 
msgid "VScrollTable"
msgstr ""

#: part1-themes.xml:710(entry) 
msgid "v-table"
msgstr ""

#: part1-themes.xml:713(entry) 
msgid "VTablePaging"
msgstr ""

#: part1-themes.xml:714(entry) 
msgid "v-table (v-table-tbody)"
msgstr ""

#: part1-themes.xml:717(entry) 
msgid "TabSheet"
msgstr ""

#: part1-themes.xml:718(entry) 
msgid "VTabSheet"
msgstr ""

#: part1-themes.xml:719(entry) 
msgid "v-tabsheet (v-tabsheet-content, v-tablsheet-tabs)"
msgstr ""

#: part1-themes.xml:722(entry) 
msgid "TextField"
msgstr ""

#: part1-themes.xml:723(entry) 
msgid "VTextField"
msgstr ""

#: part1-themes.xml:724(entry) 
msgid "v-textfield"
msgstr ""

#: part1-themes.xml:727(entry) 
msgid "VTextArea"
msgstr ""

#: part1-themes.xml:731(entry) 
msgid "VPasswordField"
msgstr ""

#: part1-themes.xml:735(entry) 
msgid "Tree"
msgstr ""

#: part1-themes.xml:736(entry) 
msgid "VTree"
msgstr ""

#: part1-themes.xml:737(entry) 
msgid "v-tree (v-tree-node-selected)"
msgstr ""

#: part1-themes.xml:740(entry) 
msgid "TwinColSelect"
msgstr ""

#: part1-themes.xml:741(entry) 
msgid "VTwinColSelect"
msgstr ""

#: part1-themes.xml:742(entry) 
msgid "v-select-twincol (v-select-twincol-selections, v-select-twincol-buttons, v-select-twincol-deco)"
msgstr ""

#: part1-themes.xml:745(entry) 
msgid "Upload"
msgstr ""

#: part1-themes.xml:746(entry) 
msgid "VUpload"
msgstr ""

#: part1-themes.xml:750(entry) 
msgid "Window"
msgstr ""

#: part1-themes.xml:751(entry) 
msgid "VWindow"
msgstr ""

#: part1-themes.xml:752(entry) 
msgid "v-window"
msgstr ""

#: part1-themes.xml:756(entry) 
msgid "CalendarEntry"
msgstr ""

#: part1-themes.xml:761(entry) 
msgid "CalendarPanel"
msgstr ""

#: part1-themes.xml:762(entry) 
msgid "v-datefield-calendarpanel"
msgstr ""

#: part1-themes.xml:766(entry) 
msgid "ContextMenu"
msgstr ""

#: part1-themes.xml:767(entry) 
msgid "v-contextmenu"
msgstr ""

#: part1-themes.xml:771(entry) 
msgid "VUnknownComponent"
msgstr ""

#: part1-themes.xml:772(entry) 
msgid "itmtk-unknown (itmtk-unknown-caption)"
msgstr ""

#: part1-themes.xml:776(entry) 
msgid "VView"
msgstr ""

#: part1-themes.xml:781(entry) 
msgid "Menubar"
msgstr ""

#: part1-themes.xml:782(entry) 
msgid "gwt-MenuBar"
msgstr ""

#: part1-themes.xml:786(entry) 
msgid "MenuItem"
msgstr ""

#: part1-themes.xml:787(entry) 
msgid "gwt-MenuItem"
msgstr ""

#: part1-themes.xml:791(entry) 
msgid "Time"
msgstr ""

#: part1-themes.xml:792(entry) 
msgid "v-datefield-time (v-select)"
msgstr ""

#: part1-themes.xml:798(para) 
msgid "Style names of sub-components are shown in parentheses."
msgstr ""

#: part1-themes.xml:804(title) 
msgid "Built-in Themes"
msgstr ""

#: part1-themes.xml:806(para) 
msgid "Vaadin currently includes two built-in themes: <literal>reindeer</literal> and <literal>runo</literal>. The latter is the default theme for IT Mill Toolkit 5 (where its name is \"default\"); the default theme in Vaadin 6.0 is <literal>reindeer</literal>."
msgstr ""

#: part1-themes.xml:813(para) 
msgid "The built-in themes are provided in the respective <filename>VAADIN/themes/reindeer/styles.css</filename> and <filename>VAADIN/themes/runo/styles.css</filename> stylesheets in the Vaadin library JAR. These stylesheets are compilations of the separate stylesheets for each component in the corresponding subdirectory. The stylesheets are compiled to a single file for efficiency: the browser needs to load just a single file."
msgstr ""

#: part1-themes.xml:824(title) 
msgid "Serving Built-In Themes Statically"
msgstr ""

#: part1-themes.xml:826(para) 
msgid "The built-in themes included in the Vaadin library JAR are served dynamically from the JAR by the servlet. Serving a theme statically by the web server is much more efficient. You only need to extract the <filename>VAADIN/</filename> directory from the JAR under your <filename>WebContent</filename> directory. Just make sure to update it if you upgrade to a newer version of Vaadin."
msgstr ""

#: part1-themes.xml:836(para) 
msgid "Creation of a default theme for custom GWT widgets is described in <xref linkend=\"gwt.widgets.styling\"/>."
msgstr ""

#: part1-themes.xml:843(title) 
msgid "Using Themes"
msgstr ""

#: part1-themes.xml:845(para) 
msgid "Using a theme is simple, you only need to set the theme with <methodname>setTheme()</methodname> in the application object. The Eclipse wizard for creating custom Vaadin themes automatically adds such call in the <methodname>init()</methodname> method of the application class, as explained in <xref linkend=\"themes.eclipse\"/>."
msgstr ""

#: part1-themes.xml:853(para) 
msgid "Defining the appearance of a user interface component is fairly simple. First, you create a component and add a custom style name for it with <methodname>addStyleName()</methodname>. Then you write the CSS element that defines the formatting for the component."
msgstr ""

#: part1-themes.xml:863(title) 
msgid "Theme Inheritance"
msgstr ""

#: part1-themes.xml:865(para) 
msgid "When you define your own theme, you will need to inherit a built-in theme (unless you just copy the built-in theme)."
msgstr ""

#: part1-themes.xml:870(para) 
msgid "Inheritance in CSS is done with the <literal>@import</literal> statement. In the typical case, when you define your own theme, you inherit a built-in theme as follows:"
msgstr ""

#: part1-themes.xml:882(para) 
msgid "You can even create a deep hierarchy of themes by inheritance. Such a solution is often useful if you have some overall theme for your application and a slightly modified theme for different user classes. You can even make it possible for each user to have his or her own theme."
msgstr ""

#: part1-themes.xml:889(para) 
msgid "For example, let us assume that we have the base theme of an application with the name <classname>myapp</classname> and a specific <classname>myapp-student</classname> theme for users with the student role. The stylesheet of the base theme would be located in <filename>themes/myapp/styles.css</filename>. We can then \"inherit\" it in <filename>themes/myapp-student/styles.css</filename> with a simple <literal>@import</literal> statement:"
msgstr ""

#: part1-themes.xml:905(para) 
msgid "This would make the page look just as with the base theme, except for the green background. You could use the theme inheritance as follows:"
msgstr ""

#: part1-themes.xml:929(para) 
msgid "In the above example, the <classname>User</classname> class is an imaginary class assumed to hold user information."
msgstr ""

#: part1-themes.xml:938(title) 
msgid "Creating a Theme in Eclipse"
msgstr ""

#: part1-themes.xml:940(para) 
msgid "The Eclipse plugin provides a wizard for creating custom themes. Do the following steps to create a new theme."
msgstr ""

#: part1-themes.xml:947(para) 
msgid "Select <menuchoice><guimenu>File</guimenu><guisubmenu>New</guisubmenu><guimenuitem>Other...</guimenuitem></menuchoice> in the main menu or right-click the <guilabel>Project Explorer</guilabel> and select <menuchoice><guimenu>New</guimenu><guimenuitem>Other...</guimenuitem></menuchoice>. A window will open."
msgstr ""

#: part1-themes.xml:958(para) 
msgid "In the <guilabel>Select a wizard</guilabel> step, select the <menuchoice><guimenu>Vaadin</guimenu><guimenuitem>Vaadin Theme</guimenuitem></menuchoice> wizard."
msgstr ""

#: part1-themes.xml:975(para) 
msgid "Click <guibutton>Next</guibutton> to proceed to the next step."
msgstr ""

#: part1-themes.xml:981(para) 
msgid "In the <guilabel>Create a new Vaadin theme</guilabel> step, you have the following settings:"
msgstr ""

#: part1-themes.xml:988(term) 
msgid "<guilabel>Project</guilabel> (mandatory)"
msgstr ""

#: part1-themes.xml:990(para) 
msgid "The project in which the theme should be created."
msgstr ""

#: part1-themes.xml:997(term) 
msgid "<guilabel>Theme name</guilabel> (mandatory)"
msgstr ""

#: part1-themes.xml:999(para) 
msgid "The theme name is used as the name of the theme folder and in a CSS tag (prefixed with \"<literal>v-theme-</literal>\"), so it must be a proper identifier. Only latin alphanumerics, underscore, and minus sign are allowed."
msgstr ""

#: part1-themes.xml:1010(term) 
msgid "<guilabel>Modify application classes to use theme</guilabel> (optional)"
msgstr ""

#: part1-themes.xml:1012(para) 
msgid "The setting allows the wizard to write a code statement that enables the theme in the constructor of the selected application class(es). If you need to control the theme with dynamic logic, you can leave the setting unchecked or change the generated line later."
msgstr ""

#: part1-themes.xml:1034(para) 
msgid "Click <guibutton>Finish</guibutton> to create the theme."
msgstr ""

#: part1-themes.xml:1041(para) 
msgid "The wizard creates the theme folder under the <filename>WebContent/VAADIN/themes</filename> folder and the actual style sheet as <filename>styles.css</filename>, as illustrated in <xref linkend=\"figure.eclipse.theme.created\"/>."
msgstr ""

#: part1-themes.xml:1049(title) 
msgid "Newly Created Theme"
msgstr ""

#: part1-themes.xml:1060(para) 
msgid "The created theme inherits a built-in base theme with an <literal>@import</literal> statement. See the explanation of theme inheritance in <xref linkend=\"themes.creating\"/>. Notice that the <filename>reindeer</filename> theme is not located in the <filename>widgetsets</filename> folder, but in the Vaadin JAR. See <xref linkend=\"section.themes.default\"/> for information for serving the built-in themes."
msgstr ""

#: part1-themes.xml:1070(para) 
msgid "If you selected an application class or classes in the <guilabel>Modify application classes to use theme</guilabel> in the theme wizard, the wizard will add the following line at the end of the <methodname>init()</methodname> method of the application class(es):"
msgstr ""

#: part1-themes.xml:1079(para) 
msgid "Notice that renaming a theme by changing the name of the folder will not change the <methodname>setTheme()</methodname> calls in the application classes or vise versa. You need to change such references to theme names in the calls manually."
msgstr ""

#. Put one translator per line, in the form of NAME <EMAIL>, YEAR1, YEAR2.
#: part1-themes.xml:0(None) 
msgid "translator-credits"
msgstr ""

