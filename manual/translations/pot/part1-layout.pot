msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2009-09-07 14:42+0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. When image changes, this message will be marked fuzzy or untranslated for you.
#. It doesn't matter what you translate it to: it's not used at all.
#: part1-layout.xml:158(None) part1-layout.xml:161(None) 
msgid "@@image: 'img/layout/layout-intro-example-1.png'; md5=a0be1a74bf70c8b25ab4371e4ac6eef0"
msgstr ""

#. When image changes, this message will be marked fuzzy or untranslated for you.
#. It doesn't matter what you translate it to: it's not used at all.
#: part1-layout.xml:272(None) 
msgid "@@image: 'img/layout/orderedlayout_vertical.png'; md5=fc4a50adb901c25c83a85b849de9adb7"
msgstr ""

#. When image changes, this message will be marked fuzzy or untranslated for you.
#. It doesn't matter what you translate it to: it's not used at all.
#: part1-layout.xml:284(None) part1-layout.xml:287(None) 
msgid "@@image: 'img/layout/orderedlayout_horizontal.png'; md5=668e802b2d92f200d187a05bbac30f47"
msgstr ""

#. When image changes, this message will be marked fuzzy or untranslated for you.
#. It doesn't matter what you translate it to: it's not used at all.
#: part1-layout.xml:320(None) 
msgid "@@image: 'img/layout/horizontallayout_sizing.png'; md5=b7d1bc00dd5f29ec18ef24c90230f9fc"
msgstr ""

#. When image changes, this message will be marked fuzzy or untranslated for you.
#. It doesn't matter what you translate it to: it's not used at all.
#: part1-layout.xml:348(None) 
msgid "@@image: 'img/layout/horizontallayout_width_undefined.png'; md5=e083f3858a051963fd874b370b438eea"
msgstr ""

#. When image changes, this message will be marked fuzzy or untranslated for you.
#. It doesn't matter what you translate it to: it's not used at all.
#: part1-layout.xml:372(None) part1-layout.xml:1604(None) 
msgid "@@image: 'img/layout/horizontallayout_width_defined.png'; md5=fe24bd8b744a7e6839a6a4516079216d"
msgstr ""

#. When image changes, this message will be marked fuzzy or untranslated for you.
#. It doesn't matter what you translate it to: it's not used at all.
#: part1-layout.xml:416(None) part1-layout.xml:1618(None) 
msgid "@@image: 'img/layout/horizontallayout_width_expanding.png'; md5=12ac0a24ccaa8fb2ca101afb9d9e21a5"
msgstr ""

#. When image changes, this message will be marked fuzzy or untranslated for you.
#. It doesn't matter what you translate it to: it's not used at all.
#: part1-layout.xml:463(None) 
msgid "@@image: 'img/layout/horizontallayout_width_expand_uniform.png'; md5=e3ba05b54c8e7b499af6e11cecd3efee"
msgstr ""

#. When image changes, this message will be marked fuzzy or untranslated for you.
#. It doesn't matter what you translate it to: it's not used at all.
#: part1-layout.xml:477(None) part1-layout.xml:1632(None) 
msgid "@@image: 'img/layout/horizontallayout_width_expand_ratios.png'; md5=ccd39db95ad4e7a6564919760e909f6e"
msgstr ""

#. When image changes, this message will be marked fuzzy or untranslated for you.
#. It doesn't matter what you translate it to: it's not used at all.
#: part1-layout.xml:512(None) 
msgid "@@image: 'img/layout/horizontallayout_width_expand_ratios-2.png'; md5=44ff0ef13477049fff662ae9c47e579a"
msgstr ""

#. When image changes, this message will be marked fuzzy or untranslated for you.
#. It doesn't matter what you translate it to: it's not used at all.
#: part1-layout.xml:548(None) 
msgid "@@image: 'img/layout/horizontallayout_width_expand_percentage.png'; md5=e34f00ac017aad8e9cc5181580a26b34"
msgstr ""

#. When image changes, this message will be marked fuzzy or untranslated for you.
#. It doesn't matter what you translate it to: it's not used at all.
#: part1-layout.xml:613(None) 
msgid "@@image: 'img/layout/gridlayout.png'; md5=92967c807da60fbb69d654215b642914"
msgstr ""

#. When image changes, this message will be marked fuzzy or untranslated for you.
#. It doesn't matter what you translate it to: it's not used at all.
#: part1-layout.xml:727(None) 
msgid "@@image: 'img/layout/gridlayout_sizing_expanding.png'; md5=b8341ba6ab40967096219497c1c5f76b"
msgstr ""

#. When image changes, this message will be marked fuzzy or untranslated for you.
#. It doesn't matter what you translate it to: it's not used at all.
#: part1-layout.xml:864(None) 
msgid "@@image: 'img/layout/formlayout-example1.png'; md5=ed8ca9e4da77f3aabdd3bc2391f35689"
msgstr ""

#. When image changes, this message will be marked fuzzy or untranslated for you.
#. It doesn't matter what you translate it to: it's not used at all.
#: part1-layout.xml:964(None) 
msgid "@@image: 'img/layout/panel.png'; md5=18fc088b76ea0e7362dce9767b6331a6"
msgstr ""

#. When image changes, this message will be marked fuzzy or untranslated for you.
#. It doesn't matter what you translate it to: it's not used at all.
#: part1-layout.xml:1034(None) 
msgid "@@image: 'img/layout/panel-light.png'; md5=6b7e75502c39faa9610fe6085fa77ee0"
msgstr ""

#. When image changes, this message will be marked fuzzy or untranslated for you.
#. It doesn't matter what you translate it to: it's not used at all.
#: part1-layout.xml:1129(None) 
msgid "@@image: 'img/layout/splitpanel-example1.png'; md5=1f9c8fbf9f3cdf40967690664f513d33"
msgstr ""

#. When image changes, this message will be marked fuzzy or untranslated for you.
#. It doesn't matter what you translate it to: it's not used at all.
#: part1-layout.xml:1239(None) 
msgid "@@image: 'img/components/tabsheet-example1.png'; md5=9bf1787dae7449d22772e03fe2be9905"
msgstr ""

#. When image changes, this message will be marked fuzzy or untranslated for you.
#. It doesn't matter what you translate it to: it's not used at all.
#: part1-layout.xml:1342(None) 
msgid "@@image: 'img/components/tabsheet-example2.png'; md5=2e4fbdd241594584f71422dabbc61344"
msgstr ""

#. When image changes, this message will be marked fuzzy or untranslated for you.
#. It doesn't matter what you translate it to: it's not used at all.
#: part1-layout.xml:1455(None) 
msgid "@@image: 'img/layout/accordion-example1.png'; md5=08a8b2f2f39f54dcf31312b8931fca20"
msgstr ""

#. When image changes, this message will be marked fuzzy or untranslated for you.
#. It doesn't matter what you translate it to: it's not used at all.
#: part1-layout.xml:1518(None) 
msgid "@@image: 'img/layout/layout_size_undefined_vs_defined.png'; md5=f759dbae331e38e3a96cc440b4fed278"
msgstr ""

#. When image changes, this message will be marked fuzzy or untranslated for you.
#. It doesn't matter what you translate it to: it's not used at all.
#: part1-layout.xml:1672(None) part1-layout.xml:1675(None) 
msgid "@@image: 'img/layout/layout_alignment.png'; md5=c11e2ee4b24117a71620bb462f425c48"
msgstr ""

#. When image changes, this message will be marked fuzzy or untranslated for you.
#. It doesn't matter what you translate it to: it's not used at all.
#: part1-layout.xml:1915(None) part1-layout.xml:1918(None) 
msgid "@@image: 'img/layout/layout_spacing.png'; md5=020ab29dd17b0a1841bfb082b5071ebd"
msgstr ""

#. When image changes, this message will be marked fuzzy or untranslated for you.
#. It doesn't matter what you translate it to: it's not used at all.
#: part1-layout.xml:2027(None) part1-layout.xml:2030(None) 
msgid "@@image: 'img/layout/layout_margin.png'; md5=5018411304d325a8d0f1194008a67cba"
msgstr ""

#. When image changes, this message will be marked fuzzy or untranslated for you.
#. It doesn't matter what you translate it to: it's not used at all.
#: part1-layout.xml:2151(None) part1-layout.xml:2154(None) 
msgid "@@image: 'img/layout/customlayout-example1.png'; md5=1cbfb8fc413030228ed7f984902e4b15"
msgstr ""

#: part1-layout.xml:4(title) 
msgid "Managing Layout"
msgstr ""

#: part1-layout.xml:6(para) 
msgid "Ever since the ancient xeroxians invented graphical user interfaces, programmers have wanted to make GUI programming ever easier for themselves. Solutions started simple. When GUIs appeared on PC desktops, practically all screens were of the VGA type and fixed into 640x480 size. Mac or X Window System on UNIX were not much different. Everyone was so happy with such awesome graphics resolutions that they never thought that an application would have to work on a radically different screen size. At worst, screens could only grow, they thought, giving more space for more windows. In the 80s, the idea of having a computer screen in your pocket was simply not realistic. Hence, the GUI APIs allowed placing UI components using screen coordinates. Visual Basic and some other systems provided an easy way for the designer to drag and drop components on a fixed-sized window. One would have thought that at least translators would have complained about the awkwardness of such a solution, but apparently they were not, as non-engineers, heard or at least cared about. At best, engineers could throw at them a resource editor that would allow them to resize the UI components by hand. Such was the spirit back then."
msgstr ""

#: part1-layout.xml:28(para) 
msgid "After the web was born, layout design was doomed to change for ever. At first, layout didn't matter much, as everyone was happy with plain headings, paragraphs, and a few hyperlinks here and there. Designers of HTML wanted the pages to run on any screen size. The screen size was actually not pixels but rows and columns of characters, as the baby web was really just hyper<emphasis>text</emphasis>, not graphics. That was soon to be changed. The first GUI-based browser, NCSA Mosaic, launched a revolution that culminated in Netscape Navigator. Suddenly, people who had previously been doing advertisement brochures started writing HTML. This meant that layout design had to be easy not just for programmers, but also allow the graphics designer to do his or her job without having to know a thing about programming. The W3C committee designing web standards came up with the CSS (Cascading Style Sheet) specification, which allowed trivial separation of appearance from content. Later versions of HTML followed, XHTML appeared, as did countless other standards."
msgstr ""

#: part1-layout.xml:47(para) 
msgid "Page description and markup languages are a wonderful solution for static presentations, such as books and most web pages. Real applications, however, need to have more control. They need to be able to change the state of user interface components and even their layout on the run. This creates a need to separate the presentation from content on exactly the right level."
msgstr ""

#: part1-layout.xml:61(para) 
msgid "Thanks to the attack of graphics designers, desktop applications were, when it comes to appearance, far behind web design. Sun Microsystems had come in 1995 with a new programming language, Java, for writing cross-platform desktop applications. Java's original graphical user interface toolkit, AWT (Abstract Windowing Toolkit), was designed to work on multiple operating systems as well as embedded in web browsers. One of the special aspects of AWT was the layout manager, which allowed user interface components to be flexible, growing and shrinking as needed. This made it possible for the user to resize the windows of an application flexibly and also served the needs of localization, as text strings were not limited to some fixed size in pixels. It became even possible to resize the pixel size of fonts, and the rest of the layout adapted to the new size."
msgstr ""

#: part1-layout.xml:76(para) 
msgid "Layout management of Vaadin is a direct successor of the web-based concept for separation of content and appearance and of the Java AWT solution for binding the layout and user interface components into objects in programs. Vaadin layout components allow you to position your UI components on the screen in a hierarchical fashion, much like in conventional Java UI toolkits such as AWT, Swing, or SWT. In addition, you can approach the layout from the direction of the web with the <classname>CustomLayout</classname> component, which you can use to write your layout as a template in XHTML that provides locations of any contained components."
msgstr ""

#: part1-layout.xml:89(para) 
msgid "The moral of the story is that, because Vaadin is intended for web applications, appearance is of high importance. The solutions have to be the best of both worlds and satisfy artists of both kind: code and graphics. On the API side, the layout is controlled by UI components, particularly the layout components. On the visual side, it is controlled by themes. Themes can contain any HTML, CSS, and JavaScript that you or your web artists create to make people feel good about your software."
msgstr ""

#: part1-layout.xml:100(title) 
msgid "Overview"
msgstr ""

#: part1-layout.xml:102(para) 
msgid "The user interface components in Vaadin can roughly be divided in two groups: components that the user can interact with and layout components for placing the other components to specific places in the user interface. The layout components are identical in their purpose to layout managers in regular desktop frameworks for Java and you can use plain Java to accomplish sophisticated component layouting."
msgstr ""

#: part1-layout.xml:111(para) 
msgid "You start by creating a root layout for the main window, unless you use the default, and then add the other layout components hierarchically, and finally the interaction components as the leaves of the component tree."
msgstr ""

#: part1-layout.xml:136(para) 
msgid "You will usually need to tune the layout components a bit by setting sizes, expansion ratios, alignments, spacings, and so on. The general settings are described in <xref linkend=\"layout.settings\"/>, while the layout component specific settings are described in connection with the component."
msgstr ""

#: part1-layout.xml:143(para) 
msgid "Layouts are coupled with themes that specify various layout features, such as backgrounds, borders, text alignment, and so on. Definition and use of themes is described in <xref linkend=\"themes\"/>"
msgstr ""

#: part1-layout.xml:149(para) 
msgid "You can see the finished version of the above example in <xref linkend=\"figure.layout.intro.simple\"/>."
msgstr ""

#: part1-layout.xml:155(title) 
msgid "Layout Example"
msgstr ""

#: part1-layout.xml:166(para) 
msgid "The alternative for using layout components is to use the special <classname>CustomLayout</classname> that allows using HTML templates. This way, you can let the web page designers take responsibility of component layouting using their own set of tools. What you lose is the ability to manage the layout dynamically."
msgstr ""

#: part1-layout.xml:175(title) 
msgid "The Visual Editor"
msgstr ""

#: part1-layout.xml:177(para) 
msgid "While you can always program the layout by hand, the Vaadin plugin for the Eclipse IDE includes a visual (WYSIWYG) editor that you can use to create user interfaces visually. The editor generates the code that creates the user interface and is useful for rapid application development and prototyping. It is especially helpful when you are still learning the framework, as the generated code, which is designed to be as reusable as possible, also works as an example of how you create user interfaces with Vaadin. You can find more about the editor in <xref linkend=\"eclipse\"/>."
msgstr ""

#: part1-layout.xml:192(title) 
msgid "Window and Panel Root Layout"
msgstr ""

#: part1-layout.xml:194(para) 
msgid "The <classname>Window</classname> and its superclass <classname>Panel</classname> have a single root layout component. The component is usually a <classname>Layout</classname>, but any <classname>ComponentContainer</classname> is allowed. When you create the components, they create a default root layout, usually <classname>VerticalLayout</classname>, but you can change it with the <classname>setContent()</classname> method."
msgstr ""

#: part1-layout.xml:211(para) 
msgid "The size of the root layout is the default size of the particular layout component, for example, a <classname>VerticalLayout</classname> has 100% width and undefined height by default. In many applications, you want to use the full area of the browser view. Setting the components contained inside the root layout to full size is not enough, and would actually lead to an invalid state if the height of the root layout is undefined."
msgstr ""

#: part1-layout.xml:235(para) 
msgid "See <xref linkend=\"layout.settings.size\"/> for more information about setting layout sizes."
msgstr ""

#: part1-layout.xml:243(title) 
msgid "<classname>VerticalLayout</classname> and <classname>HorizontalLayout</classname>"
msgstr ""

#: part1-layout.xml:245(para) 
msgid "<classname>VerticalLayout</classname> and <classname>HorizontalLayout</classname> components are containers for laying out components either vertically or horizontally, respectively. Some components, such as <classname>Window</classname> and <classname>Panel</classname>, have a <classname>VerticalLayout</classname> as the root layout, which you can set with <methodname>setContent()</methodname>."
msgstr ""

#: part1-layout.xml:254(para) 
msgid "Typical use of the layouts goes as follows:"
msgstr ""

#: part1-layout.xml:264(para) 
msgid "The text fields have a label attached, which will by default be placed above the field. The layout will look on screen as follows:"
msgstr ""

#: part1-layout.xml:277(para) 
msgid "Using <classname>HorizontalLayout</classname> gives the following layout:"
msgstr ""

#: part1-layout.xml:292(para) 
msgid "The layouts can have spacing between the horizontal or vertical cells, defined with <methodname>setSpacing()</methodname>, as described in <xref linkend=\"layout.settings.spacing\"/>. The contained components can be aligned within their cells with <methodname>setComponentAlignment()</methodname>, as described in <xref linkend=\"layout.settings.alignment\"/>."
msgstr ""

#: part1-layout.xml:301(para) 
msgid "You can use <methodname>setWidth()</methodname> and <methodname>setHeight()</methodname> to specify width and height of a component in either fixed units or relatively with a percentage."
msgstr ""

#: part1-layout.xml:308(title) 
msgid "Sizing Contained Components"
msgstr ""

#: part1-layout.xml:310(para) 
msgid "The components contained within an ordered layout can be laid out in a number of different ways depending on how you specify their height or width in the primary direction of the layout component."
msgstr ""

#: part1-layout.xml:317(title) 
msgid "Component Widths in <classname>HorizontalLayout</classname>"
msgstr ""

#: part1-layout.xml:325(para) 
msgid "<xref linkend=\"figure.layout.orderedlayout.size.summary\"/> above gives a summary of the sizing options for a <classname>HorizontalLayout</classname>. Let us break the figure down as follows."
msgstr ""

#: part1-layout.xml:332(para) 
msgid "If a <classname>VerticalLayout</classname> has undefined height or <classname>HorizontalLayout</classname> undefined width, the layout will shrink to fit the contained components so that there is no extra space between them."
msgstr ""

#: part1-layout.xml:352(para) 
msgid "If such a vertical layout continues below the bottom of a window (a <classname>Window</classname> object), the window will pop up a vertical scroll bar on the right side of the window area. This way, you get a \"web page\"."
msgstr ""

#: part1-layout.xml:359(para) 
msgid "If you set a <classname>HorizontalLayout</classname> to a defined size horizontally or a <classname>VerticalLayout</classname> vertically, and there is space left over from the contained components, the extra space is distributed equally between the component cells. The components are aligned within these cells according to their alignment setting, top left by default, as in the example below."
msgstr ""

#: part1-layout.xml:376(para) 
msgid "Using percentual sizes for components contained in a layout requires answering the question, \"Percentage of what?\" There is no sensible default answer for this question in the current implementation of the layouts, so in practice, you may not define \"100%\" size alone."
msgstr ""

#: part1-layout.xml:383(para) 
msgid "Often, you want to have one component that takes all the available space left over from other components. You need to set its size as 100% and set it as <emphasis>expanding</emphasis> with <methodname>setExpandRatio()</methodname>. The second parameter for the method is an expansion ratio, which is relevant if there are more than one expanding component, but its value is irrelevant for a single expanding component."
msgstr ""

#: part1-layout.xml:420(para) 
msgid "Notice that you must call <methodname>setExpandRatio()</methodname><emphasis>after</emphasis><methodname>addComponent()</methodname>, because the layout can not operate on an component that it doesn't (yet) include."
msgstr ""

#: part1-layout.xml:428(title) part1-layout.xml:658(title) 
msgid "A layout that contains components with percentual size must have a defined size!"
msgstr ""

#: part1-layout.xml:431(para) part1-layout.xml:660(para) 
msgid "If a layout has undefined size and a contained component has, say, 100% size, the component would fill the space given by the layout, while the layout would shrink to fit the space taken by the component, which is a paradox. This requirement holds for height and width separately. The debug mode allows detecting such invalid cases; see <xref linkend=\"advanced.debug-production-modes.debug.mode\"/>."
msgstr ""

#: part1-layout.xml:441(para) 
msgid "If you specify an expand ratio for multiple components, they will all try to use the available space according to the ratio."
msgstr ""

#: part1-layout.xml:467(para) 
msgid "As the example used the same ratio for all components, the ones with more content may have the content cut. Below, we use differing ratios:"
msgstr ""

#: part1-layout.xml:481(para) 
msgid "If the size of the expanding components is defined as a percentage (typically \"100%\"), the ratio is calculated from the <emphasis>overall</emphasis> space available for the relatively sized components. For example, if you have a 100 pixels wide layout with two cells with 1.0 and 4.0 respective expansion ratios, and both the components in the layout are set as <methodname>setWidth(\"100%\")</methodname>, the cells will have respective widths of 20 and 80 pixels, regardless of the minimum size of the components."
msgstr ""

#: part1-layout.xml:493(para) 
msgid "However, if the size of the contained components is undefined or fixed, the expansion ratio is of the <emphasis>excess</emphasis> available space. In this case, it is the excess space that expands, not the components."
msgstr ""

#: part1-layout.xml:516(para) 
msgid "It is not meaningful to combine expanding components with percentually defined size and components with fixed or undefined size. Such combination can lead to a very unexpected size for the percentually sized components."
msgstr ""

#: part1-layout.xml:523(para) 
msgid "A percentual size of a component defines the size of the component <emphasis>within its cell</emphasis>. Usually, you use \"100%\", but a smaller percentage or a fixed size (smaller than the cell size) will leave an empty space in the cell and align the component within the cell according to its alignment setting, top left by default."
msgstr ""

#: part1-layout.xml:557(classname) part1-layout.xml:1873(classname) 
msgid "GridLayout"
msgstr ""

#: part1-layout.xml:559(para) 
msgid "<classname>GridLayout</classname> container lays components out on a grid, defined by the number of columns and rows. The columns and rows of the grid serve as coordinates that are used for laying out components on the grid. Each component can use multiple cells from the grid, defined as an area (x1,y1,x2,y2), although they typically take up only a single grid cell."
msgstr ""

#: part1-layout.xml:567(para) 
msgid "The grid layout maintains a cursor for adding components in left-to-right, top-to-bottom order. If the cursor goes past the bottom-right corner, it will automatically extend the grid downwards by adding a new row."
msgstr ""

#: part1-layout.xml:573(para) 
msgid "The following example demonstrates the use of <classname>GridLayout</classname>. The <methodname>addComponent</methodname> takes a component and optional coordinates. The coordinates can be given for a single cell or for an area in x,y (column,row) order. The coordinate values have a base value of 0. If coordinates are not given, the cursor will be used."
msgstr ""

#: part1-layout.xml:604(para) 
msgid "The resulting layout will look as follows. The borders have been made visible to illustrate the layout cells."
msgstr ""

#: part1-layout.xml:610(title) 
msgid "The Grid Layout Component"
msgstr ""

#: part1-layout.xml:618(para) 
msgid "A component to be placed on the grid must not overlap with existing components. A conflict causes throwing a <classname>GridLayout.OverlapsException</classname>."
msgstr ""

#: part1-layout.xml:625(title) 
msgid "Sizing Grid Cells"
msgstr ""

#: part1-layout.xml:627(para) 
msgid "You can define the size of both a grid layout and its components in either fixed or percentual units, or leave the size undefined altogether, as described in <xref linkend=\"components.features.sizeable\"/>. <xref linkend=\"layout.settings.size\"/> gives an introduction to sizing of layouts."
msgstr ""

#: part1-layout.xml:636(para) 
msgid "The size of the <classname>GridLayout</classname> component is undefined by default, so it will shrink to fit the size of the components placed inside it. In most cases, especially if you set a defined size for the layout but do not set the contained components to full size, there will be some unused space. The position of the non-full components within the grid cells will be determined by their <emphasis>alignment</emphasis>. See <xref linkend=\"layout.settings.alignment\"/> for details on how to align the components inside the cells."
msgstr ""

#: part1-layout.xml:648(para) 
msgid "The components contained within a <classname>GridLayout</classname> layout can be laid out in a number of different ways depending on how you specify their height or width. The layout options are similar to <classname>HorizontalLayout</classname> and <classname>VerticalLayout</classname>, as described in <xref linkend=\"layout.components.orderedlayout\"/>."
msgstr ""

#: part1-layout.xml:670(para) 
msgid "Often, you want to have one or more rows or columns that take all the available space left over from non-expanding rows or columns. You need to set the rows or columns as <emphasis>expanding</emphasis> with <methodname>setRowExpandRatio()</methodname> and <methodname>setColumnExpandRatio()</methodname>. The first parameter for these methods is the index of the row or column to set as expanding. The second parameter for the methods is an expansion ratio, which is relevant if there are more than one expanding row or column, but its value is irrelevant if there is only one. With multiple expanding rows or columns, the ratio parameter sets the relative portion how much a specific row/column will take in relation with the other expanding rows/columns."
msgstr ""

#: part1-layout.xml:724(title) 
msgid "Expanding Rows and Columns in <classname>GridLayout</classname>"
msgstr ""

#: part1-layout.xml:732(para) 
msgid "If the size of the contained components is undefined or fixed, the expansion ratio is of the <emphasis>excess</emphasis> space, as in <xref linkend=\"figure.ui.gridlayout.sizing.expanding\"/> (excess horizontal space is shown in white). However, if the size of the all the contained components in the expanding rows or columns is defined as a percentage, the ratio is calculated from the <emphasis>overall</emphasis> space available for the percentually sized components. For example, if we had a 100 pixels wide grid layout with two columns with 1.0 and 4.0 respective expansion ratios, and all the components in the grid were set as <methodname>setWidth(\"100%\")</methodname>, the columns would have respective widths of 20 and 80 pixels, regardless of the minimum size of their contained components."
msgstr ""

#: part1-layout.xml:751(title) part1-layout.xml:870(title) part1-layout.xml:975(title) part1-layout.xml:1135(title) part1-layout.xml:1348(title) part1-layout.xml:1461(title) part1-layout.xml:2036(title) 
msgid "CSS Style Rules"
msgstr ""

#: part1-layout.xml:756(para) 
msgid "The <markup>v-gridlayout</markup> is the root element of the <classname>GridLayout</classname> component. The <markup>v-gridlayout-margin</markup> is a simple element inside it that allows setting a padding between the outer element and the cells."
msgstr ""

#: part1-layout.xml:763(para) 
msgid "For styling the individual grid cells, you should style the components inserted in the cells. The implementation structure of the grid can change, so depending on it, as is done in the example below, is not generally recommended. Normally, if you want to have, for example, a different color for a certain cell, just make set the component inside it <methodname>setSizeFull()</methodname>, and add a style name for it. Sometimes you may need to use a layout component between a cell and its actual component just for styling."
msgstr ""

#: part1-layout.xml:774(para) 
msgid "The following example shows how to make the grid borders visible, as in <xref linkend=\"figure.ui.gridlayout.sizing.expanding\"/>."
msgstr ""

#: part1-layout.xml:802(para) 
msgid "You should beware of <literal>margin</literal>, <literal>padding</literal>, and <literal>border</literal> settings in CSS as they can mess up the layout. The dimensions of layouts are calculated in the Client-Side Engine of Vaadin and some settings can interfere with these calculations. For more information, on margins and spacing, see <xref linkend=\"layout.settings.spacing\"/> and <xref linkend=\"layout.settings.margins\"/>"
msgstr ""

#: part1-layout.xml:815(classname) 
msgid "FormLayout"
msgstr ""

#: part1-layout.xml:817(para) 
msgid "<classname>FormLayout</classname> is the default layout of a <classname>Form</classname> component. It lays the form fields and their captions out in two columns, with optional indicators for required fields and errors that can be shown for each field."
msgstr ""

#: part1-layout.xml:824(para) 
msgid "A <classname>Form</classname> handles additional layout elements itself, including a caption, a form description, a form error indicator, a footer that is often used for buttons and a border. For more information on these, see <xref linkend=\"components.form\"/>."
msgstr ""

#: part1-layout.xml:831(para) 
msgid "The field captions can have an icon in addition to the text."
msgstr ""

#: part1-layout.xml:855(para) 
msgid "The resulting layout will look as follows. The error message shows in a tooptip when you hover the mouse pointer over the error indicator."
msgstr ""

#: part1-layout.xml:861(title) 
msgid "A <classname>FormLayout</classname> Layout for Forms"
msgstr ""

#. NOTE: Margin and spacing styles were mentioned, but they looked very
#.             suspicious so removed them.
#: part1-layout.xml:898(para) 
msgid "The top-level element of <classname>FormLayout</classname> has the <literal>v-formlayout</literal> style. The layout is tabular with three columns: the caption column, the error indicator column, and the field column. These can be styled with <literal>v-formlayout-captioncell</literal>, <literal>v-formlayout-errorcell</literal>, and <literal>v-formlayout-contentcell</literal>, respectively. While the error indicator is shown as a dedicated column, the indicator for required fields is currently shown as a part of the caption column."
msgstr ""

#: part1-layout.xml:910(para) 
msgid "For information on setting margins and spacing, see also <xref linkend=\"layout.settings.spacing\"/> and <xref linkend=\"layout.settings.margins\"/>."
msgstr ""

#: part1-layout.xml:920(classname) 
msgid "Panel"
msgstr ""

#: part1-layout.xml:922(para) 
msgid "<classname>Panel</classname> is a simple container with a frame and an optional caption. The content area is bound to a an inner layout component for laying out the contained components. The default content layout is a <classname>VerticalLayout</classname>, but you can change it with the <methodname>setContent()</methodname> method to be any class implementing the <classname>ComponentContainer</classname> interface."
msgstr ""

#: part1-layout.xml:931(para) 
msgid "The caption can have an icon in addition to the text."
msgstr ""

#: part1-layout.xml:956(para) 
msgid "The resulting layout will look as follows."
msgstr ""

#: part1-layout.xml:961(title) 
msgid "A <classname>Panel</classname> Layout"
msgstr ""

#: part1-layout.xml:969(para) 
msgid "See <xref linkend=\"layout.root-layout\"/> for more information about setting the content layout."
msgstr ""

#: part1-layout.xml:983(para) 
msgid "The entire panel has <literal>v-panel</literal> style. A panel consists of three parts: the caption, content, and bottom decorations (shadow). These can be styled with <literal>v-panel-caption</literal>, <literal>v-panel-content</literal>, and <literal>v-panel-deco</literal>, respectively. If the panel has no caption, the caption element will have the style <literal>v-panel-nocaption</literal>."
msgstr ""

#: part1-layout.xml:993(para) 
msgid "The built-in <emphasis>light</emphasis> style has no borders or border decorations for the <classname>Panel</classname>. You enable it simply by adding the <literal>light</literal> style name for the panel, as is done in the example below."
msgstr ""

#: part1-layout.xml:1025(para) 
msgid "<xref linkend=\"figure.layout.panel.light\"/> shows the rendered <classname>Panel</classname>."
msgstr ""

#: part1-layout.xml:1031(title) 
msgid "A <classname>Panel</classname> with Light Style"
msgstr ""

#: part1-layout.xml:1039(para) 
msgid "The <emphasis>light</emphasis> style is typical when using a <classname>Panel</classname> as the root layout of a window or some similar layout, as in the example above."
msgstr ""

#: part1-layout.xml:1048(classname) 
msgid "SplitPanel"
msgstr ""

#: part1-layout.xml:1050(para) 
msgid "<classname>SplitPanel</classname> is a two-component container that divides the available space into two areas to accomodate the two components. The split direction is vertical by default, but you can change it with <methodname>setOrientation()</methodname>."
msgstr ""

#: part1-layout.xml:1057(para) 
msgid "You can set the two components with the dedicated <methodname>setFirstComponent()</methodname> and <methodname>setSecondComponent()</methodname> methods, or with the regular <methodname>addComponent()</methodname> method."
msgstr ""

#: part1-layout.xml:1073(para) 
msgid "A split bar that divides the two panels is enabled by default. The user can drag the bar with mouse to change the split position. To disable the bar, lock the split position with <methodname>setLocked(true)</methodname>."
msgstr ""

#: part1-layout.xml:1079(para) 
msgid "The following example shows how you can create a layout with two nested <classname>SplitPanel</classname> components (one of which has a locked split position):"
msgstr ""

#: part1-layout.xml:1126(title) 
msgid "A Layout With Nested SplitPanels"
msgstr ""

#: part1-layout.xml:1137(programlisting) 
#, no-wrap
msgid "<?pocket-size 70% ?>/* For a horizontal SplitPanel. */\n.v-splitpanel-horizontal {}\n.v-splitpanel-hsplitter {}\n.v-splitpanel-hsplitter-locked {}\n\n/* For a vertical SplitPanel. */\n.v-splitpanel-vertical {}\n.v-splitpanel-vsplitter {}\n.v-splitpanel-vsplitter-locked {}\n\n/* The two container panels. */\n.v-splitpanel-first-container {}  /* Top or left panel. */\n.v-splitpanel-second-container {} /* Bottom or right panel. */"
msgstr ""

#: part1-layout.xml:1151(para) 
msgid "The entire accordion has the style <literal>v-splitpanel-horizontal</literal> or <literal>v-splitpanel-vertical</literal>. The split bar or <emphasis>splitter</emphasis> between the two content panels has either the <literal>...-splitter</literal> or <literal>...-splitter-locked</literal> style, depending on whether its position is locked or not."
msgstr ""

#: part1-layout.xml:1165(classname) 
msgid "TabSheet"
msgstr ""

#: part1-layout.xml:1167(para) 
msgid "The <classname>TabSheet</classname> is a multicomponent container that allows switching between the components with \"tabs\". The tabs are organized as a tab bar at the top of the tab sheet. Clicking on a tab opens its contained component in the main display area of the layout."
msgstr ""

#: part1-layout.xml:1174(para) 
msgid "You add new tabs to a tab sheet with the <methodname>addTab()</methodname> method. The simple version of the method takes as its parameter the root component of the tab. You can use the root component to retrieve its corresponding <classname>Tab</classname> object. Typically, you put a layout component as the root component."
msgstr ""

#: part1-layout.xml:1196(para) 
msgid "Each tab in a tab sheet is represented as a <classname>Tab</classname> object, which manages the tab caption, icon, and attributes such as hidden and visible. You can set the caption with <methodname>setCaption()</methodname> and the icon with <methodname>setIcon()</methodname>. If the component added with <methodname>addTab()</methodname> has a caption or icon, it is used as the default for the <classname>Tab</classname> object. However, changing the attributes of the root component later does not affect the tab, but you must make the setting through the <classname>Tab</classname> object. The <methodname>addTab()</methodname> returns the new <classname>Tab</classname> object, so you can easily set an attribute using the reference."
msgstr ""

#: part1-layout.xml:1212(para) 
msgid "You can also give the caption and the icon as parameters for the <methodname>addTab()</methodname> method. The following example demonstrates the creation of a simple tab sheet, where each tab shows a different <classname>Label</classname> component. The tabs have an icon, which are (in this example) loaded as Java class loader resources from the application."
msgstr ""

#: part1-layout.xml:1236(title) 
msgid "A Simple TabSheet Layout"
msgstr ""

#: part1-layout.xml:1244(para) 
msgid "The <methodname>hideTabs()</methodname> method allows hiding the tab bar entirely. This can be useful in tabbed document interfaces (TDI) when there is only one tab. An individual tab can be made invisible by setting <methodname>setVisible(false)</methodname> for the <classname>Tab</classname> object. A tab can be disabled by setting <methodname>setEnabled(false)</methodname>."
msgstr ""

#: part1-layout.xml:1253(para) 
msgid "Clicking on a tab selects it. This fires a <classname>TabSheet.SelectedTabChangeEvent</classname>, which you can handle by implementing the <classname>TabSheet.SelectedTabChangeListener</classname> interface. The source component of the event, which you can retrieve with <methodname>getSource()</methodname> method of the event, will be the <classname>TabSheet</classname> component. You can find the currently selected tab with <methodname>getSelectedTab()</methodname> and select (open) a particular tab programmatically with <methodname>setSelectedTab()</methodname>. Notice that also adding the first tab fires the <classname>SelectedTabChangeEvent</classname>, which may cause problems in your handler if you assume that everything is initialized before the first change event."
msgstr ""

#: part1-layout.xml:1268(para) 
msgid "The example below demonstrates handling <classname>TabSheet</classname> related events and enabling and disabling tabs. The sort of logic used in the example is useful in sequential user interfaces, often called <emphasis>wizards</emphasis>, where the user goes through the tabs one by one, but can return back if needed."
msgstr ""

#: part1-layout.xml:1339(title) 
msgid "A TabSheet with Hidden and Disabled Tabs"
msgstr ""

#: part1-layout.xml:1350(programlisting) 
#, no-wrap
msgid ".v-tabsheet {}\n.v-tabsheet-tabs {}\n.v-tabsheet-content {}\n.v-tabsheet-deco {}\n.v-tabsheet-tabcontainer {}\n.v-tabsheet-tabsheetpanel {}\n.v-tabsheet-hidetabs {}\n\n.v-tabsheet-scroller {}\n.v-tabsheet-scrollerPrev {}\n.v-tabsheet-scrollerNext {}\n.v-tabsheet-scrollerPrev-disabled{}\n.v-tabsheet-scrollerNext-disabled{}\n\n.v-tabsheet-tabitem {}\n.v-tabsheet-tabitem-selected {}\n.v-tabsheet-tabitemcell {}\n.v-tabsheet-tabitemcell-first {}\n\n.v-tabsheet-tabs td {}\n.v-tabsheet-spacertd {}"
msgstr ""

#: part1-layout.xml:1372(para) 
msgid "The entire tabsheet has the <literal>v-tabsheet</literal> style. A tabsheet consists of three main parts: the tabs on the top, the main content pane, and decorations around the tabsheet."
msgstr ""

#: part1-layout.xml:1378(para) 
msgid "The tabs area at the top can be styled with <literal>v-tabsheet-tabs</literal>, <literal>v-tabsheet-tabcontainer</literal> and <literal>v-tabsheet-tabitem*</literal>."
msgstr ""

#: part1-layout.xml:1385(para) 
msgid "The style <literal>v-tabsheet-spacertd</literal> is used for any empty space after the tabs. If the tabsheet has too little space to show all tabs, scroller buttons enable browsing the full tab list. These use the styles <literal>v-tabsheet-scroller*</literal>."
msgstr ""

#: part1-layout.xml:1392(para) 
msgid "The content area where the tab contents are shown can be styled with <literal>v-tabsheet-content</literal>, and the surrounding decoration with <literal>v-tabsheet-deco</literal>."
msgstr ""

#: part1-layout.xml:1402(classname) 
msgid "Accordion"
msgstr ""

#: part1-layout.xml:1404(para) 
msgid "<classname>Accordion</classname> is a multicomponent container similar to <classname>TabSheet</classname>, except that the \"tabs\" are arranged vertically. Clicking on a tab opens its contained component in the space between the tab and the next one. You can use an <classname>Accordion</classname> identically to a <classname>TabSheet</classname>, which it actually inherits. See <xref linkend=\"layout.components.tabsheet\"/> for more information."
msgstr ""

#: part1-layout.xml:1414(para) 
msgid "The following example shows how you can create a simple accordion. As the <classname>Accordion</classname> is rather naked alone, we put it inside a Panel that acts as its caption and provides it a border."
msgstr ""

#: part1-layout.xml:1446(para) 
msgid "<xref linkend=\"figure.accordion.example1\"/> shows what the example would look like with the default theme."
msgstr ""

#: part1-layout.xml:1452(title) 
msgid "An Accordion"
msgstr ""

#: part1-layout.xml:1463(programlisting) 
#, no-wrap
msgid ".v-accordion {}\n.v-accordion-item {}\n.v-accordion-item-open {}\n.v-accordion-item-first {}\n.v-accordion-item-caption {}\n.v-accordion-item-caption .v-caption {}\n.v-accordion-item-content {}"
msgstr ""

#: part1-layout.xml:1471(para) 
msgid "The top-level element of <classname>Accordion</classname> has the <literal>v-accordion</literal> style. An <classname>Accordion</classname> consists of a sequence of item elements, each of which has a caption element (the tab) and a content area element."
msgstr ""

#: part1-layout.xml:1478(para) 
msgid "The selected item (tab) has also the <literal>v-accordion-open</literal> style. The content area is not shown for the closed items."
msgstr ""

#: part1-layout.xml:1486(title) 
msgid "Layout Formatting"
msgstr ""

#: part1-layout.xml:1488(para) 
msgid "While the formatting of layouts is mainly done with style sheets, just as with other components, style sheets are not ideal or even possible to use in some situations. For example, CSS does not allow defining the spacing of table cells, which is done with the <parameter>cellspacing</parameter> attribute in HTML."
msgstr ""

#: part1-layout.xml:1496(para) 
msgid "Moreover, as many layout sizes are calculated dynamically in the Client-Side Engine of Vaadin, some CSS settings can fail altogether."
msgstr ""

#: part1-layout.xml:1502(title) 
msgid "Layout Size"
msgstr ""

#: part1-layout.xml:1504(para) 
msgid "The size of a layout component can be specified with the <methodname>setWidth()</methodname> and <methodname>setHeight()</methodname> methods defined in the <classname>Sizeable</classname> interface, just like for any component. It can also be undefined, in which case the layout shrinks to fit the component(s) inside it. <xref linkend=\"components.features.sizeable\"/> gives details on the interface."
msgstr ""

#: part1-layout.xml:1515(title) 
msgid "<classname>HorizontalLayout</classname> with Undefined vs Defined size"
msgstr ""

#: part1-layout.xml:1523(para) 
msgid "Many layout components take 100% width by default, while they have the height undefined."
msgstr ""

#: part1-layout.xml:1528(para) 
msgid "The sizes of components inside a layout can also be defined as a percentage of the space available in the layout, for example with <methodname>setWidth(\"100%\");</methodname> or with the (most commonly used method) <methodname>setFullSize()</methodname> that sets 100% size in both directions. If you use a percentage in a <classname>HorizontalLayout</classname>, <classname>VerticalLayout</classname>, or <classname>GridLayout</classname>, you will also have to set the component as <emphasis>expanding</emphasis>, as noted below."
msgstr ""

#: part1-layout.xml:1541(para) 
msgid "<emphasis>A layout that contains components with percentual size must have a defined size</emphasis>!"
msgstr ""

#: part1-layout.xml:1546(para) 
msgid "If a layout has undefined size and a contained component has, say, 100% size, the component will try to fill the space given by the layout, while the layout will shrink to fit the space taken by the component, which is a paradox. This requirement holds for height and width separately. The debug mode allows detecting such invalid cases; see <xref linkend=\"advanced.debug-production-modes.debug.mode\"/>."
msgstr ""

#: part1-layout.xml:1556(para) 
msgid "For example:"
msgstr ""

#: part1-layout.xml:1573(para) 
msgid "The default layout of <classname>Window</classname> and <classname>Panel</classname> is <classname>VerticalLayout</classname> with undefined height. If you insert enough components in such a layout, it will grow outside the bottom of the view area and scrollbars will appear in the browser. If you want your application to use all the browser view, nothing more or less, you should use <methodname>setFullSize()</methodname> for the root layout."
msgstr ""

#: part1-layout.xml:1591(title) 
msgid "Expanding Components"
msgstr ""

#: part1-layout.xml:1593(para) 
msgid "If you set a <classname>HorizontalLayout</classname> to a defined size horizontally or a <classname>VerticalLayout</classname> vertically, and there is space left over from the contained components, the extra space is distributed equally between the component cells. The components are aligned within these cells, according to their alignment setting, top left by default, as in the example below."
msgstr ""

#: part1-layout.xml:1608(para) 
msgid "Often, you don't want such empty space, but want one or more components to take all the leftover space. You need to set such a component to 100% size and use <methodname>setExpandRatio()</methodname>. If there is just one such expanding component in the layout, the ratio parameter is irrelevant."
msgstr ""

#: part1-layout.xml:1622(para) 
msgid "If you set multiple components as expanding, the expand ratio dictates how large proportion of the available space (overall or excess depending on whether the components are sized as a percentage or not) each component takes. In the example below, the buttons have 1:2:3 ratio for the expansion."
msgstr ""

#: part1-layout.xml:1636(para) 
msgid "<classname>GridLayout</classname> has corresponding method for both of its directions, <methodname>setRowExpandRatio()</methodname> and <methodname>setColumnExpandRatio()</methodname>."
msgstr ""

#: part1-layout.xml:1642(para) 
msgid "Expansion is dealt in detail in the documentation of the layout components that support it. See <xref linkend=\"layout.components.orderedlayout\"/> and <xref linkend=\"layout.components.gridlayout\"/> for details on components with relative sizes."
msgstr ""

#: part1-layout.xml:1654(title) 
msgid "Layout Cell Alignment"
msgstr ""

#: part1-layout.xml:1656(para) 
msgid "You can set the alignment of the component inside a specific layout cell with the <methodname>setComponentAlignment()</methodname> method. The method takes as its parameters the component contained in the cell to be formatted, and the horizontal and vertical alignment."
msgstr ""

#: part1-layout.xml:1663(para) 
msgid "<xref linkend=\"figure.layout.settings.alignment\"/> illustrates the alignment of components within a <classname>GridLayout</classname>."
msgstr ""

#: part1-layout.xml:1669(title) 
msgid "Cell Alignments"
msgstr ""

#: part1-layout.xml:1680(para) 
msgid "The easiest way to set alignments is to use the constants defined in the <classname>Alignment</classname> class. Let us look how the buttons in the top row of the above <classname>GridLayout</classname> are aligned with constants:"
msgstr ""

#: part1-layout.xml:1706(para) 
msgid "The following table lists all the <classname>Alignment</classname> constants by their respective locations:"
msgstr ""

#: part1-layout.xml:1712(title) 
msgid "Alignment Constants"
msgstr ""

#: part1-layout.xml:1716(parameter) 
msgid "TOP_LEFT"
msgstr ""

#: part1-layout.xml:1717(parameter) 
msgid "TOP_CENTER"
msgstr ""

#: part1-layout.xml:1718(parameter) 
msgid "TOP_RIGHT"
msgstr ""

#: part1-layout.xml:1721(parameter) 
msgid "MIDDLE_LEFT"
msgstr ""

#: part1-layout.xml:1722(parameter) 
msgid "MIDDLE_CENTER"
msgstr ""

#: part1-layout.xml:1723(parameter) 
msgid "MIDDLE_RIGHT"
msgstr ""

#: part1-layout.xml:1726(parameter) 
msgid "BOTTOM_LEFT"
msgstr ""

#: part1-layout.xml:1727(parameter) 
msgid "BOTTOM_CENTER"
msgstr ""

#: part1-layout.xml:1728(parameter) 
msgid "BOTTOM_RIGHT"
msgstr ""

#: part1-layout.xml:1734(para) 
msgid "Another way to specify the alignments is to create an <classname>Alignment</classname> object and specify the horizontal and vertical alignment with separate constants. You can specify either of the directions, in which case the other alignment direction is not modified, or both with a bitmask operation between the two directions."
msgstr ""

#: part1-layout.xml:1760(para) 
msgid "Obviously, you may combine only one vertical bitmask with one horizontal bitmask, though you may leave either one out. The following table lists the available alignment bitmask constants:"
msgstr ""

#: part1-layout.xml:1767(title) 
msgid "Alignment Bitmasks"
msgstr ""

#: part1-layout.xml:1771(entry) 
msgid "Horizontal"
msgstr ""

#: part1-layout.xml:1772(parameter) 
msgid "Bits.ALIGNMENT_LEFT"
msgstr ""

#: part1-layout.xml:1775(parameter) 
msgid "Bits.ALIGNMENT_HORIZONTAL_CENTER"
msgstr ""

#: part1-layout.xml:1778(parameter) 
msgid "Bits.ALIGNMENT_RIGHT"
msgstr ""

#: part1-layout.xml:1781(entry) 
msgid "Vertical"
msgstr ""

#: part1-layout.xml:1782(parameter) 
msgid "Bits.ALIGNMENT_TOP"
msgstr ""

#: part1-layout.xml:1785(parameter) 
msgid "Bits.ALIGNMENT_VERTICAL_CENTER"
msgstr ""

#: part1-layout.xml:1788(parameter) 
msgid "Bits.ALIGNMENT_BOTTOM"
msgstr ""

#: part1-layout.xml:1794(para) 
msgid "You can determine the current alignment of a component with <methodname>getComponentAlignment()</methodname>, which returns an <classname>Alignment</classname> object. The class provides a number of getter methods for decoding the alignment, which you can also get as a bitmask value."
msgstr ""

#: part1-layout.xml:1805(title) 
msgid "Layout Cell Spacing"
msgstr ""

#: part1-layout.xml:1807(para) 
msgid "The <classname>VerticalLayout</classname>, <classname>HorizontalLayout</classname>, and <classname>GridLayout</classname> layouts offer a <methodname>setSpacing()</methodname> method for enabling space between the cells in the layout. Enabling the spacing adds a spacing style for all cells except the first so that, by setting the left or top padding, you can specify the amount of spacing."
msgstr ""

#: part1-layout.xml:1817(para) 
msgid "To enable spacing, simply call <methodname>setSpacing(true)</methodname> for the layout as follows:"
msgstr ""

#: part1-layout.xml:1836(para) 
msgid "In practise, the <methodname>setSpacing()</methodname> method toggles between the \"<literal>v-COMPONENTCLASSNAME-spacing-on</literal>\" and \"<literal>-off</literal>\" CSS class names in the cell elements. Elements having those class names can be used to define the spacing metrics in a theme."
msgstr ""

#: part1-layout.xml:1844(para) 
msgid "The layouts have a spacing style name to define spacing also when spacing is off. This allows you to define a small default spacing between components by default and a larger one when the spacing is actually enabled."
msgstr ""

#: part1-layout.xml:1851(para) 
msgid "Spacing can be horizontal (for <classname>HorizontalLayout</classname>), vertical (for <classname>VerticalLayout</classname>), or both (for <classname>GridLayout</classname>). The name of the spacing style for horizontal and vertical spacing is the base name of the component style name plus the \"<literal>-spacing-on</literal>\" suffix, as shown in the following table:"
msgstr ""

#: part1-layout.xml:1861(title) 
msgid "Spacing Style Names"
msgstr ""

#: part1-layout.xml:1865(classname) 
msgid "VerticalLayout"
msgstr ""

#: part1-layout.xml:1866(literal) 
msgid "v-verticallayout-spacing-on"
msgstr ""

#: part1-layout.xml:1869(classname) 
msgid "HorizontalLayout"
msgstr ""

#: part1-layout.xml:1870(literal) 
msgid "v-horizontallayout-spacing-on"
msgstr ""

#: part1-layout.xml:1874(literal) 
msgid "v-gridlayout-spacing-on"
msgstr ""

#: part1-layout.xml:1880(para) 
msgid "In the CSS example below, we specify the exact amount of spacing for the code example given above, for the layouts with the custom \"<literal>spacingexample</literal>\" style:"
msgstr ""

#: part1-layout.xml:1905(para) 
msgid "The resulting layouts will look as shown in <xref linkend=\"figure.layout.spacing\"/>, which also shows the layouts with no spacing."
msgstr ""

#: part1-layout.xml:1912(title) 
msgid "Layout Spacings"
msgstr ""

#: part1-layout.xml:1924(para) 
msgid "Spacing is unrelated to \"cell spacing\" in HTML tables. While many layout components are implemented with HTML tables in the browser, this implementation is not guaranteed to stay the same and at least <classname>Vertical</classname>-/<classname>HorizontalLayout</classname> could be implemented with <literal>&lt;div&gt;</literal> elements as well. In fact, as GWT compiles widgets separately for different browsers, the implementation could even vary between browsers."
msgstr ""

#: part1-layout.xml:1933(para) 
msgid "Also note that HTML elements with spacing classnames don't necessarily exist in a component after rendering, because the Client-Side Engine of Vaadin processes them."
msgstr ""

#: part1-layout.xml:1942(title) part1-layout.xml:2024(title) 
msgid "Layout Margins"
msgstr ""

#: part1-layout.xml:1944(para) 
msgid "By default, layout components do not have any margin around them. You can add margin with CSS directly to the layout component. Below we set margins for a specific layout component (here a <literal>horizontallayout</literal>):"
msgstr ""

#: part1-layout.xml:1951(programlisting) 
#, no-wrap
msgid ".v-<emphasis>horizontallayout</emphasis>-marginexample1\n        .v-<emphasis>horizontallayout</emphasis>-margin {\n\tpadding-left:   200px;\n\tpadding-right:  100px;\n\tpadding-top:    50px;\n\tpadding-bottom: 25px;\n}"
msgstr ""

#: part1-layout.xml:1959(para) 
msgid "Similar settings exist for other layouts such as <literal>verticallayout</literal>."
msgstr ""

#: part1-layout.xml:1963(para) 
msgid "The layout size calculations require the margins to be defined as CSS <literal>padding</literal> rather than as CSS <literal>margin</literal>."
msgstr ""

#: part1-layout.xml:1969(para) 
msgid "As an alternative to the pure CSS method, you can set up a margin around the layout that can be enabled with <methodname>setMargin(true)</methodname>. The margin element has some default margin widths, but you can adjust the widths in CSS if you need to."
msgstr ""

#: part1-layout.xml:1976(para) 
msgid "Let us consider the following example, where we enable the margin on all sides of the layout:"
msgstr ""

#: part1-layout.xml:1998(para) 
msgid "You can enable the margins only for specific sides. The margins are specified for the <methodname>setMargin()</methodname> method in clockwise order for top, right, bottom, and left margin. The following would enable the top and left margins:"
msgstr ""

#: part1-layout.xml:2007(para) 
msgid "You can specify the actual margin widths in the CSS if you are not satisfied with the default widths (in this example for a <classname>HorizontalLayout</classname>):"
msgstr ""

#: part1-layout.xml:2013(programlisting) 
#, no-wrap
msgid ".v-<emphasis>horizontallayout</emphasis>-marginexample .v-<emphasis>horizontallayout</emphasis>-margin-left   {padding-left:   200px;}\n.v-<emphasis>horizontallayout</emphasis>-marginexample .v-<emphasis>horizontallayout</emphasis>-margin-right  {padding-right:  100px;}\n.v-<emphasis>horizontallayout</emphasis>-marginexample .v-<emphasis>horizontallayout</emphasis>-margin-top    {padding-top:    50px; }\n.v-<emphasis>horizontallayout</emphasis>-marginexample .v-<emphasis>horizontallayout</emphasis>-margin-bottom {padding-bottom: 25px; }"
msgstr ""

#: part1-layout.xml:2018(para) 
msgid "The resulting margins are shown in <xref linkend=\"figure.layout.margin\"/> below. The two ways produce identical margins."
msgstr ""

#: part1-layout.xml:2038(para) 
msgid "The CSS style names for the margin widths for <methodname>setMargin()</methodname> consist of the specific layout name plus <literal>-margin-left</literal> and so on. The CSS style names for CSS-only margins consist of the specific layout name plus <literal>-margin</literal>. Below, the style rules are given for <classname>VerticalLayout</classname>:"
msgstr ""

#: part1-layout.xml:2048(programlisting) 
#, no-wrap
msgid "<?pocket-size 75% ?>/* Alternative 1: CSS only style */\n.v-<emphasis>verticallayout</emphasis>-margin {\n    padding-left:   ___px;\n    padding-right:  ___px;\n    padding-top:    ___px;\n    padding-bottom: ___px;\n}\n/* Alternative 2: CSS rules to be enabled in code */\n.v-<emphasis>verticallayout</emphasis>-margin-left   {padding-left:   ___px;}\n.v-<emphasis>verticallayout</emphasis>-margin-right  {padding-right:  ___px;}\n.v-<emphasis>verticallayout</emphasis>-margin-top    {padding-top:    ___px;}\n.v-<emphasis>verticallayout</emphasis>-margin-bottom {padding-bottom: ___px;}"
msgstr ""

#: part1-layout.xml:2066(title) 
msgid "Custom Layouts"
msgstr ""

#: part1-layout.xml:2068(para) 
msgid "While it is possible to create almost any typical layout with the standard layout components, it is sometimes best to separate the layout completely from code. With the <classname>CustomLayout</classname> component, you can write your layout as a template in XHTML that provides locations of any contained components. The layout template is included in a theme. This separation allows the layout to be designed separately from code, for example using WYSIWYG web designer tools such as Adobe Dreamweaver."
msgstr ""

#: part1-layout.xml:2078(para) 
msgid "A template is a HTML file located under <filename>layouts</filename> folder under a theme folder under the <filename>WebContent/VAADIN/themes/</filename> folder, for example, <filename>WebContent/VAADIN/themes/<emphasis>themename/layouts/mylayout.html</emphasis></filename>. (Notice that the root path <filename>WebContent/VAADIN/themes/</filename> for themes is fixed.) A template can also be provided dynamically from an <classname>InputStream</classname>, as explained below. A template includes <literal>&lt;div&gt;</literal> elements with a <parameter>location</parameter> attribute that defines the location identifier. All custom layout HTML-files must be saved using UTF-8 character encoding."
msgstr ""

#: part1-layout.xml:2091(programlisting) 
#, no-wrap
msgid "<?pocket-size 75% ?>&lt;table width=\"100%\" height=\"100%\"&gt;\n  &lt;tr height=\"100%\"&gt;\n    &lt;td&gt;\n      &lt;table align=\"center\"&gt;\n        &lt;tr&gt;\n          &lt;td align=\"right\"&gt;User&amp;nbsp;name:&lt;/td&gt;\n          &lt;td&gt;<emphasis role=\"strong\">&lt;div location=\"username\"&gt;&lt;/div&gt;</emphasis>&lt;/td&gt;\n        &lt;/tr&gt;\n        &lt;tr&gt;\n          &lt;td align=\"right\"&gt;Password:&lt;/td&gt;\n          &lt;td&gt;<emphasis role=\"strong\">&lt;div location=\"password\"&gt;&lt;/div&gt;</emphasis>&lt;/td&gt;\n        &lt;/tr&gt;\n      &lt;/table&gt;\n    &lt;/td&gt;\n  &lt;/tr&gt;\n  &lt;tr&gt;\n    &lt;td align=\"right\" colspan=\"2\"&gt;\n      <emphasis role=\"strong\">&lt;div location=\"okbutton\"&gt;</emphasis>&lt;/div&gt;\n    &lt;/td&gt;\n  &lt;/tr&gt;\n&lt;/table&gt;"
msgstr ""

#: part1-layout.xml:2113(para) 
msgid "The client-side engine of Vaadin will replace contents of the location elements with the components. The components are bound to the location elements by the location identifier given to <methodname>addComponent()</methodname>, as shown in the example below."
msgstr ""

#: part1-layout.xml:2143(para) 
msgid "The resulting layout is shown below in <xref linkend=\"figure.layout.customlayout\"/>."
msgstr ""

#: part1-layout.xml:2148(title) 
msgid "Example of a Custom Layout Component"
msgstr ""

#: part1-layout.xml:2159(para) 
msgid "You can use <methodname>addComponent()</methodname> also to replace an existing component in the location given in the second parameter."
msgstr ""

#: part1-layout.xml:2164(para) 
msgid "In addition to a static template file, you can provide a template dynamically with the <classname>CustomLayout</classname> constructor that accepts an <classname>InputStream</classname> as the template source. For example:"
msgstr ""

#: part1-layout.xml:2172(para) 
msgid "or"
msgstr ""

#. Put one translator per line, in the form of NAME <EMAIL>, YEAR1, YEAR2.
#: part1-layout.xml:0(None) 
msgid "translator-credits"
msgstr ""

