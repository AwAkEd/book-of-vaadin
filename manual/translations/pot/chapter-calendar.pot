# SOME DESCRIPTIVE TITLE.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"Report-Msgid-Bugs-To: http://bugs.kde.org\n"
"POT-Creation-Date: 2012-03-23 14:18+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <kde-i18n-doc@kde.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. Tag: title
#: chapter-calendar.xml:10
#, no-c-format
msgid "Vaadin Calendar"
msgstr ""

#. Tag: para
#: chapter-calendar.xml:12
#, no-c-format
msgid "The Vaadin Calendar is a commercial add-on component for organizing and displaying calendar events. It can be used to view and manage events in monthly, weekly, and daily views."
msgstr ""

#. Tag: title
#: chapter-calendar.xml:19
#, no-c-format
msgid "Overview"
msgstr ""

#. Tag: para
#: chapter-calendar.xml:21
#, no-c-format
msgid "The main features of the Vaadin Calendar include:"
msgstr ""

#. Tag: listitem
#: chapter-calendar.xml:26
#, no-c-format
msgid "Monthly, weekly, and daily views"
msgstr ""

#. Tag: listitem
#: chapter-calendar.xml:29
#, no-c-format
msgid "Two types of events: all-day events and events with a time range"
msgstr ""

#. Tag: listitem
#: chapter-calendar.xml:32
#, no-c-format
msgid "Add events directly, from a <classname>Container</classname>, or with an event provider"
msgstr ""

#. Tag: listitem
#: chapter-calendar.xml:35
#, no-c-format
msgid "Control the range of the visible dates"
msgstr ""

#. Tag: listitem
#: chapter-calendar.xml:38
#, no-c-format
msgid "Selecting and editing date or time range by dragging"
msgstr ""

#. Tag: listitem
#: chapter-calendar.xml:41
#, no-c-format
msgid "Drag and drop events to calendar"
msgstr ""

#. Tag: listitem
#: chapter-calendar.xml:44
#, no-c-format
msgid "Support for localization and timezones"
msgstr ""

#. Tag: para
#: chapter-calendar.xml:49
#, no-c-format
msgid "The data source of the calendar can be practically anything, as its events are queried dynamically by the component. You can bind the calendar to a Vaadin container, or to any other data source by implementing an <emphasis>event provider</emphasis>."
msgstr ""

#. Tag: title
#: chapter-calendar.xml:57
#, no-c-format
msgid "Monthly and Weekly Views"
msgstr ""

#. Tag: para
#: chapter-calendar.xml:59
#, no-c-format
msgid "The Vaadin Calendar has two types of views that are shown depending on the date range of the calendar. The <emphasis>weekly view</emphasis> displays a week by default. It can show anything between one to seven days a week, and is also used as a single-day view. The view mode is determined from the <emphasis>date range</emphasis> of the calendar, defined by a start and an end date. Calendar will be shown in a <emphasis>monthly view</emphasis> when the date range is over than one week (seven days) long. The date range is always calculated in an accuracy of one millisecond."
msgstr ""

#. Tag: title
#: chapter-calendar.xml:72
#, no-c-format
msgid "Monthly view with All-Day and Normal Events"
msgstr ""

#. Tag: para
#: chapter-calendar.xml:83
#, no-c-format
msgid "The monthly view, shown in <xref linkend=\"figure.addons.calendar.overview.views.monthly\"/>, can easily be used to control all types of events, but it is best suited for events that last for one or more days. You can drag the events to move them. In the figure, you can see two longer events that are highlighted with a blue and green background color. Other markings are shorter day events that last less than a 24 hours. These events can not be moved by dragging in the monthly view."
msgstr ""

#. Tag: title
#: chapter-calendar.xml:95
#, no-c-format
msgid "Weekly View"
msgstr ""

#. Tag: para
#: chapter-calendar.xml:106
#, no-c-format
msgid "In <xref linkend=\"figure.addons.calendar.overview.views.weekly\"/>, you can see four normal day events and also all-day events at the top of the time line grid."
msgstr ""

#. Tag: title
#: chapter-calendar.xml:114
#, no-c-format
msgid "Calendar Events"
msgstr ""

#. Tag: para
#: chapter-calendar.xml:116
#, no-c-format
msgid "All occurrences in a calendar are represented as <emphasis>events</emphasis>. You have three ways to manage the calendar events: add them to the calendar and manage them by its API, from a Vaadin <interfacename>Container</interfacename>, or with an <emphasis>event provider</emphasis>."
msgstr ""

#. Tag: para
#: chapter-calendar.xml:124
#, no-c-format
msgid "Events are handled though the <interfacename>CalendarEvent</interfacename> interface. The concrete class of the event depends on the specific <classname>CalendarEventProvider</classname> used in the calendar. By default, <classname>Calendar</classname> uses a <classname>BasicEventProvider</classname> to provide events, which uses <classname>BasicEvent</classname> instances."
msgstr ""

#. Tag: para
#: chapter-calendar.xml:133
#, no-c-format
msgid "Vaadin Calendar does not depend on any particular data source implementation. Events are queried by the <classname>Calendar</classname> from the provider that just has to implement the <interfacename>CalendarEventProvider</interfacename> interface. It is up to the event provider that <classname>Calendar</classname> gets the correct events."
msgstr ""

#. Tag: para
#: chapter-calendar.xml:142
#, no-c-format
msgid "You can bind any Vaadin <classname>Container</classname> to a calendar, in which case a <classname>ContainerEventProvider</classname> is used transparently. The container must be ordered by start date and time of the events. See <xref linkend=\"datamodel.container\"/> for basic information about containers."
msgstr ""

#. Tag: para
#: chapter-calendar.xml:150
#, no-c-format
msgid "A calendar event requires a start time and an end time. These are the only mandatory properties. In addition, an event can also be set as an all-day event by setting the <literal>all-day</literal> property of the event. You can also set the <literal>description</literal> of an event, which is displayed as a tooltip in the user interface."
msgstr ""

#. Tag: para
#: chapter-calendar.xml:158
#, no-c-format
msgid "If the <literal>all-day</literal> field of the event is <literal>true</literal>, then the event is always rendered as an all-day event. In the monthly view, this means that no start time is displayed in the user interface and the event has an colored background. In the weekly view, all-day events are displayed in the upper part of the screen, and rendered similarly to the monthly view. In addition, when the time range of an event is 24 hours or longer, it is rendered as an all-day event in the monthly view."
msgstr ""

#. Tag: para
#: chapter-calendar.xml:169
#, no-c-format
msgid "When the time range of an event is equal or less than 24 hours, with the accuracy of one millisecond, the event is considered as a normal day event. Normal event has a start and end times that may be on different days."
msgstr ""

#. Tag: title
#: chapter-calendar.xml:178
#, no-c-format
msgid "Interaction"
msgstr ""

#. Tag: para
#: chapter-calendar.xml:180
#, no-c-format
msgid "The date and week captions, as well as events, are clickable and the clicks can be listened for by the server. Also date/time range selections, event dragging, and event resizing can be listened by the server. Using the API, you have full control over the events caused by user interaction."
msgstr ""

#. Tag: para
#: chapter-calendar.xml:187
#, no-c-format
msgid "The weekly view has navigation buttons to navigate forward and backward in time. These actions are also listened by the server. Custom navigation can be implemented using event handlers, as described in <xref linkend=\"calendar.customizing\"/>."
msgstr ""

#. Tag: title
#: chapter-calendar.xml:197
#, no-c-format
msgid "Installing Calendar"
msgstr ""

#. Tag: para
#: chapter-calendar.xml:199
#, no-c-format
msgid "Vaadin Calendar is available for download from Vaadin Directory and from a Maven repository. Installing the add-on is the same as with Vaadin add-ons in general, so please refer to <xref linkend=\"addons\"/>. Vaadin Calendar includes a widget set, which you need to compile to your project widget set."
msgstr ""

#. Tag: title
#: chapter-calendar.xml:207
#, no-c-format
msgid "Licensing"
msgstr ""

#. Tag: para
#: chapter-calendar.xml:209
#, no-c-format
msgid "When downloading the Vaadin Calendar add-on from Vaadin Directory, you need to choose the license."
msgstr ""

#. Tag: para
#: chapter-calendar.xml:214
#, no-c-format
msgid "Vaadin Calendar is a commercial product licensed under a dual-licensing scheme. The AGPL (GNU Affero General Public License) allows open-source development, while the CVAL (Commercial Vaadin Add-On License) needs to be purchased for closed-source use, including web deployments and internal use. With the CVAL license, you have a free 30-day trial period for evaluating the product."
msgstr ""

#. Tag: para
#: chapter-calendar.xml:223
#, no-c-format
msgid "Commercial licenses can be purchased from the Vaadin Directory, where you can also find the license details and download the Vaadin Calendar."
msgstr ""

#. Tag: title
#: chapter-calendar.xml:231
#, no-c-format
msgid "Basic Use"
msgstr ""

#. Tag: para
#: chapter-calendar.xml:233
#, no-c-format
msgid "Use of Calendar requires two tasks after creating a <classname>Calendar</classname> instance: setting a time range for it and providing the calendar events. The time range controls its view mode; whether it is a daily, weekly, or monthly view."
msgstr ""

#. Tag: title
#: chapter-calendar.xml:241
#, no-c-format
msgid "Setting the Date Range"
msgstr ""

#. Tag: para
#: chapter-calendar.xml:243
#, no-c-format
msgid "The view mode is controlled by the date range of the calendar. The weekly view is the default view mode. You can change the range by setting start and end dates for the calendar. The range must be between one and 60 days."
msgstr ""

#. Tag: para
#: chapter-calendar.xml:250
#, no-c-format
msgid "In the following, we set the calendar to show only one day, which is the current day."
msgstr ""

#. Tag: programlisting
#: chapter-calendar.xml:255
#, no-c-format
msgid ""
      "<![CDATA[cal.setStartDate(new Date());\n"
      "cal.setEndDate(new Date());]]>"
msgstr ""

#. Tag: para
#: chapter-calendar.xml:257
#, no-c-format
msgid "Notice that although the range we set above is actually zero time long, the calendar still renders the time from 00:00 to 23:59. This is normal, as the Vaadin Calendar is guaranteed to render at least the date range provided, but may expand it. This behaviour is important to notice when we implement our own event providers."
msgstr ""

#. Tag: title
#: chapter-calendar.xml:267
#, no-c-format
msgid "Adding and Managing Events"
msgstr ""

#. Tag: para
#: chapter-calendar.xml:269
#, no-c-format
msgid "The first thing the you will probably notice about the Calendar is that it is rather empty at first. The Calendar allows three different ways to add events:"
msgstr ""

#. Tag: listitem
#: chapter-calendar.xml:276
#, no-c-format
msgid "Add events directly to the <classname>Calendar</classname> object using the <methodname>addEvent()</methodname>"
msgstr ""

#. Tag: listitem
#: chapter-calendar.xml:281
#, no-c-format
msgid "Use a <interfacename>Container</interfacename> as a data source"
msgstr ""

#. Tag: listitem
#: chapter-calendar.xml:285
#, no-c-format
msgid "Use the <emphasis>event provider</emphasis> mechanism"
msgstr ""

#. Tag: para
#: chapter-calendar.xml:290
#, no-c-format
msgid "The easiest way to add and manage events in a calendar is to use the basic event management API in the <classname>Calendar</classname>. You can add events with <methodname>addEvent()</methodname> and remove them with the <methodname>removeEvent()</methodname>. These methods will use the underlying event provider to write the modifications to the data source."
msgstr ""

#. Tag: para
#: chapter-calendar.xml:298
#, no-c-format
msgid "For example, the following adds a two-hour event starting from the current time. The standard Java <classname>GregorianCalendar</classname> provides various ways to manipulate date and time."
msgstr ""

#. Tag: programlisting
#: chapter-calendar.xml:305
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[// Add a short event\n"
      "GregorianCalendar start = new GregorianCalendar();\n"
      "GregorianCalendar end   = new GregorianCalendar();\n"
      "end.add(java.util.Calendar.HOUR, 2);\n"
      "calendar.addEvent(new BasicEvent(\"Calendar study\",\n"
      "        \"Learning how to use Vaadin Calendar\",\n"
      "        start.getTime(), end.getTime()));]]>"
msgstr ""

#. Tag: para
#: chapter-calendar.xml:307
#, no-c-format
msgid "Calendar uses by default a <classname>BasicEventProvider</classname>, which keeps the events in memory in an internal reprensetation."
msgstr ""

#. Tag: para
#: chapter-calendar.xml:312
#, no-c-format
msgid "This adds a new event that lasts for 3 hours. As the BasicEventProvider and BasicEvent implement some optional event interfaces provided by the calendar package, there is no need to refresh the calendar. Just create events, set their properties and add them to the Event Provider."
msgstr ""

#. Tag: title
#: chapter-calendar.xml:321
#, no-c-format
msgid "Getting Events from a Container"
msgstr ""

#. Tag: para
#: chapter-calendar.xml:323
#, no-c-format
msgid "You can use any Vaadin <interfacename>Container</interfacename> that implements the <interfacename>Indexed</interfacename> interface as the data source for calendar events. The <classname>Calendar</classname> will listen to change events from the container as well as write changes to the container. You can attach a container to a <classname>Calendar</classname> with <methodname>setContainerDataSource()</methodname>."
msgstr ""

#. Tag: para
#: chapter-calendar.xml:332
#, no-c-format
msgid "In the following example, we bind a <classname>BeanItemContainer</classname> that contains built-in <classname>BasicEvent</classname> events to a calendar."
msgstr ""

#. Tag: programlisting
#: chapter-calendar.xml:339
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[// Create the calendar\n"
      "Calendar calendar = new Calendar(\"Bound Calendar\");\n"
      "\n"
      "// Use a container of built-in BasicEvents\n"
      "final BeanItemContainer<BasicEvent> container =\n"
      "    new BeanItemContainer<BasicEvent>(BasicEvent.class);        \n"
      "\n"
      "// Create a meeting in the container\n"
      "container.addBean(new BasicEvent(\"The Event\", \"Single Event\",\n"
      "            new GregorianCalendar(2012,1,14,12,00).getTime(),\n"
      "            new GregorianCalendar(2012,1,14,14,00).getTime()));\n"
      "\n"
      "// The container must be ordered by the start time. You\n"
      "// have to sort the BIC every time after you have added\n"
      "// or modified events.\n"
      "container.sort(new Object[]{\"start\"}, new boolean[]{true});\n"
      "\n"
      "calendar.setContainerDataSource(container, \"caption\",\n"
      "    \"description\", \"start\", \"end\", \"styleName\");]]>"
msgstr ""

#. Tag: para
#: chapter-calendar.xml:341
#, no-c-format
msgid "The container must either use the default property IDs for event data, as defined in the <interfacename>CalendarEvent</interfacename> interface, or provide them as parameters for the <methodname>setContainerDataSource()</methodname> method, as we did in the example above."
msgstr ""

#. Tag: title
#: chapter-calendar.xml:350
#, no-c-format
msgid "Keeping the Container Ordered"
msgstr ""

#. Tag: para
#: chapter-calendar.xml:352
#, no-c-format
msgid "The events in the container <emphasis>must</emphasis> be kept ordered by their start date/time. Failing to do so may and will result in the events not showing in the calendar properly."
msgstr ""

#. Tag: para
#: chapter-calendar.xml:358
#, no-c-format
msgid "Ordering depends on the container. With some containers, such as <classname>BeanItemContainer</classname>, you have to sort the container explicitly every time after you have added or modified events, usually with the <methodname>sort()</methodname> method, as we did in the example above. Some container, such as <classname>JPAContainer</classname>, keep the in container automatically order if you provide a sorting rule."
msgstr ""

#. Tag: para
#: chapter-calendar.xml:368
#, no-c-format
msgid "For example, you could order a <classname>JPAContainer</classname> by the following rule, assuming that the start date/time is held in the <literal>startDate</literal> property:"
msgstr ""

#. Tag: programlisting
#: chapter-calendar.xml:375
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[// The container must be ordered by start date. For JPAContainer\n"
      "// we can just set up sorting once and it will stay ordered.\n"
      "container.sort(new String[]{\"startDate\"}, new boolean[]{true});]]>"
msgstr ""

#. Tag: title
#: chapter-calendar.xml:380
#, no-c-format
msgid "Delegation of Event Management"
msgstr ""

#. Tag: para
#: chapter-calendar.xml:382
#, no-c-format
msgid "Setting a container as the calendar data source with <methodname>setContainerDataSource()</methodname> automatically switches to <classname>ContainerEventProvider</classname>. You can manipulate the event data through the API in <classname>Calendar</classname> and the user can move and resize event through the user interface. The event provider delegates all such calendar operations to the container."
msgstr ""

#. Tag: para
#: chapter-calendar.xml:391
#, no-c-format
msgid "If you add events through the <classname>Calendar</classname> API, notice that you may be unable to create events of the type held in the container or adding them requires some container-specific operations. In such case, you may need to customize the <methodname>addEvent()</methodname> method."
msgstr ""

#. Tag: para
#: chapter-calendar.xml:399
#, no-c-format
msgid "For example, <classname>JPAContainer</classname> requires adding new items with <methodname>addEntity()</methodname>. You could first add the entity to the container or entity manager directly and then pass it to the <methodname>addEvent()</methodname>. That does not, however, work if the entity class does not implement <interfacename>CalendarEvent</interfacename>. This is actually the case always if the property names differ from the ones defined in the interface. You could handle creating the underlying entity objects in the <methodname>addEvent()</methodname> as follows:"
msgstr ""

#. Tag: programlisting
#: chapter-calendar.xml:411
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[// Create a JPAContainer\n"
      "final JPAContainer<MyCalendarEvent> container =\n"
      "    JPAContainerFactory.make(MyCalendarEvent.class,\n"
      "                             \"book-examples\");\n"
      "\n"
      "// Customize the event provider for adding events\n"
      "// as entities\n"
      "ContainerEventProvider cep =\n"
      "        new ContainerEventProvider(container) {\n"
      "    @Override\n"
      "    public void addEvent(CalendarEvent event) {\n"
      "        MyCalendarEvent entity = new MyCalendarEvent(\n"
      "            event.getCaption(), event.getDescription(),\n"
      "            event.getStart(), event.getEnd(),\n"
      "            event.getStyleName());\n"
      "        container.addEntity(entity);\n"
      "    }\n"
      "}\n"
      "\n"
      "// Set the container as the data source\n"
      "calendar.setEventProvider(cep);\n"
      "        \n"
      "// Now we can add events to the database through the calendar\n"
      "BasicEvent event = new BasicEvent(\"The Event\", \"Single Event\",\n"
      "    new GregorianCalendar(2012,1,15,12,00).getTime(),\n"
      "    new GregorianCalendar(2012,1,15,14,00).getTime());\n"
      "calendar.addEvent(event);]]>"
msgstr ""

#. Tag: title
#: chapter-calendar.xml:417
#, no-c-format
msgid "Implementing an Event Provider"
msgstr ""

#. Tag: para
#: chapter-calendar.xml:419
#, no-c-format
msgid "If the two simple ways of storing and managing events for a calendar are not enough, you may need to implement a custom event provider. It is the most flexible way of providing events. You need to attach the event provider to the <classname>Calendar</classname> using the <methodname>setEventProvider()</methodname> method."
msgstr ""

#. Tag: para
#: chapter-calendar.xml:427
#, no-c-format
msgid "Event queries are done by asking the event provider for all the events between two given dates. The range of these dates is guaranteed to be at least as long as the start and end dates set for the component. The component can, however, ask for a longer range to ensure correct rendering. In particular, all start dates are expanded to the start of the day, and all end dates are expanded to the end of the day."
msgstr ""

#. Tag: title
#: chapter-calendar.xml:437
#, no-c-format
msgid "Custom Events"
msgstr ""

#. Tag: para
#: chapter-calendar.xml:439
#, no-c-format
msgid "An event provider could use the built-in <classname>BasicEvent</classname>, but it is usually more proper to define a custom event type that is bound directly to the data source. Custom events may be useful for some other purposes as well, such as when you need to add extra information to an event or customize how it is acquired."
msgstr ""

#. Tag: para
#: chapter-calendar.xml:447
#, no-c-format
msgid "Custom events must implement the <interfacename>CalendarEvent</interfacename> interface or extend an existing event class. The built-in <classname>BasicEvent</classname> class should serve as a good example of implementing simple events. It keeps the data in member variables."
msgstr ""

#. Tag: programlisting
#: chapter-calendar.xml:454
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[public class BasicEvent\n"
      "       implements CalendarEventEditor, EventChangeNotifier {\n"
      "   ...\n"
      "\n"
      "   public String getCaption() {\n"
      "        return caption;\n"
      "    }\n"
      "\n"
      "    public String getDescription() {\n"
      "        return description;\n"
      "    }\n"
      "\n"
      "    public Date getEnd() {\n"
      "        return end;\n"
      "    }\n"
      "\n"
      "    public Date getStart() {\n"
      "        return start;\n"
      "    }\n"
      "\n"
      "    public String getStyleName() {\n"
      "        return styleName;\n"
      "    }\n"
      "\n"
      "    public boolean isAllDay() {\n"
      "        return isAllDay;\n"
      "    }\n"
      "\n"
      "    public void setCaption(String caption) {\n"
      "        this.caption = caption;\n"
      "        fireEventChange();\n"
      "    }\n"
      "\n"
      "    public void setDescription(String description) {\n"
      "        this.description = description;\n"
      "        fireEventChange();\n"
      "    }\n"
      "\n"
      "    public void setEnd(Date end) {\n"
      "        this.end = end;\n"
      "        fireEventChange();\n"
      "    }\n"
      "\n"
      "    public void setStart(Date start) {\n"
      "        this.start = start;\n"
      "        fireEventChange();\n"
      "    }\n"
      "\n"
      "    public void setStyleName(String styleName) {\n"
      "        this.styleName = styleName;\n"
      "        fireEventChange();\n"
      "    }\n"
      "\n"
      "    public void setAllDay(boolean isAllDay) {\n"
      "        this.isAllDay = isAllDay;\n"
      "        fireEventChange();\n"
      "    }\n"
      "\n"
      "    public void addListener(EventChangeListener listener) {\n"
      "        ...\n"
      "    }\n"
      "    \n"
      "    public void removeListener(EventChangeListener listener) {\n"
      "        ...\n"
      "    }\n"
      "\n"
      "    protected void fireEventChange() {...}\n"
      "}]]>"
msgstr ""

#. Tag: para
#: chapter-calendar.xml:456
#, no-c-format
msgid "You may have noticed that there was some additional code in the <classname>BasicEvent</classname> that was not in the <interfacename>CalendarEvent</interfacename> interface. Namely <classname>BasicEvent</classname> also implements two additional interfaces:"
msgstr ""

#. Tag: interfacename
#: chapter-calendar.xml:466
#, no-c-format
msgid "CalendarEditor"
msgstr ""

#. Tag: para
#: chapter-calendar.xml:468
#, no-c-format
msgid "This interface defines setters for all the fields, and is required for some of the default handlers to work."
msgstr ""

#. Tag: interfacename
#: chapter-calendar.xml:475
#, no-c-format
msgid "EventChangeNotifier"
msgstr ""

#. Tag: para
#: chapter-calendar.xml:477
#, no-c-format
msgid "This interface adds the possibility to listen for changes in the event, and enables the <classname>Calendar</classname> to render the changes immediately."
msgstr ""

#. Tag: para
#: chapter-calendar.xml:486
#, no-c-format
msgid "The start time and end time are mandatory, but caption, description, and style name are not. The style name is used as a part of the CSS class name for the HTML DOM element of the event."
msgstr ""

#. Tag: para
#: chapter-calendar.xml:492
#, no-c-format
msgid "In addition to the basic event interfaces, you can enhance the functionality of your event and event provider classes by using the <classname>EventChange</classname> and <classname>EventSetChange</classname> events. They let the <classname>Calendar</classname> component to know about changes in events and update itself accordingly. The <classname>BasicEvent</classname> and <classname>BasicEventProvider</classname> examples given earlier include a simple implementation of these interfaces."
msgstr ""

#. Tag: title
#: chapter-calendar.xml:505
#, no-c-format
msgid "Implementing the Event Provider"
msgstr ""

#. Tag: para
#: chapter-calendar.xml:507
#, no-c-format
msgid "An event provider needs to implement the <interfacename>CalendarEventProvider</interfacename> interface. It has only one method to be implemented. Whenever the calendar is painted, <methodname>getEvents(Date, Date)</methodname> method is called and it must return a list of events between the given start and end time."
msgstr ""

#. Tag: para
#: chapter-calendar.xml:515
#, no-c-format
msgid "The following example implementation returns only one example event. The event starts from the current time and is five hours long."
msgstr ""

#. Tag: programlisting
#: chapter-calendar.xml:520
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[public class MyEventProvider implements CalendarEventProvider{\n"
      "    public List<Event> getEvents(Date startDate, Date endDate){\n"
      "        List<Event> events = new ArrayList<Event>();\n"
      "        GregorianCalendar cal = new GregorianCalendar();\n"
      "        cal.setTime(new Date());\n"
      "\n"
      "        Date start = cal.getTime();\n"
      "        cal.add(GregorianCalendar.HOUR, 5);\n"
      "        Date end = cal.getTime();\n"
      "        BasicEvent event = new BasicEvent();\n"
      "        event.setCaption(\"My Event\");\n"
      "        event.setDescription(\"My Event Description\");\n"
      "        event.setStart(start);\n"
      "        event.setEnd(end);\n"
      "        events.add(event);\n"
      "\n"
      "        return events;\n"
      "    }\n"
      "}]]>"
msgstr ""

#. Tag: para
#: chapter-calendar.xml:522
#, no-c-format
msgid "It is important to notice that the <classname>Calendar</classname> may query for dates beyond the range defined by start date and end date. Particularly, it may expand the date range to make sure the user interface is rendered correctly."
msgstr ""

#. Tag: title
#: chapter-calendar.xml:532
#, no-c-format
msgid "Configuring the Appearance"
msgstr ""

#. Tag: para
#: chapter-calendar.xml:534
#, no-c-format
msgid "Configuring the appearance of the Vaadin Calendar component is one of the basic tasks. At the least, you need to consider its sizing in your user interface. You also quite probably want to use some color or colors for events."
msgstr ""

#. Tag: title
#: chapter-calendar.xml:542
#, no-c-format
msgid "Sizing"
msgstr ""

#. Tag: para
#: chapter-calendar.xml:544
#, no-c-format
msgid "The Vaadin Calendar supports the dynamic size system of Vaadin, with both defined and undefined sizes. When using defined sizes, the Calendar calculates the correct height for the cells so that it fits to the size given."
msgstr ""

#. Tag: para
#: chapter-calendar.xml:551
#, no-c-format
msgid "When using an undefined size for the calendar, all the sizes come from CSS. In addition, when the height is undefined, a scrollbar is displayed in the weekly view to better fit the cells to the user interface. See <xref linkend=\"calendar.appearance.styling.undefined\"/> for information about customizing the undefined sizes."
msgstr ""

#. Tag: title
#: chapter-calendar.xml:561
#, no-c-format
msgid "Styling"
msgstr ""

#. Tag: para
#: chapter-calendar.xml:563
#, no-c-format
msgid "The Calendar has a default theme defined in the widget set. You may choose to overwrite the style names from the default theme file <filename>calendar.css</filename>. The file is located in a folder named <filename>public</filename> under the <filename>src</filename> folder in the JAR file. Vaadin will find the CSS from inside the JAR package."
msgstr ""

#. Tag: title
#: chapter-calendar.xml:572
#, no-c-format
msgid "Style for Undefined Size"
msgstr ""

#. Tag: para
#: chapter-calendar.xml:574
#, no-c-format
msgid "Usually, you do not need to overwrite any of the default styles, but a Calendar with undefined size is a exception. Below is a list of style names that define the size of a Calendar with undefined size (these are the defaults from <filename>calendar.css</filename>):"
msgstr ""

#. Tag: programlisting
#: chapter-calendar.xml:581
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[.v-calendar-month-sizedheight .v-calendar-month-day {\n"
      "        height: 100px;\n"
      "}\n"
      "\n"
      ".v-calendar-month-sizedwidth .v-calendar-month-day {\n"
      "        width: 100px;\n"
      "}\n"
      "\n"
      ".v-calendar-header-month-Hsized .v-calendar-header-day {\n"
      "        width: 101px;\n"
      "}\n"
      "\n"
      "/* for IE */\n"
      ".v-ie6 .v-calendar-header-month-Hsized .v-calendar-header-day {\n"
      "        width: 104px;\n"
      "}\n"
      "\n"
      "/* for others */\n"
      ".v-calendar-header-month-Hsized td:first-child {\n"
      "        padding-left: 21px;\n"
      "}\n"
      "\n"
      ".v-calendar-header-day-Hsized {\n"
      "        width: 200px;\n"
      "}\n"
      "\n"
      ".v-calendar-week-numbers-Vsized .v-calendar-week-number {\n"
      "        height: 100px;\n"
      "        line-height: 100px;\n"
      "}\n"
      "\n"
      ".v-calendar-week-wrapper-Vsized {\n"
      "        height: 400px;\n"
      "        overflow-x: hidden !important;\n"
      "}\n"
      "\n"
      ".v-calendar-times-Vsized .v-calendar-time {\n"
      "        height: 38px;\n"
      "}\n"
      "\n"
      ".v-calendar-times-Hsized .v-calendar-time {\n"
      "        width: 42px;\n"
      "}\n"
      "\n"
      ".v-calendar-day-times-Vsized .v-slot,.v-calendar-day-times-Vsized .v-slot-even {\n"
      "        height: 18px;\n"
      "}\n"
      "\n"
      ".v-calendar-day-times-Hsized, .v-calendar-day-times-Hsized .v-slot,.v-calendar-day-times-Hsized .v-slot-even {\n"
      "        width: 200px;\n"
      "}]]>"
msgstr ""

#. Tag: title
#: chapter-calendar.xml:585
#, no-c-format
msgid "Event Style"
msgstr ""

#. Tag: para
#: chapter-calendar.xml:587
#, no-c-format
msgid "Events can be styled with CSS by setting them a <emphasis>style name suffix</emphasis>. The suffix is retrieved with the <methodname>getStyleName()</methodname> method in <interfacename>CalendarEvent</interfacename>. If you use <classname>BasicEvent</classname> events, you can set the suffix with <methodname>setStyleName()</methodname>."
msgstr ""

#. Tag: programlisting
#: chapter-calendar.xml:596
#, no-c-format
msgid ""
      "<?pocket-size 75% ?><![CDATA[BasicEvent event = new BasicEvent(\"Wednesday Wonder\", ... );\n"
      "event.setStyleName(\"mycolor\");\n"
      "calendar.addEvent(event);]]>"
msgstr ""

#. Tag: para
#: chapter-calendar.xml:598
#, no-c-format
msgid "Suffix <literal>mycolor</literal> would create <literal>v-calendar-event-mycolor</literal> class for regular events and <literal>v-calendar-event-mycolor-add-day</literal> for all-day events. You could style the events with the following rules:"
msgstr ""

#. Tag: programlisting
#: chapter-calendar.xml:605
#, no-c-format
msgid ""
      "<?pocket-size 65% ?>.v-calendar .v-calendar-event-mycolor {}\n"
      ".v-calendar .v-calendar-event-mycolor-all-day {}\n"
      ".v-calendar .v-calendar-event-mycolor .v-calendar-event-caption {}\n"
      ".v-calendar .v-calendar-event-mycolor .v-calendar-event-content {}"
msgstr ""

#. Tag: title
#: chapter-calendar.xml:611
#, no-c-format
msgid "Visible Hours and Days"
msgstr ""

#. Tag: para
#: chapter-calendar.xml:613
#, no-c-format
msgid "As we saw in <xref linkend=\"calendar.using.daterange\"/>, you can set the range of dates that are shown by the Calendar. But what if you wanted to show the entire month but hide the weekends? Or show only hours from 8 to 16 in the weekly view? The <methodname>setVisibleDays()</methodname> and <methodname>setVisibleHours()</methodname> methods allow you to do that."
msgstr ""

#. Tag: programlisting
#: chapter-calendar.xml:621
#, no-c-format
msgid ""
      "<?pocket-size 75% ?>calendar.setVisibleDays(1,5);   // Monday to Friday\n"
      "calendar.setVisibleHours(0,15); // Midnight until 4 pm"
msgstr ""

#. Tag: para
#: chapter-calendar.xml:623
#, no-c-format
msgid "After the above settings, only weekdays from Monday to Friday would be shown. And when the calendar is in the weekly view, only the time range from 00:00 to 16:00 would be shown."
msgstr ""

#. Tag: para
#: chapter-calendar.xml:629
#, no-c-format
msgid "Note that the excluded times are never shown so you should take care when setting the date range. If the date range contains only dates / times that are excluded, nothing will be displayed. Also note that even if a date is not rendered because these settings, the event provider may still be queried for events for that date."
msgstr ""

#. Tag: title
#: chapter-calendar.xml:640
#, no-c-format
msgid "Drag and Drop"
msgstr ""

#. Tag: para
#: chapter-calendar.xml:642
#, no-c-format
msgid "Vaadin Calendar can act as a drop target for drag and drop, described in <xref linkend=\"advanced.dragndrop\"/>. With the functionality, the user could drag events, for example, from a table to a calendar."
msgstr ""

#. Tag: para
#: chapter-calendar.xml:648
#, no-c-format
msgid "To support dropping, a <classname>Calendar</classname> must have a drop handler. When the drop handler is set, the days in the monthly view and the time slots in the weekly view can receive drops. Other locations, such as day names in the weekly view, can not currently receive drops."
msgstr ""

#. Tag: para
#: chapter-calendar.xml:655
#, no-c-format
msgid "Calendar uses its own implementation of <interfacename>TargetDetails</interfacename>: <classname>CalendarTargetdetails</classname>. It holds information about the the drop location, which in the context of <classname>Calendar</classname> means the date and time. The drop target location can be retrieved via the <methodname>getDropTime()</methodname> method. If the drop is done in the monthly view, the returned date does not have exact time information. If the drop happened in the weekly view, the returned date also contains the start time of the slot."
msgstr ""

#. Tag: para
#: chapter-calendar.xml:667
#, no-c-format
msgid "Below is a short example of creating a drop handler and using the drop information to create a new event:"
msgstr ""

#. Tag: programlisting
#: chapter-calendar.xml:672
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[private Calendar createDDCalendar() {\n"
      "  Calendar calendar = new Calendar();\n"
      "  calendar.setDropHandler(new DropHandler() {\n"
      "    public void drop(DragAndDropEvent event) {\n"
      "      CalendarTargetDetails details = \n"
      "              (CalendarTargetDetails) event.getTargetDetails();\n"
      "      \n"
      "      TableTransferable transferable = \n"
      "              (TableTransferable) event.getTransferable();\n"
      "\n"
      "      createEvent(details, transferable);\n"
      "      removeTableRow(transferable);\n"
      "    }\n"
      "\n"
      "    public AcceptCriterion getAcceptCriterion() {\n"
      "      return AcceptAll.get();\n"
      "    }\n"
      "\n"
      "  });\n"
      "\n"
      "  return calendar;\n"
      "}\n"
      "\n"
      "\n"
      "protected void createEvent(CalendarTargetDetails details,\n"
      "  TableTransferable transferable) {\n"
      "  Date dropTime = details.getDropTime();\n"
      "  java.util.Calendar timeCalendar = details.getTargetCalendar()\n"
      "                                    .getInternalCalendar();\n"
      "  timeCalendar.setTime(dropTime);\n"
      "  timeCalendar.add(java.util.Calendar.MINUTE, 120);\n"
      "  Date endTime = timeCalendar.getTime();\n"
      "\n"
      "  Item draggedItem = transferable.getSourceComponent().\n"
      "                            getItem(transferable.getItemId());\n"
      "\n"
      "  String eventType = (String)draggedItem.\n"
      "                            getItemProperty(\"type\").getValue();\n"
      "\n"
      "  String eventDescription = \"Attending: \"\n"
      "             + getParticipantString(\n"
      "                 (String[]) draggedItem.\n"
      "                   getItemProperty(\"participants\").getValue());\n"
      "\n"
      "  BasicEvent newEvent = new BasicEvent();\n"
      "  newEvent.setAllDay(!details.hasDropTime());\n"
      "  newEvent.setCaption(eventType);\n"
      "  newEvent.setDescription(eventDescription);\n"
      "  newEvent.setStart(dropTime);\n"
      "  newEvent.setEnd(endTime);\n"
      "\n"
      "  BasicEventProvider ep = (BasicEventProvider) details\n"
      "                       .getTargetCalendar().getEventProvider();\n"
      "  ep.addEvent(newEvent);\n"
      "}]]>"
msgstr ""

#. Tag: title
#: chapter-calendar.xml:676
#, no-c-format
msgid "Using the Context Menu"
msgstr ""

#. Tag: para
#: chapter-calendar.xml:678
#, no-c-format
msgid "Vaadin Calendar allows the use of context menu (mouse right-click) to manage events. As in other context menus in Vaadin, the menu items are handled in Vaadin as <emphasis>actions</emphasis> by an <emphasis>action handler</emphasis>. To enable a context menu, you have to implement a Vaadin <interfacename>Action.Handler</interfacename> and add it to the calendar with <methodname>addActionHandler()</methodname>."
msgstr ""

#. Tag: para
#: chapter-calendar.xml:687
#, no-c-format
msgid "An action handler must implement two methods: <methodname>getActions()</methodname> and <methodname>handleAction()</methodname>. The <methodname>getActions()</methodname> is called for each day displayed in the calendar view. It should return a list of allowed actions for that day, that is, the items of the context menu. The <parameter>target</parameter> parameter is the context of the click - a <classname>CalendarDateRange</classname> that spans over the day. The <parameter>sender</parameter> is the <classname>Calendar</classname> object."
msgstr ""

#. Tag: para
#: chapter-calendar.xml:699
#, no-c-format
msgid "The <methodname>handleActions()</methodname> receives the target context in the <parameter>target</parameter>. If the context menu was opened on an event, the target is the <interfacename>Event</interfacename> object, otherwise it is a <classname>CalendarDateRange</classname>."
msgstr ""

#. Tag: title
#: chapter-calendar.xml:708
#, no-c-format
msgid "Localization and Formatting"
msgstr ""

#. Tag: title
#: chapter-calendar.xml:711
#, no-c-format
msgid "Setting the Locale and Time Zone"
msgstr ""

#. Tag: para
#: chapter-calendar.xml:713
#, no-c-format
msgid "Month and weekday names are shown in the language of the locale setting of the <classname>Calendar</classname>. The translations are acquired from the standard Java locale data. By default, <classname>Calendar</classname> uses the system default locale for its internal calendar, but you can change it with <methodname>setLocale(Locale locale)</methodname>. Setting the locale will update also other location specific date and time settings, such as the first day of the week, time zone, and time format. However, time zone and time format can be overridden by settings in the <classname>Calendar</classname>."
msgstr ""

#. Tag: para
#: chapter-calendar.xml:725
#, no-c-format
msgid "For example, the following would set the language to US English:"
msgstr ""

#. Tag: programlisting
#: chapter-calendar.xml:729
#, no-c-format
msgid "<![CDATA[cal.setLocale(Locale.US);]]>"
msgstr ""

#. Tag: para
#: chapter-calendar.xml:731
#, no-c-format
msgid "The locale defines the default time zone. You can change it with the <methodname>setTimeZone()</methodname> method, which takes a <classname>java.util.TimeZone</classname> object as its parameter. Setting timezone to null will reset timezone to the locale default."
msgstr ""

#. Tag: para
#: chapter-calendar.xml:738
#, no-c-format
msgid "For example, the following would set the Finnish time zone, which is EET"
msgstr ""

#. Tag: programlisting
#: chapter-calendar.xml:742
#, no-c-format
msgid "<![CDATA[cal.setTimeZone(TimeZone.getTimeZone(\"Europe/Helsinki\"));]]>"
msgstr ""

#. Tag: title
#: chapter-calendar.xml:747
#, no-c-format
msgid "Time and Date Caption Format"
msgstr ""

#. Tag: para
#: chapter-calendar.xml:749
#, no-c-format
msgid "The time may be shown either in 24 or 12 hour format. The default format is defined by the locale, but you can change it with the <methodname>setTimeFormat()</methodname> method. Giving a <literal>null</literal> setting will reset the time format to the locale default."
msgstr ""

#. Tag: programlisting
#: chapter-calendar.xml:757
#, no-c-format
msgid "<![CDATA[cal.setTimeFormat(TimeFormat.Format12H);]]>"
msgstr ""

#. Tag: para
#: chapter-calendar.xml:759
#, no-c-format
msgid "You can change the format of the date captions in the week view with the <methodname>setWeeklyCaptionFormat(String dateFormatPattern)</methodname> method. The date format pattern should follow the format of the standard Java <classname>java.text.SimpleDateFormat</classname> class."
msgstr ""

#. Tag: para
#: chapter-calendar.xml:766
#, no-c-format
msgid "For example:"
msgstr ""

#. Tag: programlisting
#: chapter-calendar.xml:770
#, no-c-format
msgid "<![CDATA[cal.setWeeklyCaptionFormat(\"dd-MM-yyyy\");]]>"
msgstr ""

#. Tag: title
#: chapter-calendar.xml:775
#, no-c-format
msgid "Customizing the Calendar"
msgstr ""

#. Tag: para
#: chapter-calendar.xml:777
#, no-c-format
msgid "In this section, we give a tutorial for how to make various basic customizations of the Vaadin Calendar. The event provider and styling was described earlier, so now we concentrate on other features of the Calendar API."
msgstr ""

#. Tag: para
#: chapter-calendar.xml:784
#, no-c-format
msgid "We use example code to demonstrate the customizations. You can find the source code of the example application on-line with the name <filename>CustomizedCalendarDemo</filename> at <uri>http://dev.vaadin.com/svn/addons/Calendar</uri>. Some of the less important code for this document has been left out to make the code more readable and shorter."
msgstr ""

#. Tag: title
#: chapter-calendar.xml:794
#, no-c-format
msgid "Overview of Handlers"
msgstr ""

#. Tag: para
#: chapter-calendar.xml:796
#, no-c-format
msgid "Most of the handlers related to calendar events have sensible default handlers. These are found in the <package>com.vaadin.ui.handler</package> package. The default handlers and their functionalities are described below."
msgstr ""

#. Tag: listitem
#: chapter-calendar.xml:804
#, no-c-format
msgid "<classname>BasicBackwardHandler</classname>. Handles clicking the back-button of the weekly view so that the viewed month is changed to the previous one."
msgstr ""

#. Tag: listitem
#: chapter-calendar.xml:810
#, no-c-format
msgid "<classname>BasicForwardHandler</classname>. Handles clicking the forward-button of the weekly view so that the viewed month is changed to the next one."
msgstr ""

#. Tag: listitem
#: chapter-calendar.xml:816
#, no-c-format
msgid "<classname>BasicWeekClickHandler</classname>. Handles clicking the week numbers int the monthly view so that the viewable date range is changed to the clicked week."
msgstr ""

#. Tag: listitem
#: chapter-calendar.xml:822
#, no-c-format
msgid "<classname>BasicDateClickHandler</classname>. Handles clicking the dates on both the monthly view and the weekly view. Changes the viewable date range so that only the clicked day is visible."
msgstr ""

#. Tag: listitem
#: chapter-calendar.xml:828
#, no-c-format
msgid "<classname>BasicEventMoveHandler</classname>. Handles moving the events in both monthly view and the weekly view. Events can be moved and their start and end dates are changed correctly, but only if the event implements <classname>CalendarEventEditor</classname> (implemented by <classname>BasicEvent</classname>)."
msgstr ""

#. Tag: listitem
#: chapter-calendar.xml:836
#, no-c-format
msgid "<classname>BasicEventResizeHandler</classname>. Handles resizing the events in the weekly view. Events can be resized and their start and end dates are changed correctly, but only if the event implements <classname>CalendarEventEditor</classname> (implemented by the <classname>BasicEvent</classname>)."
msgstr ""

#. Tag: para
#: chapter-calendar.xml:845
#, no-c-format
msgid "All of these handlers are automatically set when creating a new <classname>Calendar</classname>. If you wish to disable some of the default functionality, you can simply set the corresponding handler to <literal>null</literal>. This will prevent the functionality from ever appearing on the user interface. For example, if you set the <classname>EventMoveHandler</classname> to <literal>null</literal>, the user will be unable to move events in the browser."
msgstr ""

#. Tag: title
#: chapter-calendar.xml:857
#, no-c-format
msgid "Creating a Calendar"
msgstr ""

#. Tag: para
#: chapter-calendar.xml:859
#, no-c-format
msgid "Let us first create a new <classname>Calendar</classname> instance. Here we use our own event provider, the <classname>MyEventProvider</classname> described in <xref linkend=\"calendar.eventprovider.eventprovider\"/>."
msgstr ""

#. Tag: programlisting
#: chapter-calendar.xml:865
#, no-c-format
msgid "<![CDATA[Calendar cal = new Calendar(new MyEventProvider());]]>"
msgstr ""

#. Tag: para
#: chapter-calendar.xml:867
#, no-c-format
msgid "This initializes the Calendar. To customize the viewable date range, we must set a start and end date to it."
msgstr ""

#. Tag: para
#: chapter-calendar.xml:872
#, no-c-format
msgid "There is only one visible event in the timeline, starting from the current time. That is what our event provider passes to the client."
msgstr ""

#. Tag: para
#: chapter-calendar.xml:880
#, no-c-format
msgid "It would be nice to also be able to control the navigation forward and backward. The default navigation is provided by the default handlers, but perhaps we want to restrict the users so they can only navigate dates in the current year. Maybe we also want to pose some other restrictions to the clicking week numbers and dates."
msgstr ""

#. Tag: para
#: chapter-calendar.xml:888
#, no-c-format
msgid "These restrictions and other custom logic can be defined with custom handlers. You can find the handlers in the <package>com.vaadin.addon.calendar.ui.handler</package> package and they can be easily extended. Note that if you don not want to extend the default handlers, you are free to implement your own. The interfaces are described in <interfacename>CalendarComponentEvents</interfacename>."
msgstr ""

#. Tag: title
#: chapter-calendar.xml:899
#, no-c-format
msgid "Backward and Forward Navigation"
msgstr ""

#. Tag: para
#: chapter-calendar.xml:901
#, no-c-format
msgid "Vaadin Calendar has only limited built-in navigation support. The weekly view has navigation buttons in the top left and top right corners."
msgstr ""

#. Tag: para
#: chapter-calendar.xml:908
#, no-c-format
msgid "You can handle backward and forward navigation with a <interfacename>BackwardListener</interfacename> and <interfacename>ForwardListener</interfacename>."
msgstr ""

#. Tag: programlisting
#: chapter-calendar.xml:914
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[cal.setHandler(new BasicBackwardHandler() {\n"
      "  protected void setDates(BackwardEvent event,\n"
      "                          Date start, Date end) {\n"
      "\n"
      "      java.util.Calendar calendar = event.getComponent()\n"
      "                                    .getInternalCalendar();\n"
      "      if (isThisYear(calendar, end) \n"
      "           && isThisYear(calendar, start)) {\n"
      "        super.setDates(event, start, end);\n"
      "      }\n"
      "  }});]]>"
msgstr ""

#. Tag: para
#: chapter-calendar.xml:916
#, no-c-format
msgid "The forward navigation handler can be implemented in the same way. The example handler restricts the dates to the current year."
msgstr ""

#. Tag: title
#: chapter-calendar.xml:923
#, no-c-format
msgid "Date Click Handling"
msgstr ""

#. Tag: para
#: chapter-calendar.xml:925
#, no-c-format
msgid "By default, clicking a date either in month or week view switches single-day view. The date click event is handled by a <interfacename>DateClickHandler</interfacename>."
msgstr ""

#. Tag: para
#: chapter-calendar.xml:931
#, no-c-format
msgid "The following example handles click events so that when the user clicks the date header in the weekly view, it will switch to single-day view, and in the single-day view switch back to the weekly view."
msgstr ""

#. Tag: programlisting
#: chapter-calendar.xml:937
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[cal.setHandler(new BasicDateClickHandler() {\n"
      "  public void dateClick(DateClickEvent event) {\n"
      "    Calendar cal = event.getComponent();\n"
      "    long currentCalDateRange = cal.getEndDate().getTime()\n"
      "                               - cal.getStartDate().getTime();\n"
      "    \n"
      "    if (currentCalDateRange < VCalendar.DAYINMILLIS) {\n"
      "      // Change the date range to the current week\n"
      "      cal.setStartDate(cal.getFirstDateForWeek(event.getDate()));\n"
      "      cal.setEndDate(cal.getLastDateForWeek(event.getDate()));\n"
      "\n"
      "    } else {\n"
      "      // Default behaviour, change date range to one day\n"
      "      super.dateClick(event);\n"
      "    }\n"
      "  }\n"
      "});]]>"
msgstr ""

#. Tag: title
#: chapter-calendar.xml:941
#, no-c-format
msgid "Handling Week Clicks"
msgstr ""

#. Tag: para
#: chapter-calendar.xml:943
#, no-c-format
msgid "The monthly view displays week numbers for each week row on the left side of the date grid. The week number are clickable and you can handle the click events by setting a <interfacename>WeekClickHandler</interfacename> for the <classname>Calendar</classname> object. The default handler changes the date range to be the clicked week."
msgstr ""

#. Tag: para
#: chapter-calendar.xml:951
#, no-c-format
msgid "In the following example, we add a week click handler that changes the date range of the calendar to one week only if the start and end dates of the week are in the current month."
msgstr ""

#. Tag: programlisting
#: chapter-calendar.xml:957
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[cal.setHandler(new BasicWeekClickHandler() {\n"
      "    protected void setDates(WeekClick event,\n"
      "                          Date start, Date end) {\n"
      "        java.util.Calendar calendar = event.getComponent()\n"
      "                                  .getInternalCalendar();\n"
      "        if (isThisMonth(calendar, start) \n"
      "            && isThisMonth(calendar,  end)) {\n"
      "            super.setDates(event, start, end);\n"
      "        }\n"
      "    }\n"
      "});]]>"
msgstr ""

#. Tag: title
#: chapter-calendar.xml:961
#, no-c-format
msgid "Handling Event Clicks"
msgstr ""

#. Tag: para
#: chapter-calendar.xml:963
#, no-c-format
msgid "The calendar events in all views are are clickable. There is no default handler. Just like the date and week click handlers, event click handling is enabled by setting an <interfacename>EventClickHandler</interfacename> for the <classname>Calendar</classname> object."
msgstr ""

#. Tag: para
#: chapter-calendar.xml:970
#, no-c-format
msgid "You can get hold of the clicked event by the <methodname>getCalendarEvent()</methodname> method in the <classname>EventClick</classname> object passed to the handler, as shown in the following example."
msgstr ""

#. Tag: programlisting
#: chapter-calendar.xml:977
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[cal.addListener(new EventClickListener() {\n"
      "    public void eventClick(EventClick event) {\n"
      "        BasicEvent e = (BasicEvent) event.getCalendarEvent();\n"
      "          getMainWindow().showNotification(\n"
      "                        \"Event clicked: \" + e.getCaption(),\n"
      "                        e.getDescription());\n"
      "    }\n"
      "});]]>"
msgstr ""

#. Tag: title
#: chapter-calendar.xml:981
#, no-c-format
msgid "Event Dragging"
msgstr ""

#. Tag: para
#: chapter-calendar.xml:983
#, no-c-format
msgid "The user can drag an event to change its position in time. The default handler sets the start and end time of the event accordingly. You can do many things with a custom move handler, such as restrict moving events."
msgstr ""

#. Tag: para
#: chapter-calendar.xml:989
#, no-c-format
msgid "In the following example, we add a <interfacename>EventMoveHandler</interfacename> to a <classname>Calendar</classname>. The event handler updates the new position to the datasource, but only if the new dates are in the current month. This requires making some changes to the event provider class."
msgstr ""

#. Tag: programlisting
#: chapter-calendar.xml:997
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[cal.setHandler(new BasicEventMoveHandler() {\n"
      "  private java.util.Calendar javaCalendar;\n"
      "\n"
      "  public void eventMove(MoveEvent event) {\n"
      "    javaCalendar = event.getComponent().getInternalCalendar();\n"
      "    super.eventMove(event);\n"
      "  }\n"
      "  \n"
      "  protected void setDates(CalendarEventEditor event,\n"
      "                          Date start, Date end) {\n"
      "    if (isThisMonth(javaCalendar, start)\n"
      "        && isThisMonth(javaCalendar, end)) {\n"
      "      super.setDates(event, start, end);\n"
      "    }\n"
      "  }\n"
      "});]]>"
msgstr ""

#. Tag: para
#: chapter-calendar.xml:999
#, no-c-format
msgid "For the above example to work, the example event provider presented earlier needs to be changed slightly so that it doesn't always create a new event when <methodname>getEvents()</methodname> is called."
msgstr ""

#. Tag: programlisting
#: chapter-calendar.xml:1005
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[public static class MyEventProvider\n"
      "              implements CalendarEventProvider {\n"
      "  private List<CalendarEvent> events =\n"
      "        new ArrayList<CalendarEvent>();\n"
      "\n"
      "  public MyEventProvider() {\n"
      "    events = new ArrayList<CalendarEvent>();\n"
      "    GregorianCalendar cal = new GregorianCalendar();\n"
      "    cal.setTime(new Date());\n"
      "\n"
      "    Date start = cal.getTime();\n"
      "    cal.add(GregorianCalendar.HOUR, 5);\n"
      "    Date end = cal.getTime();\n"
      "    BasicEvent event = new BasicEvent();\n"
      "    event.setCaption(\"My Event\");\n"
      "    event.setDescription(\"My Event Description\");\n"
      "    event.setStart(start);\n"
      "    event.setEnd(end);\n"
      "    events.add(event);\n"
      "  }\n"
      "\n"
      "  public void addEvent(CalendarEvent BasicEvent) {\n"
      "    events.add(BasicEvent);\n"
      "  }\n"
      "\n"
      "  public List<CalendarEvent> getEvents(Date startDate, \n"
      "                                       Date endDate) {\n"
      "    return events;\n"
      "  }\n"
      "}]]>"
msgstr ""

#. Tag: para
#: chapter-calendar.xml:1007
#, no-c-format
msgid "After these changes, the user can move events around as earlier, but dropping an event, the start and end dates are checked by the server. Note that as the server-side must move the event in order for it to render to the place it was dropped. The server can also reject moves by not doing anything when the event is received."
msgstr ""

#. Tag: title
#: chapter-calendar.xml:1017
#, no-c-format
msgid "Handling Drag Selection"
msgstr ""

#. Tag: para
#: chapter-calendar.xml:1019
#, no-c-format
msgid "Drag selection works both in the monthly and weekly views. To listen for drag selection, you can add a <interfacename>RangeSelectListener</interfacename> to the <classname>Calendar</classname>. There is no default handler for range select."
msgstr ""

#. Tag: para
#: chapter-calendar.xml:1027
#, no-c-format
msgid "In the code example below, we create an new event when any date range is selected. Drag selection opens a window where the user is asked for a caption for the new event. After confirming, the new event is be passed to the event provider and calendar is updated. Note that as our example event provider and event classes do not implement the event change interface, we must refresh the <classname>Calendar</classname> manually after changing the events."
msgstr ""

#. Tag: programlisting
#: chapter-calendar.xml:1037
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[cal.setHandler(new RangeSelectHandler() {\n"
      "  public void rangeSelect(RangeSelectEvent event) {\n"
      "    BasicEvent calendarEvent = new BasicEvent();\n"
      "    calendarEvent.setStart(event.getStart());\n"
      "    calendarEvent.setEnd(event.getEnd());\n"
      "\n"
      "    // Create popup window and add a form in it.\n"
      "    VerticalLayout layout = new VerticalLayout();\n"
      "    layout.setMargin(true);\n"
      "    layout.setSpacing(true);\n"
      "\n"
      "    final Window w = new Window(null, layout);\n"
      "    ...\n"
      "\n"
      "    // Wrap the calendar event to a BeanItem \n"
      "    // and pass it to the form\n"
      "    final BeanItem<CalendarEvent> item = \n"
      "                         new BeanItem<CalendarEvent>(myEvent);\n"
      "\n"
      "    final Form form = new Form();\n"
      "    form.setItemDataSource(item);\n"
      "    ...\n"
      "\n"
      "    layout.addComponent(form);\n"
      "\n"
      "    HorizontalLayout buttons = new HorizontalLayout();\n"
      "    buttons.setSpacing(true);\n"
      "    buttons.addComponent(new Button(\"OK\", new ClickListener() {\n"
      "\n"
      "        public void buttonClick(ClickEvent event) {\n"
      "            form.commit();\n"
      "            // Update event provider's data source\n"
      "            provider.addEvent(item.getBean());\n"
      "            // Calendar needs to be repainted\n"
      "            cal.requestRepaint();\n"
      "            getMainWindow().removeWindow(w);\n"
      "        }\n"
      "    }));\n"
      "\n"
      "    ...\n"
      "  }\n"
      "});]]>"
msgstr ""

#. Tag: title
#: chapter-calendar.xml:1041
#, no-c-format
msgid "Resizing Events"
msgstr ""

#. Tag: para
#: chapter-calendar.xml:1043
#, no-c-format
msgid "The user can resize an event by dragging from both ends to change its start or end time. This offers a convenient way to change event times without the need to type anything. The default resize handler sets the start and end time of the event according to the resize."
msgstr ""

#. Tag: para
#: chapter-calendar.xml:1050
#, no-c-format
msgid "In the example below, we set a custom handler for resize events. The handler prevents any event to be resized over 12 hours in length. Note that this does not prevent the user from resizing an event over 12 hours in the client. The resize will just be corrected by the server."
msgstr ""

#. Tag: programlisting
#: chapter-calendar.xml:1057
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[cal.setHandler(new BasicEventResizeHandler() {\n"
      "  private static final long twelveHoursInMs = 12*60*60*1000;\n"
      "\n"
      "  protected void setDates(CalendarEventEditor event, \n"
      "                          Date start, Date end) {\n"
      "    long eventLength = end.getTime() - start.getTime();\n"
      "    if (eventLength <= twelveHoursInMs) {\n"
      "      super.setDates(event, start, end);\n"
      "    }\n"
      "  }\n"
      "});]]>"
msgstr ""

