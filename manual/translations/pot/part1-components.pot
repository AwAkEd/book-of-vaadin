msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2009-09-07 14:42+0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. When image changes, this message will be marked fuzzy or untranslated for you.
#. It doesn't matter what you translate it to: it's not used at all.
#: part1-components.xml:27(None) 
msgid "@@image: 'img/components/component-diagram-lo.png'; md5=78278b5043d7b595a2eaa5a4de4ee001"
msgstr ""

#. When image changes, this message will be marked fuzzy or untranslated for you.
#. It doesn't matter what you translate it to: it's not used at all.
#: part1-components.xml:30(None) 
msgid "@@image: 'img/components/component-diagram-hi.png'; md5=c0683967e8a0b17d248f8d06cb504388"
msgstr ""

#. When image changes, this message will be marked fuzzy or untranslated for you.
#. It doesn't matter what you translate it to: it's not used at all.
#: part1-components.xml:118(None) 
msgid "@@image: 'img/components/component-abstractions-lo.png'; md5=82c253828f9fdd70d41bb6b0cee07ea5"
msgstr ""

#. When image changes, this message will be marked fuzzy or untranslated for you.
#. It doesn't matter what you translate it to: it's not used at all.
#: part1-components.xml:121(None) 
msgid "@@image: 'img/components/component-abstractions-hi.png'; md5=6b5260bf307d2335c1bac91a5fcf7c41"
msgstr ""

#. When image changes, this message will be marked fuzzy or untranslated for you.
#. It doesn't matter what you translate it to: it's not used at all.
#: part1-components.xml:370(None) 
msgid "@@image: 'img/components/field-diagram-lo.png'; md5=3febdda60497bd3e0fefd40cb822ff3e"
msgstr ""

#. When image changes, this message will be marked fuzzy or untranslated for you.
#. It doesn't matter what you translate it to: it's not used at all.
#: part1-components.xml:373(None) 
msgid "@@image: 'img/components/field-diagram-hi.png'; md5=9e0f622ffa3dedddf7f9fd0402eaa195"
msgstr ""

#. When image changes, this message will be marked fuzzy or untranslated for you.
#. It doesn't matter what you translate it to: it's not used at all.
#: part1-components.xml:413(None) 
msgid "@@image: 'img/components/field-interface-lo.png'; md5=594ab08db966cfbf8c1d15060a6bd6cf"
msgstr ""

#. When image changes, this message will be marked fuzzy or untranslated for you.
#. It doesn't matter what you translate it to: it's not used at all.
#: part1-components.xml:416(None) 
msgid "@@image: 'img/components/field-interface-hi.png'; md5=e09d50dbf2f4bff7b3f4d7fae307be63"
msgstr ""

#. When image changes, this message will be marked fuzzy or untranslated for you.
#. It doesn't matter what you translate it to: it's not used at all.
#: part1-components.xml:556(None) 
msgid "@@image: 'img/components/tooltip-plain-withpointer-lo.png'; md5=eeaffb4a5841c364eb74c6b6d3f5ae0a"
msgstr ""

#. When image changes, this message will be marked fuzzy or untranslated for you.
#. It doesn't matter what you translate it to: it's not used at all.
#: part1-components.xml:559(None) 
msgid "@@image: 'img/components/tooltip-plain-withpointer-hi.png'; md5=97312e08bfbab140a724443f66a10bee"
msgstr ""

#. When image changes, this message will be marked fuzzy or untranslated for you.
#. It doesn't matter what you translate it to: it's not used at all.
#: part1-components.xml:604(None) 
msgid "@@image: 'img/components/tooltip-richtext-withpointer-lo.png'; md5=bb185a7c382df85dd4ba4d611560acc4"
msgstr ""

#. When image changes, this message will be marked fuzzy or untranslated for you.
#. It doesn't matter what you translate it to: it's not used at all.
#: part1-components.xml:607(None) 
msgid "@@image: 'img/components/tooltip-richtext-withpointer-hi.png'; md5=9a3bc2e45b008d9a1ed2bd0ede7100c3"
msgstr ""

#. When image changes, this message will be marked fuzzy or untranslated for you.
#. It doesn't matter what you translate it to: it's not used at all.
#: part1-components.xml:881(None) part1-components.xml:884(None) 
msgid "@@image: 'img/components/label-example1.png'; md5=0c24a10083d17c3846890702314cda57"
msgstr ""

#. When image changes, this message will be marked fuzzy or untranslated for you.
#. It doesn't matter what you translate it to: it's not used at all.
#: part1-components.xml:1042(None) part1-components.xml:1045(None) 
msgid "@@image: 'img/components/label-modes.png'; md5=3ac80b0b8398b1517c911b9d0a8b23c0"
msgstr ""

#. When image changes, this message will be marked fuzzy or untranslated for you.
#. It doesn't matter what you translate it to: it's not used at all.
#: part1-components.xml:1076(None) 
msgid "@@image: 'img/components/label-withimage.png'; md5=4a4e77527b8a0c03e95424d6efe173a2"
msgstr ""

#. When image changes, this message will be marked fuzzy or untranslated for you.
#. It doesn't matter what you translate it to: it's not used at all.
#: part1-components.xml:1187(None) part1-components.xml:1190(None) 
msgid "@@image: 'img/components/textfield-example.png'; md5=9d066d7b0a1cbc62837e910acc3a43ca"
msgstr ""

#. When image changes, this message will be marked fuzzy or untranslated for you.
#. It doesn't matter what you translate it to: it's not used at all.
#: part1-components.xml:1236(None) part1-components.xml:1239(None) 
msgid "@@image: 'img/components/richtextarea-example1.png'; md5=a1b3a342eabf643c126f5e32acb07cc8"
msgstr ""

#. When image changes, this message will be marked fuzzy or untranslated for you.
#. It doesn't matter what you translate it to: it's not used at all.
#: part1-components.xml:1279(None) 
msgid "@@image: 'img/components/richtextarea-toolbar-whitebg.png'; md5=a153002e455d535e115a2390bee1ce95"
msgstr ""

#. When image changes, this message will be marked fuzzy or untranslated for you.
#. It doesn't matter what you translate it to: it's not used at all.
#: part1-components.xml:1284(None) 
msgid "@@image: 'img/components/richtextarea-toolbar-mod-whitebg.png'; md5=bd69700900e573d3f520ce587516a616"
msgstr ""

#. When image changes, this message will be marked fuzzy or untranslated for you.
#. It doesn't matter what you translate it to: it's not used at all.
#: part1-components.xml:1341(None) part1-components.xml:1344(None) 
msgid "@@image: 'img/components/datefield-example1.png'; md5=4c848010967d8cb4674af5ed3b15bb66"
msgstr ""

#. When image changes, this message will be marked fuzzy or untranslated for you.
#. It doesn't matter what you translate it to: it's not used at all.
#: part1-components.xml:1394(None) part1-components.xml:1397(None) 
msgid "@@image: 'img/components/datefield-example2.png'; md5=5acf256d4494c4299ff6428c6ab646b9"
msgstr ""

#. When image changes, this message will be marked fuzzy or untranslated for you.
#. It doesn't matter what you translate it to: it's not used at all.
#: part1-components.xml:1451(None) 
msgid "@@image: 'img/components/button-example1.png'; md5=8befcb9b908117bdf2782c1dbeb16c0e"
msgstr ""

#. When image changes, this message will be marked fuzzy or untranslated for you.
#. It doesn't matter what you translate it to: it's not used at all.
#: part1-components.xml:1532(None) 
msgid "@@image: 'img/components/checkbox-example1.png'; md5=32dfd1ac3f4f2c7b11ce040ca9173d06"
msgstr ""

#. When image changes, this message will be marked fuzzy or untranslated for you.
#. It doesn't matter what you translate it to: it's not used at all.
#: part1-components.xml:1676(None) 
msgid "@@image: 'img/components/select-selected1.png'; md5=a2c82fc2768e996fc9c5fe70769806e6"
msgstr ""

#. When image changes, this message will be marked fuzzy or untranslated for you.
#. It doesn't matter what you translate it to: it's not used at all.
#: part1-components.xml:1835(None) 
msgid "@@image: 'img/components/select-select.png'; md5=304d0f3a22110664c7ec3a4ce6f3e617"
msgstr ""

#. When image changes, this message will be marked fuzzy or untranslated for you.
#. It doesn't matter what you translate it to: it's not used at all.
#: part1-components.xml:1904(None) 
msgid "@@image: 'img/components/select-filter3.png'; md5=2a28e0cb1e3733efd402df33b11da78a"
msgstr ""

#. When image changes, this message will be marked fuzzy or untranslated for you.
#. It doesn't matter what you translate it to: it's not used at all.
#: part1-components.xml:2000(None) 
msgid "@@image: 'img/components/select-optiongroup.png'; md5=c3bca176804d51cdd69715be43565b5c"
msgstr ""

#. When image changes, this message will be marked fuzzy or untranslated for you.
#. It doesn't matter what you translate it to: it's not used at all.
#: part1-components.xml:2047(None) 
msgid "@@image: 'img/components/select-twincol.png'; md5=17a7ba8a2b324cc720cb4431461dcf40"
msgstr ""

#. When image changes, this message will be marked fuzzy or untranslated for you.
#. It doesn't matter what you translate it to: it's not used at all.
#: part1-components.xml:2093(None) 
msgid "@@image: 'img/components/select-addnewitems.png'; md5=a1d9089dd1279407ccdf2051947495af"
msgstr ""

#. When image changes, this message will be marked fuzzy or untranslated for you.
#. It doesn't matter what you translate it to: it's not used at all.
#: part1-components.xml:2302(None) 
msgid "@@image: 'img/components/table-example1.png'; md5=cf60b300fc177aa1ea24bec383afbb2b"
msgstr ""

#. When image changes, this message will be marked fuzzy or untranslated for you.
#. It doesn't matter what you translate it to: it's not used at all.
#: part1-components.xml:2362(None) 
msgid "@@image: 'img/components/table-example2.png'; md5=a38a87ad9b7a92a8bd8ed9ad01ad862b"
msgstr ""

#. When image changes, this message will be marked fuzzy or untranslated for you.
#. It doesn't matter what you translate it to: it's not used at all.
#: part1-components.xml:2518(None) part1-components.xml:2521(None) 
msgid "@@image: 'img/components/table-cellstylegenerator1.png'; md5=fcd82885f7a1627bd46b61a94c8876f9"
msgstr ""

#. When image changes, this message will be marked fuzzy or untranslated for you.
#. It doesn't matter what you translate it to: it's not used at all.
#: part1-components.xml:2672(None) 
msgid "@@image: 'img/components/table-components.png'; md5=af1765feba38fe7f9a15167b32196dca"
msgstr ""

#. When image changes, this message will be marked fuzzy or untranslated for you.
#. It doesn't matter what you translate it to: it's not used at all.
#: part1-components.xml:2744(None) part1-components.xml:2747(None) 
msgid "@@image: 'img/components/table-editable3.png'; md5=8e6616c86a824e82daa4aa60897e06ce"
msgstr ""

#. When image changes, this message will be marked fuzzy or untranslated for you.
#. It doesn't matter what you translate it to: it's not used at all.
#: part1-components.xml:3031(None) 
msgid "@@image: 'img/components/table-generatedcolumns1.png'; md5=a6b09fe5969686c78bdb8f2798f57a81"
msgstr ""

#. When image changes, this message will be marked fuzzy or untranslated for you.
#. It doesn't matter what you translate it to: it's not used at all.
#: part1-components.xml:3036(None) 
msgid "@@image: 'img/components/table-generatedcolumns2.png'; md5=34ee797e71ba518c2a455c434a42b3e9"
msgstr ""

#. When image changes, this message will be marked fuzzy or untranslated for you.
#. It doesn't matter what you translate it to: it's not used at all.
#: part1-components.xml:3126(None) part1-components.xml:3129(None) 
msgid "@@image: 'img/components/tree-example1.png'; md5=881ced69bbddacfcc501eed92b607eaa"
msgstr ""

#. When image changes, this message will be marked fuzzy or untranslated for you.
#. It doesn't matter what you translate it to: it's not used at all.
#: part1-components.xml:3234(None) part1-components.xml:3237(None) 
msgid "@@image: 'img/components/menubar-example1.png'; md5=2f856f9ab47f877183189357570982ab"
msgstr ""

#. When image changes, this message will be marked fuzzy or untranslated for you.
#. It doesn't matter what you translate it to: it's not used at all.
#: part1-components.xml:3284(None) part1-components.xml:3287(None) 
msgid "@@image: 'img/components/embedded-example1.png'; md5=2010d8bd1f7cbb8a4d34be78130d4a10"
msgstr ""

#. When image changes, this message will be marked fuzzy or untranslated for you.
#. It doesn't matter what you translate it to: it's not used at all.
#: part1-components.xml:3463(None) 
msgid "@@image: 'img/components/upload.png'; md5=037661d61c17f5734045368646de2bd0"
msgstr ""

#. When image changes, this message will be marked fuzzy or untranslated for you.
#. It doesn't matter what you translate it to: it's not used at all.
#: part1-components.xml:3615(None) 
msgid "@@image: 'img/components/upload-example.png'; md5=7f6c8d18d8ff737ca43dd64368df4e29"
msgstr ""

#. When image changes, this message will be marked fuzzy or untranslated for you.
#. It doesn't matter what you translate it to: it's not used at all.
#: part1-components.xml:3657(None) 
msgid "@@image: 'img/components/form-example3.png'; md5=c04af096b2980b97e162a569100e5403"
msgstr ""

#. When image changes, this message will be marked fuzzy or untranslated for you.
#. It doesn't matter what you translate it to: it's not used at all.
#: part1-components.xml:3879(None) 
msgid "@@image: 'img/components/form-example1.png'; md5=b3cd36bd0afa39b8581ced954b682e8d"
msgstr ""

#. When image changes, this message will be marked fuzzy or untranslated for you.
#. It doesn't matter what you translate it to: it's not used at all.
#: part1-components.xml:3982(None) 
msgid "@@image: 'img/components/form-example2.png'; md5=d1e400bb1ba384e7d65e2b071cbc2d12"
msgstr ""

#. When image changes, this message will be marked fuzzy or untranslated for you.
#. It doesn't matter what you translate it to: it's not used at all.
#: part1-components.xml:4074(None) 
msgid "@@image: 'img/components/form-validation-1.png'; md5=5a121ca7e207299c442bb275a0510419"
msgstr ""

#. When image changes, this message will be marked fuzzy or untranslated for you.
#. It doesn't matter what you translate it to: it's not used at all.
#: part1-components.xml:4145(None) 
msgid "@@image: 'img/components/form-required-example1.png'; md5=80a445b04d99b98176b637ec33786997"
msgstr ""

#. When image changes, this message will be marked fuzzy or untranslated for you.
#. It doesn't matter what you translate it to: it's not used at all.
#: part1-components.xml:4220(None) 
msgid "@@image: 'img/components/progressindicator-example1.png'; md5=c088945cf499ec4182d8177d96806fa6"
msgstr ""

#. When image changes, this message will be marked fuzzy or untranslated for you.
#. It doesn't matter what you translate it to: it's not used at all.
#: part1-components.xml:4337(None) 
msgid "@@image: 'img/components/progressindicator-example2.png'; md5=ab3fc4458dd72a14c7adb5fe71217c7f"
msgstr ""

#: part1-components.xml:4(title) 
msgid "User Interface Components"
msgstr ""

#: part1-components.xml:6(para) 
msgid "This chapter provides an overview and a detailed description of all non-layout components in Vaadin."
msgstr ""

#: part1-components.xml:12(title) 
msgid "Overview"
msgstr ""

#: part1-components.xml:14(para) 
msgid "Vaadin provides a comprehensive set of user interface components and allows you to define custom components. <xref linkend=\"figure.uicomponents\"/> illustrates the inheritance hierarchy of the UI component classes and interfaces. Interfaces are displayed in gray, abstract classes in orange, and regular classes in blue. An annotated version of the diagram is featured in the <emphasis>Vaadin Cheat Sheet</emphasis>."
msgstr ""

#: part1-components.xml:24(title) 
msgid "UI Component Inheritance Diagram"
msgstr ""

#: part1-components.xml:35(para) 
msgid "At the top of the interface hierarchy, we have the <classname>Component</classname> interface. At the top of the class hierarchy, we have the <classname>AbstractComponent</classname> class. It is inherited by two other abstract classes: <classname>AbstractField</classname>, inherited further by field components, and <classname>AbstractComponentContainer</classname>, inherited by various container and layout components. Components that are not bound to a content data model, such as labels and links, inherit <classname>AbstractComponent</classname> directly."
msgstr ""

#: part1-components.xml:47(para) 
msgid "The layout of the various components in a window is controlled, logically, by layout components, just like in conventional Java UI toolkits for desktop applications. In addition, with the <classname>CustomLayout</classname> component, you can write a custom layout as an XHTML template that includes the locations of any contained components. Looking at the inheritance diagram, we can see that layout components inherit the <classname>AbstractComponentContainer</classname> and the <classname>Layout</classname> interface. Layout components are described in detail in <xref linkend=\"layout\"/>."
msgstr ""

#: part1-components.xml:59(para) 
msgid "Looking at it from the perspective of an object hierarchy, we would have a <classname>Window</classname> object, which contains a hierachy of layout components, which again contain other layout components, field components, and other visible components."
msgstr ""

#: part1-components.xml:66(para) 
msgid "You can browse the available UI components in the <application>Feature Browser</application> of the <application>Vaadin Demo Application</application>. The Feature Browser shows a description, a list of properties, JavaDoc documentation, and a code sample for each of the components. On the right side of the screen, you can find the Properties panel, which you can use to edit the properties of the displayed component."
msgstr ""

#: part1-components.xml:98(title) 
msgid "Interfaces and Abstractions"
msgstr ""

#: part1-components.xml:100(para) 
msgid "Vaadin user interface components are built on a skeleton of interfaces and abstract classes that define and implement the features common to all components and the basic logic how the component states are serialized between the server and the client."
msgstr ""

#: part1-components.xml:107(para) 
msgid "This section gives details on the basic component interfaces and abstractions. The layout and other component container abstractions are described in <xref linkend=\"layout\"/>. The interfaces that define the Vaadin data model are described in <xref linkend=\"datamodel\"/>."
msgstr ""

#: part1-components.xml:115(title) 
msgid "Component Interfaces and Abstractions"
msgstr ""

#: part1-components.xml:126(para) 
msgid "All components also implement the <classname>Paintable</classname> interface, which is used for serializing (\"painting\") the components to the client, and the reverse <classname>VariableOwner</classname> interface, which is needed for deserializing component state or user interaction from the client."
msgstr ""

#: part1-components.xml:133(para) 
msgid "In addition to the interfaces defined within the Vaadin framework, all components implement the <classname>java.io.Serializable</classname> interface to allow serialization. Serialization is needed in many clustering and cloud computing solutions."
msgstr ""

#: part1-components.xml:141(title) 
msgid "<classname>Component</classname> Interface"
msgstr ""

#: part1-components.xml:143(para) 
msgid "The <classname>Component</classname> interface is paired with the <classname>AbstractComponent</classname> class, which implements all the methods defined in the interface."
msgstr ""

#: part1-components.xml:150(title) 
msgid "Interface Attributes"
msgstr ""

#: part1-components.xml:152(para) 
msgid "The interface defines a number of attributes, which you can retrieve or manipulate with the corresponding setters and getters."
msgstr ""

#: part1-components.xml:159(methodname) 
msgid "caption"
msgstr ""

#: part1-components.xml:161(para) 
msgid "The caption of a component is usually rendered by the layout component in which the component is placed. This allows the layout component to control the placement of the caption. Some components, such as <classname>Button</classname> and <classname>Panel</classname>, manage the caption themselves inside the component itself."
msgstr ""

#: part1-components.xml:173(methodname) 
msgid "enabled"
msgstr ""

#: part1-components.xml:175(para) 
msgid "Can the user use the component? A disabled component is grayed out and the user can not use it; it is automatically in read-only state. Disabled components have the <literal>v-disabled</literal> CSS style."
msgstr ""

#: part1-components.xml:184(methodname) 
msgid "icon"
msgstr ""

#: part1-components.xml:186(para) 
msgid "The icon of a component is usually rendered by the layout component in which the component is placed. This allows the layout component to control the placement of the icon. Some components, such as <classname>Button</classname> and <classname>Panel</classname>, manage the icon themselves inside the component itself."
msgstr ""

#: part1-components.xml:198(methodname) 
msgid "locale"
msgstr ""

#: part1-components.xml:200(para) 
msgid "The locale defines the country and language used in the component. If the locale is undefined, the locale of 1) the parent component, 2) the application."
msgstr ""

#: part1-components.xml:208(methodname) 
msgid "readOnly"
msgstr ""

#: part1-components.xml:210(para) 
msgid "Can the user change the component state? This attribute is obviously applicable only for components that allow changing the state. The attribute does not prevent changing the state programmatically. While the appearance of the component does not change, unlike with the <emphasis>enabled</emphasis> attribute, the setter does trigger repainting of the component. Client-side state modifications will not be communicated to the server-side at all, which is an important security feature, because a malicious user can not fabricate state changes in a read-only component."
msgstr ""

#: part1-components.xml:226(methodname) 
msgid "styleName"
msgstr ""

#: part1-components.xml:228(para) 
msgid "A user-defined CSS style class name of the component. The attribute allows listing multiple style names as a space-separated list. In addition to the setter and getter, you can add and remove individual style names with <methodname>addStylename()</methodname> and <methodname>removeStyleName()</methodname>."
msgstr ""

#: part1-components.xml:239(methodname) 
msgid "visible"
msgstr ""

#: part1-components.xml:241(para) 
msgid "Is the component visible or hidden? Hidden components are not just not visible, but not communicated to the browser at all. That is, they are not made invisible with only CSS rules. This feature is important for security if you have components that contain security-critical information that must only be shown in specific application states."
msgstr ""

#: part1-components.xml:255(title) 
msgid "Component Tree Management"
msgstr ""

#: part1-components.xml:257(para) 
msgid "Components are laid out in the user interface hierarchically. The layout is managed by layout components, or more generally components that implement the <classname>ComponentContainer</classname> interface. Such a container is the parent of the contained components."
msgstr ""

#: part1-components.xml:264(para) 
msgid "The <methodname>getParent()</methodname> method allows retrieving the parent component of a component. While there is a <methodname>setParent()</methodname>, you rarely need it as you usually add components with the <methodname>addComponent()</methodname> method of the <classname>ComponentContainer</classname> interface, which automatically sets the parent."
msgstr ""

#: part1-components.xml:274(para) 
msgid "A component does not know its parent when the component is created, so you can not refer to the parent in the constructor with <methodname>getParent()</methodname>. Also, it is not possible to fetch a reference to the application object with <methodname>getApplication()</methodname> before having a parent. For example, the following is invalid:"
msgstr ""

#: part1-components.xml:293(para) 
msgid "Adding a component to an application triggers calling the <methodname>attach()</methodname> method for the component. Correspondingly, removing a component from a container triggers calling the <methodname>detach()</methodname> method. If the parent of an added component is already connected to the application, the <methodname>attach()</methodname> is called immediately from <methodname>setParent()</methodname>."
msgstr ""

#: part1-components.xml:319(para) 
msgid "The attachment logic is implemented in <classname>AbstractComponent</classname>, as described in <xref linkend=\"components.interfaces.abstractcomponent\"/>."
msgstr ""

#: part1-components.xml:329(classname) 
msgid "AbstractComponent"
msgstr ""

#: part1-components.xml:331(para) 
msgid "<classname>AbstractComponent</classname> is the base class for all user interface components. It is the (only) implementation of the <classname>Component</classname> interface, implementing all the methods defined in the interface."
msgstr ""

#: part1-components.xml:338(para) 
msgid "<classname>AbstractComponent</classname> has a single abstract method, <methodname>getTag()</methodname>, which returns the serialization identifier of a particular component class. It needs to be implemented when (and only when) creating entirely new components. <classname>AbstractComponent</classname> manages much of the serialization of component states between the client and the server. Creation of new components and serialization is described in <xref linkend=\"gwt\"/>, and the server-side serialization API in <xref linkend=\"uidl\"/>."
msgstr ""

#: part1-components.xml:357(title) 
msgid "Field Components (<classname>Field</classname> and <classname>AbstractField</classname>)"
msgstr ""

#: part1-components.xml:359(para) 
msgid "<emphasis>Fields</emphasis> are components that have a value that the user can change through the user interface. <xref linkend=\"figure.components.fields\"/> illustrates the inheritance relationships and the important interfaces and base classes."
msgstr ""

#: part1-components.xml:367(title) 
msgid "Field Components"
msgstr ""

#: part1-components.xml:378(para) 
msgid "Field components are built upon the framework defined in the <classname>Field</classname> interface and the <classname>AbstractField</classname> base class."
msgstr ""

#: part1-components.xml:384(para) 
msgid "Fields are strongly coupled with the Vaadin data model. The field value is handled as a <classname>Property</classname> of the field component. Selection fields allow management of the selectable items through the <classname>Container</classname> interface."
msgstr ""

#: part1-components.xml:391(para) 
msgid "The description of the field interfaces and base classes is broken down in the following sections."
msgstr ""

#: part1-components.xml:397(title) 
msgid "<classname>Field</classname> Interface"
msgstr ""

#: part1-components.xml:399(para) 
msgid "The <classname>Field</classname> interface inherits the <classname>Component</classname> superinterface and also the <classname>Property</classname> interface to have a value for the field. <classname>AbstractField</classname> is the only class implementing the <classname>Field</classname> interface directly. The relationships are illustrated in <xref linkend=\"figure.components.fields.field\"/>."
msgstr ""

#: part1-components.xml:410(title) 
msgid "<classname>Field</classname> Interface Inheritance Diagram"
msgstr ""

#: part1-components.xml:421(para) 
msgid "You can set the field value with the <methodname>setValue()</methodname> and read with the <methodname>getValue()</methodname> method defined in the <classname>Property</classname> interface. The actual value type depends on the component."
msgstr ""

#: part1-components.xml:428(para) 
msgid "The <classname>Field</classname> interface defines a number of attributes, which you can retrieve or manipulate with the corresponding setters and getters."
msgstr ""

#: part1-components.xml:436(methodname) 
msgid "description"
msgstr ""

#: part1-components.xml:438(para) 
msgid "All fields have a description. Notice that while this attribute is defined in the <classname>Field</classname> component, it is implemented in <classname>AbstractField</classname>, which does not directly implement <classname>Field</classname>, but only through the <classname>AbstractField</classname> class."
msgstr ""

#: part1-components.xml:450(methodname) part1-components.xml:3731(emphasis) 
msgid "required"
msgstr ""

#: part1-components.xml:452(para) 
msgid "A field can be marked as required and a required indicator marker (usually * character) is displayed in front of the field. If such fields are validated but are empty, the error indicator is shown and the component error is set to the text defined with the <methodname>requiredError</methodname> attribute (see below). Without validation, the required indicator is merely a visual guide."
msgstr ""

#: part1-components.xml:465(methodname) 
msgid "requiredError"
msgstr ""

#: part1-components.xml:467(para) 
msgid "Defines the error message to show when a value is required for a field but no value is given. The error message is set as the component error for the field and is usually displayed in a tooltip. The <classname>Form</classname> component can display the error message in a special error indicator area."
msgstr ""

#: part1-components.xml:481(title) 
msgid "Handling Field Value Changes"
msgstr ""

#: part1-components.xml:483(para) 
msgid "<classname>Field</classname> inherits <classname>Property.ValueChangeListener</classname> to allow listening for field value changes and <classname>Property.Editor</classname> to allow editing values."
msgstr ""

#: part1-components.xml:490(para) 
msgid "When the value of a field changes, a <classname>Property.ValueChangeEvent</classname> is triggered for the field. You should not implement the <methodname>valueChange()</methodname> method in a class inheriting <classname>AbstractField</classname>, as it is already implemented in <classname>AbstractField</classname>. You should instead implement the method explicitly by adding the implementing object as a listener."
msgstr ""

#: part1-components.xml:503(title) 
msgid "<classname>AbstractField</classname> Base Class"
msgstr ""

#: part1-components.xml:505(para) 
msgid "<classname>AbstractField</classname> is the base class for all field components. In addition to the component features inherited from <classname>AbstractComponent</classname>, it implements a number of features defined in <classname>Property</classname>, <classname>Buffered</classname>, <classname>Validatable</classname>, and <classname>Component.Focusable</classname> interfaces."
msgstr ""

#: part1-components.xml:521(title) 
msgid "Common Component Features"
msgstr ""

#: part1-components.xml:523(para) 
msgid "The component base classes and interfaces provide a large number of features. Let us look at some of the most commonly needed features. Features not documented here can be found from the Java API Reference."
msgstr ""

#: part1-components.xml:530(title) 
msgid "Description and Tooltips"
msgstr ""

#: part1-components.xml:532(para) 
msgid "All components (that inherit <classname>AbstractComponent</classname>) have a description separate from their caption. The description is usually shown as a tooltip that appears when the mouse pointer hovers over the component for a short time."
msgstr ""

#: part1-components.xml:539(para) 
msgid "You can set the description with <methodname>setDescription()</methodname> and retrieve with <methodname>getDescription()</methodname>."
msgstr ""

#: part1-components.xml:547(para) 
msgid "The tooltip is shown in <xref linkend=\"figure.components.tooltip.plain\"/>."
msgstr ""

#: part1-components.xml:553(title) 
msgid "Component Description as a Tooltip"
msgstr ""

#: part1-components.xml:564(para) 
msgid "A description is rendered as a tooltip in most components. <classname>Form</classname> shows it as text in the top area of the component, as described in <xref linkend=\"components.form.layout\"/>."
msgstr ""

#: part1-components.xml:571(para) 
msgid "When a component error has been set with <methodname>setComponentError()</methodname>, the error is usually also displayed in the tooltip, below the description (<classname>Form</classname> displays it in the bottom area of the form). Components that are in error state will also display the error indicator. See <xref linkend=\"application.errors.error-indicator\"/>."
msgstr ""

#: part1-components.xml:580(para) 
msgid "The description is actually not plain text, but you can use XHTML tags to format it. Such a rich text description can contain any HTML elements, including images."
msgstr ""

#: part1-components.xml:595(para) 
msgid "The result is shown in <xref linkend=\"figure.components.tooltip.richtext\"/>."
msgstr ""

#: part1-components.xml:601(title) 
msgid "A Rich Text Tooltip"
msgstr ""

#: part1-components.xml:612(para) 
msgid "Notice that the setter and getter are defined for all fields in the <classname>Field</classname> interface, not for all components in the <classname>Component</classname> interface."
msgstr ""

#: part1-components.xml:620(title) 
msgid "Sizing Components"
msgstr ""

#: part1-components.xml:622(para) 
msgid "Vaadin components are sizeable; not in the sense that they were fairly large or that the number of the components and their features are sizeable, but in the sense that you can make them fairly large on the screen if you like, or small or whatever size."
msgstr ""

#: part1-components.xml:629(para) 
msgid "The <classname>Sizeable</classname> interface, shared by all components, provides a number of manipulation methods and constants for setting the height and width of a component in absolute or relative units, or for leaving the size undefined."
msgstr ""

#: part1-components.xml:636(para) 
msgid "The size of a component can be set with <methodname>setWidth()</methodname> and <methodname>setHeight()</methodname> methods. The methods take the size as a floating-point value. You need to give the unit of the measure as the second parameter for the above methods. The available units are listed in <xref linkend=\"components.features.sizeable.units.table\"/> below."
msgstr ""

#: part1-components.xml:648(para) 
msgid "Alternatively, you can speficy the size as a string. The format of such a string must follow the HTML/CSS standards for specifying measures."
msgstr ""

#: part1-components.xml:656(para) 
msgid "The \"<literal>100%</literal>\" percentage value makes the component take all available size in the particular direction (see the description of <parameter>Sizeable.UNITS_PERCENTAGE</parameter> in the table below). You can also use the shorthand method <methodname>setSizeFull()</methodname> to set the size to 100% in both directions."
msgstr ""

#: part1-components.xml:664(para) 
msgid "The size can be <emphasis>undefined</emphasis> in either or both dimensions, which means that the component will take the minimum necessary space. Most components have undefined size by default, but some layouts have full size in horizontal direction. You can set the height or width as undefined with <parameter>Sizeable.SIZE_UNDEFINED</parameter> parameter for <methodname>setWidth()</methodname> and <methodname>setHeight()</methodname>."
msgstr ""

#: part1-components.xml:674(para) 
msgid "You always need to keep in mind that <emphasis>a layout with undefined size may not contain components with defined relative size</emphasis>, such as \"full size\". See <xref linkend=\"layout.settings.size\"/> for details."
msgstr ""

#: part1-components.xml:681(para) 
msgid "The <xref linkend=\"components.features.sizeable.units.table\"/> lists the available units and their codes defined in the <classname>Sizeable</classname> interface."
msgstr ""

#: part1-components.xml:688(title) 
msgid "Size Units"
msgstr ""

#: part1-components.xml:692(parameter) 
msgid "UNITS_PIXELS"
msgstr ""

#: part1-components.xml:693(entry) 
msgid "px"
msgstr ""

#: part1-components.xml:695(emphasis) 
msgid "pixel"
msgstr ""

#: part1-components.xml:695(entry) 
msgid "The <placeholder-1/> is the basic hardware-specific measure of one physical display pixel."
msgstr ""

#: part1-components.xml:700(parameter) 
msgid "UNITS_POINTS"
msgstr ""

#: part1-components.xml:701(entry) 
msgid "pt"
msgstr ""

#: part1-components.xml:703(emphasis) 
msgid "point"
msgstr ""

#: part1-components.xml:703(entry) 
msgid "The <placeholder-1/> is a typographical unit, which is usually defined as 1/72 inches or about 0.35 mm. However, on displays the size can vary significantly depending on display metrics."
msgstr ""

#: part1-components.xml:709(parameter) 
msgid "UNITS_PICAS"
msgstr ""

#: part1-components.xml:710(entry) 
msgid "pc"
msgstr ""

#: part1-components.xml:712(emphasis) 
msgid "pica"
msgstr ""

#: part1-components.xml:712(entry) 
msgid "The <placeholder-1/> is a typographical unit, defined as 12 points, or 1/7 inches or about 4.233 mm. On displays, the size can vary depending on display metrics."
msgstr ""

#: part1-components.xml:718(parameter) 
msgid "UNITS_EM"
msgstr ""

#: part1-components.xml:719(entry) 
msgid "em"
msgstr ""

#: part1-components.xml:721(entry) 
msgid "A unit relative to the used font, the width of the upper-case \"M\" letter."
msgstr ""

#: part1-components.xml:725(parameter) 
msgid "UNITS_EX"
msgstr ""

#: part1-components.xml:726(entry) 
msgid "ex"
msgstr ""

#: part1-components.xml:728(entry) 
msgid "A unit relative to the used font, the height of the lower-case \"x\" letter."
msgstr ""

#: part1-components.xml:732(parameter) 
msgid "UNITS_MM"
msgstr ""

#: part1-components.xml:733(entry) 
msgid "mm"
msgstr ""

#: part1-components.xml:735(entry) 
msgid "A physical length unit, millimeters on the surface of a display device. However, the actual size depends on the display, its metrics in the operating system, and the browser."
msgstr ""

#: part1-components.xml:741(parameter) 
msgid "UNITS_CM"
msgstr ""

#: part1-components.xml:742(entry) 
msgid "cm"
msgstr ""

#: part1-components.xml:745(emphasis) 
msgid "centimeters"
msgstr ""

#: part1-components.xml:744(entry) part1-components.xml:753(entry) 
msgid "A physical length unit, <placeholder-1/> on the surface of a display device. However, the actual size depends on the display, its metrics in the operating system, and the browser."
msgstr ""

#: part1-components.xml:750(parameter) 
msgid "UNITS_INCH"
msgstr ""

#: part1-components.xml:751(entry) 
msgid "in"
msgstr ""

#: part1-components.xml:753(emphasis) 
msgid "inches"
msgstr ""

#: part1-components.xml:759(parameter) 
msgid "UNITS_PERCENTAGE"
msgstr ""

#: part1-components.xml:760(entry) 
msgid "%"
msgstr ""

#: part1-components.xml:763(parameter) 
msgid "100%"
msgstr ""

#: part1-components.xml:762(entry) 
msgid "A relative percentage of the available size. For example, for the top-level layout <placeholder-1/> would be the full width or height of the browser window. The percentage value must be between 0 and 100."
msgstr ""

#: part1-components.xml:771(para) 
msgid "If a component inside <classname>HorizontalLayout</classname> or <classname>VerticalLayout</classname> has full size in the namesake direction of the layout, the component will expand to take all available space not needed by the other components. See <xref linkend=\"layout.settings.size\"/> for details."
msgstr ""

#: part1-components.xml:789(title) 
msgid "Managing Input Focus"
msgstr ""

#: part1-components.xml:791(para) 
msgid "When the user clicks on a component, the component gets the <emphasis>input focus</emphasis>, which is indicated by highlighting according to style definitions. If the component allows inputting text, the focus and insertion point are indicated by a cursor. Pressing the <keycap>Tab</keycap> key moves the focus to the component next in the <emphasis>focus order</emphasis>."
msgstr ""

#: part1-components.xml:800(para) 
msgid "Focusing is supported by all <classname>Field</classname> components and also by <classname>Form</classname> and <classname>Upload</classname>."
msgstr ""

#: part1-components.xml:805(para) 
msgid "The focus order or <emphasis>tab index</emphasis> of a component is defined as a positive integer value, which you can set with <methodname>setTabIndex()</methodname> and get with <methodname>getTabIndex()</methodname>. The tab index is managed in the context of the application-level <classname>Window</classname> in which the components are contained. The focus order can therefore jump between two any lower-level component containers, such as sub-windows or panels."
msgstr ""

#: part1-components.xml:815(para) 
msgid "The default focus order is determined by the natural hierarchical order of components in the order in which they were added under their parents. The default tab index is 0 (zero)."
msgstr ""

#: part1-components.xml:821(para) 
msgid "Giving a negative integer as the tab index removes the component from the focus order entirely."
msgstr ""

#: part1-components.xml:827(title) part1-components.xml:1142(title) part1-components.xml:1290(title) part1-components.xml:1468(title) part1-components.xml:1543(title) part1-components.xml:1917(title) part1-components.xml:1961(title) part1-components.xml:2016(title) part1-components.xml:2053(title) part1-components.xml:2386(title) part1-components.xml:3243(title) part1-components.xml:3769(title) part1-components.xml:4248(title) 
msgid "CSS Style Rules"
msgstr ""

#: part1-components.xml:829(para) 
msgid "The component having the focus will have an additional style class with the <literal>-focus</literal> prefix. For example, a <classname>TextField</classname> would have style <literal>v-textfield-focus</literal>."
msgstr ""

#: part1-components.xml:836(para) 
msgid "For example (if we have the <literal>focusexample</literal> style defined for a parent of a text field), the following would make a text field blue when it has focus."
msgstr ""

#: part1-components.xml:852(classname) 
msgid "Label"
msgstr ""

#: part1-components.xml:854(para) 
msgid "<classname>Label</classname> is a text component that you can use to display non-editable text. The text will wrap around if the width of the containing component limits the length of the lines (except for preformatted text)."
msgstr ""

#: part1-components.xml:871(para) 
msgid "As the size of the <classname>Panel</classname> in the above example is fixed, the text in the <classname>Label</classname> will wrap to fit the panel, as shown in <xref linkend=\"figure.components.label\"/>."
msgstr ""

#: part1-components.xml:878(title) 
msgid "The Label Component"
msgstr ""

#: part1-components.xml:889(para) 
msgid "The contents of a label are formatted depending on the content mode. By default, the text is assumed to be plain text and any contained XML-specific characters will be quoted appropriately to allow rendering the contents of a label in XHTML in a web browser. The content mode can be set in the constructor or with <methodname>setContentMode()</methodname>, and can have the following values:"
msgstr ""

#: part1-components.xml:900(constant) 
msgid "CONTENT_DEFAULT"
msgstr ""

#: part1-components.xml:902(para) 
msgid "The default content mode is <varname>CONTENT_TEXT</varname> (see below)."
msgstr ""

#: part1-components.xml:909(constant) 
msgid "CONTENT_PREFORMATTED"
msgstr ""

#: part1-components.xml:911(para) 
msgid "Content mode, where the label contains preformatted text. It will be, by default, rendered with a fixed-width typewriter font. Preformatted text can contain line breaks, written in Java with the <literal>\\n</literal> escape sequence for a newline character (ASCII 0x0a), or tabulator characters written with <literal>\\t</literal> (ASCII 0x08)."
msgstr ""

#: part1-components.xml:922(constant) 
msgid "CONTENT_RAW"
msgstr ""

#: part1-components.xml:924(para) 
msgid "Content mode, where the label contains raw text. Output is not required to be valid XML. It can be, for example, HTML, which can be unbalanced or otherwise invalid XML. The example below uses the &lt;br&gt; tag in HTML. While XHTML should be preferred in most cases, this can be useful for some specific purposes where you may need to display loosely formatted HTML content. The raw mode also preserves character entities, some of which might otherwise be interpreted incorrectly."
msgstr ""

#: part1-components.xml:937(constant) 
msgid "CONTENT_TEXT"
msgstr ""

#: part1-components.xml:939(para) 
msgid "Content mode, where the label contains only plain text. All characters are allowed, including the special <literal>&lt;</literal>, <literal>&gt;</literal>, and <literal>&amp;</literal> characters in XML or HTML, which are quoted properly in XHTML while rendering the component. This is the default mode."
msgstr ""

#: part1-components.xml:950(constant) 
msgid "CONTENT_XHTML"
msgstr ""

#: part1-components.xml:952(para) 
msgid "Content mode, where the label contains XHTML. The content will be enclosed in a DIV element having the namespace \"<uri>http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd</uri>\"."
msgstr ""

#: part1-components.xml:960(constant) 
msgid "CONTENT_XML"
msgstr ""

#: part1-components.xml:962(para) 
msgid "Content mode, where the label contains well-formed and well-balanced XML. Each of the root elements must have their default namespace specified."
msgstr ""

#: part1-components.xml:970(constant) 
msgid "CONTENT_UIDL"
msgstr ""

#: part1-components.xml:972(para) 
msgid "Formatted content mode, where the contents are XML that is restricted to UIDL 1.0, the internal language of Vaadin for AJAX communications between the server and the browser. Obsolete since IT Mill Toolkit 5.0."
msgstr ""

#: part1-components.xml:983(para) 
msgid "Notice that the validity of XML or XHTML in a <classname>Label</classname> is not checked in the server when rendering the component and any errors can result in an error in the browser! You should validate the content before displaying it in the component, especially if it comes from an uncertain source."
msgstr ""

#: part1-components.xml:992(para) 
msgid "The following example demonstrates the use of <classname>Label</classname> in different modes."
msgstr ""

#: part1-components.xml:1034(para) 
msgid "The rendering will look as follows:"
msgstr ""

#: part1-components.xml:1039(title) 
msgid "Label Modes Rendered on Screen"
msgstr ""

#: part1-components.xml:1050(para) 
msgid "Using the XHTML, XML, or raw modes allow inclusion of, for example, images within the text flow, which is not possible with any regular layout components. The following example includes an image within the text flow, with the image coming from a class loader resource."
msgstr ""

#: part1-components.xml:1064(para) 
msgid "When you use a class loader resource, the image has to be included in the JAR of the web application. In this case, the <filename>labelimage.jpg</filename> needs to be in the default package. When rendered in a web browser, the output will look as follows:"
msgstr ""

#: part1-components.xml:1073(title) 
msgid "Referencing An Image Resource in Label"
msgstr ""

#: part1-components.xml:1081(para) 
msgid "Another solution would be to use the <classname>CustomLayout</classname> component, where you can write the component content as an XHTML fragment in a theme, but such a solution may be too heavy for most cases, and not flexible enough if the content needs to be dynamically generated."
msgstr ""

#: part1-components.xml:1089(para) 
msgid "Notice that the rendering of XHTML depends on the assumption that the client software and the terminal adapter are XHTML based. It is possible to write a terminal adapter for a custom thin client application, which may not be able to render XHTML at all. There are also differences between web browsers in their support of XHTML."
msgstr ""

#: part1-components.xml:1099(classname) 
msgid "Link"
msgstr ""

#: part1-components.xml:1101(para) 
msgid "The <classname>Link</classname> component allows making references to resources that are either external or provided by the web server or by the application itself. While a <classname>Link</classname> appears like a hyperlink, it is not handled in the web browser. When a user clicks a link, the server receives an event and typically opens the referenced resource in the target window of the link. Resources are explained in <xref linkend=\"application.resources\"/>."
msgstr ""

#: part1-components.xml:1111(para) 
msgid "Links to external resources can be made by using a URI as follows:"
msgstr ""

#: part1-components.xml:1118(para) 
msgid "With the simple contructor used in the above example, the link is opened in the current window. Using the constructor that takes the target window as a parameter, or by setting the window with <methodname>setWindow</methodname>, you can open the resource in another window, such as a native popup window or a <classname>FrameWindow</classname>. As the target window can be defined as a target string managed by the browser, the target can be any window, including windows not managed by the application itself."
msgstr ""

#: part1-components.xml:1129(para) 
msgid "When the user clicks the link, the application will receive an event regarding the click and handle it to provide the resource. The link is therefore not an <literal>&lt;a href&gt;</literal> element in HTML and it does not have an URI. This has some additional consequences, such as that a link can not be marked as \"visited\" by the browser, unlike normal hyperlinks. If you wish to have an actual HTML anchor element, you need to customize the rendering of the component or use a <classname>Label</classname> with XHTML content mode and write the anchor element by yourself."
msgstr ""

#: part1-components.xml:1144(para) 
msgid "The <classname>Link</classname> component has <parameter>v-link</parameter> style by default."
msgstr ""

#: part1-components.xml:1151(para) 
msgid "When the mouse pointer hovers over the link, it will also have the <varname>over</varname> style."
msgstr ""

#: part1-components.xml:1159(classname) part1-components.xml:2791(classname) 
msgid "TextField"
msgstr ""

#: part1-components.xml:1161(para) 
msgid "<classname>TextField</classname> is one of the most common user interface components and is highly versatile. It supports both single- and multi-line editing, password input, and buffering."
msgstr ""

#: part1-components.xml:1167(para) 
msgid "The following example creates two simple text fields: a single-line and a multi-line <classname>TextField</classname>."
msgstr ""

#: part1-components.xml:1184(title) 
msgid "Single- and Multi-Line Text Field Example"
msgstr ""

#: part1-components.xml:1195(para) 
msgid "Notice how font size affects the width of the text fields even though the width was set with the same number of columns. This is a feature of HTML."
msgstr ""

#: part1-components.xml:1204(classname) 
msgid "RichTextArea"
msgstr ""

#: part1-components.xml:1206(para) 
msgid "The <classname>RichTextArea</classname> field allows entering or editing formatted text. The toolbar provides all basic editing functionalities. The text content of <classname>RichTextArea</classname> is represented in HTML format. <classname>RichTextArea</classname> inherits <classname>TextField</classname> and does not add any API functionality over it. You can add new functionality by extending the client-side components <classname>VRichTextArea</classname> and <classname>VRichTextToolbar</classname>."
msgstr ""

#: part1-components.xml:1217(para) 
msgid "As with <classname>TextField</classname>, the textual content of the rich text area is the <classname>Property</classname> of the field and can be set with <methodname>setValue()</methodname> and read with <methodname>getValue()</methodname>."
msgstr ""

#: part1-components.xml:1233(title) 
msgid "Rich Text Area Component"
msgstr ""

#: part1-components.xml:1244(para) 
msgid "Above, we used context-specific tags such as <literal>&lt;h1&gt;</literal> in the initial HTML content. The rich text area component does not allow creating such tags, only formatting tags, but it does preserve them unless the user edits them away. Any non-visible whitespace such as the new line character (<literal>\\n</literal>) are removed from the content. For example, the value set above will be as follows when read from the field with <methodname>getValue()</methodname>:"
msgstr ""

#: part1-components.xml:1256(para) 
msgid "The rich text area is one of the few components in Vaadin that contain textual labels. The selection boxes in the toolbar are in English, and not be localized currently otherwise but by inheriting or reimplementing the client-side <classname>VRichTextToolbar</classname> widget. The buttons can be localized simply with CSS by downloading a copy of the toolbar background image, editing it, and replacing the default toolbar. The toolbar is a single image file from which the individual button icons are picked, so the order of the icons is different from the rendered. The image file depends on the client-side implementation of the toolbar."
msgstr ""

#: part1-components.xml:1276(title) 
msgid "Regular English and a Localized Rich Text Area Toolbar"
msgstr ""

#: part1-components.xml:1296(para) 
msgid "The rich text area consists of two main parts: the toolbar with overall style <literal>.gwt-RichTextToolbar</literal> and the editor area with style <literal>.gwt-RichTextArea</literal>. The editor area obviously contains all the elements and their styles that the HTML content contains. The toolbar contains buttons and drop-down list boxes with the following respective style names:"
msgstr ""

#: part1-components.xml:1313(title) 
msgid "Date and Time Input"
msgstr ""

#: part1-components.xml:1314(para) 
msgid "The <classname>DateField</classname> component provides the means to display and input date and time. The field comes in two variations: <classname>PopupDateField</classname> with numeric input fields and a popup calendar view and <classname>InlineDateField</classname> with the calendar view always visible and the numeric input fields only for time. The <classname>DateField</classname> base class defaults to the popup variation."
msgstr ""

#: part1-components.xml:1323(para) 
msgid "The example below illustrates the use of the <classname>DateField</classname> with the default style. We set the time of the <classname>DateField</classname> to current time with the default constructor of the <classname>java.util.Date</classname> class."
msgstr ""

#: part1-components.xml:1338(title) 
msgid "Example of the Date Field with Default Style"
msgstr ""

#: part1-components.xml:1349(para) 
msgid "The default style provides date input using a text box for the date and combo boxes for the time, down to milliseconds. Pressing the \"...\" button right of the date opens a month view for selecting the date."
msgstr ""

#: part1-components.xml:1356(para) 
msgid "You probably will not need milliseconds in most applications, and might not even need the time, but just the date. The visibility of the input components is controlled by <emphasis>resolution</emphasis> of the field which can be set with <methodname>setResolution()</methodname> method. The method takes as its parameters the lowest visible component, typically <parameter>RESOLUTION_DAY</parameter> for just dates and <parameter>RESOLUTION_MIN</parameter> for dates with time in hours and minutes. Please see the API Reference for a complete list of resolution parameters."
msgstr ""

#: part1-components.xml:1369(title) 
msgid "Calendar"
msgstr ""

#. UNFINISHED
#: part1-components.xml:1373(para) 
msgid "The <parameter>calendar</parameter> style of the <classname>DateField</classname> provides a date picker component with a month view, just like the one in the default style that opens by clicking the \"...\" button. The user can navigate months and years by clicking the appropriate arrows."
msgstr ""

#: part1-components.xml:1391(title) 
msgid "Example of the Date Field with Calendar Style"
msgstr ""

#: part1-components.xml:1404(title) 
msgid "DateField Locale"
msgstr ""

#: part1-components.xml:1406(para) 
msgid "The date fields use the locale set for the component, which defaults to the system locale. You can set a custom locale with the <methodname>setLocale()</methodname> method of <classname>AbstractComponent</classname>."
msgstr ""

#: part1-components.xml:1416(classname) 
msgid "Button"
msgstr ""

#: part1-components.xml:1418(para) 
msgid "The <classname>Button</classname> is a user interface component that is normally used for finalizing input and initiating some action. When the user clicks a button, a <classname>Button.ClickEvent</classname> is emitted. A listener that inherits the <classname>Button.ClickListener</classname> interface can handle clicks with the <methodname>buttonClick()</methodname> method."
msgstr ""

#: part1-components.xml:1448(title) 
msgid "An Example of a Button"
msgstr ""

#: part1-components.xml:1456(para) 
msgid "As a user interface often has several buttons, you can differentiate between them either by comparing the <classname>Button</classname> object reference returned by the <methodname>getButton()</methodname> method of <classname>Button.ClickEvent</classname> to a kept reference or by using a separate listener method for each button. The listening object and method can be given to the constructor. For a detailed description of these patterns together with some examples, please see <xref linkend=\"architecture.events\"/>."
msgstr ""

#: part1-components.xml:1472(para) 
msgid "The exact CSS style name can be different if a <classname>Button</classname> has the <parameter>switchMode</parameter> attribute enabled. See the alternative CSS styles below."
msgstr ""

#: part1-components.xml:1481(classname) part1-components.xml:2776(classname) 
msgid "CheckBox"
msgstr ""

#: part1-components.xml:1483(para) 
msgid "<classname>CheckBox</classname> is a two-state selection component that can be either checked or unchecked. The caption of the check box will be placed right of the actual check box. Vaadin provides two ways to create check boxes: individual check boxes with the <classname>CheckBox</classname> component described in this section and check box groups with the <classname>OptionGroup</classname> component in multiple selection mode, as described in <xref linkend=\"components.selecting.optiongroup\"/>."
msgstr ""

#: part1-components.xml:1493(para) 
msgid "Clicking on a check box will change its state. The state is the <classname>Boolean</classname> property of the <classname>Button</classname>, and can be set with <methodname>setValue()</methodname> and obtained with <methodname>getValue()</methodname> method of the <classname>Property</classname> interface. Changing the value of a check box will cause a <classname>ValueChangeEvent</classname>, which can be handled by a <classname>ValueChangeListener</classname>."
msgstr ""

#: part1-components.xml:1529(title) 
msgid "An Example of a Check Box"
msgstr ""

#: part1-components.xml:1537(para) 
msgid "For an example on the use of check boxes in a table, see <xref linkend=\"components.table\"/>."
msgstr ""

#: part1-components.xml:1552(title) 
msgid "Selecting Items"
msgstr ""

#: part1-components.xml:1554(para) 
msgid "Vaadin provides several alternative choices for selecting one or more items from a list. The selection components allow selecting one or more items from a list of items. The items are objects that implement the <classname>Item</classname> interface, and contained in a <classname>Container</classname>. The choices are based on the <classname>AbstractSelect</classname> base class."
msgstr ""

#: part1-components.xml:1563(para) 
msgid "The following selection classes are available:"
msgstr ""

#: part1-components.xml:1569(classname) 
msgid "Select"
msgstr ""

#: part1-components.xml:1570(listitem) 
msgid "Provides a drop-down list for single selection and a multi-line list in multiselect mode."
msgstr ""

#: part1-components.xml:1576(classname) 
msgid "NativeSelect"
msgstr ""

#: part1-components.xml:1581(literal) 
msgid "&lt;select&gt;"
msgstr ""

#: part1-components.xml:1577(listitem) 
msgid "Provides selection using the native selection component of the browser, typically a drop-down list for single selection and a multi-line list in multiselect mode. This uses the <placeholder-1/> element in HTML."
msgstr ""

#: part1-components.xml:1585(classname) part1-components.xml:2141(classname) 
msgid "OptionGroup"
msgstr ""

#: part1-components.xml:1586(listitem) 
msgid "Shows the items as a vertically arranged group of radio buttons in the single selection mode and of check boxes in multiple selection mode."
msgstr ""

#: part1-components.xml:1592(classname) 
msgid "TwinColSelect"
msgstr ""

#: part1-components.xml:1593(listitem) 
msgid "Shows two list boxes side by side where the user can select items from a list of available items and move them to a list of selected items using control buttons."
msgstr ""

#: part1-components.xml:1601(para) 
msgid "In addition, the <classname>Tree</classname> and <classname>Table</classname> components allow special forms of selection. They also inherit the <classname>AbstractSelect</classname>."
msgstr ""

#: part1-components.xml:1607(para) 
msgid "A selection component provides the current selection as the property of the component (with the <classname>Property</classname> interface). The property value is an item identifier object that identifies the selected item. You can get the identifier with <methodname>getValue()</methodname> of the <classname>Property</classname> interface. You can select an item with the corresponding <methodname>setValue()</methodname> method. In multiselect mode, the property will be an unmodifiable set of item identifiers. If no item is selected, the property will be <parameter>null</parameter> in single selection mode or an empty collection in multiselect mode."
msgstr ""

#: part1-components.xml:1619(para) 
msgid "New items are added with the <methodname>addItem()</methodname> method, implemented for the <classname>Container</classname> interface. The method takes the <emphasis>item identifier</emphasis> (IID) object as a parameter, and by default uses the identifier also as the caption of the item. The identifier is typically a <classname>String</classname>. The <methodname>addItem()</methodname> method also creates an empty <classname>Item</classname>, which itself has little relevance in the <classname>Select</classname> component, as the properties of an item are not used in any way by the component."
msgstr ""

#: part1-components.xml:1644(para) 
msgid "We could as well have added the item identifiers as integers, for example, and set the captions explicitly."
msgstr ""

#: part1-components.xml:1649(para) 
msgid "The <classname>Select</classname> and <classname>NativeSelect</classname> components will show \"-\" selection when no actual item is selected. This is the <emphasis>null selection item identifier</emphasis>. You can set an alternative ID with <methodname>setNullSelectionItemId()</methodname>. Setting the alternative null ID is merely a visual text; the <methodname>getValue()</methodname> will still return <parameter>null</parameter> value if no item is selected, or an empty set in multiselect mode."
msgstr ""

#: part1-components.xml:1660(para) 
msgid "The item identifier of the currently selected item will be set as the property of the <classname>Select</classname> object. You can access it with the <methodname>getValue()</methodname> method of the <classname>Property</classname> interface of the component. Also, when handling changes in a <classname>Select</classname> component with the <classname>Property.ValueChangeListener</classname> interface, the <classname>Property.ValueChangeEvent</classname> will have the selected item as the property of the event, accessible with the <methodname>getProperty()</methodname> method."
msgstr ""

#: part1-components.xml:1673(title) 
msgid "Selected Item"
msgstr ""

#: part1-components.xml:1681(para) 
msgid "The item and its identifier can be of any object type. The caption of the items can be retrieved from various sources, as defined with the caption mode of the component, which you can set with the <methodname>setItemCaptionMode()</methodname> method. The default mode is <parameter>ITEM_CAPTION_MODE_EXPLICIT_DEFAULTS_ID</parameter>. In addition to a caption, an item can have an icon. The icon of an item is set with <methodname>setItemIcon()</methodname>."
msgstr ""

#: part1-components.xml:1693(title) 
msgid "Caption Modes for Selection Components"
msgstr ""

#: part1-components.xml:1695(constant) 
msgid "ITEM_CAPTION_MODE_EXPLICIT_DEFAULTS_ID"
msgstr ""

#: part1-components.xml:1697(para) 
msgid "This is the default caption mode and its flexibility allows using it in most cases. By default, the item identifier will be used as the caption. The caption is retrieved with <methodname>toString()</methodname> method of the item identifier object. If the caption is specified explicitly with <methodname>setItemCaption()</methodname>, it overrides the item identifier."
msgstr ""

#: part1-components.xml:1709(constant) 
msgid "ITEM_CAPTION_MODE_EXPLICIT"
msgstr ""

#: part1-components.xml:1711(para) 
msgid "Captions must be explicitly specified with <methodname>setItemCaption()</methodname>. If they are not, the caption will be empty. Such items with empty captions will nevertheless be displayed in the <classname>Select</classname> component as empty rows. If they have an icon, they will be visible."
msgstr ""

#: part1-components.xml:1722(constant) 
msgid "ITEM_CAPTION_MODE_ICON_ONLY"
msgstr ""

#: part1-components.xml:1724(para) 
msgid "Only icons are shown, captions are hidden."
msgstr ""

#: part1-components.xml:1730(constant) 
msgid "ITEM_CAPTION_MODE_ID"
msgstr ""

#: part1-components.xml:1732(para) 
msgid "String representation of the item identifier object is used as caption. This is useful when the identifier is actually an application specific object. For example:"
msgstr ""

#: part1-components.xml:1759(constant) 
msgid "ITEM_CAPTION_MODE_INDEX"
msgstr ""

#: part1-components.xml:1761(para) 
msgid "Index number of item is used as caption. This caption mode is applicable only to data sources that implement the <classname>Container.Indexed</classname> interface. If the interface is not available, the component will throw a <classname>ClassCastException</classname>. The <classname>Select</classname> component itself does not implement this interface, so the mode is not usable without a separate data source. An <classname>IndexedContainer</classname>, for example, would work."
msgstr ""

#: part1-components.xml:1775(constant) 
msgid "ITEM_CAPTION_MODE_ITEM"
msgstr ""

#: part1-components.xml:1777(para) 
msgid "<classname>String</classname> representation of item, acquired with <methodname>toString()</methodname>, is used as the caption. This is applicable mainly when using a custom <classname>Item</classname> class, which also requires using a custom <classname>Container</classname> that is used as a data source for the <classname>Select</classname> component."
msgstr ""

#: part1-components.xml:1788(constant) 
msgid "ITEM_CAPTION_MODE_PROPERTY"
msgstr ""

#: part1-components.xml:1790(para) 
msgid "Item captions are read from the <classname>String</classname> representation of the property with the identifier specified with <methodname>setItemCaptionPropertyId()</methodname>. This is useful, for example, when you have a <classname>Table</classname> component that you use as the data source for the <classname>Select</classname>, and you want to use a specific table column for captions."
msgstr ""

#. <para>
#. 		While the default caption mode is flexible enough for most
#. 		cases where the appearance of a <classname>Select</classname>
#. 		component is fixed, the other modes may be useful for cases where the
#. 		user can configure what type of information is shown in the
#. 		component. Typical situation is allowing the user to choose between
#. 		"Show text only", "Show icons only", and "Show both icons and text".
#. 		</para>
#: part1-components.xml:1812(para) 
msgid "Notice that while the <classname>Select</classname> component allows associating an icon with each item with <methodname>setItemIcon()</methodname>, the icons are not supported in the themes in the old IT Mill Toolkit version 4. This is because HTML does not support images inside <literal>select</literal> elements. Icons are also not really visually applicable for <parameter>optiongroup</parameter> and <parameter>twincol</parameter> styles."
msgstr ""

#: part1-components.xml:1823(title) 
msgid "Basic <classname>Select</classname> Component"
msgstr ""

#: part1-components.xml:1825(para) 
msgid "The <classname>Select</classname> component allows, in single selection mode, selecting an item from a drop-down list, or in multiple selection mode, from a list box that shows multiple items."
msgstr ""

#: part1-components.xml:1832(title) 
msgid "The Select Component"
msgstr ""

#: part1-components.xml:1841(title) 
msgid "Combo Box Behaviour"
msgstr ""

#: part1-components.xml:1843(para) 
msgid "The <classname>Select</classname> component will act as a combo box in single selection mode, allowing either to choose the value from the drop-down list or to write the value in the text field part of the component."
msgstr ""

#: part1-components.xml:1852(title) part1-components.xml:1901(title) 
msgid "Filtered Selection"
msgstr ""

#: part1-components.xml:1854(para) 
msgid "The <classname>Select</classname> component allows filtering the items available for selection. The component shows as an input box for entering text. The text entered in the input box is used for filtering the available items shown in a drop-down list. Pressing <keycap>Enter</keycap> will complete the item in the input box. Pressing <keycap>Up</keycap>- and <keycap>Down</keycap>-arrows can be used for selecting an item from the drop-down list. The drop-down list is paged and clicking on the scroll buttons will change to the next or previous page. The list selection can also be done with the arrow keys on the keyboard. The shown items are loaded from the server as needed, so the number of items held in the component can be quite large."
msgstr ""

#: part1-components.xml:1869(para) 
msgid "Vaadin provides two filtering modes: <parameter>FILTERINGMODE_CONTAINS</parameter> matches any item that contains the string given in the text field part of the component and <parameter>FILTERINGMODE_STARTSWITH</parameter> matches only items that begin with the given string. The filtering mode is set with <methodname>setFilteringMode()</methodname>. Setting the filtering mode to the default value <parameter>FILTERINGMODE_OFF</parameter> disables filtering."
msgstr ""

#: part1-components.xml:1893(para) 
msgid "The above example uses the containment filter that matches to all items containing the input string. As shown in <xref linkend=\"figure.select.filter\"/> below, when we type some text in the input area, the drop-down list will show all the matching items."
msgstr ""

#: part1-components.xml:1909(para) 
msgid "The FilterSelect demo in the Vaadin Demo Application provides an example of filtering items in a <classname>Select</classname> component."
msgstr ""

#: part1-components.xml:1927(para) 
msgid "In its default state, only the input field of the <classname>Select</classname> component is visible. The entire component is enclosed in <literal>v-filterselect</literal> style, the input field has <literal>v-filterselect-input</literal> style and the button in the right end that opens and closes the drop-down result list has <literal>v-filterselect-button</literal> style."
msgstr ""

#: part1-components.xml:1936(para) 
msgid "The drop-down result list has an overall <literal>v-filterselect-suggestpopup</literal> style. It contains the list of suggestions with <literal>v-filterselect-suggestmenu</literal> style and a status bar in the bottom with <literal>v-filterselect-status</literal> style. The list of suggestions is padded with an area with <literal>v-filterselect-prefpage-off</literal> style above and below the list."
msgstr ""

#: part1-components.xml:1951(title) 
msgid "Native Selection Component <classname>NativeSelect</classname>"
msgstr ""

#: part1-components.xml:1953(para) 
msgid "<classname>NativeSelect</classname> offers the native selection component in web browsers, using an HTML <literal>&lt;select&gt;</literal> element. In single selection mode, the component is shown as a drop-down list, and in multiple selection mode as a list box."
msgstr ""

#: part1-components.xml:1967(para) part1-components.xml:2022(para) 
msgid "The <literal>v-select-optiongroup</literal> is the overall style for the component. Each check box will have the <literal>v-checkbox</literal> style and each radio button the <literal>v-radiobutton</literal> style. Both the radio buttons and check boxes will also have the <literal>v-select-option</literal> style that allows styling regardless of the option type."
msgstr ""

#: part1-components.xml:1979(title) 
msgid "Radio Button and Check Box Groups with <classname>OptionGroup</classname>"
msgstr ""

#: part1-components.xml:1980(para) 
msgid "The <classname>OptionGroup</classname> class provides selection from alternatives using a group of radio buttons in single selection mode. In multiple selection mode, the items show up as check boxes."
msgstr ""

#: part1-components.xml:1991(para) 
msgid "<xref linkend=\"figure.components.selecting.optiongroup\"/> shows the option group in single and multiple selection mode."
msgstr ""

#: part1-components.xml:1997(title) 
msgid "Option Button Group in Single and Multiple Selection Mode"
msgstr ""

#: part1-components.xml:2005(para) 
msgid "You can create check boxes individually using the <classname>CheckBox</classname> class, as described in <xref linkend=\"components.checkbox\"/>. The advantages of the <classname>OptionGroup</classname> component are that as it maintains the individual check box objects, you can get an array of the currently selected items easily, and that you can easily change the appearance of a single component."
msgstr ""

#: part1-components.xml:2034(title) 
msgid "Twin Column Selection with <classname>TwinColSelect</classname>"
msgstr ""

#: part1-components.xml:2035(para) 
msgid "The <classname>TwinColSelect</classname> class provides a multiple selection component that shows two lists side by side. The user can select items from the list on the left and click on the \"&gt;&gt;\" button to move them to the list on the right. Items can be moved back by selecting them and clicking on the \"&lt;&lt;\" button."
msgstr ""

#: part1-components.xml:2044(title) 
msgid "Twin Column Selection"
msgstr ""

#: part1-components.xml:2065(title) 
msgid "Allowing Adding New Items"
msgstr ""

#: part1-components.xml:2067(para) 
msgid "The selection components allow the user to add new items, with a user interface similar to combo boxes in desktop user interfaces. You need to enable the <parameter>newItemsAllowed</parameter> mode with the <methodname>setNewItemsAllowed()</methodname> method."
msgstr ""

#: part1-components.xml:2076(para) 
msgid "The user interface for adding new items depends on the selection component and the selection mode. The regular <classname>Select</classname> component in single selection mode, which appears as a combo box, allows you to simply type the new item in the combo box and hit <keycap>Enter</keycap> to add it. In most other selection components, as well as in the multiple selection mode of the regular <classname>Select</classname> component, a text field that allows entering new items is shown below the selection list, and clicking the <guibutton>+</guibutton> button will add the item in the list, as illustrated in <xref linkend=\"figure.components.selecting.newitems\"/>."
msgstr ""

#: part1-components.xml:2090(title) 
msgid "Select Component with Adding New Items Allowed"
msgstr ""

#: part1-components.xml:2098(para) 
msgid "The identifier of an item added by the user will be a <classname>String</classname> object identical to the caption of the item. You should consider this if the item identifier of automatically filled items is some other type or otherwise not identical to the caption."
msgstr ""

#: part1-components.xml:2105(para) 
msgid "Adding new items is possible in both single and multiple selection modes and in all styles. Adding new items may not be possible if the <classname>Select</classname> is bound to an external <classname>Container</classname> that does not allow adding new items."
msgstr ""

#: part1-components.xml:2115(title) 
msgid "Multiple Selection Mode"
msgstr ""

#. UNFINISHED: Check if outdated.
#: part1-components.xml:2119(para) 
msgid "Setting the <classname>Select</classname>, <classname>NativeSelect</classname>, or <classname>OptionGroup</classname> components to multiple selection mode with the <methodname>setMultiSelect()</methodname> method changes their appearance to allow selecting multiple items."
msgstr ""

#: part1-components.xml:2129(term) 
msgid "<classname>Select</classname> and <classname>NativeSelect</classname>"
msgstr ""

#: part1-components.xml:2131(para) 
msgid "These components appear as a native HTML selection list, as shown in <xref linkend=\"figure.components.selecting.newitems\"/>. By holding the <keycap>Ctrl</keycap> or <keycap>Shift</keycap> key pressed, the user can select multiple items."
msgstr ""

#: part1-components.xml:2142(listitem) 
msgid "The option group, which is a radio button group in single selection mode, will show as a check box group in multiple selection mode. See <xref linkend=\"components.selecting.optiongroup\"/>."
msgstr ""

#: part1-components.xml:2151(para) 
msgid "The <classname>TwinColSelect</classname>, described in <xref linkend=\"components.selecting.twincolselect\"/>, is a special multiple selection mode that is not meaningful for single selection."
msgstr ""

#: part1-components.xml:2159(para) 
msgid "As in single selection mode, the selected items are set as the property of the <classname>Select</classname> object. In multiple selection mode, the property is a <classname>Collection</classname> of currently selected items. You can get and set the property with the <methodname>getValue()</methodname> and <methodname>setValue()</methodname> methods as usual."
msgstr ""

#: part1-components.xml:2168(para) 
msgid "A change in the selection will trigger a <classname>ValueChangeEvent</classname>, which you can handle with a <classname>Propery.ValueChangeListener</classname>. As usual, you should use <methodname>setImmediate(true)</methodname> to trigger the event immediately when the user changes the selection. The following example shows how to handle selection changes with a listener."
msgstr ""

#: part1-components.xml:2226(classname) part1-components.xml:2786(classname) 
msgid "Table"
msgstr ""

#: part1-components.xml:2228(para) 
msgid "The <classname>Table</classname> component is intended for presenting tabular data organized in rows and columns. The <classname>Table</classname> is one of the most versatile components in Vaadin. Table cells can include text or arbitrary UI components. You can easily implement editing of the table data, for example clicking on a cell could change it to a text field for editing."
msgstr ""

#: part1-components.xml:2236(para) 
msgid "The data contained in a <classname>Table</classname> is managed using the Data Model of Vaadin (see <xref linkend=\"datamodel\"/>), through the <classname>Container</classname> interface of the <classname>Table</classname>. This makes it possible to bind a table directly to a data souce such as a database query. Only the visible part of the table is loaded into the browser and moving the visible window with the scrollbar loads content from the server. While the data is being loaded, a tooltip will be displayed that shows the current range and total number of items in the table. The rows of the table are <emphasis>items</emphasis> in the container and the columns are <emphasis>properties</emphasis>. Each table row (item) is identified with an <emphasis>item identifier</emphasis> (IID), and each column (property) with a <emphasis>property identifier</emphasis> (PID)."
msgstr ""

#: part1-components.xml:2251(para) 
msgid "When creating a table, you first need to define columns with <methodname>addContainerProperty()</methodname>. This method comes in two flavours. The simpler one takes the property ID of the column and uses it also as the caption of the column. The more complex one allows differing PID and header for the column. This may make, for example, internationalization of table headers easier, because if a PID is internationalized, the internationalization has to be used everywhere where the PID is used. The complex form of the method also allows defining an icon for the column from a resource. The \"default value\" parameter is used when new properties (columns) are added to the table, to fill in the missing values. (This default has no meaning in the usual case, such as below, where we add items after defining the properties.)"
msgstr ""

#: part1-components.xml:2289(para) 
msgid "In this example, we used an increasing <classname>Integer</classname> object as the Item Identifier, given as the second parameter to <methodname>addItem()</methodname>. The actual rows are given simply as object arrays, in the same order in which the properties were added. The objects must be of the correct class, as defined in the <methodname>addContainerProperty()</methodname> calls."
msgstr ""

#: part1-components.xml:2299(title) 
msgid "Basic Table Example"
msgstr ""

#: part1-components.xml:2307(para) 
msgid "Scalability of the <classname>Table</classname> is largely dictated by the container. The default <classname>IndexedContainer</classname> is relatively heavy and can cause scalability problems, for example, when updating the values. Use of an optimized application-specific container is recommended. Table does not have a limit for the number of items and is just as fast with hundreds of thousands of items as with just a few. With the current implementation of scrolling, there is a limit of around 500 000 rows, depending on the browser and the pixel height of rows."
msgstr ""

#: part1-components.xml:2320(title) 
msgid "Selecting Items in a Table"
msgstr ""

#: part1-components.xml:2322(para) 
msgid "The <classname>Table</classname> allows selecting one or more items by clicking them with the mouse. When the user selects an item, the IID of the item will be set as the property of the table and a <classname>ValueChangeEvent</classname> is triggered. To enable selection, you need to set the table <emphasis>selectable</emphasis>. You will also need to set it as <emphasis>immediate</emphasis> in most cases, as we do below, because without it, the change in the property will not be communicated immediately to the server."
msgstr ""

#: part1-components.xml:2333(para) 
msgid "The following example shows how to enable the selection of items in a <classname>Table</classname> and how to handle <classname>ValueChangeEvent</classname> events that are caused by changes in selection. You need to handle the event with the <methodname>valueChange()</methodname> method of the <classname>Property.ValueChangeListener</classname> interface."
msgstr ""

#: part1-components.xml:2359(title) 
msgid "Table Selection Example"
msgstr ""

#: part1-components.xml:2367(para) 
msgid "If the user clicks on an already selected item, the selection will deselected and the table property will have <parameter>null</parameter> value. You can disable this behaviour by setting <methodname>setNullSelectionAllowed(false)</methodname> for the table."
msgstr ""

#: part1-components.xml:2374(para) 
msgid "A table can also be in <emphasis>multiselect</emphasis> mode, where a user can select and unselect any item by clicking on it. The mode is enabled with the <methodname>setMultiSelect()</methodname> method of the <classname>Select</classname> interface of <classname>Table</classname>. Selecting an item triggers a <classname>ValueChangeEvent</classname>, which will have as its parameter an array of item identifiers."
msgstr ""

#: part1-components.xml:2388(para) 
msgid "Styling the overall style of a <classname>Table</classname> can be done with the following CSS rules."
msgstr ""

#: part1-components.xml:2405(para) 
msgid "Notice that some of the widths and heights in a table are calculated dynamically and can not be set in CSS."
msgstr ""

#: part1-components.xml:2411(title) 
msgid "Setting Individual Cell Styles"
msgstr ""

#: part1-components.xml:2413(para) 
msgid "The <classname>Table.CellStyleGenerator</classname> interface allows you to set the CSS style for each individual cell in a table. You need to implement the <methodname>getStyle()</methodname>, which gets the row (item) and column (property) identifiers as parameters and can return a style name for the cell. The returned style name will be concatenated to prefix \"<literal>v-table-cell-content-</literal>\". <placeholder-1/> Alternatively, you can use a <classname>Table.ColumnGenerator</classname> (see <xref linkend=\"components.table.columngenerator\"/>) to generate the actual UI components of the cells and add style names to them. A cell style generator is not used for the cells in generated columns."
msgstr ""

#: part1-components.xml:2473(para) 
msgid "You can then style the cells, for example, as follows:"
msgstr ""

#: part1-components.xml:2509(para) 
msgid "The table will look as shown in <xref linkend=\"figure.components.table.cell-style\"/>."
msgstr ""

#: part1-components.xml:2515(title) 
msgid "Cell Style Generator for a Table"
msgstr ""

#: part1-components.xml:2529(title) 
msgid "Table Features"
msgstr ""

#: part1-components.xml:2532(title) 
msgid "Page Length and Scrollbar"
msgstr ""

#: part1-components.xml:2534(para) 
msgid "The default style for <classname>Table</classname> provides a table with a scrollbar. The scrollbar is located at the right side of the table and becomes visible when the number of items in the table exceeds the page length, that is, the number of visible items. You can set the page length with <methodname>setPageLength()</methodname>."
msgstr ""

#: part1-components.xml:2542(para) 
msgid "Setting the page length to zero makes all the rows in a table visible, no matter how many rows there are. Notice that this also effectively disables buffering, as all the entire table is loaded to the browser at once. Using such tables to generate reports does not scale up very well, as there is some inevitable overhead in rendering a table with Ajax. For very large reports, generating HTML directly is a more scalable solution."
msgstr ""

#: part1-components.xml:2554(title) 
msgid "Organizing Columns"
msgstr ""

#: part1-components.xml:2556(para) 
msgid "The default scrollable style supports most of the table features. User can resize the columns by dragging their borders, change the sorting by clicking on the column headers, collapse the columns if <parameter>columnCollapsingAllowed</parameter> is <parameter>true</parameter>, and reorder them if <parameter>columnReorderingAllowed</parameter> is <parameter>true</parameter>. You can set the column width of individual columns with <methodname>setColumnWidth()</methodname>."
msgstr ""

#: part1-components.xml:2569(title) 
msgid "Components Inside a Table"
msgstr ""

#: part1-components.xml:2571(para) 
msgid "The cells of a <classname>Table</classname> can contain any user interface components, not just strings. If the rows are higher than the row height defined in the default theme, you have to define the proper row height in a custom theme."
msgstr ""

#: part1-components.xml:2578(para) 
msgid "When handling events for components inside a <classname>Table</classname>, such as for the <classname>Button</classname> in the example below, you usually need to know the item the component belongs to. Components do not themselves know about the table or the specific item in which a component is contained. Therefore, the handling method must use some other means for finding out the Item ID of the item. There are a few possibilities. Usually the easiest way is to use the <methodname>setData()</methodname> method to attach an arbitrary object to a component. You can subclass the component and include the identity information there. You can also simply search the entire table for the item with the component, although that solution may not be so scalable."
msgstr ""

#: part1-components.xml:2594(para) 
msgid "The example below includes table rows with a <classname>Label</classname> in XHTML formatting mode, a multiline <classname>TextField</classname>, a <classname>CheckBox</classname>, and a <classname>Button</classname> that shows as a link."
msgstr ""

#: part1-components.xml:2653(para) 
msgid "The row height has to be set higher than the default with a style rule such as the following:"
msgstr ""

#: part1-components.xml:2663(para) 
msgid "The table will look as shown in <xref linkend=\"figure.components.table.components-inside\"/>."
msgstr ""

#: part1-components.xml:2669(title) 
msgid "Components in a Table"
msgstr ""

#: part1-components.xml:2679(title) 
msgid "Editing the Values of a Table"
msgstr ""

#: part1-components.xml:2681(para) 
msgid "Normally, a <classname>Table</classname> simply displays the items and their fields as text. If you want to allow the user to edit the values, you can either put them inside components as we did above, or you can simply call <methodname>setEditable(true)</methodname> and the cells are automatically turned into editable fields."
msgstr ""

#: part1-components.xml:2689(para) 
msgid "Let us begin with a regular table with a some columns with usual Java types, namely a <classname>Date</classname>, <classname>Boolean</classname>, and a <classname>String</classname>."
msgstr ""

#: part1-components.xml:2718(para) 
msgid "You could put the table in editable mode right away if you need to. We'll continue the example by adding a mechanism to switch the <classname>Table</classname> from and to the editable mode."
msgstr ""

#: part1-components.xml:2734(para) 
msgid "Now, when you check to checkbox, the components in the table turn into editable fields, as shown in <xref linkend=\"figure.component.table.editable\"/>."
msgstr ""

#: part1-components.xml:2741(title) 
msgid "A Table in Normal and Editable Mode"
msgstr ""

#: part1-components.xml:2752(para) 
msgid "The field components that allow editing the values of particular types in a table are defined in a field factory that implements the <classname>TableFieldFactory</classname> interface. The default implementation is <classname>DefaultFieldFactory</classname>, which offers the following crude mappings:"
msgstr ""

#: part1-components.xml:2761(title) 
msgid "Type to Field Mappings in <classname>DefaultFieldFactory</classname>"
msgstr ""

#: part1-components.xml:2765(entry) 
msgid "Property Type"
msgstr ""

#: part1-components.xml:2766(entry) 
msgid "Mapped to Field Class"
msgstr ""

#: part1-components.xml:2771(classname) 
msgid "Date"
msgstr ""

#: part1-components.xml:2772(classname) 
msgid "DateField"
msgstr ""

#: part1-components.xml:2772(entry) part1-components.xml:2776(entry) 
msgid "A <placeholder-1/>."
msgstr ""

#: part1-components.xml:2775(classname) 
msgid "Boolean"
msgstr ""

#: part1-components.xml:2779(classname) 
msgid "Item"
msgstr ""

#: part1-components.xml:2781(classname) part1-components.xml:2785(classname) part1-components.xml:3623(classname) part1-components.xml:3722(classname) 
msgid "Form"
msgstr ""

#: part1-components.xml:2783(classname) 
msgid "FormFieldFactory"
msgstr ""

#: part1-components.xml:2781(entry) 
msgid "A <placeholder-1/>. The fields of the form are automatically created from the item's properties using a <placeholder-2/>. The normal use for this property type is inside a <placeholder-3/> and is less useful inside a <placeholder-4/>."
msgstr ""

#: part1-components.xml:2789(emphasis) 
msgid "others"
msgstr ""

#: part1-components.xml:2791(entry) 
msgid "A <placeholder-1/>. The text field manages conversions from the basic types, if possible."
msgstr ""

#: part1-components.xml:2799(para) 
msgid "Field factories are covered with more detail in <xref linkend=\"components.form.binding\"/>. You could just implement the <classname>TableFieldFactory</classname> interface, but we recommend that you extend the <classname>DefaultFieldFactory</classname> according to your needs. In the default implementation, the mappings are defined in the <methodname>createFieldByPropertyType()</methodname> method (you might want to look at the source code) both for tables and forms."
msgstr ""

#: part1-components.xml:2813(title) 
msgid "Iterating Over a Table"
msgstr ""

#: part1-components.xml:2815(para) 
msgid "As the items in a <classname>Table</classname> are not indexed, iterating over the items has to be done using an iterator. The <methodname>getItemIds()</methodname> method of the <classname>Container</classname> interface of <classname>Table</classname> returns a <classname>Collection</classname> of item identifiers over which you can iterate using an <classname>Iterator</classname>. For an example about iterating over a <classname>Table</classname>, please see <xref linkend=\"datamodel.container\"/>. Notice that you may not modify the <classname>Table</classname> during iteration, that is, add or remove items. Changing the data is allowed."
msgstr ""

#: part1-components.xml:2831(title) 
msgid "Generated Table Columns"
msgstr ""

#: part1-components.xml:2833(para) 
msgid "You might want to have a column that has values calculated from other columns. Or you might want to format table columns in some way, for example if you have columns that display currencies. The <classname>ColumnGenerator</classname> interface allows defining custom generators for such columns."
msgstr ""

#: part1-components.xml:2841(para) 
msgid "You add new generated columns to a <classname>Table</classname> with <methodname>addGeneratedColumn()</methodname>. It takes the column identifier as its parameters. Usually you want to have a more user-friendly and possibly internationalized column header. You can set the header and a possible icon by calling <methodname>addContainerProperty()</methodname><emphasis>before</emphasis> adding the generated column."
msgstr ""

#: part1-components.xml:2871(para) 
msgid "Notice that the <methodname>addGeneratedColumn()</methodname> always places the generated columns as the last column, even if you defined some other order previously. You will have to set the proper order with <methodname>setVisibleColumns()</methodname>."
msgstr ""

#: part1-components.xml:2880(para) 
msgid "The generators are objects that implement the <classname>Table.ColumnGenerator</classname> interface and its <methodname>generateCell()</methodname> method. The method gets the identity of the item and column as its parameters, in addition to the table object. It has to return a component object."
msgstr ""

#: part1-components.xml:2888(para) 
msgid "The following example defines a generator for formatting <classname>Double</classname> valued fields according to a format string (as in <classname>java.util.Formatter</classname>)."
msgstr ""

#. para>
#. 				If you wish to have a custom style for the cells, you have to set it in
#. 				the generator. A <classname>CellStyleGenerator</classname> defined for a
#. 				table will not be called for the cells of generated columns.
#. 			</para
#: part1-components.xml:2938(para) 
msgid "The generator is called for all the visible (or more accurately cached) items in a table. If the user scrolls the table to another position in the table, the columns of the new visible rows are generated dynamically. The columns in the visible (cached) rows are also generated always when an item has a value change. It is therefore usually safe to calculate the value of generated cells from the values of different rows (items)."
msgstr ""

#: part1-components.xml:2947(para) 
msgid "When you set a table as <parameter>editable</parameter>, regular fields will change to editing fields. When the user changes the values in the fields, the generated columns will be updated automatically. Putting a table with generated columns in editable mode has a few quirks. The editable mode of <classname>Table</classname> does not affect generated columns. You have two alternatives: either you generate the editing fields in the generator or, in case of formatter generators, remove the generator in the editable mode. The example below uses the latter approach."
msgstr ""

#: part1-components.xml:2988(para) 
msgid "You will also have to set the editing fields in <parameter>immediate</parameter> mode to have the update occur immediately when an edit field loses the focus. You can set the fields in <parameter>immediate</parameter> mode with the a custom <classname>TableFieldFactory</classname>, such as the one given below, that just extends the default implementation to set the mode:"
msgstr ""

#: part1-components.xml:3015(para) 
msgid "If you generate the editing fields with the column generator, you avoid having to use such a field factory, but of course have to generate the fields for both normal and editable modes."
msgstr ""

#: part1-components.xml:3021(para) 
msgid "<xref linkend=\"figure.ui.table.generated\"/> shows a table with columns calculated (blue) and simply formatted (black) with column generators."
msgstr ""

#: part1-components.xml:3028(title) 
msgid "Table with Generated Columns in Normal and Editable Mode"
msgstr ""

#: part1-components.xml:3041(para) 
msgid "You can find the complete generated columns example in the Feature Browser demo application in the installation package, in <classname>com.vaadin.demo.featurebrowser.GeneratedColumnExample.java</classname>."
msgstr ""

#: part1-components.xml:3053(classname) 
msgid "Tree"
msgstr ""

#: part1-components.xml:3055(para) 
msgid "The <classname>Tree</classname> component allows a natural way to represent data that has hierarchical relationships, such as filesystems or message threads. The <classname>Tree</classname> component in Vaadin works much like the tree components of most modern desktop user interface toolkits, for example in directory browsing."
msgstr ""

#: part1-components.xml:3063(para) 
msgid "The typical use of the <classname>Tree</classname> component is for displaying a hierachical menu, like a menu on the left side of the screen, as in <xref linkend=\"figure.components.tree\"/>, or for displaying filesystems or other hierarchical datasets. The <parameter>menu</parameter> style makes the appearance of the tree more suitable for this purpose."
msgstr ""

#: part1-components.xml:3117(para) 
msgid "<xref linkend=\"figure.components.tree\"/> below shows the tree from the code example in a practical situation."
msgstr ""

#: part1-components.xml:3123(title) 
msgid "A <classname>Tree</classname> Component as a Menu"
msgstr ""

#: part1-components.xml:3134(para) 
msgid "You can read or set the currently selected item by the value property of the <classname>Tree</classname> component, that is, with <methodname>getValue()</methodname> and <methodname>setValue()</methodname>. When the user clicks an item on a tree, the tree will receive an <classname>ValueChangeEvent</classname>, which you can catch with a <classname>ValueChangeListener</classname>. To receive the event immediately after the click, you need to set the tree as <classname>setImmediate(true)</classname>."
msgstr ""

#: part1-components.xml:3145(para) 
msgid "The <classname>Tree</classname> component uses <classname>Container</classname> data sources much like the <classname>Table</classname> component, with the addition that it also utilizes hierarchy information maintained by a <classname>HierarchicalContainer</classname>. The contained items can be of any item type supported by the container. The default container and its <methodname>addItem()</methodname> assume that the items are strings and the string value is used as the item ID."
msgstr ""

#: part1-components.xml:3158(classname) 
msgid "MenuBar"
msgstr ""

#: part1-components.xml:3160(para) 
msgid "The <classname>MenuBar</classname> component allows creating horizontal dropdown menus, much like the main menu in desktop applications."
msgstr ""

#: part1-components.xml:3169(para) 
msgid "You insert the top-level menu items to a <classname>MenuBar</classname> object with the <methodname>addItem()</methodname> method. It takes a string label, an icon resource, and a command as its parameters. The icon and command are not required and can be <parameter>null</parameter>."
msgstr ""

#: part1-components.xml:3179(para) 
msgid "The command is called when the user clicks the item. A menu command is a class that implements the <classname>MenuBar.Command</classname> interface."
msgstr ""

#: part1-components.xml:3197(para) 
msgid "The <methodname>addItem()</methodname> method returns a <classname>MenuBar.MenuItem</classname> object, which you can use to add sub-menu items. The <classname>MenuItem</classname> has an identical <methodname>addItem()</methodname> method."
msgstr ""

#: part1-components.xml:3226(para) 
msgid "The menu will look as follows:"
msgstr ""

#: part1-components.xml:3231(title) 
msgid "Menu Bar"
msgstr ""

#: part1-components.xml:3249(para) 
msgid "The menu bar has the overall style name <literal>.v-menubar</literal>. Each menu item has <literal>.gwt-MenuItem</literal> style normally and <literal>.gwt-MenuItem-selected</literal> when the item is selected."
msgstr ""

#: part1-components.xml:3260(classname) 
msgid "Embedded"
msgstr ""

#: part1-components.xml:3262(para) 
msgid "The <classname>Embedded</classname> component allows displaying embedded media objects, such as images, animations, or any embeddable media type supported by the browser. The contents of an <classname>Embedded</classname> component are managed as <emphasis>resources</emphasis>. For documentation on resources, see <xref linkend=\"application.resources\"/>."
msgstr ""

#: part1-components.xml:3270(para) 
msgid "The following example displays an image from the same Java package as the class itself using the class loader."
msgstr ""

#: part1-components.xml:3281(title) 
msgid "Embedded Image"
msgstr ""

#: part1-components.xml:3292(para) 
msgid "The <classname>Embedded</classname> component supports several different content types, which are rendered differently in HTML. You can set the content type with <methodname>setType()</methodname>, although for images, as in the above example, the type is determined automatically."
msgstr ""

#: part1-components.xml:3301(parameter) 
msgid "Embedded.TYPE_OBJECT"
msgstr ""

#: part1-components.xml:3304(tag) 
msgid "&lt;object&gt;"
msgstr ""

#: part1-components.xml:3304(tag) 
msgid "&lt;embed&gt;"
msgstr ""

#: part1-components.xml:3302(listitem) 
msgid "The default embedded type, allows embedding certain file types inside HTML <placeholder-1/> and <placeholder-2/> elements."
msgstr ""

#: part1-components.xml:3308(parameter) 
msgid "Embedded.TYPE_IMAGE"
msgstr ""

#: part1-components.xml:3310(tag) 
msgid "&lt;img&gt;"
msgstr ""

#: part1-components.xml:3309(listitem) 
msgid "Embeds an image inside a HTML <placeholder-1/> element."
msgstr ""

#: part1-components.xml:3314(parameter) 
msgid "Embedded.TYPE_BROWSER"
msgstr ""

#: part1-components.xml:3316(tag) 
msgid "&lt;iframe&gt;"
msgstr ""

#: part1-components.xml:3315(listitem) 
msgid "Embeds a browser frame inside a HTML <placeholder-1/> element."
msgstr ""

#: part1-components.xml:3323(title) 
msgid "Embedded Objects"
msgstr ""

#: part1-components.xml:3325(para) 
msgid "The <parameter>Embedded.TYPE_OBJECT</parameter> is the default and most generic embedded type, which allows embedding media objects inside HTML <tag>&lt;object&gt;</tag> and <tag>&lt;embed&gt;</tag> elements. You need define the MIME type for the object type."
msgstr ""

#: part1-components.xml:3332(para) 
msgid "Currently, only Shockwave Flash animations are supported (MIME type <literal>application/x-shockwave-flash</literal>)."
msgstr ""

#: part1-components.xml:3351(para) 
msgid "You can set object parameters with <methodname>setParameter()</methodname>, which takes a parameter's name and value as strings. The object parameters are included in the HTML as <tag>&lt;param&gt;</tag> elements."
msgstr ""

#: part1-components.xml:3360(title) 
msgid "Embedded Images"
msgstr ""

#: part1-components.xml:3362(para) 
msgid "Images are embedded with the type <parameter>Embedded.TYPE_IMAGE</parameter>, although you do not normally need to set the type explicitly, as it is recognized automatically from the MIME type of the resource, as in the example above."
msgstr ""

#: part1-components.xml:3369(para) 
msgid "You can find another example of displaying an image from <classname>FileResource</classname> in <xref linkend=\"components.upload\"/>. Another example, in <xref linkend=\"application.resources.stream\"/>, shows how you can generate the content of an <classname>Embedded</classname> component dynamically using a <classname>StreamResource</classname>."
msgstr ""

#: part1-components.xml:3378(para) 
msgid "If you have a dynamically generated image, for example with a <classname>StreamResource</classname>, and the data changes, you need to reload the image in the browser. Because of how caching is handled in some browsers, you are best off by renaming the filename of the resource with a unique name, such as one including a timestamp. You should set cache time to zero with <methodname>setCacheTime()</methodname> for the resource object when you create it."
msgstr ""

#: part1-components.xml:3401(para) 
msgid "When refreshing, you also need to call <methodname>requestRepaint()</methodname> for the <classname>Embedded</classname> object."
msgstr ""

#: part1-components.xml:3417(para) 
msgid "You can find more detailed information about the <classname>StreamResource</classname> in <xref linkend=\"application.resources.stream\"/>."
msgstr ""

#: part1-components.xml:3426(title) 
msgid "Browser Frames"
msgstr ""

#: part1-components.xml:3428(para) 
msgid "The browser frame type allows you to embed external content inside an HTML <tag>&lt;iframe&gt;</tag> element. You can refer to a URL with an <classname>ExternalResource</classname> object. URLs are given with the standard Java <classname>URL</classname> class."
msgstr ""

#: part1-components.xml:3445(classname) 
msgid "Upload"
msgstr ""

#: part1-components.xml:3447(para) 
msgid "The <classname>Upload</classname> component allows a user to upload files to the server. It displays a file name entry box, a file selection button, and an upload submit button. The user can either write the filename in the text area or click the <guibutton>Browse</guibutton> button to select a file. After the file is selected, the user sends the file by pressing the upload submit button."
msgstr ""

#: part1-components.xml:3460(title) 
msgid "Upload Component"
msgstr ""

#: part1-components.xml:3468(para) 
msgid "You can set the text of the upload button with <methodname>setButtonCaption()</methodname>, as in the example above, but it is difficult to change the look of the <guibutton>Browse</guibutton> button. This is a security feature of web browsers. The language of the <guibutton>Browse</guibutton> button is determined by the browser, so if you wish to have the language of the <classname>Upload</classname> component consistent, you will have to use the same language in your application."
msgstr ""

#: part1-components.xml:3480(para) 
msgid "The uploaded files are typically stored as files in a file system, in a database, or as temporary objects in memory. The upload component writes the received data to an <classname>java.io.OutputStream</classname> so you have plenty of freedom in how you can process the upload content."
msgstr ""

#: part1-components.xml:3488(para) 
msgid "To use the <classname>Upload</classname> component, you need to define a class that implements the <classname>Upload.Receiver</classname> interface. The <methodname>receiveUpload()</methodname> method is called when the user clicks the submit button. The method must return an <classname>OutputStream</classname>. To do this, it typically creates a <classname>File</classname> or a memory buffer where the stream is written. The method gets the file name and MIME type of the file, as reported by the browser."
msgstr ""

#: part1-components.xml:3500(para) 
msgid "When an upload is finished, successfully or unsuccessfully, the <classname>Upload</classname> component will emit the <classname>Upload.FinishedEvent</classname> event. To receive it, you need to implement the <classname>Upload.FinishedListener</classname> interface, and register the listening object in the <classname>Upload</classname> component. The event object will also include the file name, MIME type, and length of the file. Notice that the more specific <classname>Upload.FailedEvent</classname> and <classname>Upload.SucceededEvent</classname> events will be called in the cases where the upload failed or succeeded, respectively."
msgstr ""

#: part1-components.xml:3513(para) 
msgid "The following example allows uploading images to <filename>/tmp/uploads</filename> directory in (UNIX) filesystem (the directory must exist or the upload fails). The component displays the last uploaded image in an <classname>Embedded</classname> component."
msgstr ""

#: part1-components.xml:3601(para) 
msgid "The example does not check the type of the uploaded files in any way, which will cause an error if the content is anything else but an image. The program also assumes that the MIME type of the file is resolved correctly based on the file name extension. After uploading an image, the component will look as show in <xref linkend=\"figure.ui.upload.example\"/> below. The browser shows the <guibutton>Browse</guibutton> button localized."
msgstr ""

#: part1-components.xml:3612(title) 
msgid "Image Upload Example"
msgstr ""

#: part1-components.xml:3625(para) 
msgid "Most web applications need forms. The <classname>Form</classname> component in Vaadin offers an easy way to create forms where the fields can be automatically generated from a data source that is bound to the form. The <classname>BeanItem</classname> adapter allows the data sources to be just JavaBeans or Plain Old Java Objects (POJOs) with just the setter and getter methods. <classname>Form</classname> manages buffering so that the form contents can be committed to the data source only when filling the form is complete, and before that, the user can discard any changes."
msgstr ""

#: part1-components.xml:3636(para) 
msgid "The <classname>Form</classname> component is also a layout, with a bounding box, a caption, a description field, and a special error indicator. As such, it can also be used within logical forms to group input fields."
msgstr ""

#: part1-components.xml:3643(title) 
msgid "Form as a User Interface Component"
msgstr ""

#: part1-components.xml:3645(para) 
msgid "To begin with the <classname>Form</classname>, it is a UI component with a layout suitable for its purpose. A <classname>Form</classname> has a caption, a description, a layout that contains the fields, an error indicator, and a footer, as illustrated in <xref linkend=\"figure.ui.form.layout\"/> below. Unlike with other components, the caption is shown within the border. (See the details below on how to enable the border with CSS, as it may not be enabled in the default style.)"
msgstr ""

#: part1-components.xml:3654(title) 
msgid "Layout of the Form Component"
msgstr ""

#: part1-components.xml:3662(para) 
msgid "Unlike most components, <classname>Form</classname> does not accept the caption in the constructor, as forms are often captionless, but you can give the caption with the <methodname>setCaption()</methodname>. While the description text, which you can set with <classname>setDescription()</classname>, is shown as a tooltip in most other components, a <classname>Form</classname> displays it in top of the form box as shown in the figure above."
msgstr ""

#: part1-components.xml:3672(programlisting) 
#, no-wrap
msgid "<?pocket-size 65% ?><classname>Form</classname> form = new <classname>Form</classname>();\nform.setCaption(\"Form Caption\");\nform.setDescription(\"This is a description of the Form that is \" +\n        \"displayed in the upper part of the form. You normally \" +\n        \"enter some descriptive text about the form and its \" +\n        \"use here.\");\n"
msgstr ""

#: part1-components.xml:3680(para) 
msgid "<classname>Form</classname> has <classname>FormLayout</classname> as its default layout, but you can set any other layout with <methodname>setContent()</methodname>. See <xref linkend=\"layout.components.formlayout\"/> for more information. Note that the <classname>Form</classname> itself handles layout for the description, the footer and other common elements of the form. The user-set layout only manages the contained fields and their captions."
msgstr ""

#: part1-components.xml:3691(para) 
msgid "The <classname>Form</classname> is most of all a container for fields so it offers many kinds of automation for creating and managing fields. You can, of course, create fields directly in the layout, but it is usually more desirable to bind the fields to the connected data source."
msgstr ""

#: part1-components.xml:3698(programlisting) 
#, no-wrap
msgid "<?pocket-size 65% ?><emphasis>// Add a field directly to the layout. This field will\n// not be bound to the data source Item of the form.</emphasis>\nform.getLayout().addComponent(new TextField(\"A Field\"));\n\n<emphasis>// Add a field and bind it to an named item property.</emphasis>\nform.addField(\"another\", new TextField(\"Another Field\"));"
msgstr ""

#: part1-components.xml:3705(para) 
msgid "Binding forms and their fields to data objects is described further in <xref linkend=\"components.form.binding\"/> below."
msgstr ""

#: part1-components.xml:3710(para) 
msgid "The <classname>Form</classname> has a special error indicator inside the form. The indicator can show the following types of error messages:"
msgstr ""

#: part1-components.xml:3716(methodname) 
msgid "setComponentError()"
msgstr ""

#: part1-components.xml:3718(programlisting) 
#, no-wrap
msgid "<?pocket-size 65% ?>form.setComponentError(new UserError(\"This is the error indicator of the Form.\"));"
msgstr ""

#: part1-components.xml:3716(listitem) 
msgid "Errors set with the <placeholder-1/> method of the form. For example: <placeholder-2/>"
msgstr ""

#: part1-components.xml:3723(methodname) 
msgid "addValidator()"
msgstr ""

#: part1-components.xml:3721(listitem) 
msgid "Errors caused by a validator attached to the <placeholder-1/> with <placeholder-2/>."
msgstr ""

#: part1-components.xml:3726(methodname) 
msgid "setValidationVisible(true)"
msgstr ""

#: part1-components.xml:3725(listitem) 
msgid "Errors caused by validators attached to the fields inside forms, if <placeholder-1/> is set for the form. This type of validation is explained futher in <xref linkend=\"components.form.validation\"/> below."
msgstr ""

#: part1-components.xml:3732(methodname) 
msgid "setRequired(true)"
msgstr ""

#: part1-components.xml:3733(methodname) 
msgid "setRequiredError()"
msgstr ""

#: part1-components.xml:3730(listitem) 
msgid "Errors from automatic validation of fields set as <placeholder-1/> with <placeholder-2/> if an error message has also been set with <placeholder-3/>."
msgstr ""

#: part1-components.xml:3736(para) 
msgid "Only a single error is displayed in the error indicator at a time."
msgstr ""

#: part1-components.xml:3740(para) 
msgid "Finally, <classname>Form</classname> has a footer area. The footer is a <classname>HorizontalLayout</classname> by default, but you can change it with <methodname>setFooter()</methodname>."
msgstr ""

#: part1-components.xml:3746(programlisting) 
#, no-wrap
msgid "<?pocket-size 65% ?><emphasis>// Set the footer layout.</emphasis>\nform.<methodname>setFooter</methodname>(new <classname>VerticalLayout</classname>());\n\nform.<methodname>getFooter</methodname>().<methodname>addComponent</methodname>(\n        new <classname>Label</classname>(\"This is the footer area of the Form. \"+\n                  \"You can use any layout here. \"+\n                  \"This is nice for buttons.\"));\n\n// Have a button bar in the footer.\n<classname>HorizontalLayout</classname> okbar = new <classname>HorizontalLayout</classname>();\nokbar.<methodname>setHeight</methodname>(\"25px\");\nform.<methodname>getFooter</methodname>().<methodname>addComponent</methodname>(okbar);\n\n<emphasis>// Add an Ok (commit), Reset (discard), and Cancel buttons\n// for the form.</emphasis>\n<classname>Button</classname> okbutton = new <classname>Button</classname>(\"OK\", form, \"commit\");\nokbar.<methodname>addComponent</methodname>(okbutton);\nokbar.<methodname>setComponentAlignment</methodname>(okbutton, Alignment.TOP_RIGHT);\nokbar.<methodname>addComponent</methodname>(new <classname>Button</classname>(\"Reset\", form, \"discard\"));\nokbar.<methodname>addComponent</methodname>(new <classname>Button</classname>(\"Cancel\"));"
msgstr ""

#: part1-components.xml:3771(programlisting) 
#, no-wrap
msgid ".v-form {}\n.v-form legend\n.v-form fieldset {}\n.v-form-error {}\n.v-form-errormessage {}\n.v-form-description {}"
msgstr ""

#: part1-components.xml:3778(para) 
msgid "The top-level style name of a <classname>Form</classname> component is <literal>v-form</literal>. It is important to notice that the form is implemented as a HTML <literal>&lt;fieldset&gt;</literal>, which allows placing the caption (or \"legend\") inside the border. It would not be so meaningful to set a border for the top-level form element. The following example sets a border around the form, as is done in <xref linkend=\"figure.ui.form.layout\"/> above."
msgstr ""

#: part1-components.xml:3788(programlisting) 
#, no-wrap
msgid ".v-form fieldset {\n    border: thin solid;\n}"
msgstr ""

#: part1-components.xml:3792(para) 
msgid "The top-level element of the form has the style name <literal>v-form-error</literal> if a component error has been set for the form."
msgstr ""

#: part1-components.xml:3803(title) 
msgid "Binding Form to Data"
msgstr ""

#: part1-components.xml:3805(para) 
msgid "The main purpose of the <classname>Form</classname> component is that you can bind it to a data source and let the <classname>Form</classname> generate and manage fields automatically. The data source can be any class that implements the <classname>Item</classname> interface, which is part of the Vaadin Data Model, as described in <xref linkend=\"datamodel\"/>. You can either implement the <classname>Item</classname> interface yourself, which can be overly complicated, or use the ready <classname>BeanItem</classname> adapter to bind the form to any JavaBean object. You can also use <classname>PropertysetItem</classname> to bind the form to an ad hoc set of <classname>Property</classname> objects, resembling a <classname>Map</classname>."
msgstr ""

#: part1-components.xml:3820(para) 
msgid "Let us consider the following simple JavaBean with proper setter and getter methods for the member variables."
msgstr ""

#: part1-components.xml:3847(para) 
msgid "We can now bind this bean to a <classname>Form</classname> using the <classname>BeanItem</classname> adapter as follows."
msgstr ""

#: part1-components.xml:3852(programlisting) 
#, no-wrap
msgid "<?pocket-size 75% ?><emphasis>// Create a form and use FormLayout as its layout.</emphasis>\nfinal <classname>Form</classname> form = new <classname>Form</classname>();\n\n<emphasis>// Set form caption and description texts</emphasis>\nform.setCaption(\"Contact Information\");\nform.setDescription(\"Please specify name of the person and the city where the person lives in.\");\n\n<emphasis>// Create the custom bean.</emphasis>\n<classname>PersonBean</classname> bean = new <classname>PersonBean</classname>();\n\n<emphasis>// Create a bean item that is bound to the bean.</emphasis>\n<classname>BeanItem</classname> item = new <classname>BeanItem</classname>(bean);\n\n<emphasis>// Bind the bean item as the data source for the form.</emphasis>\nform.setItemDataSource(item);"
msgstr ""

#: part1-components.xml:3868(para) 
msgid "The <classname>Form</classname> uses <classname>FormLayout</classname> layout by default and automatically generates the fields for each of the bean properties, as shown in <xref linkend=\"figure.ui.form.binding.bean\"/> below."
msgstr ""

#: part1-components.xml:3876(title) 
msgid "Form Automatically Generated from a Bean"
msgstr ""

#: part1-components.xml:3884(para) 
msgid "The automatically determined order of the fields can be undesirable. To set the order properly, you can use the <methodname>setVisibleItemProperties()</methodname> method of the <classname>Form</classname>, which takes an ordered collection as its parameter. Fields that are not listed in the collection are not included in the form."
msgstr ""

#: part1-components.xml:3893(programlisting) 
#, no-wrap
msgid "<emphasis>// Set the order of the items in the form.</emphasis>\n<classname>Vector</classname> order = new <classname>Vector</classname>();\norder.add(\"city\");\norder.add(\"name\");\nform.setVisibleItemProperties(order);"
msgstr ""

#: part1-components.xml:3899(para) 
msgid "The form uses the property identifiers as the captions of the fields by default. If you want to have more proper captions for the fields, which is often the case, you need to use a <classname>FieldFactory</classname> to create the fields, as is shown in the section below."
msgstr ""

#: part1-components.xml:3907(title) 
msgid "Generating Proper Fields with a <classname>FormFieldFactory</classname>"
msgstr ""

#: part1-components.xml:3909(para) 
msgid "The form generates the fields automatically using very coarse logic. A <classname>String</classname>, <classname>int</classname>, or <classname>double</classname> will result in a <classname>TextField</classname> alike, regardless of the meaning of the field. You might want to have a city name to be input with a combo box, for example. You can create such custom fields by implementing the <methodname>createField()</methodname> method in the <classname>FormFieldFactory</classname> interface."
msgstr ""

#: part1-components.xml:3920(para) 
msgid "The default implementation, <classname>DefaultFieldFactory</classname> is shared with the <classname>Table</classname> component: it also implements the <classname>TableFieldFactory</classname> interface. This allows the <classname>DefaultFieldFactory</classname> to create the fields for both purposes with the same logic. It is usually simplest to just extend the default implementation instead of implementing the interfaces from scratch. You should consult the source code of <classname>DefaultFieldFactory</classname> to see how it works; you may want to reimplement <methodname>createFieldByPropertyType()</methodname>, which actually creates the fields by type, instead of the <methodname>createField()</methodname>."
msgstr ""

#. TODO: describe the createField() method somehow.
#: part1-components.xml:3937(para) 
msgid "Below is an example of implementing the <classname>FormFieldFactory</classname> interface for a specific form, using the names of the fields of the form to create the editable field components."
msgstr ""

#. TODO: Have an example that extends DefaultFieldFactory?
#: part1-components.xml:3946(programlisting) 
#, no-wrap
msgid "<?pocket-size 65% ?>class MyFieldFactory implements FormFieldFactory {\n    public Field createField(Item item, Object propertyId,\n                             Component uiContext) {\n        // Identify the fields by their Property ID.\n        String pid = (String) propertyId;\n        if (pid.equals(\"name\")) {\n            return new TextField(\"Name\");\n        } else if (pid.equals(\"city\")) {\n            Select select = new Select(\"City\");\n            select.addItem(\"Berlin\");\n            select.addItem(\"Helsinki\");\n            select.addItem(\"London\");\n            select.addItem(\"New York\");\n            select.addItem(\"Turku\");\n            select.setNewItemsAllowed(true);\n            return select;\n        }\n        \n        return null; // Invalid field (property) name.\n    }\n}"
msgstr ""

#: part1-components.xml:3968(para) 
msgid "You set a <classname>Form</classname> to use a custom field factory with <methodname>setFieldFactory()</methodname>:"
msgstr ""

#: part1-components.xml:3973(programlisting) 
#, no-wrap
msgid "form.setFieldFactory(new MyFieldFactory());"
msgstr ""

#: part1-components.xml:3974(para) 
msgid "The earlier example will now look as shown in <xref linkend=\"figure.ui.form.binding.fieldfactory\"/>."
msgstr ""

#: part1-components.xml:3979(title) 
msgid "Form Fields Generated with a <classname>FormFieldFactory</classname>"
msgstr ""

#: part1-components.xml:3989(title) 
msgid "Validating Form Input"
msgstr ""

#: part1-components.xml:3991(para) 
msgid "Validation of the form input is one of the most important tasks in handling forms. The fields in Vaadin can be bound to validators. The validation provides feedback about bad input and the forms can also manage validation results and accept the input only if all validations are successful. Fields can also be set as <emphasis>required</emphasis>, which is a special built-in validator. The validators work on the server-side."
msgstr ""

#: part1-components.xml:4002(title) 
msgid "Using Validators in Forms"
msgstr ""

#: part1-components.xml:4004(para) 
msgid "Validators check the validity of input and, if the input is invalid, can provide an error message through an exception. Validators are classes that implement the <classname>Validator</classname> interface. The interface has two methods that you must implement: <methodname>isValid()</methodname> that returns the success or failure as a truth value, and <methodname>validate()</methodname>, which reports a failure with an exception. The exception can be associated with an error message describing the details of the error."
msgstr ""

#: part1-components.xml:4015(para) 
msgid "Simple validators that only need to produce a single error message in case the validation fails can inherit from <classname>AbstractValidator</classname> or <classname>AbstractStringValidator</classname>. The Vaadin also provides a number of standard validators, including <classname>IntegerValidator</classname> and <classname>DoubleValidator</classname> for validating numerical input, <classname>StringLengthValidator</classname>, <classname>EmailValidator</classname> and the more general <classname>RegexpValidator</classname> for checking that a string matches a Java regular expression:"
msgstr ""

#: part1-components.xml:4029(programlisting) 
#, no-wrap
msgid "<?pocket-size 65% ?>// Postal code that must be 5 digits (10000-99999).\nTextField field = new TextField(\"Postal Code\");\nfield.setColumns(5);\n\n// Create the validator\nValidator postalCodeValidator = new RegexpValidator(\n    \"[1-9][0-9]{4}\", \"Postal code must be a number 10000-99999.\");\nfield.addValidator(postalCodeValidator);"
msgstr ""

#: part1-components.xml:4038(para) 
msgid "If you are using a custom <classname>FieldFactory</classname> to generate the fields, you may want to set the validators for fields there. It is useful to have the form in <emphasis>immediate</emphasis> mode:"
msgstr ""

#: part1-components.xml:4045(programlisting) 
#, no-wrap
msgid "<?pocket-size 65% ?>// Set the form to act immediately on user input. This is\n// necessary for the validation of the fields to occur immediately\n// when the input focus changes and not just on commit.\nform.setImmediate(true);"
msgstr ""

#: part1-components.xml:4050(para) 
msgid "Validation is done always when you call the <methodname>commit()</methodname> method of the <classname>Form</classname>."
msgstr ""

#: part1-components.xml:4056(programlisting) 
#, no-wrap
msgid "<?pocket-size 65% ?>// The Commit button calls form.commit().\nButton commit = new Button(\"Commit\", form, \"commit\");"
msgstr ""

#: part1-components.xml:4059(para) 
msgid "If any of the validators in the form fail, the commit will fail and a validation exception message is displayed in the error indicator of the form. If the commit is successful, the input data is written to the data source. Notice that <methodname>commit()</methodname> also implicitly sets <methodname>setValidationVisible(true)</methodname> (if <methodname>setValidationVisibleOnCommit()</methodname> is <parameter>true</parameter>, as is the default). This makes the error indicators visible even if they were previously not visible."
msgstr ""

#: part1-components.xml:4071(title) 
msgid "Form Validation in Action"
msgstr ""

#: part1-components.xml:4079(para) 
msgid "For cases in which more complex error handling is required, the validator can also implement the <classname>Validator</classname> interface directly:"
msgstr ""

#: part1-components.xml:4118(title) 
msgid "Required Fields in Forms"
msgstr ""

#: part1-components.xml:4120(para) 
msgid "Setting a field as <parameter>required</parameter> outside a form is usually just a visual clue to the user. Leaving a required field empty does not display any error indicator in the empty field as a failed validation does. However, if you set a form field as required with <methodname>setRequired(true)</methodname> and give an error message with <methodname>setRequiredError()</methodname> and the user leaves the required field empty, the form will display the error message in its error indicator."
msgstr ""

#: part1-components.xml:4131(programlisting) 
#, no-wrap
msgid "<?pocket-size 65% ?>form.getField(\"name\").setRequired(true);\nform.getField(\"name\").setRequiredError(\"Name is missing\");\nform.getField(\"address\").setRequired(true); // No error message"
msgstr ""

#: part1-components.xml:4135(para) 
msgid "To have the validation done immediately when the fields lose focus, you should set the form as <emphasis>immediate</emphasis>, as was done in the section above."
msgstr ""

#: part1-components.xml:4142(title) 
msgid "Empty Required Field After Clicking Commit"
msgstr ""

#: part1-components.xml:4151(para) 
msgid "It is important that you provide the user with feedback from failed validation of required fields either by setting an error message or by providing the feedback by other means."
msgstr ""

#: part1-components.xml:4158(para) 
msgid "Otherwise, when a user clicks the <guibutton>Ok</guibutton> button (commits the form), the button does not appear to work and the form does not indicate any reason. As an alternative to setting the error message, you can handle the validation error and provide the feedback about the problem with a different mechanism."
msgstr ""

#: part1-components.xml:4170(title) 
msgid "Buffering Form Data"
msgstr ""

#: part1-components.xml:4172(para) 
msgid "Buffering means keeping the edited data in a buffer and writing it to the data source only when the <methodname>commit()</methodname> method is called for the component. If the user has made changes to a buffer, calling <methodname>discard()</methodname> restores the buffer from the data source. Buffering is actually a feature of all <classname>Field</classname> components and <classname>Form</classname> is a <classname>Field</classname>. <classname>Form</classname> manages the buffering of its contained fields so that if <methodname>commit()</methodname> or <methodname>discard()</methodname> is called for the <classname>Form</classname>, it calls the respective method for all of its managed fields."
msgstr ""

#: part1-components.xml:4185(programlisting) 
#, no-wrap
msgid "<?pocket-size 75% ?>final Form form = new Form();\n...add components...\n\n// Enable buffering.\nform.setWriteThrough(false);\n\n// The Ok button calls form.commit().\nButton commit = new Button(\"Ok\", form, \"commit\");\n\n// The Restore button calls form.discard().\nButton restore = new Button(\"Restore\", form, \"discard\");"
msgstr ""

#: part1-components.xml:4197(para) 
msgid "The Form example in the Feature Browser of Vaadin demonstrates buffering in forms. The <emphasis>Widget caching demo</emphasis> in Additional demos demonstrates buffering in other <classname>Field</classname> components, its source code is available in <filename>BufferedComponents.java</filename>."
msgstr ""

#: part1-components.xml:4208(classname) 
msgid "ProgressIndicator"
msgstr ""

#: part1-components.xml:4210(para) 
msgid "The <classname>ProgressIndicator</classname> component allows displaying the progress of a task graphically. The progress is given as a floating-point value between 0.0 and 1.0."
msgstr ""

#: part1-components.xml:4217(title) 
msgid "The Progress Indicator Component"
msgstr ""

#: part1-components.xml:4225(para) 
msgid "The progress indicator polls the server for updates for its value. If the value has changed, the progress is updated. Notice that the user application does not have to handle any polling event, but updating the component is done automatically."
msgstr ""

#: part1-components.xml:4232(para) 
msgid "Creating a progress indicator is just like with any other component. You can give the initial progress value as a parameter for the constructor. The default polling frequency is 1000 milliseconds (one second), but you can set some other interval with the <methodname>setPollingInterval()</methodname> method."
msgstr ""

#: part1-components.xml:4256(para) 
msgid "The default style for the progress indicator uses an animated GIF image (<filename>img/base.gif</filename>) as the base background for the component. The progress is a <literal>&lt;div&gt;</literal> element inside the base. When the progress element grows, it covers more and more of the base background. By default, the graphic of the progress element is defined in <filename>img/progress.png</filename> under the default style directory. See <filename>com.vaadin.terminal.gwt/public/default/progressindicator/progressindicator.css</filename>."
msgstr ""

#: part1-components.xml:4269(title) 
msgid "Doing Heavy Computation"
msgstr ""

#: part1-components.xml:4271(para) 
msgid "The progress indicator is often used to display the progress of a heavy server-side computation task. In the following example, we create a thread in the server to do some \"heavy work\". All the thread needs to do is to set the value of the progress indicator with <methodname>setValue()</methodname> and the current progress is displayed automatically when the browser polls the server."
msgstr ""

#: part1-components.xml:4334(title) 
msgid "Starting Heavy Work"
msgstr ""

#: part1-components.xml:4347(title) 
msgid "Component Composition with <classname>CustomComponent</classname>"
msgstr ""

#. UNFINISHED: Check that this is up-to-date. Probably is.
#: part1-components.xml:4351(para) 
msgid "The ease of making new user interface components is one of the core features of Vaadin. New components can be created at several levels. Typically, you simply combine existing built-in components to produce composite components. In many applications, such composite components make up the majority of the user interface."
msgstr ""

#: part1-components.xml:4359(para) 
msgid "The easiest way to create new components is to combine existing ones. This can be done in two basic ways: inheritance and management. With inheritance, you inherit some containing class, typically <classname>CustomComponent</classname> or some abstract class such as <classname>AbstractComponent</classname>, <classname>AbstractField</classname>, or <classname>AbstractComponentContainer</classname>. With management, you create a class that creates the needed components under some layout and handles their events. Both of these patterns are used extensively in the examples in <xref linkend=\"components\"/> and elsewhere."
msgstr ""

#: part1-components.xml:4372(para) 
msgid "The <classname>CustomComponent</classname> class is a simple implementation of the <classname>Component</classname> interface that provides a simple way to create new user interface components by the composition of existing components."
msgstr ""

#: part1-components.xml:4379(para) 
msgid "Composition is done by inheriting the <classname>CustomComponent</classname> class and setting the <emphasis>composite root</emphasis> inside the component with <methodname>setCompositionRoot()</methodname>. The composite root is typically a layout component that contains multiple components."
msgstr ""

#. TODO: Example.
#: part1-components.xml:4388(para) 
msgid "You can also create your own low-level components, for example existing Google Web Toolkit components. It is also possible to extend the functionality of existing components. Development of custom GWT components is covered in <xref linkend=\"gwt\"/>."
msgstr ""

#. Put one translator per line, in the form of NAME <EMAIL>, YEAR1, YEAR2.
#: part1-components.xml:0(None) 
msgid "translator-credits"
msgstr ""

