# SOME DESCRIPTIVE TITLE.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"Report-Msgid-Bugs-To: http://bugs.kde.org\n"
"POT-Creation-Date: 2011-11-03 16:11+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <kde-i18n-doc@kde.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. Tag: title
#: part1-advanced.xml:4
#, no-c-format
msgid "Advanced Web Application Topics"
msgstr ""

#. Tag: para
#: part1-advanced.xml:6
#, no-c-format
msgid "This chapter covers various features and topics often needed in applications. While other topics could be considered as \"advanced\", the first section gives a brief introduction to AJAX development for beginners."
msgstr ""

#. Tag: title
#: part1-advanced.xml:13
#, no-c-format
msgid "Special Characteristics of AJAX Applications"
msgstr ""

#. Tag: para
#: part1-advanced.xml:15
#, no-c-format
msgid "New to AJAX? This section is intended for people familiar with the development of either traditional web applications or desktop applications, who are entering AJAX-enabled web application development. AJAX application development has a few special characteristics with respect to other types of applications. Possibly the most important one is how the display is managed in the web browser."
msgstr ""

#. Tag: para
#: part1-advanced.xml:24
#, no-c-format
msgid "The web was originally not built for applications, but for hypertext pages that you can view with a browser. The purpose of web pages is to provide <emphasis>content</emphasis> for the user. Application software has a somewhat different purpose; usually to allow you to work on some data or content, much of which is not ever intended to be accessible through a web browser as web pages. As the web is inherently page-based, conventional web applications had to work with page requests and output HTML as response. JavaScript and AJAX have made it possible to let go of the pages."
msgstr ""

#. Tag: para
#: part1-advanced.xml:36
#, no-c-format
msgid "Pages are largely an unknown concept to conventional desktop applications. At most, desktop applications can open multiple windows, but usually they work with a single main window, with an occasional dialog window here and there. Same goes usually for web applications developed with Vaadin: an application typically runs on a single page, changing the layout as needed and popping up dialog boxes."
msgstr ""

#. Tag: para
#: part1-advanced.xml:46
#, no-c-format
msgid "Not having to load pages and use hyperlinks to communicate all user interaction is a relief for application development. However, they are an important feature that ordinary desktop applications lack. They allow referencing different functionalities of an application or resources managed by the application. They are also important for integration with external applications."
msgstr ""

#. Tag: para
#: part1-advanced.xml:55
#, no-c-format
msgid "Certain resources can be identified through a <firstterm>URI</firstterm> or <firstterm>Universal Resource Identifier</firstterm>. A URI can easily be passed around or stored as a bookmark. We will see in <xref linkend=\"section.application.resources.uri\"/> how you can retrieve the URI of a page request. Similarly, a page request can have query parameters, which can be handled as detailed in <xref linkend=\"section.application.resources.parameters\"/>."
msgstr ""

#. Tag: para
#: part1-advanced.xml:66
#, no-c-format
msgid "Using URIs or request parameters to access functionalities or content is not as straight-forward as in conventional page-based web applications. Vaadin, just as any other AJAX framework, uses browser cookies not just for tracking users but also for tracking the application state. Cookies are unique in a browser, so any two windows share the same cookies and therefore also the state. The advantage is that you can close your browser and open it again and the application will be in the state where you left off (except for components such as text fields which did not have the immediate attribute enabled). The disadvantage is that there is no good way to distinguish between the windows, so there can usually be only a single application window. Even if there were several, you would have trouble with synchronization of application data between windows. Many conventional page-based web applications simply ignore out-of-sync situations, but such situations are risky for application platforms that are intended to be stable. Therefore it is safer to work with a single browser window. If you wish to have multiple windows in your application, you can create them inside the main window as <classname>Window</classname> objects. A URI can be used to fetch resources that have no particular state or to provide an entry point to the application."
msgstr ""

#. Tag: title
#: part1-advanced.xml:93
#, no-c-format
msgid "Application-Level Windows"
msgstr ""

#. Tag: para
#: part1-advanced.xml:95
#, no-c-format
msgid "Vaadin supports two types of windows: <emphasis>application-level windows</emphasis> and <emphasis>sub-windows</emphasis>. The application-level windows are native browser windows or tabs. The <emphasis>main window</emphasis> is the special initial application-level window created when the user first started the application session by opening the URL in the browser. Sub-windows are freely floating HTML windows inside a browser window, as described in <xref linkend=\"application.child-windows\"/>."
msgstr ""

#. Tag: para
#: part1-advanced.xml:105
#, no-c-format
msgid "Application-level windows of the same application use the same <classname>Application</classname> object and therefore share the same session. Each window is identified with a URL that is used to access it. This makes it possible to bookmark application-level windows. Such windows can even be created dynamically based on the URLs."
msgstr ""

#. Tag: para
#: part1-advanced.xml:113
#, no-c-format
msgid "Application-level windows allow several common use cases for browser-based applications."
msgstr ""

#. Tag: listitem
#: part1-advanced.xml:119
#, no-c-format
msgid "<emphasis>Native popup windows</emphasis>. An application can open popup windows for sub-tasks."
msgstr ""

#. Tag: listitem
#: part1-advanced.xml:123
#, no-c-format
msgid "<emphasis>Page-based browsing</emphasis>. The application can allow the user to open certain content to different windows. For example, in a messaging application, it can be useful to open different messages to different windows so that the user can browse through them while writing a new message."
msgstr ""

#. Tag: listitem
#: part1-advanced.xml:130
#, no-c-format
msgid "<emphasis>Bookmarking</emphasis>. Bookmarks in the web browser can provide an entry-point to some content provided by an application."
msgstr ""

#. Tag: listitem
#: part1-advanced.xml:134
#, no-c-format
msgid "<emphasis>Embedding windows</emphasis>. Windows can be embedded in web pages, thus making it possible to provide different views to an application from different pages or even from the same page, while keeping the same session. See <xref linkend=\"application.embedding\"/>."
msgstr ""

#. Tag: para
#: part1-advanced.xml:142
#, no-c-format
msgid "Because of the special nature of AJAX applications, these uses require some caveats. We will go through them later in <xref linkend=\"application.windows.caveats\"/>."
msgstr ""

#. Tag: title
#: part1-advanced.xml:149
#, no-c-format
msgid "Creating New Application-Level Windows"
msgstr ""

#. Tag: para
#: part1-advanced.xml:151
#, no-c-format
msgid "Creating a new application-level window is much like creating a child window (see <xref linkend=\"application.child-windows\"/>), except that the window is added with <methodname>addWindow()</methodname> to the application object instead of the main window."
msgstr ""

#. Tag: programlisting
#: part1-advanced.xml:158
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[public class WindowTestApplication extends Application {\n"
      "    public void init() {\n"
      "        // First create the main window.\n"
      "        final Window main = new Window (\"My Test Application\");\n"
      "        setMainWindow(main);\n"
      "         \n"
      "        // Create another application-level window.\n"
      "        final Window mywindow = new Window(\"Second Window\");\n"
      "        \n"
      "        // Manually set the name of the window.\n"
      "        mywindow.setName(\"mywindow\");\n"
      "        \n"
      "        // Add some content to the window.\n"
      "        mywindow.addComponent(new Label(\"Has content.\"));\n"
      "\n"
      "        // Add the window to the application.\n"
      "        addWindow(mywindow);\n"
      "    }\n"
      "}]]>"
msgstr ""

#. Tag: para
#: part1-advanced.xml:160
#, no-c-format
msgid "This creates the window object that a user can view by opening a URL in a browser. Creating an application-level window object does not open a new browser window automatically to view the object, but if you wish to open one, you have to do it explicitly as shown below. An application-level window has a unique URL, which is based on the application URL and the name of the window given with the <methodname>setName()</methodname> method. For example, if the application URL is <uri>http://localhost:8080/myapp/</uri> and the window name is <literal>mywindow</literal>, the URL for the window will be <uri>http://localhost:8080/myapp/mywindow/</uri>. If the name of a window is not explicitly set with <methodname>setName()</methodname>, an automatically generated name will be used. The name can be retrieved with the <methodname>getName()</methodname> method and the entire URL with <methodname>getURL()</methodname>."
msgstr ""

#. Tag: para
#: part1-advanced.xml:177
#, no-c-format
msgid "There are three typical ways to open a new window: using the <methodname>open()</methodname> method of <classname>Window</classname> class, a <classname>Link</classname>, or referencing it from HTML or JavaScript code written inside a <classname>Label</classname> component."
msgstr ""

#. Tag: para
#: part1-advanced.xml:184
#, no-c-format
msgid "The <classname>Window</classname> <methodname>open()</methodname> method takes as parameters a resource to open and the target name. You can use <classname>ExternalResource</classname> to open a specific URL, which you get from the window to be opened with the <methodname>getURL()</methodname> method."
msgstr ""

#. Tag: programlisting
#: part1-advanced.xml:192
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[/* Create a button to open a new window. */\n"
      "main.addComponent(new Button(\"Click to open new window\",\n"
      "                  new Button.ClickListener() { \n"
      "    public void buttonClick(ClickEvent event) {\n"
      "        // Open the window.\n"
      "        main.open(new ExternalResource(mywindow.getURL()),\n"
      "                  \"_new\");\n"
      "    }      \n"
      "}));]]>"
msgstr ""

#. Tag: para
#: part1-advanced.xml:194
#, no-c-format
msgid "The target name is one of the default HTML target names (<parameter>_new</parameter>, <parameter>_blank</parameter>, <parameter>_top</parameter>, etc.) or a custom target name. How the window is exactly opened depends on the browser. Browsers that support tabbed browsing can open the window in another tab, depending on the browser settings."
msgstr ""

#. Tag: para
#: part1-advanced.xml:201
#, no-c-format
msgid "Another typical way to open windows is to use a <classname>Link</classname> component with the window URL as an <classname>ExternalResource</classname>."
msgstr ""

#. Tag: programlisting
#: part1-advanced.xml:207
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[/* Add a link to the second window. */\n"
      "Link link = new Link(\"Click to open second window\",\n"
      "                     new ExternalResource(mywindow.getURL()));\n"
      "link.setTargetName(\"second\");\n"
      "link.setTargetHeight(300);\n"
      "link.setTargetWidth(300);\n"
      "link.setTargetBorder(Link.TARGET_BORDER_DEFAULT);\n"
      "main.addComponent(link);]]>"
msgstr ""

#. Tag: para
#: part1-advanced.xml:209
#, no-c-format
msgid "Using a <classname>Link</classname> allows you to specify parameters for the window that opens by clicking on the link. Above, we set the dimensions of the window and specify what window controls the window should contain. The <parameter>Link.TARGET_BORDER_DEFAULT</parameter> specifies to use the default, which includes most of the usual window controls, such as the menu, the toolbar, and the status bar."
msgstr ""

#. Tag: para
#: part1-advanced.xml:218
#, no-c-format
msgid "Another way to allow the user to open a window is to insert the URL in HTML code inside a <classname>Label</classname>. This allows even more flexibility in specifying how the window should be opened."
msgstr ""

#. Tag: programlisting
#: part1-advanced.xml:224
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[// Add the link manually inside a Label.\n"
      "main.addComponent(\n"
      "    new Label(\"Second window: <a href='\" + mywindow.getURL()\n"
      "              + \"' target='second'>click to open</a>\",\n"
      "              Label.CONTENT_XHTML));\n"
      "main.addComponent(\n"
      "    new Label(\"The second window can be accessed through URL: \"\n"
      "              + mywindow.getURL()));]]>"
msgstr ""

#. Tag: para
#: part1-advanced.xml:226
#, no-c-format
msgid "When an application-level window is closed in the browser the <methodname>close()</methodname> method is normally called just like for a child window and the <classname>Window</classname> object is purged from the application. However, there are situations where <methodname>close()</methodname> might not be called. See <xref linkend=\"application.windows.closing\"/> for more information."
msgstr ""

#. Tag: title
#: part1-advanced.xml:238
#, no-c-format
msgid "Creation of Windows When Requested"
msgstr ""

#. Tag: para
#: part1-advanced.xml:240
#, no-c-format
msgid "You can create a window object dynamically by its URL sub-path when it is first requested by overriding the <methodname>getWindow()</methodname> method of the <classname>Application</classname> class. The method gets a window name as its parameter and must return the corresponding <classname>Window</classname> object. The window name is determined from the first URL path element after the application URL (the name may not contain slashes). See the notes below for setting the actual name of the dynamically created windows below."
msgstr ""

#. Tag: para
#: part1-advanced.xml:251
#, no-c-format
msgid "The following example allows opening windows with a window name that begins with \"<literal>planet-</literal>\" prefix. Since the method is called for <emphasis>every</emphasis> browser request for the application, we filter only the requests where a window with the given name does not yet exist."
msgstr ""

#. Tag: programlisting
#: part1-advanced.xml:259
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[public class WindowTestApplication extends Application {\n"
      "    ...\n"
      "\n"
      "    @Override\n"
      "    public Window getWindow(String name) {\n"
      "        // If a dynamically created window is requested, but\n"
      "        // it does not exist yet, create it.\n"
      "        if (name.startsWith(\"planet-\") &&\n"
      "              super.getWindow(name) == null) {\n"
      "            String planetName =\n"
      "                    name.substring(\"planet-\".length());\n"
      "\n"
      "            // Create the window object.\n"
      "            Window newWindow =\n"
      "                    new Window(\"Window about \" + planetName);\n"
      "            \n"
      "            // DANGEROUS: Set the name explicitly. Otherwise,\n"
      "            // an automatically generated name is used, which\n"
      "            // is usually safer.\n"
      "            newWindow.setName(name);\n"
      "\n"
      "            // Put some content in it.\n"
      "            newWindow.addComponent(\n"
      "                new Label(\"This window contains details about \" +\n"
      "                          planetName + \".\"));\n"
      "            \n"
      "            // Add it to the application as a regular\n"
      "            // application-level window.\n"
      "            addWindow(newWindow);\n"
      "            \n"
      "            return newWindow;\n"
      "        }\n"
      "\n"
      "        // Otherwise the Application object manages existing\n"
      "        // windows by their name.\n"
      "        return super.getWindow(name);\n"
      "    }]]>"
msgstr ""

#. Tag: para
#: part1-advanced.xml:261
#, no-c-format
msgid "The window name must be a unique indentifier for each <classname>Window</classname> object instance. If you use <methodname>setName()</methodname> to set the window name explicitly, as we did above, any browser window that has the same URL (within the same browser) would open the <emphasis>same</emphasis> window object. This is dangerous and <emphasis>generally not recommended</emphasis>, because the browser windows would share the same window object. Opening two windows with the same static name would immediately lead to a synchronization error, as is shown in <xref linkend=\"figure.application.window.dynamic.error\"/> below. (While also the window captions are same, they are irrelevant for this problem.)"
msgstr ""

#. Tag: title
#: part1-advanced.xml:276
#, no-c-format
msgid "Synchronization Error Between Windows with the Same Name"
msgstr ""

#. Tag: para
#: part1-advanced.xml:287
#, no-c-format
msgid "There are some cases where setting the name explicitly is useful. The launch application below is one example, as it always opens the other windows in a window target that is specific to the window name, thereby never creating two windows with the same URL. Similarly, if you had embedded the application in a browser frame and the link would open the window in a frame, you would not have problems. Having a single window instance for a URL is also useful if the browser crashes and the user opens the window again, as it will have kept its previous (server-side) state."
msgstr ""

#. Tag: title
#: part1-advanced.xml:302
#, no-c-format
msgid "Dynamic Multi-Window Applications"
msgstr ""

#. Tag: para
#: part1-advanced.xml:304
#, no-c-format
msgid "Having multiple browser windows or tabs open in the same website and even the same page is one of the basic use cases of web browsing. The creation of <classname>Window</classname> objects described in the previous section allows opening multiple special-purpose windows with different URLs, but how to open multiple windows with the same URL? The solution is based on the fact that Vaadin doesn't identify windows only by their URL subpath, but also by an invisible window name."
msgstr ""

#. Tag: para
#: part1-advanced.xml:314
#, no-c-format
msgid "Leaving the window name to be automatically generated allows opening multiple windows with the same URL, while each of the windows will have a separate state. The URL in the location bar stays unchanged and the generated window name is used only for the Ajax communications to identify the window object. A generated name is a string representation of a unique random number, such as \"<literal>1928676448</literal>\". You should be aware of the generated window names when overriding the <methodname>getWindow()</methodname> method (and not unintentionally create a new window instance dynamically for each such request). The condition in the above example would also filter out the requests for an already existing window with a generated name."
msgstr ""

#. Tag: para
#: part1-advanced.xml:328
#, no-c-format
msgid "shows a dynamically created application-level window with the URL shown in the address bar. The URL for the application is here <uri>http://localhost:8080/book-examples/windowexample/</uri>, including the application context, application path. The dynamically created window's name is <uri>planet-mars</uri>."
msgstr ""

#. Tag: title
#: part1-advanced.xml:338
#, no-c-format
msgid "A Dynamically Created Window"
msgstr ""

#. Tag: para
#: part1-advanced.xml:349
#, no-c-format
msgid "The application knows the windows it already has and can return them after the creation. The application also handles closing and destruction of application-level window objects, as discussed in <xref linkend=\"application.windows.closing\"/>."
msgstr ""

#. Tag: para
#: part1-advanced.xml:356
#, no-c-format
msgid "Such dynamic windows could be opened as in the following example:"
msgstr ""

#. Tag: programlisting
#: part1-advanced.xml:360
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[public void init() {\n"
      "    final Window main = new Window(\"Window Test\");\n"
      "    setMainWindow(main);\n"
      "\n"
      "    // Have some IDs for the dynamically creatable windows.\n"
      "    final String[] items = new String[] { \"mercury\", \"venus\",\n"
      "            \"earth\", \"mars\", \"jupiter\", \"saturn\", \"uranus\",\n"
      "            \"neptune\" };\n"
      "    \n"
      "    // Create a list of links to each of the available window.\n"
      "    for (int i = 0; i < items.length; i++) {\n"
      "        // Create a URL for the window.\n"
      "        String windowUrl = getURL() + \"planet-\" + items[i];\n"
      "        \n"
      "        // Create a link to the window URL. Using the \n"
      "        // item ID for the target also opens it in a new\n"
      "        // browser window (or tab) unique to the window name.\n"
      "        main.addComponent(\n"
      "            new Link(\"Open window about \" + items[i],\n"
      "                     new ExternalResource(windowUrl),\n"
      "                     items[i], -1, -1, Window.BORDER_DEFAULT));\n"
      "    }\n"
      "}]]>"
msgstr ""

#. Tag: title
#: part1-advanced.xml:363
#, no-c-format
msgid "Opening Windows"
msgstr ""

#. Tag: title
#: part1-advanced.xml:376
#, no-c-format
msgid "Closing Windows"
msgstr ""

#. Tag: para
#: part1-advanced.xml:378
#, no-c-format
msgid "When the user closes an application-level window, the Client-Side Engine running in the browser will report the event to the server before the page is actually removed. You can catch the event with a <classname>Window.CloseListener</classname>, as is done in the example below."
msgstr ""

#. Tag: programlisting
#: part1-advanced.xml:386
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[newWindow.addListener(new Window.CloseListener() {\n"
      "    @Override\n"
      "    public void windowClose(CloseEvent e) {\n"
      "        // Do something.\n"
      "        System.out.println(e.getWindow().getName() +\n"
      "                           \" was closed\");\n"
      "\n"
      "        // Add a text to the main window about closing.\n"
      "        // (This does not update the main window.)\n"
      "        getMainWindow().addComponent(\n"
      "            new Label(\"Window '\" + e.getWindow().getName() +\n"
      "                      \"' was closed.\"));\n"
      "    }\n"
      "});]]>"
msgstr ""

#. Tag: para
#: part1-advanced.xml:388
#, no-c-format
msgid "Notice that the change to the server-side state of the main window (or another application-level window) does not refresh the window in the browser, so the change will be unseen until user interaction or polling refreshes the window. This problem and its dangers are discussed in <xref linkend=\"application.windows.caveats\"/> below."
msgstr ""

#. Tag: para
#: part1-advanced.xml:396
#, no-c-format
msgid "The close event does not occur if the browser crashes or the connection is otherwise severed violently. In such a situation, the window object will be left hanging, which could become a resource problem if you allow the users to open many such application-level windows. The positive side is that the user can reconnect to the window using the window URL."
msgstr ""

#. Tag: title
#: part1-advanced.xml:406
#, no-c-format
msgid "Caveats in Using Multiple Windows"
msgstr ""

#. Tag: title
#: part1-advanced.xml:409
#, no-c-format
msgid "Communication Between Windows"
msgstr ""

#. Tag: para
#: part1-advanced.xml:411
#, no-c-format
msgid "For cases where you need communication between windows, we recommend using floating child windows. In Vaadin Release 5, an application window can not update the data in other windows. The contents of a window can only be updated when the particular window makes a request to the server. The request can be caused by user input or through polling."
msgstr ""

#. Tag: para
#: part1-advanced.xml:420
#, no-c-format
msgid "Changing the server-side state of a window while processing a user event from another window can potentially cause serious problems. Changing the client-side state of a window does not always immediately communicate the changes to the server. The server-side state can therefore be out of sync with the client-side state."
msgstr ""

#. Tag: title
#: part1-advanced.xml:429
#, no-c-format
msgid "Communication Between Two Application-Level Windows"
msgstr ""

#. Tag: para
#: part1-advanced.xml:440
#, no-c-format
msgid "The following example creates a second window that changes the contents of the main window, as illustrated in the figure above. In this simple case, changing the main window contents is safe."
msgstr ""

#. Tag: programlisting
#: part1-advanced.xml:446
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[// Create a table in the main window to hold items added\n"
      "// in the second window\n"
      "final Table table = new Table();\n"
      "table.setPageLength(5);\n"
      "table.getSize().setWidth(100, Size.UNITS_PERCENTAGE);\n"
      "table.addContainerProperty(\"Name\", String.class, \"\");\n"
      "main.addComponent(table);\n"
      "\n"
      "// Create the second window\n"
      "final Window adderWindow = new Window(\"Add Items\");\n"
      "adderWindow.setName(\"win-adder\");\n"
      "main.getApplication().addWindow(adderWindow);\n"
      "\n"
      "// Create selection component to add items to the table\n"
      "final NativeSelect select = new NativeSelect(\"Select item to add\");\n"
      "select.setImmediate(true);\n"
      "adderWindow.addComponent(select);\n"
      "\n"
      "// Add some items to the selection\n"
      "String items[] = new String[]{\"-- Select --\", \"Mercury\", \"Venus\", \n"
      "        \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n"
      "for (int i=0; i<items.length; i++)\n"
      "    select.addItem(items[i]);\n"
      "select.setNullSelectionItemId(items[0]);\n"
      "\n"
      "// When an item is selected in the second window, add\n"
      "// table in the main window\n"
      "select.addListener(new ValueChangeListener() {\n"
      "    public void valueChange(ValueChangeEvent event) {\n"
      "        // If the selected value is something else\n"
      "        // but a null selection item.\n"
      "        if (select.getValue() != null) {\n"
      "            // Add the selected item to the table\n"
      "            // in the main window\n"
      "            table.addItem(new Object[]{select.getValue()},\n"
      "                          new Integer(table.size()));\n"
      "        }\n"
      "    }\n"
      "});\n"
      "\n"
      "// Link to open the selection window\n"
      "Link link = new Link(\"Click to open second window\",\n"
      "                     new ExternalResource(adderWindow.getURL()),\n"
      "                     \"_new\", 50, 200,\n"
      "                     Link.TARGET_BORDER_DEFAULT);\n"
      "main.addComponent(link);\n"
      "\n"
      "// Enable polling to update the main window\n"
      "ProgressIndicator poller = new ProgressIndicator();\n"
      "poller.addStyleName(\"invisible\");\n"
      "main.addComponent(poller);]]>"
msgstr ""

#. Tag: para
#: part1-advanced.xml:448
#, no-c-format
msgid "The example uses an invisible <classname>ProgressIndicator</classname> to implement polling. This is sort of a trick and a more proper API for polling is under design. Making the progress indicator invisible requires the following CSS style definition:"
msgstr ""

#. Tag: programlisting
#: part1-advanced.xml:455
#, no-c-format
msgid ""
      "<![CDATA[.v-progressindicator-invisible {\n"
      "    display: none;\n"
      "}]]>"
msgstr ""

#. Tag: title
#: part1-advanced.xml:463
#, no-c-format
msgid "Embedding Applications in Web Pages"
msgstr ""

#. Tag: para
#: part1-advanced.xml:467
#, no-c-format
msgid "Many web sites are not all Ajax, but Ajax is used only for specific functionalities. In practice, many web applications are a mixture of dynamic web pages and Ajax applications embedded in such pages."
msgstr ""

#. Tag: para
#: part1-advanced.xml:473
#, no-c-format
msgid "Embedding Vaadin applications is easy and there are several different ways to embed them. One is to have a <literal>&lt;div&gt;</literal> placeholder for the web application and load the Vaadin Client-Side Engine with a simple JavaScript code. Another method is even easier, which is to simply use the <literal>&lt;iframe&gt;</literal> element. Both of these methods have advantages and disadvantages. The <literal>&lt;div&gt;</literal> method can only embed one application in a page, while the <literal>&lt;iframe&gt;</literal> method can embed as many as needed. One disadvantage of the <literal>&lt;iframe&gt;</literal> method is that the size of the <literal>&lt;iframe&gt;</literal> element is not flexible according to the content while the <literal>&lt;div&gt;</literal> method allows such flexibility. The following sections look closer into these two embedding methods. Additionally, the Vaadin XS add-on allows embedding Vaadin applications in websites running in another server."
msgstr ""

#. Tag: title
#: part1-advanced.xml:491
#, no-c-format
msgid "Embedding Inside a <literal>div</literal> Element"
msgstr ""

#. Tag: para
#: part1-advanced.xml:493
#, no-c-format
msgid "You can embed a Vaadin application inside a web page with a method that is equivalent to loading the initial page content from the application servlet in a non-embedded application. Normally, the <classname>ApplicationServlet</classname> servlet generates an initial page that contains the correct parameters for the specific application. You can easily configure it to load multiple Vaadin applications on the same page, assuming that they use the same widget set."
msgstr ""

#. Tag: para
#: part1-advanced.xml:503
#, no-c-format
msgid "You can view the initial page for your application easily simply by opening the application in a web browser and viewing the HTML source code. You could just copy and paste the embedding code from the default initial page. It has, however, some extra functionality that is not normally needed: it generates some of the script content with <methodname>document.write()</methodname> calls, which is useful only when you are running the application as a portlet in a portal. The method outlined below is much simpler."
msgstr ""

#. Tag: para
#: part1-advanced.xml:526
#, no-c-format
msgid "Embedding requires four elements inside the HTML document:"
msgstr ""

#. Tag: para
#: part1-advanced.xml:532
#, no-c-format
msgid "In the <literal>&lt;head&gt;</literal> element, you need to define the application URI and parameters and load the Vaadin Client-Side Engine. The <varname>vaadin</varname> variable is an associative map that can contain various runtime data used by the Client-Side Engine of Vaadin. The <varname>vaadinConfigurations</varname> item is itself an associate map that contains parameters for each of the applications embedded in the page. The map must contain the following items:"
msgstr ""

#. Tag: classname
#: part1-advanced.xml:546
#, no-c-format
msgid "appUri"
msgstr ""

#. Tag: listitem
#: part1-advanced.xml:547
#, no-c-format
msgid "The application URI consists of the context and the application path. If the context is <literal>/mycontext</literal> and the application path is <literal>myapp</literal>, the <parameter>appUri</parameter> would be <literal>/mycontext/myapp</literal>. The <filename>multiapp.html</filename> example assumes the use of root context, which is used in the demo application."
msgstr ""

#. Tag: classname
#: part1-advanced.xml:559
#, no-c-format
msgid "pathInfo"
msgstr ""

#. Tag: listitem
#: part1-advanced.xml:560
#, no-c-format
msgid "The <parameter>PATHINFO</parameter> parameter for the Servlet."
msgstr ""

#. Tag: classname
#: part1-advanced.xml:566
#, no-c-format
msgid "themeUri"
msgstr ""

#. Tag: listitem
#: part1-advanced.xml:567
#, no-c-format
msgid "URI of the application theme. The URI must include application context and the path to the theme directory. Themes are, by default, stored under the <filename>/VAADIN/themes/</filename> path."
msgstr ""

#. Tag: classname
#: part1-advanced.xml:575
#, no-c-format
msgid "versionInfo"
msgstr ""

#. Tag: listitem
#: part1-advanced.xml:576
#, no-c-format
msgid "This item is itself an associative map that contains two parameters: <parameter>vaadinVersion</parameter> contains the version number of the Vaadin version used by the application. The <parameter>applicationVersion</parameter> parameter contains the version of the particular application."
msgstr ""

#. Tag: para
#: part1-advanced.xml:587
#, no-c-format
msgid "The following example defines two applications to run in the same window: the Calculator and Hello World examples. In the example, the application context is <literal>/tk5</literal>."
msgstr ""

#. Tag: programlisting
#: part1-advanced.xml:593
#, no-c-format
msgid ""
      "<?pocket-size 65% ?>&lt;script type=\"text/javascript\"&gt;\n"
      "    var vaadin = {\n"
      "        vaadinConfigurations: {\n"
      "            '<emphasis role=\"bold\">calc</emphasis>': {\n"
      "                appUri:'<emphasis role=\"bold\">/tk5/Calc</emphasis>',\n"
      "                pathInfo: '<emphasis role=\"bold\">/</emphasis>',\n"
      "                themeUri: '<emphasis role=\"bold\">/tk5/VAADIN/themes/example</emphasis>',\n"
      "                versionInfo : {\n"
      "                    vaadinVersion:\"5.9.9-INTERNAL-\n"
      "                         NONVERSIONED-DEBUG-BUILD\",\n"
      "                    applicationVersion:\"NONVERSIONED\"\n"
      "                }\n"
      "            },\n"
      "            '<emphasis role=\"bold\">hello</emphasis>': {\n"
      "                appUri:'<emphasis role=\"bold\">/tk5/HelloWorld</emphasis>',\n"
      "                pathInfo: '<emphasis role=\"bold\">/</emphasis>',\n"
      "                themeUri: '<emphasis role=\"bold\">/tk5/VAADIN/themes/example</emphasis>',\n"
      "                versionInfo : {\n"
      "                    vaadinVersion:\"5.9.9-INTERNAL-\n"
      "                          NONVERSIONED-DEBUG-BUILD\",\n"
      "                    applicationVersion:\"NONVERSIONED\"\n"
      "                }\n"
      "            }\n"
      "        }};\n"
      "&lt;/script&gt;"
msgstr ""

#. Tag: para
#: part1-advanced.xml:597
#, no-c-format
msgid "Loading the Vaadin Client-Side Engine is done with the following kind of line in the <literal>&lt;head&gt;</literal> element:"
msgstr ""

#. Tag: programlisting
#: part1-advanced.xml:603
#, no-c-format
msgid "<?pocket-size 65% ?>&lt;script language='javascript' src='/<emphasis>vaadin-examples</emphasis>/VAADIN/widgetsets/com.vaadin.terminal.gwt.DefaultWidgetSet/com.vaadin.terminal.gwt.DefaultWidgetSet.nocache.js'&gt;&lt;/script&gt;"
msgstr ""

#. Tag: para
#: part1-advanced.xml:605
#, no-c-format
msgid "The engine URI consists of the context of the web application, <literal>vaadin-examples</literal> above, followed by the path to the JavaScript (<filename>.js</filename>) file of the widget set, relative to the <filename>WebContent</filename> directory. The file contains the Client-Side Engine compiled for the particular widget set. The line above assumes the use of the default widget set of Vaadin. If you have made custom widgets that are defined in a custom widget set, you need to use the path to the compiled widget set file. Widget sets must be compiled under the <filename>WebContent/VAADIN/widgetsets</filename> directory."
msgstr ""

#. Tag: para
#: part1-advanced.xml:621
#, no-c-format
msgid "In the <literal>&lt;html&gt;</literal> element, you need to do a routine inclusion of GWT history <literal>iframe</literal> element as follows:"
msgstr ""

#. Tag: programlisting
#: part1-advanced.xml:627
#, no-c-format
msgid ""
      "<?pocket-size 65% ?>&lt;iframe id=\"__gwt_historyFrame\"\n"
      "        style=\"width:0;height:0;border:0\"&gt;&lt;/iframe&gt;"
msgstr ""

#. Tag: para
#: part1-advanced.xml:631
#, no-c-format
msgid "The location of the Vaadin application is defined with a <literal>div</literal> placeholder element having <literal>id=\"calc\"</literal>, where the identifier is the same as in the <parameter>vaadinConfigurations</parameter> parameter, as follows:"
msgstr ""

#. Tag: programlisting
#: part1-advanced.xml:639
#, no-c-format
msgid "&lt;div id=\"calc\"/&gt;"
msgstr ""

#. Tag: para
#: part1-advanced.xml:643
#, no-c-format
msgid "Below is a complete example of embedding an application. It works out-of-the-box with the <application>Calculator</application> demo application."
msgstr ""

#. Tag: programlisting
#: part1-advanced.xml:649
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\n"
      "       \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n"
      "<html xmlns=\"http://www.w3.org/1999/xhtml\" >\n"
      "  <head>\n"
      "    <title>Embedding Example</title>\n"
      "\n"
      "    <!-- Set parameters for the Vaadin Client-Side Engine. -->\n"
      "    <script type=\"text/javascript\">\n"
      "            var vaadin = {appUri:'Calc', pathInfo: '/'};\n"
      "    </script>\n"
      "    \n"
      "    <!-- Load the Vaadin Client-Side Engine. -->\n"
      "    <script language='javascript' src='/vaadin-examples/VAADIN/widgetsets/com.vaadin.terminal.gwt.DefaultWidgetSet/com.vaadin.terminal.gwt.DefaultWidgetSet.nocache.js'></script>\n"
      "\n"
      "    <!-- We can stylize the web application. -->\n"
      "    <style>\n"
      "        #vaadin-ajax-window {background: #c0c0ff;}\n"
      "        .v-button {background: pink;}\n"
      "    </style>\n"
      "  </head>\n"
      "\n"
      "  <body>\n"
      "    <!-- This <iframe> element is required by GWT. -->\n"
      "    <iframe id=\"__gwt_historyFrame\"\n"
      "            style=\"width:0;height:0;border:0\"></iframe>\n"
      "    \n"
      "    <h1>This is a HTML page</h1>\n"
      "    <p>Below is the Vaadin application inside a table:</p>\n"
      "    <table align=\"center\" border=\"3\" style=\"background: yellow;\">\n"
      "      <tr><th>The Calculator</th></tr>\n"
      "      <tr>\n"
      "        <td>\n"
      "          <!-- Placeholder <div> for the Vaadin application -->\n"
      "          <div id=\"vaadin-ajax-window\"/>\n"
      "        </td>\n"
      "      </tr>\n"
      "    </table>        \n"
      "  </body>\n"
      "</html>]]>"
msgstr ""

#. Tag: para
#: part1-advanced.xml:651
#, no-c-format
msgid "The page will look as shown in <xref linkend=\"figure.embedding.div\"/>."
msgstr ""

#. Tag: title
#: part1-advanced.xml:656
#, no-c-format
msgid "Embedded Application"
msgstr ""

#. Tag: para
#: part1-advanced.xml:667
#, no-c-format
msgid "You can style the web application with themes as described in <xref linkend=\"themes\"/>. The Client-Side Engine loads the style sheets required by the application. In addition, you can do styling in the embedding page, as was done in the example above."
msgstr ""

#. Tag: para
#: part1-advanced.xml:674
#, no-c-format
msgid "The disadvantage of this embedding method is that there can only be one web application embedded in a page. One is usually enough, but if it is not, you need to use the <literal>&lt;iframe&gt;</literal> method below."
msgstr ""

#. Tag: title
#: part1-advanced.xml:683
#, no-c-format
msgid "Embedding Inside an <literal>iframe</literal> Element"
msgstr ""

#. Tag: para
#: part1-advanced.xml:685
#, no-c-format
msgid "Embedding a Vaadin application inside an <literal>&lt;iframe&gt;</literal> element is even easier than the method described above, as it does not require definition of any Vaadin specific definitions. The use of <literal>&lt;iframe&gt;</literal> makes it possible to embed multiple web applications or two different views to the same application on the same page."
msgstr ""

#. Tag: para
#: part1-advanced.xml:694
#, no-c-format
msgid "You can embed an application with an element such as the following:"
msgstr ""

#. Tag: programlisting
#: part1-advanced.xml:698
#, no-c-format
msgid "<?pocket-size 65% ?><![CDATA[<iframe src=\"/vaadin-examples/Calc\"></iframe>]]>"
msgstr ""

#. Tag: para
#: part1-advanced.xml:700
#, no-c-format
msgid "The problem with <literal>&lt;iframe&gt;</literal> elements is that their size of is not flexible depending on the content of the frame, but the content must be flexible to accommodate in the frame. You can set the size of an <literal>&lt;iframe&gt;</literal> element with <literal>height</literal> and <literal>width</literal> attributes."
msgstr ""

#. Tag: para
#: part1-advanced.xml:708
#, no-c-format
msgid "Below is a complete example of using the <literal>&lt;iframe&gt;</literal> to embed two applications in a web page."
msgstr ""

#. Tag: programlisting
#: part1-advanced.xml:713
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\n"
      "      \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n"
      "<html xmlns=\"http://www.w3.org/1999/xhtml\" >\n"
      "  <head>\n"
      "    <title>Embedding in IFrame</title>\n"
      "  </head>\n"
      "\n"
      "  <body style=\"background: #d0ffd0;\">\n"
      "    <h1>This is a HTML page</h1>\n"
      "    <p>Below are two Vaadin applications embedded inside\n"
      "       a table:</p>\n"
      "\n"
      "    <table align=\"center\" border=\"3\">\n"
      "      <tr>\n"
      "        <th>The Calculator</th>\n"
      "        <th>The Color Picker</th>\n"
      "      </tr>\n"
      "      <tr valign=\"top\">\n"
      "        <td>\n"
      "          <iframe src=\"/vaadin-examples/Calc\" height=\"200\"\n"
      "                  width=\"150\" frameborder=\"0\"></iframe>\n"
      "        </td>\n"
      "        <td>\n"
      "          <iframe src=\"/vaadin-examples/colorpicker\"\n"
      "                  height=\"330\" width=\"400\"\n"
      "                  frameborder=\"0\"></iframe>\n"
      "        </td>\n"
      "      </tr>\n"
      "    </table>\n"
      "  </body>\n"
      "</html>]]>"
msgstr ""

#. Tag: para
#: part1-advanced.xml:715
#, no-c-format
msgid "The page will look as shown in <xref linkend=\"figure.embedding.iframe\"/> below."
msgstr ""

#. Tag: title
#: part1-advanced.xml:721
#, no-c-format
msgid "Vaadin Applications Embedded Inside IFrames"
msgstr ""

#. Tag: para
#: part1-advanced.xml:732
#, no-c-format
msgid "You can embed almost anything in an iframe, which essentially acts as a browser window. However, this creates various problems. The iframe must have a fixed size, inheritance of CSS from the embedding page is not possible, and neither is interaction with JavaScript, which makes mashups impossible, and so on. Even bookmarking with URI fragments will not work."
msgstr ""

#. Tag: para
#: part1-advanced.xml:740
#, no-c-format
msgid "Note also that websites can forbid iframe embedding by specifying an <literal>X-Frame-Options: SAMEORIGIN</literal> header in the HTTP response."
msgstr ""

#. Tag: title
#: part1-advanced.xml:748
#, no-c-format
msgid "Cross-Site Embedding with the Vaadin XS Add-on"
msgstr ""

#. Tag: para
#: part1-advanced.xml:750
#, no-c-format
msgid "In the previous sections, we described the two basic methods for embedding Vaadin applications: in a <literal>&lt;div&gt;</literal> element and in an <literal>&lt;iframe&gt;</literal>. One problem with div embedding is that it does not work between different Internet domains, which is a problem if you want to have your website running in one server and your Vaadin application in another. The security model in browsers effectively prevents such cross-site embedding of Ajax applications by enforcing the <emphasis>same origin policy</emphasis> for XmlHttpRequest calls, even if the server is running in the same domain but different port. While iframe is more permissive, allowing embedding almost anything in anywhere, it has many disadvantanges, as described earlier."
msgstr ""

#. Tag: para
#: part1-advanced.xml:764
#, no-c-format
msgid "The Vaadin XS (Cross-Site) add-on works around the limitation in div embedding by using JSONP-style communication instead of the standard XmlHttpRequests."
msgstr ""

#. Tag: para
#: part1-advanced.xml:770
#, no-c-format
msgid "Embedding is done simply with:"
msgstr ""

#. Tag: programlisting
#: part1-advanced.xml:774
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[  <script src=\"http://demo.vaadin.com/xsembed/getEmbedJs\"\n"
      "          type=\"text/javascript\"></script>]]>"
msgstr ""

#. Tag: para
#: part1-advanced.xml:776
#, no-c-format
msgid "This includes an automatically generated embedding script in the page, thereby making embedding effortless."
msgstr ""

#. Tag: para
#: part1-advanced.xml:781
#, no-c-format
msgid "This assumes that the main layout of the application has undefined height. If the height is 100%, you have to wrap it inside an element with a defined height. For example:"
msgstr ""

#. Tag: programlisting
#: part1-advanced.xml:787
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[ <div style=\"height: 500px;\">\n"
      "  <script src=\"http://demo.vaadin.com/xsembed/getEmbedJs\"\n"
      "          type=\"text/javascript\"></script>\n"
      "</div>]]>"
msgstr ""

#. Tag: para
#: part1-advanced.xml:789
#, no-c-format
msgid "It is possible to restrict where the application can be embedded by using a whitelist. The add-on also encrypts the client-server communication, which is more important for embedded applications than usual."
msgstr ""

#. Tag: para
#: part1-advanced.xml:795
#, no-c-format
msgid "You can get the Vaadin XS add-on from Vaadin Directory. It is provided as a Zip package. Download and extract the installation package to a local folder. Instructions for installation and further information is given in the <filename>README.html</filename> file in the package."
msgstr ""

#. Tag: para
#: part1-advanced.xml:802
#, no-c-format
msgid "Some restrictions apply. You can have only one embedded application in one page. Also, some third-party libraries may interfere with the communication. Other notes are given in the README."
msgstr ""

#. Tag: title
#: part1-advanced.xml:811
#, no-c-format
msgid "Debug and Production Mode"
msgstr ""

#. Tag: para
#: part1-advanced.xml:813
#, no-c-format
msgid "Vaadin applications can be run in two modes: <emphasis>debug mode</emphasis> and <emphasis>production mode</emphasis>. The debug mode, which is on by default, enables a number of built-in debug features for the developers. The features include:"
msgstr ""

#. Tag: listitem
#: part1-advanced.xml:821
#, no-c-format
msgid "Debug Window for accessing debug functionalities"
msgstr ""

#. Tag: listitem
#: part1-advanced.xml:822
#, no-c-format
msgid "Display debug information in the Debug Window and server console."
msgstr ""

#. Tag: listitem
#: part1-advanced.xml:823
#, no-c-format
msgid "<guibutton>Analyze layouting</guibutton> button that analyzes the layout for possible problems."
msgstr ""

#. Tag: para
#: part1-advanced.xml:826
#, no-c-format
msgid "All applications are run in the debug mode by default (since IT Mill Toolkit version 5.3.0). The production mode can be enabled, and debug mode thereby disabled, by adding a <parameter>productionMode=true</parameter> parameter to the servlet context in the <filename>web.xml</filename> deployment descriptor:"
msgstr ""

#. Tag: programlisting
#: part1-advanced.xml:833
#, no-c-format
msgid ""
      "<?pocket-size 75% ?><![CDATA[<context-param>\n"
      "  <description>Vaadin production mode</description>\n"
      "  <param-name>productionMode</param-name>\n"
      "  <param-value>true</param-value>\n"
      "</context-param>]]>"
msgstr ""

#. Tag: para
#: part1-advanced.xml:835
#, no-c-format
msgid "Enabling the production mode disables the debug features, thereby preventing users from easily inspecting the inner workings of the application from the browser."
msgstr ""

#. Tag: title
#: part1-advanced.xml:842
#, no-c-format
msgid "Debug Mode"
msgstr ""

#. Tag: para
#: part1-advanced.xml:844
#, no-c-format
msgid "Running an application in the debug mode enables the client-side Debug Window in the browser. You can open the Debug Window by adding \"<uri>?debug</uri>\" to the application URL, for example, <uri>http://localhost:8080/myapp/?debug</uri>. The Debug Window, shown in <xref linkend=\"figure.debug.window\"/>, consists of buttons controlling the debugging features and a scrollable log of debug messages."
msgstr ""

#. Tag: title
#: part1-advanced.xml:854
#, no-c-format
msgid "Debug Window"
msgstr ""

#. Tag: guibutton
#: part1-advanced.xml:867
#, no-c-format
msgid "Clear console"
msgstr ""

#. Tag: listitem
#: part1-advanced.xml:868
#, no-c-format
msgid "Clears the log in the Debug Window."
msgstr ""

#. Tag: guibutton
#: part1-advanced.xml:873
#, no-c-format
msgid "Restart app"
msgstr ""

#. Tag: listitem
#: part1-advanced.xml:874
#, no-c-format
msgid "Restarts the application."
msgstr ""

#. Tag: guibutton
#: part1-advanced.xml:879
#, no-c-format
msgid "Force layout"
msgstr ""

#. Tag: listitem
#: part1-advanced.xml:880
#, no-c-format
msgid "Causes all currently visible layouts to recalculate their appearance. Layout components calculate the space required by all child components, so the layout appearance must be recalculated whenever the size of a child component is changed. In normal applications, this is done automatically, but when you do themeing or alter the CSS with Firebug, you may need to force all layouts to recalculate themselves, taking into account the recently made changes."
msgstr ""

#. Tag: guibutton
#: part1-advanced.xml:892
#, no-c-format
msgid "Analyze layouts"
msgstr ""

#. Tag: listitem
#: part1-advanced.xml:893
#, no-c-format
msgid "This is described in the following section."
msgstr ""

#. Tag: para
#: part1-advanced.xml:899
#, no-c-format
msgid "If you use the Firebug plugin in Mozilla Firefox, the log messages will also be printed to the Firebug console. In such a case, you may want to enable client-side debugging without showing the Debug Window with \"<uri>?debug=quiet</uri>\" in the URL. In the quiet debug mode, log messages will only be printed to the Firebug console."
msgstr ""

#. Tag: title
#: part1-advanced.xml:909
#, no-c-format
msgid "Analyzing Layouts"
msgstr ""

#. Tag: para
#: part1-advanced.xml:910
#, no-c-format
msgid "The <guilabel>Analyze layouts</guilabel> button analyzes the currently visible layouts and makes a report of possible layout related problems. All detected layout problems are displayed in the log and also printed to the console."
msgstr ""

#. Tag: para
#: part1-advanced.xml:917
#, no-c-format
msgid "The most common layout problem is caused by placing a component that has a relative size inside a container (layout) that has undefined size, for example, adding a 100% wide <classname>Panel</classname> inside a <classname>HorizontalLayout</classname> with no width specification. In such a case, the error will look as shown below:"
msgstr ""

#. Tag: programlisting
#: part1-advanced.xml:925
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[Vaadin DEBUG\n"
      "- Window/1a8bd74 \"My window\" (width: MAIN WINDOW)\n"
      "  - HorizontalLayout/1cf243b (width: UNDEFINED)\n"
      "    - Panel/12e43f1 \"My panel\" (width: RELATIVE, 100.0 %)\n"
      "Layout problem detected: Component with relative width inside a HorizontalLayout with no width defined\n"
      "Relative sizes were replaced by undefined sizes, components may not render as expected.]]>"
msgstr ""

#. Tag: para
#: part1-advanced.xml:927
#, no-c-format
msgid "This particular error tells that the <classname>Panel</classname> \"My panel\" is 100% wide while the width of the containing <classname>HorizontalLayout</classname> is undefined. The components will be rendered as if the the width of the contained <classname>Panel</classname> was undefined, which might not be what the developer wanted. There are two possible fixes for this case: if the <classname>Panel</classname> should fill the main window horizontally, set a width for the <classname>HorizontalLayout</classname> (for example 100% wide), or set the width of the <classname>Panel</classname> to \"undefined\" to render the it as it is currently rendered but avoiding the warning message."
msgstr ""

#. Tag: para
#: part1-advanced.xml:941
#, no-c-format
msgid "The same error is shown in the Debug Window in a slightly different form and with an additional feature (see <xref linkend=\"figure.debug-window.analyze-layouts\"/>). Checking the <guilabel>Emphasize component in UI</guilabel> box will turn red the background of the component that caused a warning, making it easy for the developer to figure out which component each warning relates to. The messages will also be displayed hierarchically, as a warning from a containing component often causes more warnings from its child components. A good rule of thumb is to work on the upper-level problems first and only after that worry about the warnings from the children."
msgstr ""

#. Tag: title
#: part1-advanced.xml:955
#, no-c-format
msgid "Debug Window Showing the Result of <guilabel>Analyze layouts</guilabel>."
msgstr ""

#. Tag: title
#: part1-advanced.xml:969
#, no-c-format
msgid "Custom Layouts"
msgstr ""

#. Tag: para
#: part1-advanced.xml:971
#, no-c-format
msgid "<classname>CustomLayout</classname> components can not be analyzed in the same way as other layouts. For custom layouts, the <guibutton>Analyze layouts</guibutton> button analyzes all contained relative-sized components and checks if any relative dimension is calculated to zero so that the component will be invisible. The error log will display a warning for each of these invisible components. It would not be meaningful to emphasize the component itself as it is not visible, so when you select such an error, the parent layout of the component is emphasized if possible."
msgstr ""

#. Tag: title
#: part1-advanced.xml:986
#, no-c-format
msgid "Debug Functions for Component Developers"
msgstr ""

#. Tag: para
#: part1-advanced.xml:988
#, no-c-format
msgid "You can take advantage of the debug mode when developing client-side components. The static function <methodname>ApplicationConnection.getConsole()</methodname> will return a reference to a <classname>Console</classname> object which contains logging methods such as <methodname>log(String msg)</methodname> and <methodname>error(String msg)</methodname>. These functions will print messages to the Debug Window and Firebug console in the same way as other debugging functionalities of Vaadin do. No messages will be printed if the Debug Window is not open or if the application is running in production mode."
msgstr ""

#. Tag: title
#: part1-advanced.xml:1004
#, no-c-format
msgid "Resources"
msgstr ""

#. Tag: para
#: part1-advanced.xml:1006
#, no-c-format
msgid "In addition to high-level resource classes described in <xref linkend=\"application.resources\"/>, Vaadin provides low-level facilities for retrieving the URI and other parameters of HTTP requests. In the following, we will look into low-level interfaces for handling URIs and parameters to provide resources and functionalities."
msgstr ""

#. Tag: para
#: part1-advanced.xml:1014
#, no-c-format
msgid "Notice that using URI or parameter handlers to create \"pages\" is not meaningful in Vaadin or in AJAX applications generally. See <xref linkend=\"advanced.application.pages\"/> for reasons."
msgstr ""

#. Tag: title
#: part1-advanced.xml:1021
#, no-c-format
msgid "URI Handlers"
msgstr ""

#. Tag: para
#: part1-advanced.xml:1023
#, no-c-format
msgid "The URI parameter for the application is useful mainly for two purposes: for providing some special functionality according to the URI or for providing dynamic content. Dynamic content can also be provided with <classname>StreamResource</classname>."
msgstr ""

#. Tag: para
#: part1-advanced.xml:1030
#, no-c-format
msgid "You can retrieve the URI for the HTTP request made for your application by implementing the <classname>com.vaadin.terminal.URIHandler</classname> interface. The handler class needs to be registered in the main window object of your application with the <methodname>addURIHandler()</methodname> method. You then get the URI by implementing the <methodname>handleURI()</methodname> method. The method gets two parameters: a context and a URI relative to the context. The context is the base URI for your application."
msgstr ""

#. Tag: programlisting
#: part1-advanced.xml:1043
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[public void init() {\n"
      "    final Window main = new Window(\"Hello window\");\n"
      "    setMainWindow(main);\n"
      "\n"
      "    URIHandler uriHandler = new URIHandler() {\n"
      "        public DownloadStream handleURI(URL context,\n"
      "                                        String relativeUri) {\n"
      "            // Do something here\n"
      "            System.out.println(\"handleURI=\" + relativeUri);\n"
      "\n"
      "            // Should be null unless providing dynamic data.\n"
      "            return null;\n"
      "        }\n"
      "    };\n"
      "    main.addURIHandler(uriHandler);\n"
      "\n"
      "}]]>"
msgstr ""

#. Tag: para
#: part1-advanced.xml:1045
#, no-c-format
msgid "If you have multiple URI handlers attached to a window, they are executed after one another. The URI handlers should return <parameter>null</parameter>, unless you wish to provide dynamic content with the call. Other URI handlers attached to the window will not be executed after some handler returns non-null data. The combined parameter and URI handler example below shows how to create dynamic content with a URI handler."
msgstr ""

#. Tag: para
#: part1-advanced.xml:1055
#, no-c-format
msgid "Notice that if you do provide dynamic content with a URI handler, the dynamic content is returned in the HTTP response. If the handler makes any changes to the UI state of the application, these changes are not rendered in the browser, as they are usually returned in the HTTP response made by the Application object and now the custom URI handler overrides the default behaviour. If your client-side code makes a server call that does update the UI state, the client-side must initiate an update from the server. For example, if you have an integration situation where you make a JavaScript call to the server, handle the request with a URI handler, and the server state changes as a side-effect, you can use the <methodname>vaadin.forceSync()</methodname> method to force the update."
msgstr ""

#. Tag: title
#: part1-advanced.xml:1072
#, no-c-format
msgid "Parameter Handlers"
msgstr ""

#. Tag: para
#: part1-advanced.xml:1074
#, no-c-format
msgid "You can retrieve the parameters passed to your application by implementing the <classname>com.vaadin.terminal.ParameterHandler</classname> interface. The handler class needs to be registered in the main window object of your application with the <methodname>addParameterHandler()</methodname> method. You then get the parameters in the <methodname>handleParameters()</methodname> method. The parameters are passes as a map from string key to a vector of string values."
msgstr ""

#. Tag: programlisting
#: part1-advanced.xml:1087
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[class MyParameterHandler implements ParameterHandler {\n"
      "    public void handleParameters(Map parameters) {\n"
      "        // Print out the parameters to standard output\n"
      "        for (Iterator it = parameters.keySet().iterator();\n"
      "             it.hasNext();) {\n"
      "            String key   = (String) it.next();\n"
      "            String value = ((String[]) parameters.get(key))[0];\n"
      "            System.out.println(\"Key: \"+key+\", value: \"+value);\n"
      "        }\n"
      "    }\n"
      "}]]>"
msgstr ""

#. Tag: para
#: part1-advanced.xml:1089
#, no-c-format
msgid "The parameter handler is not called if there are no parameters. Parameter handler is called before the URI handler, so if you handle both, you might typically want to just store the URI parameters in the parameter handler and do actual processing in URI handler. This allows you, for example, to create dynamic resources based on the URI parameters."
msgstr ""

#. Tag: programlisting
#: part1-advanced.xml:1097
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[import java.awt.*;\n"
      "import java.awt.image.BufferedImage;\n"
      "import java.io.*;\n"
      "import java.net.URL;\n"
      "import java.util.Map;\n"
      "import javax.imageio.ImageIO;\n"
      "import com.vaadin.terminal.*;\n"
      "\n"
      "/**\n"
      " * Demonstrates handling URI parameters and the URI itself to\n"
      " * create a dynamic resource.\n"
      " */\n"
      "public class MyDynamicResource implements URIHandler,\n"
      "                                          ParameterHandler {\n"
      "    String textToDisplay = \"- no text given -\";\n"
      "\n"
      "    /**\n"
      "     * Handle the URL parameters and store them for the URI\n"
      "     * handler to use.\n"
      "     */\n"
      "    public void handleParameters(Map parameters) {\n"
      "        // Get and store the passed HTTP parameter.\n"
      "        if (parameters.containsKey(\"text\"))\n"
      "            textToDisplay =\n"
      "                ((String[])parameters.get(\"text\"))[0];\n"
      "    }\n"
      "\n"
      "    /**\n"
      "     * Provides the dynamic resource if the URI matches the\n"
      "     * resource URI. The matching URI is \"/myresource\" under\n"
      "     * the application URI context.\n"
      "     * \n"
      "     * Returns null if the URI does not match. Otherwise\n"
      "     * returns a download stream that contains the response\n"
      "     * from the server.\n"
      "     */\n"
      "    public DownloadStream handleURI(URL context,\n"
      "                                    String relativeUri) {\n"
      "        // Catch the given URI that identifies the resource,\n"
      "        // otherwise let other URI handlers or the Application\n"
      "        // to handle the response.\n"
      "        if (!relativeUri.startsWith(\"myresource\"))\n"
      "            return null;\n"
      "        \n"
      "        // Create an image and draw some background on it.\n"
      "        BufferedImage image = new BufferedImage (200, 200,\n"
      "                                    BufferedImage.TYPE_INT_RGB);\n"
      "        Graphics drawable = image.getGraphics();\n"
      "        drawable.setColor(Color.lightGray);\n"
      "        drawable.fillRect(0,0,200,200);\n"
      "        drawable.setColor(Color.yellow);\n"
      "        drawable.fillOval(25,25,150,150);\n"
      "        drawable.setColor(Color.blue);\n"
      "        drawable.drawRect(0,0,199,199);\n"
      "        \n"
      "        // Use the parameter to create dynamic content.\n"
      "        drawable.setColor(Color.black);\n"
      "        drawable.drawString(\"Text: \"+textToDisplay, 75, 100);\n"
      "\n"
      "        try {\n"
      "            // Write the image to a buffer.\n"
      "            ByteArrayOutputStream imagebuffer =\n"
      "                    new ByteArrayOutputStream();\n"
      "            ImageIO.write(image, \"png\", imagebuffer);\n"
      "\n"
      "            // Return a stream from the buffer.\n"
      "            ByteArrayInputStream istream =\n"
      "                    new ByteArrayInputStream(\n"
      "                            imagebuffer.toByteArray());\n"
      "            return new DownloadStream (istream,null,null);\n"
      "        } catch (IOException e) {\n"
      "            return null;\n"
      "        }\n"
      "    }\n"
      "}]]>"
msgstr ""

#. Tag: para
#: part1-advanced.xml:1099
#, no-c-format
msgid "When you use the dynamic resource class in your application, you obviously need to provide the same instance of the class as both types of handler:"
msgstr ""

#. Tag: programlisting
#: part1-advanced.xml:1104
#, no-c-format
msgid ""
      "<?pocket-size 70% ?><![CDATA[MyDynamicResource myresource = new MyDynamicResource();\n"
      "mainWindow.addParameterHandler(myresource);\n"
      "mainWindow.addURIHandler(myresource);]]>"
msgstr ""

#. Tag: title
#: part1-advanced.xml:1107
#, no-c-format
msgid "Dynamic Resource with URI Parameters"
msgstr ""

#. Tag: title
#: part1-advanced.xml:1129
#, no-c-format
msgid "Shortcut Keys"
msgstr ""

#. Tag: para
#: part1-advanced.xml:1131
#, no-c-format
msgid "Vaadin provides simple ways for defining shortcut keys for field components and a default button, and a lower-level generic shortcut key binding API based on actions."
msgstr ""

#. Tag: title
#: part1-advanced.xml:1138
#, no-c-format
msgid "Click Shortcuts for Default Buttons"
msgstr ""

#. Tag: para
#: part1-advanced.xml:1140
#, no-c-format
msgid "You can add or set a <emphasis>click shortcut</emphasis> to a button to set it as \"default\" button; pressing the defined key, typically <keycap>Enter</keycap>, in any component in the window causes a click event for the button."
msgstr ""

#. Tag: para
#: part1-advanced.xml:1147
#, no-c-format
msgid "You can define a click shortcut with the <methodname>setClickShortcut()</methodname> shorthand method:"
msgstr ""

#. Tag: programlisting
#: part1-advanced.xml:1152
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[// Have an OK button and set it as the default button\n"
      "Button ok = new Button(\"OK\");\n"
      "ok.setClickShortcut(KeyCode.ENTER);\n"
      "ok.addStyleName(\"primary\");]]>"
msgstr ""

#. Tag: para
#: part1-advanced.xml:1154
#, no-c-format
msgid "The <literal>primary</literal> style name highlights a button to show the default button status; usually with a bolder font than usual, depending on the theme. The result can be seen in <xref linkend=\"figure.advanced.shortcuts.defaultbutton\"/>."
msgstr ""

#. Tag: title
#: part1-advanced.xml:1162
#, no-c-format
msgid "Default Button with Click Shortcut"
msgstr ""

#. Tag: title
#: part1-advanced.xml:1175
#, no-c-format
msgid "Field Focus Shortcuts"
msgstr ""

#. Tag: para
#: part1-advanced.xml:1177
#, no-c-format
msgid "You can define a shortcut key that sets the focus to a field component (any component that inherits <classname>AbstractField</classname>) by adding a <classname>FocusShortcut</classname> as a shortcut listener to the field."
msgstr ""

#. Tag: programlisting
#: part1-advanced.xml:1184
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[// A field with Alt+N bound to it\n"
      "TextField name = new TextField(\"Name (Alt+N)\");\n"
      "name.addShortcutListener(\n"
      "        new AbstractField.FocusShortcut(name, KeyCode.N,\n"
      "                                        ModifierKey.ALT));\n"
      "layout.addComponent(name);\n"
      "\n"
      "// A field with Alt+A bound to it\n"
      "TextField address = new TextField(\"Address (Alt+A)\");\n"
      "address.addShortcutListener(\n"
      "        new AbstractField.FocusShortcut(address, KeyCode.A,\n"
      "                                        ModifierKey.ALT));\n"
      "layout.addComponent(address);]]>"
msgstr ""

#. Tag: para
#: part1-advanced.xml:1186
#, no-c-format
msgid "The constructor of the <classname>FocusShortcut</classname> takes the field component as its first parameter, followed by the key code, and an optional list of modifier keys, as listed in <xref linkend=\"advanced.shortcuts.keycodes\"/>."
msgstr ""

#. Tag: title
#: part1-advanced.xml:1195
#, no-c-format
msgid "Generic Shortcut Actions"
msgstr ""

#. Tag: para
#: part1-advanced.xml:1197
#, no-c-format
msgid "Shortcut keys can be defined as <emphasis>actions</emphasis> using the <classname>ShortcutAction</classname> class. ShortcutAction extends the generic <classname>Action</classname> class that is used for example in <classname>Tree</classname> and <classname>Table</classname> for context menus. Currently, the only classes that accept <classname>ShortcutAction</classname>s are <classname>Window</classname> and <classname>Panel</classname>."
msgstr ""

#. Tag: para
#: part1-advanced.xml:1207
#, no-c-format
msgid "To handle key presses, you need to define an action handler by implementing the <classname>Handler</classname> interface. The interface has two methods that you need to implement: <methodname>getActions()</methodname> and <methodname>handleAction()</methodname>."
msgstr ""

#. Tag: para
#: part1-advanced.xml:1215
#, no-c-format
msgid "The <methodname>getActions()</methodname> method must return an array of <classname>Action</classname> objects for the component, specified with the second parameter for the method, the <parameter>sender</parameter> of an action. For a keyboard shortcut, you use a <classname>ShortcutAction</classname>. The implementation of the method could be following:"
msgstr ""

#. Tag: programlisting
#: part1-advanced.xml:1224
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[// Have the unmodified Enter key cause an event\n"
      "Action action_ok = new ShortcutAction(\"Default key\",\n"
      "        ShortcutAction.KeyCode.ENTER, null);\n"
      "\n"
      "// Have the C key modified with Alt cause an event\n"
      "Action action_cancel = new ShortcutAction(\"Alt+C\",\n"
      "        ShortcutAction.KeyCode.C,\n"
      "        new int[] { ShortcutAction.ModifierKey.ALT });\n"
      "\n"
      "Action[] actions = new Action[] {action_cancel, action_ok};\n"
      "\n"
      "public Action[] getActions(Object target, Object sender) {\n"
      "    if (sender == myPanel)\n"
      "        return actions;\n"
      "\n"
      "    return null;\n"
      "}]]>"
msgstr ""

#. Tag: para
#: part1-advanced.xml:1226
#, no-c-format
msgid "The returned <classname>Action</classname> array may be static or you can create it dynamically for different senders according to your needs."
msgstr ""

#. Tag: para
#: part1-advanced.xml:1231
#, no-c-format
msgid "The constructor of <classname>ShortcutAction</classname> takes a symbolic caption for the action; this is largely irrelevant for shortcut actions in their current implementation, but might be used later if implementors use them both in menus and as shortcut actions. The second parameter is the key code and the third a list of modifier keys, which are listed in <xref linkend=\"advanced.shortcuts.keycodes\"/>."
msgstr ""

#. Tag: para
#: part1-advanced.xml:1240
#, no-c-format
msgid "The following example demonstrates the definition of a default button for a user interface, as well as a normal shortcut key, <keycombo><keycap>Alt</keycap><keycap>C</keycap></keycombo> for clicking the <guibutton>Cancel</guibutton> button."
msgstr ""

#. Tag: programlisting
#: part1-advanced.xml:1247
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[public class DefaultButtonExample extends CustomComponent\n"
      "                                  implements Handler {\n"
      "    // Define and create user interface components\n"
      "    Panel panel = new Panel(\"Login\");\n"
      "    FormLayout formlayout = new FormLayout();\n"
      "    TextField username = new TextField(\"Username\");\n"
      "    TextField password = new TextField(\"Password\");\n"
      "    HorizontalLayout buttons = new HorizontalLayout();\n"
      "\n"
      "    // Create buttons and define their listener methods.\n"
      "    Button ok = new Button(\"OK\", this, \"okHandler\");\n"
      "    Button cancel = new Button(\"Cancel\", this, \"cancelHandler\");\n"
      "\n"
      "    // Have the unmodified Enter key cause an event\n"
      "    Action action_ok = new ShortcutAction(\"Default key\",\n"
      "            ShortcutAction.KeyCode.ENTER, null);\n"
      "\n"
      "    // Have the C key modified with Alt cause an event\n"
      "    Action action_cancel = new ShortcutAction(\"Alt+C\",\n"
      "            ShortcutAction.KeyCode.C,\n"
      "            new int[] { ShortcutAction.ModifierKey.ALT });\n"
      "\n"
      "    public DefaultButtonExample() {\n"
      "        // Set up the user interface\n"
      "        setCompositionRoot(panel);\n"
      "        panel.addComponent(formlayout);\n"
      "        formlayout.addComponent(username);\n"
      "        formlayout.addComponent(password);\n"
      "        formlayout.addComponent(buttons);\n"
      "        buttons.addComponent(ok);\n"
      "        buttons.addComponent(cancel);\n"
      "\n"
      "        // Set focus to username\n"
      "        username.focus();\n"
      "\n"
      "        // Set this object as the action handler\n"
      "        System.out.println(\"adding ah\");\n"
      "        panel.addActionHandler(this);\n"
      "\n"
      "        System.out.println(\"start done.\");\n"
      "    }\n"
      "\n"
      "    /**\n"
      "     * Retrieve actions for a specific component. This method\n"
      "     * will be called for each object that has a handler; in\n"
      "     * this example just for login panel. The returned action\n"
      "     * list might as well be static list.\n"
      "     */\n"
      "    public Action[] getActions(Object target, Object sender) {\n"
      "        System.out.println(\"getActions()\");\n"
      "        return new Action[] { action_ok, action_cancel };\n"
      "    }\n"
      "\n"
      "    /**\n"
      "     * Handle actions received from keyboard. This simply directs\n"
      "     * the actions to the same listener methods that are called\n"
      "     * with ButtonClick events.\n"
      "     */\n"
      "    public void handleAction(Action action, Object sender,\n"
      "                             Object target) {\n"
      "        if (action == action_ok) {\n"
      "            okHandler();\n"
      "        }\n"
      "        if (action == action_cancel) {\n"
      "            cancelHandler();\n"
      "        }\n"
      "    }\n"
      "\n"
      "    public void okHandler() {\n"
      "        // Do something: report the click\n"
      "        formlayout.addComponent(new Label(\"OK clicked. \"\n"
      "                + \"User=\" + username.getValue() + \", password=\"\n"
      "                + password.getValue()));\n"
      "    }\n"
      "\n"
      "    public void cancelHandler() {\n"
      "        // Do something: report the click\n"
      "        formlayout.addComponent(new Label(\"Cancel clicked. User=\"\n"
      "                + username.getValue() + \", password=\"\n"
      "                + password.getValue()));\n"
      "    }\n"
      "}]]>"
msgstr ""

#. Tag: para
#: part1-advanced.xml:1249
#, no-c-format
msgid "Notice that the keyboard actions can currently be attached only to <classname>Panel</classname>s and <classname>Window</classname>s. This can cause problems if you have components that require a certain key. For example, multi-line <classname>TextField</classname> requires the <keycap>Enter</keycap> key. There is currently no way to filter the shortcut actions out while the focus is inside some specific component, so you need to avoid such conflicts."
msgstr ""

#. Tag: title
#: part1-advanced.xml:1261
#, no-c-format
msgid "Supported Key Codes and Modifier Keys"
msgstr ""

#. Tag: para
#: part1-advanced.xml:1263
#, no-c-format
msgid "The shortcut key definitions require a key code to identify the pressed key and modifier keys, such as Shift, Alt, or Ctrl, to specify a key combination."
msgstr ""

#. Tag: para
#: part1-advanced.xml:1269
#, no-c-format
msgid "The key codes are defined in the <classname>ShortcutAction.KeyCode</classname> interface and are:"
msgstr ""

#. Tag: term
#: part1-advanced.xml:1276
#, no-c-format
msgid "Keys <parameter>A</parameter> to <parameter>Z</parameter>"
msgstr ""

#. Tag: listitem
#: part1-advanced.xml:1277
#, no-c-format
msgid "Normal letter keys"
msgstr ""

#. Tag: term
#: part1-advanced.xml:1280
#, no-c-format
msgid "<parameter>F1</parameter> to <parameter>F12</parameter>"
msgstr ""

#. Tag: para
#: part1-advanced.xml:1282
#, no-c-format
msgid "Function keys"
msgstr ""

#. Tag: term
#: part1-advanced.xml:1286
#, no-c-format
msgid "<parameter>BACKSPACE</parameter>, <parameter>DELETE</parameter>, <parameter>ENTER</parameter>, <parameter>ESCAPE</parameter>, <parameter>INSERT</parameter>, <parameter>TAB</parameter>"
msgstr ""

#. Tag: para
#: part1-advanced.xml:1288
#, no-c-format
msgid "Control keys"
msgstr ""

#. Tag: term
#: part1-advanced.xml:1292
#, no-c-format
msgid "<parameter>NUM0</parameter> to <parameter>NUM9</parameter>"
msgstr ""

#. Tag: para
#: part1-advanced.xml:1294
#, no-c-format
msgid "Number pad keys"
msgstr ""

#. Tag: term
#: part1-advanced.xml:1298
#, no-c-format
msgid "<parameter>ARROW_DOWN</parameter>, <parameter>ARROW_UP</parameter>, <parameter>ARROW_LEFT</parameter>, <parameter>ARROW_RIGHT</parameter>"
msgstr ""

#. Tag: para
#: part1-advanced.xml:1300
#, no-c-format
msgid "Arrow keys"
msgstr ""

#. Tag: term
#: part1-advanced.xml:1304
#, no-c-format
msgid "<parameter>HOME</parameter>, <parameter>END</parameter>, <parameter>PAGE_UP</parameter>, <parameter>PAGE_DOWN</parameter>"
msgstr ""

#. Tag: para
#: part1-advanced.xml:1306
#, no-c-format
msgid "Other movement keys"
msgstr ""

#. Tag: para
#: part1-advanced.xml:1311
#, no-c-format
msgid "Modifier keys are defined in <classname>ShortcutAction.ModifierKey</classname> and are:"
msgstr ""

#. Tag: parameter
#: part1-advanced.xml:1318
#, no-c-format
msgid "ModifierKey.ALT"
msgstr ""

#. Tag: listitem
#: part1-advanced.xml:1319
#, no-c-format
msgid "Alt key"
msgstr ""

#. Tag: parameter
#: part1-advanced.xml:1322
#, no-c-format
msgid "ModifierKey.CTRL"
msgstr ""

#. Tag: listitem
#: part1-advanced.xml:1323
#, no-c-format
msgid "Ctrl key"
msgstr ""

#. Tag: parameter
#: part1-advanced.xml:1326
#, no-c-format
msgid "ModifierKey.SHIFT"
msgstr ""

#. Tag: listitem
#: part1-advanced.xml:1327
#, no-c-format
msgid "Shift key"
msgstr ""

#. Tag: para
#: part1-advanced.xml:1331
#, no-c-format
msgid "All constructors and methods accepting modifier keys take them as a variable argument list following the key code, separated with commas. For example, the following defines a <keycombo><keycap>Ctrl</keycap><keycap>Shift</keycap><keycap>N</keycap></keycombo> key combination for a shortcut."
msgstr ""

#. Tag: programlisting
#: part1-advanced.xml:1339
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[TextField name = new TextField(\"Name (Ctrl+Shift+N)\");\n"
      "name.addShortcutListener(\n"
      "        new AbstractField.FocusShortcut(name, KeyCode.N,\n"
      "                                        ModifierKey.CTRL,\n"
      "                                        ModifierKey.SHIFT));]]>"
msgstr ""

#. Tag: title
#: part1-advanced.xml:1342
#, no-c-format
msgid "Supported Key Combinations"
msgstr ""

#. Tag: para
#: part1-advanced.xml:1344
#, no-c-format
msgid "The actual possible key combinations vary greatly between browsers, as most browsers have a number of built-in shortcut keys, which can not be used in web applications. For example, Mozilla Firefox allows binding almost any key combination, while Opera does not even allow binding Alt shortcuts. Other browsers are generally in between these two. Also, the operating system can reserve some key combinations and some computer manufacturers define their own system key combinations."
msgstr ""

#. Tag: title
#: part1-advanced.xml:1358
#, no-c-format
msgid "Printing"
msgstr ""

#. Tag: primary
#: part1-advanced.xml:1361
#, no-c-format
msgid "printing"
msgstr ""

#. Tag: para
#: part1-advanced.xml:1364
#, no-c-format
msgid "Vaadin does not currently have any special support for printing. Printing on the server-side is, in any case, largely independent from the web UI of an application. You just have to take care that the printing does not block server requests, possibly by running printing in another thread."
msgstr ""

#. Tag: methodname
#: part1-advanced.xml:1373 part1-advanced.xml:1377
#, no-c-format
msgid "print()"
msgstr ""

#. Tag: primary
#: part1-advanced.xml:1376 part1-advanced.xml:1386
#, no-c-format
msgid "JavaScript"
msgstr ""

#. Tag: para
#: part1-advanced.xml:1378
#, no-c-format
msgid "For client-side printing, most browsers support printing the web page. Vaadin does not explicitly support launching the printing in browser, but you can easily use the JavaScript <methodname>print()</methodname> method that opens the print window of the browser."
msgstr ""

#. Tag: methodname
#: part1-advanced.xml:1386 part1-advanced.xml:1387
#, no-c-format
msgid "executeJavaScript()"
msgstr ""

#. Tag: programlisting
#: part1-advanced.xml:1389
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[final Button print = new Button(\"Print This Page\");\n"
      "print.addListener(new ClickListener() {\n"
      "    public void buttonClick(ClickEvent event) {\n"
      "        print.getWindow().executeJavaScript(\"print();\");\n"
      "    }\n"
      "});]]>"
msgstr ""

#. Tag: para
#: part1-advanced.xml:1391
#, no-c-format
msgid "This button would print the current page, including the button itself. Often, you want to be able to print a report or receipt and it should not have any visible UI components. In such a case, you could offer it as a PDF resource, or you could open a new window, as is done below, and automatically launch printing."
msgstr ""

#. Tag: programlisting
#: part1-advanced.xml:1399
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[// A button to open the printer-friendly page.\n"
      "Button print = new Button(\"Click to Print\");\n"
      "\n"
      "print.addListener(new Button.ClickListener() {\n"
      "        public void buttonClick(ClickEvent event) {\n"
      "        // Create a window that contains what you want to print\n"
      "        Window window = new Window(\"Window to Print\");\n"
      "\n"
      "        // Have some content to print\n"
      "        window.addComponent(new Label(\n"
      "                \"<h1>Here's some dynamic content</h1>\\n\" +\n"
      "                \"<p>This is to be printed to the printer.</p>\",\n"
      "                Label.CONTENT_XHTML));\n"
      "\n"
      "        // Add the printing window as a new application-level\n"
      "        // window\n"
      "        getApplication().addWindow(window);\n"
      "\n"
      "        // Open it as a popup window with no decorations\n"
      "        getWindow().open(new ExternalResource(window.getURL()),\n"
      "                \"_blank\", 500, 200,  // Width and height \n"
      "                Window.BORDER_NONE); // No decorations\n"
      "\n"
      "        // Print automatically when the window opens.\n"
      "        // This call will block until the print dialog exits!\n"
      "        window.executeJavaScript(\"print();\");\n"
      "\n"
      "        // Close the window automatically after printing\n"
      "        window.executeJavaScript(\"self.close();\");\n"
      "    }\n"
      "});]]>"
msgstr ""

#. Tag: para
#: part1-advanced.xml:1401
#, no-c-format
msgid "How the browser opens the window, as an actual (popup) window or just a tab, depends on the browser. Notice that calling the <methodname>print()</methodname> method in the window will block the entire application until the print dialog exits. <indexterm><primary><classname>Window</classname></primary><secondary>closing</secondary></indexterm> After printing, we automatically close the window with another JavaScript call, as there is no <methodname>close()</methodname> method in <classname>Window</classname>."
msgstr ""

#. Tag: primary
#: part1-advanced.xml:1417
#, no-c-format
msgid "<primary>PDF</primary>"
msgstr ""

#. Tag: para
#: part1-advanced.xml:1417
#, no-c-format
msgid "Printing as PDF would not require creating a <classname>Window</classname> object, but you would need to provide the content as a static or a dynamic resource for the <methodname>open()</methodname> method. Printing a PDF file would obviously require a PDF viewer cabability (such as Adobe Reader) in the browser."
msgstr ""

#. Tag: title
#: part1-advanced.xml:1430
#, no-c-format
msgid "Portal Integration"
msgstr ""

#. Tag: primary
#: part1-advanced.xml:1432
#, no-c-format
msgid "portal integration"
msgstr ""

#. Tag: para
#: part1-advanced.xml:1434
#, no-c-format
msgid "Vaadin supports running applications as portlets, as defined in the JSR-168 (Java Portlet API) and JSR-286 (Java Portlet API 2.0) standards. While providing generic support for all portals implementing the standards, Vaadin especially supports the Liferay portal and the needed portal-specific configuration is given below for Liferay."
msgstr ""

#. Tag: para
#: part1-advanced.xml:1442
#, no-c-format
msgid "You can deploy the Vaadin demo package WAR (available from the download site) directly to a portal such as Liferay. It contains all the necessary portlet configuration files. For optimal performance with Liferay, you can install the Vaadin library and other needed resources in Liferay as described later in this section."
msgstr ""

#. Tag: para
#: part1-advanced.xml:1450
#, no-c-format
msgid "You can find more documentation and examples from the Vaadin Developer's Site at <uri>http://dev.vaadin.com/</uri>."
msgstr ""

#. Tag: title
#: part1-advanced.xml:1456
#, no-c-format
msgid "Deploying to a Portal"
msgstr ""

#. Tag: para
#: part1-advanced.xml:1458
#, no-c-format
msgid "Deploying a Vaadin application as a portlet is essentially just as easy as deploying a regular application to an application server. You do not need to make any changes to the application itself, but only the following:"
msgstr ""

#. Tag: para
#: part1-advanced.xml:1465
#, no-c-format
msgid "Application packaged as a WAR"
msgstr ""

#. Tag: para
#: part1-advanced.xml:1467
#, no-c-format
msgid "<filename>WEB-INF/portlet.xml</filename> descriptor"
msgstr ""

#. Tag: para
#: part1-advanced.xml:1468
#, no-c-format
msgid "<filename>WEB-INF/web.xml</filename> descriptor for Portlet 1.0 portlets"
msgstr ""

#. Tag: para
#: part1-advanced.xml:1469
#, no-c-format
msgid "<filename>WEB-INF/liferay-portlet.xml</filename> descriptor for Liferay"
msgstr ""

#. Tag: para
#: part1-advanced.xml:1470
#, no-c-format
msgid "<filename>WEB-INF/liferay-display.xml</filename> descriptor for Liferay"
msgstr ""

#. Tag: para
#: part1-advanced.xml:1471
#, no-c-format
msgid "<filename>WEB-INF/liferay-plugin-package.properties</filename> for Liferay"
msgstr ""

#. Tag: listitem
#: part1-advanced.xml:1475
#, no-c-format
msgid "Widget set installed to portal (optional)"
msgstr ""

#. Tag: listitem
#: part1-advanced.xml:1476
#, no-c-format
msgid "Themes installed to portal (optional)"
msgstr ""

#. Tag: listitem
#: part1-advanced.xml:1477
#, no-c-format
msgid "Vaadin library installed to portal (optional)"
msgstr ""

#. Tag: listitem
#: part1-advanced.xml:1478
#, no-c-format
msgid "Portal configuration settings (optional)"
msgstr ""

#. Tag: para
#: part1-advanced.xml:1481
#, no-c-format
msgid "Installing the widget set and themes to the portal is required for running two or more Vaadin portlets simultaneously in a single portal page. As this situation occurs quite easily, we recommend installing them in any case."
msgstr ""

#. Tag: para
#: part1-advanced.xml:1488
#, no-c-format
msgid "In addition to the Vaadin library, you will need to copy the <filename>portlet.jar</filename> to your project. It is included in the Vaadin installation package. Notice that you must <emphasis>not</emphasis> put the <filename>portlet.jar</filename> in the same <filename>WebContent/WEB-INF/lib</filename> directory as the Vaadin JAR or otherwise include it in the WAR to be deployed, because it would create a conflict with the internal portlet library of the portal."
msgstr ""

#. Tag: para
#: part1-advanced.xml:1498
#, no-c-format
msgid "How you actually deploy a WAR package depends on the portal. In Liferay, you simply drop it to the <filename>deploy</filename> subdirectory under the Liferay installation directory. The deployment depends on the application server under which Liferay runs; for example, if you use Liferay bundled with Tomcat, you will find the extracted package in the <filename>webapps</filename> directory under the Tomcat installation directory included in Liferay."
msgstr ""

#. Tag: title
#: part1-advanced.xml:1510
#, no-c-format
msgid "Creating a Portal Application Project in Eclipse"
msgstr ""

#. Tag: para
#: part1-advanced.xml:1512
#, no-c-format
msgid "While you can create the needed deployment descriptors manually for any existing Vaadin application, as described in subsequent sections, the Vaadin Plugin for Eclipse provides a wizard for easy creation of portal application projects."
msgstr ""

#. Tag: para
#: part1-advanced.xml:1519
#, no-c-format
msgid "Creation of a portal application project is almost identical to the creation of a regular application project. For a full treatment of the New Project Wizard and the possible options, please see <xref linkend=\"getting-started.first-project.creation\"/>."
msgstr ""

#. Tag: listitem
#: part1-advanced.xml:1527
#, no-c-format
msgid "Start creating a new project by selecting from the menu <menuchoice><guimenu>File</guimenu><guisubmenu>New</guisubmenu><guimenuitem>Project...</guimenuitem></menuchoice>."
msgstr ""

#. Tag: listitem
#: part1-advanced.xml:1533
#, no-c-format
msgid "In the <guilabel>New Project</guilabel> window that opens, select <menuchoice><guimenu>Web</guimenu><guimenuitem>Vaadin Project</guimenuitem></menuchoice> and click <guibutton>Next</guibutton>."
msgstr ""

#. Tag: para
#: part1-advanced.xml:1542
#, no-c-format
msgid "In the <guilabel>Vaadin Project</guilabel> step, you need to set the basic web project settings. You need to give at least the project name, the runtime, and select <guilabel>Generic Portlet</guilabel> for the deployment configuration; the default values should be good for the other settings."
msgstr ""

#. Tag: para
#: part1-advanced.xml:1561
#, no-c-format
msgid "You can click <guibutton>Finish</guibutton> here to use the defaults for the rest of the settings, or click <guibutton>Next</guibutton>."
msgstr ""

#. Tag: para
#: part1-advanced.xml:1569
#, no-c-format
msgid "The settings in the <guilabel>Web Module</guilabel> step define the basic servlet-related settings and the structure of the web application project. All the settings are pre-filled, and you should normally accept them as they are and click <guibutton>Next</guibutton>."
msgstr ""

#. Tag: para
#: part1-advanced.xml:1580
#, no-c-format
msgid "The <guilabel>Vaadin project</guilabel> step page has various Vaadin-specific application settings. These are largely the same as for regular applications. You should not need to change anything as you can change the application titles and other details afterwards. The <guilabel>Create portlet template</guilabel> option should be automatically selected. You can give another portlet title of you want. You can change most of the settings afterward."
msgstr ""

#. Tag: guilabel
#: part1-advanced.xml:1604
#, no-c-format
msgid "Create project template"
msgstr ""

#. Tag: para
#: part1-advanced.xml:1606
#, no-c-format
msgid "Creates an application class and all the needed portlet deployment descriptors."
msgstr ""

#. Tag: guilabel
#: part1-advanced.xml:1613
#, no-c-format
msgid "Application name"
msgstr ""

#. Tag: para
#: part1-advanced.xml:1615
#, no-c-format
msgid "The application name is used in the title of the main window (which is usually invisible in portlets) and as an identifier, either as is or with a suffix, in various deployment descriptors."
msgstr ""

#. Tag: guilabel
#: part1-advanced.xml:1624
#, no-c-format
msgid "Base package name"
msgstr ""

#. Tag: para
#: part1-advanced.xml:1626
#, no-c-format
msgid "Java package for the application class."
msgstr ""

#. Tag: guilabel
#: part1-advanced.xml:1632
#, no-c-format
msgid "Application class name"
msgstr ""

#. Tag: para
#: part1-advanced.xml:1634
#, no-c-format
msgid "Name of the application class. The default is derived from the project name."
msgstr ""

#. Tag: guilabel
#: part1-advanced.xml:1641
#, no-c-format
msgid "Portlet version"
msgstr ""

#. Tag: para
#: part1-advanced.xml:1643 part1-advanced.xml:1664
#, no-c-format
msgid "Same as in the project settings."
msgstr ""

#. Tag: guilabel
#: part1-advanced.xml:1649
#, no-c-format
msgid "Portlet title"
msgstr ""

#. Tag: para
#: part1-advanced.xml:1651
#, no-c-format
msgid "The portlet title, defined in <filename>portlet.xml</filename>, can be used as the display name of the portlet (at least in Liferay). The default value is the project name. The title is also used as a short description in <filename>liferay-plugin-package.properties</filename>."
msgstr ""

#. Tag: guilabel
#: part1-advanced.xml:1662
#, no-c-format
msgid "Vaadin version"
msgstr ""

#. Tag: para
#: part1-advanced.xml:1671
#, no-c-format
msgid "Finally, click <guibutton>Finish</guibutton> to create the project."
msgstr ""

#. Tag: para
#: part1-advanced.xml:1677
#, no-c-format
msgid "Eclipse may ask you to switch to J2EE perspective. A Dynamic Web Project uses an external web server and the J2EE perspective provides tools to control the server and manage application deployment. Click <guibutton>Yes</guibutton>."
msgstr ""

#. Tag: title
#: part1-advanced.xml:1688
#, no-c-format
msgid "Portlet Deployment Descriptors"
msgstr ""

#. Tag: para
#: part1-advanced.xml:1690
#, no-c-format
msgid "To deploy a portlet WAR in a portal, you need to provide the basic <filename>portlet.xml</filename> descriptor specified in the Java Portlet standard. In addition, you may need to include possible portal vendor specific deployment descriptors. The ones required by Liferay are described below."
msgstr ""

#. Tag: title
#: part1-advanced.xml:1699
#, no-c-format
msgid "Portlet 2.0 Deployment Descriptor"
msgstr ""

#. Tag: para
#: part1-advanced.xml:1701
#, no-c-format
msgid "The portlet WAR must include a portlet descriptor located at <filename>WebContent/WEB-INF/portlet.xml</filename>. A portlet definition includes the portlet name, mapping to a servlet in <filename>web.xml</filename>, modes supported by the portlet, and other configuration. Below is an example of a simple portlet definition in <filename>portlet.xml</filename> descriptor."
msgstr ""

#. Tag: programlisting
#: part1-advanced.xml:1710
#, no-c-format
msgid ""
      "<?pocket-size 65% ?>&lt;?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?&gt;\n"
      "&lt;portlet-app\n"
      "  xmlns=\"http://java.sun.com/xml/ns/portlet/portlet-app_2_0.xsd\"\n"
      "  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n"
      "  version=\"2.0\"\n"
      "  xsi:schemaLocation=\n"
      "    \"http://java.sun.com/xml/ns/portlet/portlet-app_2_0.xsd\n"
      "     http://java.sun.com/xml/ns/portlet/portlet-app_2_0.xsd\"&gt;\n"
      "\n"
      "  &lt;portlet&gt;\n"
      "    &lt;portlet-name&gt;<emphasis role=\"bold\">Portlet Example portlet</emphasis>&lt;/portlet-name&gt;\n"
      "    &lt;display-name&gt;<emphasis role=\"bold\">Vaadin Portlet Example</emphasis>&lt;/display-name&gt;\n"
      "\n"
      "    &lt;!-- Map portlet to a servlet. --&gt;\n"
      "    &lt;portlet-class&gt;\n"
      "      com.vaadin.terminal.gwt.server.ApplicationPortlet2\n"
      "    &lt;/portlet-class&gt;\n"
      "    &lt;init-param&gt;\n"
      "      &lt;name&gt;application&lt;/name&gt;\n"
      "\n"
      "      &lt;!-- The application class with package name. --&gt;\n"
      "      &lt;value&gt;<emphasis role=\"bold\">com.example.myportlet.MyportletApplication</emphasis>&lt;/value&gt;\n"
      "    &lt;/init-param&gt;\n"
      "\n"
      "    &lt;!-- Supported portlet modes and content types. --&gt;\n"
      "    &lt;supports&gt;\n"
      "      &lt;mime-type&gt;text/html&lt;/mime-type&gt;\n"
      "      &lt;portlet-mode&gt;view&lt;/portlet-mode&gt;\n"
      "      &lt;portlet-mode&gt;edit&lt;/portlet-mode&gt;\n"
      "      &lt;portlet-mode&gt;help&lt;/portlet-mode&gt;\n"
      "    &lt;/supports&gt;\n"
      "\n"
      "    &lt;!-- Not always required but Liferay requires these. --&gt;\n"
      "    &lt;portlet-info&gt;\n"
      "      &lt;title&gt;<emphasis role=\"bold\">Vaadin Portlet Example</emphasis>&lt;/title&gt;\n"
      "      &lt;short-title&gt;<emphasis role=\"bold\">Portlet Example</emphasis>&lt;/short-title&gt;\n"
      "    &lt;/portlet-info&gt;\n"
      "  &lt;/portlet&gt;\n"
      "&lt;/portlet-app&gt;"
msgstr ""

#. Tag: para
#: part1-advanced.xml:1712
#, no-c-format
msgid "Listing supported portlet modes in <filename>portlet.xml</filename> enables the corresponding portlet controls in the portal user interface that allow changing the mode, as described later."
msgstr ""

#. Tag: title
#: part1-advanced.xml:1720
#, no-c-format
msgid "Portlet 1.0 Deployment Descriptor"
msgstr ""

#. Tag: para
#: part1-advanced.xml:1722
#, no-c-format
msgid "The portlet deployment descriptor for Portlet 1.0 API is largely the same as for Portlet 2.0. The main differences are:"
msgstr ""

#. Tag: para
#: part1-advanced.xml:1728
#, no-c-format
msgid "XML namespace and schema names"
msgstr ""

#. Tag: para
#: part1-advanced.xml:1730
#, no-c-format
msgid "Portlet-class: <classname>ApplicationPortlet</classname> vs <classname>ApplicationPortlet2</classname>"
msgstr ""

#. Tag: para
#: part1-advanced.xml:1734
#, no-c-format
msgid "The <literal>application</literal> parameter is a name of the servlet (defined in <filename>web.xml</filename> in Portlet 1.0, but name of the application class in Portlet 2.0. There is no longer a separate <filename>web.xml</filename> file in Servlet 2.0."
msgstr ""

#. Tag: para
#: part1-advanced.xml:1740
#, no-c-format
msgid "The <literal>portlet-name</literal> must not be same as the servlet name in Portlet 1.0; in Portlet 2.0 this does not matter."
msgstr ""

#. Tag: para
#: part1-advanced.xml:1744
#, no-c-format
msgid "Below is an example of a complete deployment descriptor for Portlet 1.0:"
msgstr ""

#. Tag: programlisting
#: part1-advanced.xml:1748
#, no-c-format
msgid ""
      "<?pocket-size 65% ?>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n"
      "&lt;portlet-app\n"
      "  version=\"1.0\"\n"
      "  xmlns=\"http://java.sun.com/xml/ns/portlet/portlet-app_1_0.xsd\"\n"
      "  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n"
      "  xsi:schemaLocation=\n"
      "       \"http://java.sun.com/xml/ns/portlet/portlet-app_1_0.xsd\n"
      "        http://java.sun.com/xml/ns/portlet/portlet-app_1_0.xsd\"&gt;\n"
      "\n"
      "  &lt;portlet&gt;\n"
      "    &lt;!-- Must not be the same as servlet name. --&gt;\n"
      "    &lt;portlet-name&gt;<emphasis role=\"bold\">Portlet Example portlet</emphasis>&lt;/portlet-name&gt;\n"
      "    &lt;display-name&gt;<emphasis role=\"bold\">Vaadin Portlet Example</emphasis>&lt;/display-name&gt;\n"
      "\n"
      "    &lt;!-- Map portlet to a servlet. --&gt;\n"
      "    &lt;portlet-class&gt;\n"
      "      com.vaadin.terminal.gwt.server.ApplicationPortlet\n"
      "    &lt;/portlet-class&gt;\n"
      "    &lt;init-param&gt;\n"
      "      &lt;name&gt;application&lt;/name&gt;\n"
      "\n"
      "      &lt;!-- Must match the servlet URL mapping in web.xml. --&gt;\n"
      "      &lt;value&gt;<emphasis role=\"bold\">portletexample</emphasis>&lt;/value&gt;\n"
      "    &lt;/init-param&gt;\n"
      "\n"
      "    &lt;!-- Supported portlet modes and content types. --&gt;\n"
      "    &lt;supports&gt;\n"
      "      &lt;mime-type&gt;text/html&lt;/mime-type&gt;\n"
      "      &lt;portlet-mode&gt;view&lt;/portlet-mode&gt;\n"
      "      &lt;portlet-mode&gt;edit&lt;/portlet-mode&gt;\n"
      "      &lt;portlet-mode&gt;help&lt;/portlet-mode&gt;\n"
      "    &lt;/supports&gt;\n"
      "\n"
      "    &lt;!-- Not always required but Liferay requires these. --&gt;\n"
      "    &lt;portlet-info&gt;\n"
      "      &lt;title&gt;<emphasis role=\"bold\">Vaadin Portlet Example</emphasis>&lt;/title&gt;\n"
      "      &lt;short-title&gt;<emphasis role=\"bold\">Portlet Example</emphasis>&lt;/short-title&gt;\n"
      "    &lt;/portlet-info&gt;\n"
      "  &lt;/portlet&gt;\n"
      "&lt;/portlet-app&gt;"
msgstr ""

#. Tag: para
#: part1-advanced.xml:1750
#, no-c-format
msgid "The value of the application parameter must match the context in the <literal>&lt;url-pattern&gt;</literal> element in the <literal>&lt;servlet-mapping&gt;</literal> in the <filename>web.xml</filename> deployment descriptor, without the path qualifiers in the pattern. The above example would match the following servlet mapping in <filename>web.xml</filename>:"
msgstr ""

#. Tag: programlisting
#: part1-advanced.xml:1759
#, no-c-format
msgid ""
      "<?pocket-size 65% ?>  &lt;servlet-mapping&gt;\n"
      "      &lt;servlet-name&gt;Portlet Example&lt;/servlet-name&gt;\n"
      "      &lt;url-pattern&gt;/<emphasis role=\"bold\">portletexample</emphasis>/*&lt;/url-pattern&gt;\n"
      "  &lt;/servlet-mapping&gt;"
msgstr ""

#. Tag: para
#: part1-advanced.xml:1761
#, no-c-format
msgid "In fact, it would also match the <literal>/*</literal> mapping."
msgstr ""

#. Tag: title
#: part1-advanced.xml:1767
#, no-c-format
msgid "Using a Single Widget Set"
msgstr ""

#. Tag: para
#: part1-advanced.xml:1769
#, no-c-format
msgid "If you have just one Vaadin application that you ever need to run in your portal, you can just deploy the WAR as described above and that's it. However, if you have multiple applications, especially ones that use different custom widget sets, you run into problems, because a portal window can load only a single Vaadin widget set at a time. You can solve this problem by combining all the different widget sets in your different applications into a single widget set using inheritance or composition."
msgstr ""

#. Tag: para
#: part1-advanced.xml:1780
#, no-c-format
msgid "For example, the portal demos defined in the <filename>portlet.xml</filename> in the demo WAR have the following setting for all portlets so that they will all use the same widget set:"
msgstr ""

#. Tag: programlisting
#: part1-advanced.xml:1787
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[<portlet>\n"
      "  ...\n"
      "  <!-- Use the portal default widget set for all portal demos. -->\n"
      "  <init-param>\n"
      "    <name>widgetset</name>\n"
      "    <value>com.vaadin.portal.gwt.PortalDefaultWidgetSet</value>\n"
      "  </init-param>\n"
      "  ...]]>"
msgstr ""

#. Tag: para
#: part1-advanced.xml:1789
#, no-c-format
msgid "The <classname>PortalDefaultWidgetSet</classname> extends <classname>SamplerWidgetSet</classname>, which extends the <classname>DefaultWidgetSet</classname>. The <classname>DefaultWidgetSet</classname> is therefore essentially a subset of <classname>PortalDefaultWidgetSet</classname>, which contains also the widgets required by the Sampler demo. Other applications that would otherwise require only the regular <classname>DefaultWidgetSet</classname>, and do not define their own widgets, can just as well use the larger set, making them compatible with the demos. The <classname>PortalDefaultWidgetSet</classname> will also be the default Vaadin widgetset bundled in Liferay 5.3 and later."
msgstr ""

#. Tag: para
#: part1-advanced.xml:1803
#, no-c-format
msgid "If your portlets are contained in multiple WARs, which can happen quite typically, you need to install the widget set and theme portal-wide so that all the portlets can use them. See <xref linkend=\"advanced.liferay.widgetsets\"/> on configuring the widget sets in the portal itself."
msgstr ""

#. Tag: title
#: part1-advanced.xml:1813
#, no-c-format
msgid "Liferay Portlet Descriptor"
msgstr ""

#. Tag: primary
#: part1-advanced.xml:1816 part1-advanced.xml:1848 part1-advanced.xml:1896
#, no-c-format
msgid "Liferay"
msgstr ""

#. Tag: secondary
#: part1-advanced.xml:1817
#, no-c-format
msgid "portlet descriptor"
msgstr ""

#. Tag: para
#: part1-advanced.xml:1820
#, no-c-format
msgid "Liferay requires a special <filename>liferay-portlet.xml</filename> descriptor file that defines Liferay-specific parameters. Especially, Vaadin portlets must be defined as \"<emphasis>instanceable</emphasis>\", but not \"<emphasis>ajaxable</emphasis>\"."
msgstr ""

#. Tag: para
#: part1-advanced.xml:1828
#, no-c-format
msgid "Below is an example descriptor for the earlier portlet example:"
msgstr ""

#. Tag: programlisting
#: part1-advanced.xml:1832
#, no-c-format
msgid ""
      "<?pocket-size 65% ?>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n"
      "&lt;!DOCTYPE liferay-portlet-app PUBLIC\n"
      "  \"-//Liferay//DTD Portlet Application 4.3.0//EN\"\n"
      "  \"http://www.liferay.com/dtd/liferay-portlet-app_4_3_0.dtd\"&gt;\n"
      "\n"
      "&lt;liferay-portlet-app&gt;\n"
      "    &lt;portlet&gt;\n"
      "        &lt;!-- Matches definition in portlet.xml.          --&gt;\n"
      "        &lt;!-- Note: Must not be the same as servlet name. --&gt;\n"
      "        &lt;portlet-name&gt;<emphasis role=\"bold\">Portlet Example portlet</emphasis>&lt;/portlet-name&gt;\n"
      "\n"
      "        &lt;instanceable&gt;true&lt;/instanceable&gt;\n"
      "        &lt;ajaxable&gt;false&lt;/ajaxable&gt;\n"
      "    &lt;/portlet&gt;\n"
      "&lt;/liferay-portlet-app&gt;"
msgstr ""

#. Tag: para
#: part1-advanced.xml:1834
#, no-c-format
msgid "See Liferay documentation for further details on the <filename>liferay-portlet.xml</filename> deployment descriptor."
msgstr ""

#. Tag: title
#: part1-advanced.xml:1843
#, no-c-format
msgid "Liferay Display Descriptor"
msgstr ""

#. Tag: filename
#: part1-advanced.xml:1845
#, no-c-format
msgid "liferay-display.xml"
msgstr ""

#. Tag: secondary
#: part1-advanced.xml:1849
#, no-c-format
msgid "display descriptor"
msgstr ""

#. Tag: para
#: part1-advanced.xml:1852
#, no-c-format
msgid "The <filename>WEB-INF/liferay-display.xml</filename> file defines the portlet category under which portlets are located in the <guilabel>Add Application</guilabel> window in Liferay. Without this definition, portlets will be organized under the \"Undefined\" category."
msgstr ""

#. Tag: para
#: part1-advanced.xml:1859
#, no-c-format
msgid "The following display configuration, which is included in the demo WAR, puts the Vaadin portlets under the \"Vaadin\" category, as shown in <xref linkend=\"figure.advanced.liferay.descriptor.display\"/>."
msgstr ""

#. Tag: programlisting
#: part1-advanced.xml:1865
#, no-c-format
msgid ""
      "<?pocket-size 75% ?><![CDATA[<?xml version=\"1.0\"?>\n"
      "<!DOCTYPE display PUBLIC\n"
      "  \"-//Liferay//DTD Display 4.0.0//EN\"\n"
      "  \"http://www.liferay.com/dtd/liferay-display_4_0_0.dtd\">\n"
      "\n"
      "<display>\n"
      "    <category name=\"Vaadin\">\n"
      "        <portlet id=\"Portlet Example portlet\" />\n"
      "    </category>\n"
      "</display>]]>"
msgstr ""

#. Tag: title
#: part1-advanced.xml:1868
#, no-c-format
msgid "Portlet Categories in Add Application Window"
msgstr ""

#. Tag: para
#: part1-advanced.xml:1879
#, no-c-format
msgid "See Liferay documentation for further details on how to configure the categories in the <filename>liferay-display.xml</filename> deployment descriptor."
msgstr ""

#. Tag: title
#: part1-advanced.xml:1890
#, no-c-format
msgid "Liferay Plugin Package Properties"
msgstr ""

#. Tag: filename
#: part1-advanced.xml:1893
#, no-c-format
msgid "liferay-plugin-package.xml"
msgstr ""

#. Tag: secondary
#: part1-advanced.xml:1897
#, no-c-format
msgid "plugin properties"
msgstr ""

#. Tag: para
#: part1-advanced.xml:1900
#, no-c-format
msgid "The <filename>liferay-plugin-package.properties</filename> file defines a number of settings for the portlet, most importantly the Vaadin JAR to be used."
msgstr ""

#. Tag: programlisting
#: part1-advanced.xml:1906
#, no-c-format
msgid ""
      "<?pocket-size 75% ?>name=<emphasis role=\"bold\">Portlet Example portlet</emphasis>\n"
      "short-description=<emphasis role=\"bold\">myportlet</emphasis>\n"
      "module-group-id=<emphasis role=\"bold\">Vaadin</emphasis>\n"
      "module-incremental-version=1\n"
      "#change-log=\n"
      "#page-uri=\n"
      "#author=\n"
      "license=Proprietary\n"
      "portal-dependency-jars=\\\n"
      "    <emphasis role=\"bold\">vaadin.jar</emphasis>"
msgstr ""

#. Tag: parameter
#: part1-advanced.xml:1910
#, no-c-format
msgid "name"
msgstr ""

#. Tag: para
#: part1-advanced.xml:1912
#, no-c-format
msgid "The plugin name must match the portlet name."
msgstr ""

#. Tag: parameter
#: part1-advanced.xml:1918
#, no-c-format
msgid "short-description"
msgstr ""

#. Tag: para
#: part1-advanced.xml:1920
#, no-c-format
msgid "A short description of the plugin. This is by default the project name."
msgstr ""

#. Tag: parameter
#: part1-advanced.xml:1927
#, no-c-format
msgid "module-group-id"
msgstr ""

#. Tag: para
#: part1-advanced.xml:1929
#, no-c-format
msgid "The application group, same as the category id defined in <filename>liferay-display.xml</filename>."
msgstr ""

#. Tag: parameter
#: part1-advanced.xml:1936
#, no-c-format
msgid "license"
msgstr ""

#. Tag: para
#: part1-advanced.xml:1938
#, no-c-format
msgid "The plugin license type; \"proprietary\" by default."
msgstr ""

#. Tag: parameter
#: part1-advanced.xml:1944
#, no-c-format
msgid "portal-dependency-jars"
msgstr ""

#. Tag: para
#: part1-advanced.xml:1946
#, no-c-format
msgid "The JAR libraries on which this portlet depends. This should have value <filename>vaadin.jar</filename>, unless you need to use a specific version. The JAR must be installed in the portal, for example, in Liferay bundled with Tomcat to <filename>tomcat-x.x.x/webapps/ROOT/WEB-INF/lib/vaadin.jar</filename>."
msgstr ""

#. Tag: title
#: part1-advanced.xml:1963
#, no-c-format
msgid "Portlet Hello World"
msgstr ""

#. Tag: para
#: part1-advanced.xml:1965
#, no-c-format
msgid "The Hello World program that runs as a portlet is no different from a regular Vaadin application, as long as it doesn't need to handle portlet actions, mode changes, and so on."
msgstr ""

#. Tag: programlisting
#: part1-advanced.xml:1971
#, no-c-format
msgid ""
      "<?pocket-size 70% ?><![CDATA[import com.vaadin.Application;\n"
      "import com.vaadin.ui.*;\n"
      "\n"
      "public class PortletExample extends Application {\n"
      "    @Override \n"
      "    public void init() {\n"
      "        Window mainWindow = new Window(\"Portlet Example\");\n"
      "\n"
      "        Label label = new Label(\"Hello Vaadin user\");\n"
      "        mainWindow.addComponent(label);\n"
      "        setMainWindow(mainWindow);\n"
      "    }\n"
      "}]]>"
msgstr ""

#. Tag: para
#: part1-advanced.xml:1973
#, no-c-format
msgid "In addition to the application class, you need the descriptor files, libraries, and other files as described earlier. <xref linkend=\"figure.advanced.liferay.helloworld.project\"/> shows the complete project structure under Eclipse."
msgstr ""

#. Tag: title
#: part1-advanced.xml:1980
#, no-c-format
msgid "Portlet Project Structure in Eclipse"
msgstr ""

#. Tag: para
#: part1-advanced.xml:1991
#, no-c-format
msgid "Installed as a portlet in Liferay from the <guilabel>Add Application</guilabel> menu, the application will show as illustrated in <xref linkend=\"figure.advanced.liferay.helloworld\"/>."
msgstr ""

#. Tag: title
#: part1-advanced.xml:1998
#, no-c-format
msgid "Hello World Portlet"
msgstr ""

#. Tag: title
#: part1-advanced.xml:2011
#, no-c-format
msgid "Installing Vaadin in Liferay"
msgstr ""

#. Tag: para
#: part1-advanced.xml:2013
#, no-c-format
msgid "Loading widget sets, themes, and the Vaadin JAR from a portlet is possible as long as you have a single portlet, but causes a problem if you have multiple portlets. To solve this, Vaadin portlets need to use a globally installed widget set, themes, and Vaadin JAR. They, and all the required configuration, are bundled with Liferay 5.3 and later, but if you are using an earlier version of Liferay or use a custom widget set, custom themes, or a specific version of Vaadin, you will need to do the configuration manually."
msgstr ""

#. Tag: para
#: part1-advanced.xml:2024
#, no-c-format
msgid "In these instructions, we assume that you use Liferay bundled with Apache Tomcat, although you can use many other application servers with Liferay just as well. The Tomcat installation is included in the Liferay installation package, under the <filename>tomcat-x.x.x</filename> directory."
msgstr ""

#. Tag: para
#: part1-advanced.xml:2032
#, no-c-format
msgid "The Vaadin JAR should be put in <filename>tomcat-x.x.x/webapps/ROOT/WEB-INF/lib/vaadin.jar</filename>. The Vaadin version number should normally be left out from the JAR."
msgstr ""

#. Tag: para
#: part1-advanced.xml:2038
#, no-c-format
msgid "The widget set needs to be located at <filename>/html/VAADIN/widgetsets/</filename> and themes at <filename>/html/VAADIN/themes/</filename> path under the portal context. You simply need to copy the contents from under your <filename>WebContent/VAADIN</filename> directory to the <filename>tomcat-x.x.x/webapps/ROOT/html/VAADIN</filename> directory under the Liferay installation directory. If you use a built-in widget set or theme included in Vaadin, such as the <classname>PortalDefaultWidgetSet</classname>, you should copy it from the Vaadin installation directory, from under <filename>WebContent/VAADIN/widgetsets</filename>. The default themes are located under <filename>WebContent/VAADIN/themes</filename> in the installation directory."
msgstr ""

#. Tag: para
#: part1-advanced.xml:2054
#, no-c-format
msgid "You need to define the widget set, the theme, and the JAR in the <filename>portal-ext.properties</filename> configuration file for Liferay, as described earlier. The file should normally be placed in the Liferay installation directory. See Liferay documentation for details on the configuration file."
msgstr ""

#. Tag: para
#: part1-advanced.xml:2062
#, no-c-format
msgid "Below is an example of a <filename>portal-ext.properties</filename> file:"
msgstr ""

#. Tag: programlisting
#: part1-advanced.xml:2066
#, no-c-format
msgid ""
      "<?pocket-size 70% ?><![CDATA[# Path under which the VAADIN directory is located.\n"
      "# (/html is the default so it is not needed.)\n"
      "# vaadin.resources.path=/html\n"
      "\n"
      "# Portal-wide widget set\n"
      "vaadin.widgetset=com.vaadin.portal.gwt.PortalDefaultWidgetSet\n"
      "\n"
      "# Theme to use\n"
      "vaadin.theme=reindeer]]>"
msgstr ""

#. Tag: para
#: part1-advanced.xml:2068
#, no-c-format
msgid "The allowed parameters are:"
msgstr ""

#. Tag: parameter
#: part1-advanced.xml:2074
#, no-c-format
msgid "vaadin.resources.path"
msgstr ""

#. Tag: para
#: part1-advanced.xml:2076
#, no-c-format
msgid "Specifies the resource root path under the portal context. This is <filename>/html</filename> by default. Its actual location depends on the portal and the application server; in Liferay with Tomcat it would be located at <filename>webapps/ROOT/html</filename> under the Tomcat installation directory."
msgstr ""

#. Tag: parameter
#: part1-advanced.xml:2085
#, no-c-format
msgid "vaadin.widgetset"
msgstr ""

#. Tag: para
#: part1-advanced.xml:2087
#, no-c-format
msgid "The widget set class to use. Give the full path to the class name in the dot notation. If the parameter is not given, the default widget set is used."
msgstr ""

#. Tag: parameter
#: part1-advanced.xml:2093
#, no-c-format
msgid "vaadin.theme"
msgstr ""

#. Tag: para
#: part1-advanced.xml:2095
#, no-c-format
msgid "Name of the theme to use. If the parameter is not given, the default theme is used, which is <literal>reindeer</literal> in Vaadin 6."
msgstr ""

#. Tag: para
#: part1-advanced.xml:2102
#, no-c-format
msgid "You will need to restart Liferay after creating or modifying the <filename>portal-ext.properties</filename> file."
msgstr ""

#. Tag: title
#: part1-advanced.xml:2109
#, no-c-format
msgid "Handling Portlet Requests"
msgstr ""

#. Tag: para
#: part1-advanced.xml:2111
#, no-c-format
msgid "Portals such as Liferay are not AJAX applications but reload the page every time a user interaction requires data from the server. They consider a Vaadin application to be a regular web application that works by HTTP requests. All the AJAX communications required by the Vaadin application are done by the Vaadin Client-Side Engine (the widget set) past the portal, so that the portal is unaware of the communications."
msgstr ""

#. Tag: para
#: part1-advanced.xml:2120
#, no-c-format
msgid "The only way a portal can interact with an application is to load it with a HTTP request; reloading does not reset the application. The Portlet 2.0 API supports four types of requests: <emphasis>render</emphasis>, <emphasis>action</emphasis>, <emphasis>resource</emphasis>, and <emphasis>event</emphasis> requests. The old Portlet 1.0 API supports only the render and action requests. Requests can be caused by user interaction with the portal controls or by clicking action URLs displayed by the portlet. You can handle portlet requests by implementing the <classname>PortletListener</classname> interface and the handler methods for each of the request types. You can use the request object passed to the handler to access certain portal data, such as user information, the portlet mode, etc."
msgstr ""

#. Tag: para
#: part1-advanced.xml:2135
#, no-c-format
msgid "The <classname>PortletListener</classname> interface is defined in the <classname>PortletApplicationContext2</classname> for Portlet 2.0 API and <classname>com.vaadin.terminal.gwt.server.PortletApplicationContext</classname> class for the old Portlet 1.0 API. You can get the portlet application context with <methodname>getContext()</methodname> method of the application class."
msgstr ""

#. Tag: para
#: part1-advanced.xml:2144
#, no-c-format
msgid "You need to have the <filename>portlet.jar</filename> in your class path during development. However, you must <emphasis>not</emphasis> deploy the <filename>portlet.jar</filename> with the portlet, because it would create a conflict with the internal portlet library of the portal. You should put it in a directory that is not deployed with the portlet, for example, if you are using Eclipse, under the <filename>lib</filename> directory under the project root, not under <filename>WebContent/WEB-INF/lib</filename>, for example."
msgstr ""

#. Tag: para
#: part1-advanced.xml:2155
#, no-c-format
msgid "You can also define portal actions that you can handle in the <methodname>handleActionRequest()</methodname> method of the interface."
msgstr ""

#. Tag: para
#: part1-advanced.xml:2160
#, no-c-format
msgid "You add your portlet request listener to the application context of your application, which is a <classname>PortletApplicationContext</classname> when (and only when) the application is being run as a portlet."
msgstr ""

#. Tag: programlisting
#: part1-advanced.xml:2166
#, no-c-format
msgid ""
      "<?pocket-size 70% ?><![CDATA[// Check that we are running as a portlet.\n"
      "if (getContext() instanceof PortletApplicationContext2) {\n"
      "    PortletApplicationContext2 ctx =\n"
      "            (PortletApplicationContext2) getContext();\n"
      "\n"
      "    // Add a custom listener to handle action and\n"
      "    // render requests.\n"
      "    ctx.addPortletListener(this, new MyPortletListener());\n"
      "} else {\n"
      "    getMainWindow().showNotification(\n"
      "            \"Not initialized via Portal!\",\n"
      "            Notification.TYPE_ERROR_MESSAGE);\n"
      "}]]>"
msgstr ""

#. Tag: para
#: part1-advanced.xml:2168
#, no-c-format
msgid "The handler methods receive references to request and response objects, which are defined in the Java Servlet API. Please refer to the Servlet API documentation for further details."
msgstr ""

#. Tag: para
#: part1-advanced.xml:2174
#, no-c-format
msgid "The PortletDemo application included in the demo WAR package includes examples of processing mode and portlet window state changes in a portlet request listener."
msgstr ""

#. Tag: title
#: part1-advanced.xml:2182
#, no-c-format
msgid "Handling Portlet Mode Changes"
msgstr ""

#. Tag: para
#: part1-advanced.xml:2184
#, no-c-format
msgid "Portals support three portlet modes defined in the Portlet API: <emphasis>view</emphasis>, <emphasis>edit</emphasis>, and <emphasis>help</emphasis> modes. The <emphasis>view</emphasis> mode is the default and the portal can have buttons to switch the portlet to the other modes. In addition to the three predefined modes, the Portlet API standards allow custom portlet modes, although portals may support custom modes to a varying degree."
msgstr ""

#. Tag: para
#: part1-advanced.xml:2194
#, no-c-format
msgid "You need to define which portlet modes are enabled in the <filename>portlet.xml</filename> deployment descriptor as follows."
msgstr ""

#. Tag: programlisting
#: part1-advanced.xml:2199
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[<!-- Supported portlet modes and content types. -->\n"
      "<supports>\n"
      "    <mime-type>text/html</mime-type>\n"
      "    <portlet-mode>view</portlet-mode>\n"
      "    <portlet-mode>edit</portlet-mode>\n"
      "    <portlet-mode>help</portlet-mode>\n"
      "</supports>]]>"
msgstr ""

#. Tag: para
#: part1-advanced.xml:2201
#, no-c-format
msgid "Changes in the portlet mode are received as resource requests, which you can handle with a <methodname>handleResourceRequest()</methodname>, defined in the <classname>PortletListener</classname> interface. The current portlet mode can be acquired with <methodname>getPortletMode()</methodname> from the request object."
msgstr ""

#. Tag: para
#: part1-advanced.xml:2209
#, no-c-format
msgid "The following complete example (for Portlet 2.0) shows how to handle the three built-modes in a portlet application."
msgstr ""

#. Tag: programlisting
#: part1-advanced.xml:2214
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[// Use Portlet 2.0 API\n"
      "import com.vaadin.terminal.gwt.server.PortletApplicationContext2;\n"
      "import com.vaadin.terminal.gwt.server.PortletApplicationContext2.PortletListener;\n"
      "\n"
      "public class PortletModeExample extends Application\n"
      "                                implements PortletListener {\n"
      "    Window         mainWindow;\n"
      "    ObjectProperty data; // Data to view and edit\n"
      "    VerticalLayout viewContent   = new VerticalLayout();\n"
      "    VerticalLayout editContent   = new VerticalLayout();\n"
      "    VerticalLayout helpContent   = new VerticalLayout();\n"
      "    \n"
      "    @Override\n"
      "    public void init() {\n"
      "        mainWindow = new Window(\"Myportlet Application\");\n"
      "        setMainWindow(mainWindow);\n"
      "\n"
      "        // Data model\n"
      "        data = new ObjectProperty(\"<h1>Heading</h1>\"+\n"
      "                       \"<p>Some example content</p>\");\n"
      "\n"
      "        // Prepare views for the three modes (view, edit, help)\n"
      "        // Prepare View mode content\n"
      "        Label viewText = new Label(data, Label.CONTENT_XHTML);\n"
      "        viewContent.addComponent(viewText);\n"
      "\n"
      "        // Prepare Edit mode content\n"
      "        RichTextArea editText = new RichTextArea();\n"
      "        editText.setCaption(\"Edit the value:\");\n"
      "        editText.setPropertyDataSource(data);\n"
      "        editContent.addComponent(editText);\n"
      "\n"
      "        // Prepare Help mode content\n"
      "        Label helpText = new Label(\"<h1>Help</h1>\" +\n"
      "                                   \"<p>This helps you!</p>\",\n"
      "                                   Label.CONTENT_XHTML);\n"
      "        helpContent.addComponent(helpText);\n"
      "\n"
      "        // Start in the view mode\n"
      "        mainWindow.setContent(viewContent);\n"
      "\n"
      "        // Check that we are running as a portlet.\n"
      "        if (getContext() instanceof PortletApplicationContext2) {\n"
      "            PortletApplicationContext2 ctx =\n"
      "                (PortletApplicationContext2) getContext();\n"
      "\n"
      "            // Add a custom listener to handle action and\n"
      "            // render requests.\n"
      "            ctx.addPortletListener(this, this);\n"
      "        } else {\n"
      "            mainWindow.showNotification(\"Not running in portal\",\n"
      "                               Notification.TYPE_ERROR_MESSAGE);\n"
      "        }\n"
      "    }\n"
      "\n"
      "    // Dummy implementations for the irrelevant request types\n"
      "    public void handleActionRequest(ActionRequest request,\n"
      "                                    ActionResponse response,\n"
      "                                    Window window) {\n"
      "    }\n"
      "    public void handleRenderRequest(RenderRequest request,\n"
      "                                    RenderResponse response,\n"
      "                                    Window window) {\n"
      "    }\n"
      "    public void handleEventRequest(EventRequest request,\n"
      "                                   EventResponse response,\n"
      "                                   Window window) {\n"
      "    }\n"
      "\n"
      "    public void handleResourceRequest(ResourceRequest request,\n"
      "                                      ResourceResponse response,\n"
      "                                      Window window) {\n"
      "        // Switch the view according to the portlet mode\n"
      "        if (request.getPortletMode() == PortletMode.EDIT)\n"
      "            window.setContent(editContent);\n"
      "        else if (request.getPortletMode() == PortletMode.VIEW)\n"
      "            window.setContent(viewContent);\n"
      "        else if (request.getPortletMode() == PortletMode.HELP)\n"
      "            window.setContent(helpContent);\n"
      "    }\n"
      "}]]>"
msgstr ""

#. Tag: para
#: part1-advanced.xml:2216
#, no-c-format
msgid "shows the resulting portlet in the three modes: view, edit, and help. In Liferay, the edit mode is shown in the popup menu as a <guilabel>Preferences</guilabel> item."
msgstr ""

#. Tag: title
#: part1-advanced.xml:2223
#, no-c-format
msgid "Portlet Modes in Action"
msgstr ""

#. Tag: title
#: part1-advanced.xml:2252
#, no-c-format
msgid "Non-Vaadin Portlet Modes"
msgstr ""

#. Tag: para
#: part1-advanced.xml:2254
#, no-c-format
msgid "In some cases, it can be useful to implement certain modes of a portlet as pure HTML or JSP pages instead of running the full Vaadin application user interface in them. Common reasons for this are static pages (for example, a simple help mode), integrating legacy content to a portlet (for example, a JSP configuration interface), and providing an ultra-lightweight initial view for a portlet (for users behind slow connections)."
msgstr ""

#. Tag: para
#: part1-advanced.xml:2263
#, no-c-format
msgid "Fully static modes that do not require the Vaadin server side application to be running can be implemented by subclassing the portlet class <classname>ApplicationPortlet2</classname> (Portlet 2.0). The subclass can either create the HTML content directly or dispatch the request to, for example, a HTML or JSP page via the portal. When using this approach, any Vaadin portlet and portlet request listeners are not called."
msgstr ""

#. Tag: para
#: part1-advanced.xml:2272
#, no-c-format
msgid "Customizing the content for the standard modes (<emphasis>view</emphasis>, <emphasis>edit</emphasis>, and <emphasis>help</emphasis>) can be performed by overriding the methods <methodname>doView</methodname>, <methodname>doEdit</methodname> and <methodname>doHelp</methodname>, respectively. Custom modes can be handled by implementing similar methods with the <classname>@javax.portlet.RenderMode(name = \"mymode\")</classname> annotation."
msgstr ""

#. Tag: para
#: part1-advanced.xml:2283
#, no-c-format
msgid "You need to define which portlet modes are enabled in the <filename>portlet.xml</filename> deployment descriptor as described in <xref linkend=\"advanced.portal.portlet-mode\"/>. Also, the portlet class in <filename>portlet.xml</filename> should point to the customized subclass of <classname>ApplicationPortlet2</classname>."
msgstr ""

#. Tag: para
#: part1-advanced.xml:2291
#, no-c-format
msgid "The following example (for Portlet 2.0) shows how to create a static help page for the portlet."
msgstr ""

#. Tag: para
#: part1-advanced.xml:2296
#, no-c-format
msgid "<filename>portlet.xml</filename>:"
msgstr ""

#. Tag: programlisting
#: part1-advanced.xml:2300
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[<!-- Supported portlet modes and content types. -->\n"
      "<supports>\n"
      "    <mime-type>text/html</mime-type>\n"
      "    <portlet-mode>view</portlet-mode>\n"
      "    <portlet-mode>help</portlet-mode>\n"
      "</supports>]]>"
msgstr ""

#. Tag: para
#: part1-advanced.xml:2302
#, no-c-format
msgid "<filename>HtmlHelpPortlet.java:</filename>:"
msgstr ""

#. Tag: programlisting
#: part1-advanced.xml:2306
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[// Use Portlet 2.0 API\n"
      "import com.vaadin.terminal.gwt.server.ApplicationPortlet2;\n"
      "\n"
      "public class HtmlHelpPortlet extends ApplicationPortlet2 {\n"
      "    // Override the help mode, let the Vaadin\n"
      "    // application handle the view mode\n"
      "    @Override\n"
      "    protected void doHelp(RenderRequest request,\n"
      "                          RenderResponse response)\n"
      "            throws PortletException, IOException {\n"
      "        // Bypass the Vaadin application entirely\n"
      "        response.setContentType(\"text/html\");\n"
      "        response.getWriter().println(\n"
      "                \"This is the help text as plain HTML.\");\n"
      "\n"
      "        // Alternatively, you could use the dispatcher for,\n"
      "        // for example, JSP help pages as follows:\n"
      "        // PortletRequestDispatcher dispatcher = getPortletContext()\n"
      "        // .getRequestDispatcher(\"/html/myhelp.jsp\");\n"
      "        // dispatcher.include(request, response);\n"
      "    }\n"
      "}]]>"
msgstr ""

#. Tag: para
#: part1-advanced.xml:2308
#, no-c-format
msgid "To produce pure HTML portlet content from a running Vaadin application instead of statically outside an application, the <classname>ApplicationPortlet2</classname> method <methodname>writeAjaxPage</methodname> should be overridden. This approach allows using the application state in HTML content generation, and all relevant Vaadin portlet request and portlet listeners are called around the portlet content generation. However, the client side engine (widgetset) is not loaded by the browser, which can shorten the initial page display time."
msgstr ""

#. Tag: programlisting
#: part1-advanced.xml:2320
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[<portlet-class>com.vaadin.demo.portlet.HtmlModePortlet</portlet-class>\n"
      "<supports>\n"
      "    <mime-type>text/html</mime-type>\n"
      "    <portlet-mode>view</portlet-mode>\n"
      "    <portlet-mode>help</portlet-mode>\n"
      "</supports>]]>"
msgstr ""

#. Tag: programlisting
#: part1-advanced.xml:2322
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[public class CountApplication extends Application {\n"
      "    private int count = 0;\n"
      "    \n"
      "    public void init() {\n"
      "        Window w = new Window(\"Portlet mode example\");\n"
      "        w.addComponent(new Label(\"This is the Vaadin app.\"));\n"
      "        w.addComponent(new Label(\"Try opening the help mode.\"));\n"
      "        setMainWindow(w);\n"
      "    }\n"
      "        \n"
      "    public int incrementCount() {\n"
      "        return ++count;\n"
      "    }\n"
      "}]]>"
msgstr ""

#. Tag: programlisting
#: part1-advanced.xml:2324
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[// Use Portlet 2.0 API\n"
      "public class HtmlModePortlet extends AbstractApplicationPortlet {\n"
      "\n"
      "    @Override\n"
      "    protected void writeAjaxPage(RenderRequest request,\n"
      "            RenderResponse response, Window window,\n"
      "            Application app)\n"
      "                throws PortletException, IOException {\n"
      "        if (PortletMode.HELP.equals(request.getPortletMode())) {\n"
      "            CountApplication capp = (CountApplication) app;\n"
      "            response.setContentType(\"text/html\");\n"
      "            response.getWriter().println(\n"
      "                \"This is the HTML help, shown \"\n"
      "                + capp.incrementCount() + \" times so far.\");\n"
      "        } else {\n"
      "            super.writeAjaxPage(request, response, window, app);\n"
      "        }\n"
      "    }\n"
      "    \n"
      "    @Override\n"
      "    protected Class<? extends Application> getApplicationClass(){\n"
      "        return CountApplication.class;\n"
      "    }\n"
      "}]]>"
msgstr ""

#. Tag: para
#: part1-advanced.xml:2326
#, no-c-format
msgid "The user can freely move between Vaadin and non-Vaadin portlet modes with the user interface provided by the portal (for standard modes) or the portlet (for example, action links). Once the server side application has been started, it continues to run as long as the session is alive. If necessary, specific portlet mode transitions can be disallowed in <filename>portlet.xml</filename>."
msgstr ""

#. Tag: para
#: part1-advanced.xml:2336
#, no-c-format
msgid "In the case of Portlet 1.0, both a portlet and a servlet are involved. A render request is received by <classname>ApplicationPortlet</classname> when the portlet mode is changed, and serving pure HTML in some modes can be achieved by overriding the method <methodname>render</methodname> and handling the modes of interest separately while calling <methodname>super.render()</methodname> for other modes. As always, when extending the portlet, the reference to the portlet class in <filename>portlet.xml</filename> needs to be updated."
msgstr ""

#. Tag: para
#: part1-advanced.xml:2348
#, no-c-format
msgid "To serve HTML-only content in the Portlet 1.0 case after starting the server side application and calling the relevant listeners, the servlet class <classname>ApplicationServlet</classname> should be subclassed instead of the portlet. The method <methodname>writeAjaxPage</methodname> can be overridden to produce custom HTML content for certain modes. However, it should be noted that some HTML content (for example, loading the portal-wide Vaadin theme) is created by the portlet and not the servlet."
msgstr ""

#. Tag: title
#: part1-advanced.xml:2365
#, no-c-format
msgid "Google App Engine Integration"
msgstr ""

#. Tag: para
#: part1-advanced.xml:2367
#, no-c-format
msgid "Vaadin includes support to run Vaadin applications in the Google App Engine (GAE). The most essential requirement for GAE is the ability to serialize the application state. Vaadin applications are serializable through the <classname>java.io.Serializable</classname> interface."
msgstr ""

#. Tag: para
#: part1-advanced.xml:2374
#, no-c-format
msgid "To run as a GAE application, an application must use <classname>GAEApplicationServlet</classname> instead of <classname>ApplicationServlet</classname> in <filename>web.xml</filename>, and of course implement the <classname>java.io.Serializable</classname> interface for all persistent classes. You also need to enable session support in <filename>appengine-web.xml</filename> with:"
msgstr ""

#. Tag: programlisting
#: part1-advanced.xml:2383
#, no-c-format
msgid "<![CDATA[<sessions-enabled>true</sessions-enabled>]]>"
msgstr ""

#. Tag: para
#: part1-advanced.xml:2385
#, no-c-format
msgid "The Vaadin Project wizard can create the configuration files needed for GAE deployment. See <xref linkend=\"getting-started.first-project.creation\"/>. When the Google App Engine deployment configuration is selected, the wizard will create the project structure following the GAE Servlet convention instead of the regular Servlet convention. The main differences are:"
msgstr ""

#. Tag: listitem
#: part1-advanced.xml:2394
#, no-c-format
msgid "Source directory: <filename>src/main/java</filename>"
msgstr ""

#. Tag: listitem
#: part1-advanced.xml:2395
#, no-c-format
msgid "Output directory: <filename>war/WEB-INF/classes</filename>"
msgstr ""

#. Tag: listitem
#: part1-advanced.xml:2396
#, no-c-format
msgid "Content directory: <filename>war</filename>"
msgstr ""

#. Tag: title
#: part1-advanced.xml:2400
#, no-c-format
msgid "Rules and Limitations"
msgstr ""

#. Tag: para
#: part1-advanced.xml:2402
#, no-c-format
msgid "Running Vaadin applications in Google App Engine has the following rules and limitations:"
msgstr ""

#. Tag: para
#: part1-advanced.xml:2408
#, no-c-format
msgid "Avoid using the session for storage, usual App Engine limitations apply (no synchronization, that is, it is unreliable)."
msgstr ""

#. Tag: para
#: part1-advanced.xml:2412
#, no-c-format
msgid "Vaadin uses memcache for mutex, the key is of the form <parameter>_vmutex&lt;sessionid&gt;</parameter>."
msgstr ""

#. Tag: para
#: part1-advanced.xml:2415
#, no-c-format
msgid "The Vaadin <classname>WebApplicationContext</classname> class is serialized separately into memcache and datastore; the memcache key is <parameter>_vac&lt;sessionid&gt;</parameter> and the datastore entity kind is <parameter>_vac</parameter> with identifiers of the type <parameter>_vac&lt;sessionid&gt;</parameter>."
msgstr ""

#. Tag: para
#: part1-advanced.xml:2421
#, no-c-format
msgid "<emphasis>Do not</emphasis> update the application state when serving an <classname>ApplicationResource</classname> (such as <classname>ClassResource</classname>.<methodname>getStream()</methodname>)."
msgstr ""

#. Tag: para
#: part1-advanced.xml:2425
#, no-c-format
msgid "<emphasis>Avoid</emphasis> (or be very careful when) updating application state in a <classname>TransactionListener</classname> - it is called even when the application is not locked and won't be serialized (such as with <classname>ApplicationResource</classname>), and changes can therefore be lost (it should be safe to update things that can be safely discarded later, that is, valid only for the current request)."
msgstr ""

#. Tag: para
#: part1-advanced.xml:2433
#, no-c-format
msgid "The application remains locked during uploads - a progress bar is not possible."
msgstr ""

#. Tag: title
#: part1-advanced.xml:2440
#, no-c-format
msgid "Common Security Issues"
msgstr ""

#. Tag: title
#: part1-advanced.xml:2443
#, no-c-format
msgid "Sanitizing User Input to Prevent Cross-Site Scripting"
msgstr ""

#. Tag: para
#: part1-advanced.xml:2445
#, no-c-format
msgid "You can put raw XHTML content in many components, such as the <classname>Label</classname> and <classname>CustomLayout</classname>, as well as in tooltips and notifications. In such cases, you should make sure that if the content has any possibility to come from user input, the input is well sanitized before displaying it. Otherwise, a malicious user can easily make a cross-site scripting attack by injecting offensive JavaScript code in such components."
msgstr ""

#. Tag: para
#: part1-advanced.xml:2455
#, no-c-format
msgid "Offensive code can easily be injected with <literal>&lt;script&gt;</literal> markup or in tag attributes as events, such as <parameter>onLoad</parameter>. Cross-site scripting vulnerabilities are browser dependent, depending on the situations in which different browsers execute scripting markup."
msgstr ""

#. Tag: para
#: part1-advanced.xml:2463
#, no-c-format
msgid "There is no generic way to sanitize user input as different applications can allow different kinds of input. Pruning (X)HTML tags out is somewhat simple, but some applications may need to allow (X)HTML. It is therefore the responsibility of the application to sanitize the input."
msgstr ""

#. Tag: para
#: part1-advanced.xml:2470
#, no-c-format
msgid "Character encoding can make sanitization more difficult, as offensive tags can be encoded so that they are not recognized by a sanitizer. This can be done, for example, with HTML character entities and with variable-width encodings such as UTF-8 or various CJK encodings, by abusing multiple representations of a character. Most trivially, you could input <literal>&lt;</literal> and <literal>&gt;</literal> with <literal>&amp;lt;</literal> and <literal>&amp;gt;</literal>, respectively. The input could also be malformed and the sanitizer must be able to interpret it exactly as the browser would, and different browsers can interpret malformed HTML and variable-width character encodings differently."
msgstr ""

#. Tag: para
#: part1-advanced.xml:2484
#, no-c-format
msgid "Notice that the problem applies also to user input from a <classname>RichTextArea</classname> is transmitted as XHTML from the browser to server-side and is not sanitized. As the entire purpose of the <classname>RichTextArea</classname> component is to allow input of formatted text, you can not just remove all HTML tags. Also many attributes, such as <parameter>style</parameter>, should pass through the sanitization."
msgstr ""

#. Tag: title
#: part1-advanced.xml:2499
#, no-c-format
msgid "URI Fragment and History Management with <classname>UriFragmentUtility</classname>"
msgstr ""

#. Tag: para
#: part1-advanced.xml:2501
#, no-c-format
msgid "A major issue in AJAX applications is that as they run in a single web page, bookmarking the application URL (or more generally the <emphasis>URI</emphasis>) can only bookmark the application, not an application state. This is a problem for many applications such as product catalogs and forums, in which it would be good to provide links to specific products or messages. Consequently, as browsers remember the browsing history by URI, the history and the <guibutton>Back</guibutton> button do not normally work. The solution is to use the <emphasis>fragment</emphasis> part of the URI, which is separated from the primary part (address + path + optional query parameters) of the URI with the hash (#) character. For example:"
msgstr ""

#. Tag: programlisting
#: part1-advanced.xml:2514
#, no-c-format
msgid "<?pocket-size 75% ?><![CDATA[http://example.com/path#myfragment]]>"
msgstr ""

#. Tag: para
#: part1-advanced.xml:2516
#, no-c-format
msgid "The exact syntax of the fragment part is defined in RFC 3986 (Internet standard STD 66) that defines the URI syntax. A fragment may only contain the regular URI <emphasis>path characters</emphasis> (see the standard) and additionally the slash and the question mark."
msgstr ""

#. Tag: para
#: part1-advanced.xml:2523
#, no-c-format
msgid "The <classname>UriFragmentUtility</classname> is a special-purpose component that manages the URI fragment; it allows setting the fragment and to handle user-made changes to it. As it is a regular component, though invisible, you must add it to a layout in an application window with the <methodname>addComponent()</methodname>, as usual."
msgstr ""

#. Tag: programlisting
#: part1-advanced.xml:2531
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[public void init() {\n"
      "    Window main = new Window(\"URI Fragment Example\");\n"
      "    setMainWindow(main);\n"
      "\n"
      "    // Create the URI fragment utility\n"
      "    final UriFragmentUtility urifu = new UriFragmentUtility();\n"
      "    main.addComponent(urifu);]]>"
msgstr ""

#. Tag: para
#: part1-advanced.xml:2533
#, no-c-format
msgid "Notice that the utility component can work only when it is attached to the window, so in practice it must be added in the <methodname>init()</methodname> method of the application and must afterwards always remain in the application's user interface."
msgstr ""

#. Tag: para
#: part1-advanced.xml:2540
#, no-c-format
msgid "You can set the URI fragment with the <methodname>setFragment()</methodname> method of the <classname>UriFragmentUtility</classname> object. The method takes the fragment as a string parameter. In the following example, we have a menu, from which the user can select the URI fragment."
msgstr ""

#. Tag: programlisting
#: part1-advanced.xml:2547
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[// Application state menu\n"
      "final ListSelect menu = new ListSelect(\"Select a URI Fragment\");\n"
      "menu.addItem(\"mercury\");\n"
      "menu.addItem(\"venus\");\n"
      "menu.addItem(\"earth\");\n"
      "menu.addItem(\"mars\");\n"
      "menu.setImmediate(true);\n"
      "main.addComponent(menu);\n"
      "\n"
      "// Set the URI Fragment when menu selection changes\n"
      "menu.addListener(new Property.ValueChangeListener() {\n"
      "    public void valueChange(ValueChangeEvent event) {\n"
      "        String itemid = (String) event.getProperty().getValue();\n"
      "        urifu.setFragment(itemid);\n"
      "    }\n"
      "});]]>"
msgstr ""

#. Tag: para
#: part1-advanced.xml:2549
#, no-c-format
msgid "The URI fragment and any changes to it are passed to an application as <classname>FragmentChangedEvent</classname>s, which you can handle with a <classname>FragmentChangedListener</classname>. You can get the new fragment value with the <methodname>getFragment()</methodname> method from the URI fragment utility component."
msgstr ""

#. Tag: programlisting
#: part1-advanced.xml:2557
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[// When the URI fragment is given, use it to set menu selection \n"
      "urifu.addListener(new FragmentChangedListener() {\n"
      "    public void fragmentChanged(FragmentChangedEvent source) {\n"
      "        String fragment =\n"
      "                  source.getUriFragmentUtility().getFragment();\n"
      "        if (fragment != null)\n"
      "            menu.setValue(fragment);\n"
      "    }\n"
      "});]]>"
msgstr ""

#. Tag: para
#: part1-advanced.xml:2559
#, no-c-format
msgid "shows an application that allows specifying the menu selection with a URI fragment and correspondingly sets the fragment when the user selects a menu item, as done in the code examples above."
msgstr ""

#. Tag: title
#: part1-advanced.xml:2567
#, no-c-format
msgid "Application State Management with URI Fragment Utility"
msgstr ""

#. Tag: title
#: part1-advanced.xml:2580
#, no-c-format
msgid "Capturing HTTP Requests"
msgstr ""

#. Tag: primary
#: part1-advanced.xml:2583
#, no-c-format
msgid "HttpServletRequestListener"
msgstr ""

#. Tag: para
#: part1-advanced.xml:2586
#, no-c-format
msgid "Behind the event-driven processing model of Vaadin lies the Java Servlet API, which is based on processing HTTP requests. These requests are normally hidden from Vaadin applications, but can be caught using the <classname>HttpServletRequestListener</classname> interface. You must implement the interface in your application class. The two methods defined in the interface, <methodname>onRequestStart()</methodname> and <methodname>onRequestEnd()</methodname>, allow processing the request before and after other processing."
msgstr ""

#. Tag: programlisting
#: part1-advanced.xml:2597
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[import javax.servlet.http.HttpServletRequest;\n"
      "import javax.servlet.http.HttpServletResponse;\n"
      "\n"
      "import com.vaadin.Application;\n"
      "import com.vaadin.terminal.gwt.server.HttpServletRequestListener;\n"
      "import com.vaadin.ui.*;\n"
      "\n"
      "public class HttpServletRequestApplication extends Application\n"
      "       implements HttpServletRequestListener {\n"
      "\n"
      "    @Override\n"
      "    public void init() {\n"
      "        System.out.println(\"  Application.init() called.\");\n"
      "        \n"
      "        Window main = new Window(\"URI Fragment Example\");\n"
      "        setMainWindow(main);\n"
      "        setTheme(\"book-examples\");\n"
      "                \n"
      "        // Does nothing but causes a request\n"
      "        Button button = new Button (\"Make a request\");\n"
      "        main.addComponent(button);\n"
      "    }\n"
      "\n"
      "    public void onRequestStart(HttpServletRequest request,\n"
      "                               HttpServletResponse response) {\n"
      "        System.out.println(\"[Start of request\");\n"
      "        System.out.println(\" Query string: \" +\n"
      "                           request.getQueryString());\n"
      "        System.out.println(\" Path: \" +\n"
      "                           request.getPathInfo());\n"
      "    }\n"
      "\n"
      "    public void onRequestEnd(HttpServletRequest request,\n"
      "                             HttpServletResponse response) {\n"
      "        System.out.println(\" End of request]\");\n"
      "    }\n"
      "}]]>"
msgstr ""

#. Tag: para
#: part1-advanced.xml:2599
#, no-c-format
msgid "The <methodname>onRequestStart()</methodname> is called for the first time when the application class is loaded but the <methodname>init()</methodname> is not yet called. This can be seen in the output of the above code example:"
msgstr ""

#. Tag: programlisting
#: part1-advanced.xml:2605
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[[Start of request\n"
      " Query string: null\n"
      " Path: null\n"
      "  Application.init() called.\n"
      " End of request]\n"
      "[Start of request\n"
      " Query string: repaintAll=1&sh=1050&sw=1680&cw=500&ch=300&vw=500\n"
      " Path: /UIDL/\n"
      " End of request]\n"
      "[Start of request\n"
      " Query string: windowName=1071684214\n"
      " Path: /UIDL/\n"
      " End of request]]]>"
msgstr ""

#. Tag: para
#: part1-advanced.xml:2607
#, no-c-format
msgid "The first call is a regular HTML page load, so the URL path is simply the application path. The subsequent calls are AJAX calls made using the UIDL protocol, so the request path includes the <literal>/UIDL/</literal> part. This is important to know when using cookies, as explained later."
msgstr ""

#. Tag: title
#: part1-advanced.xml:2615
#, no-c-format
msgid "Using Request and Response Objects"
msgstr ""

#. Tag: primary
#: part1-advanced.xml:2618
#, no-c-format
msgid "HttpServletRequest"
msgstr ""

#. Tag: primary
#: part1-advanced.xml:2621
#, no-c-format
msgid "HttpServletResponse"
msgstr ""

#. Tag: para
#: part1-advanced.xml:2624
#, no-c-format
msgid "The <classname>HttpServletRequest</classname> object provides access to the request data, such as request headers, path info, and query string, as well as to some higher-level information such as cookies."
msgstr ""

#. Tag: para
#: part1-advanced.xml:2630
#, no-c-format
msgid "The <classname>HttpServletResponse</classname> object is somewhat different, as most write operations write data directly to the output stream of the server request. It is therefore possible to add new headers and cookies in the <methodname>onRequestStart()</methodname>, and make other settings, but not later on, especially not in the <methodname>onRequestEnd()</methodname>, as all the UIDL response data has already been written to the output stream. The framework writes the UIDL response to the output stream of the response <emphasis>before</emphasis> calling <methodname>onRequestEnd()</methodname>. You therefore have to be careful when writing to the response object. You can usually write to it when handling component events in listeners, as is done in the cookie example later."
msgstr ""

#. Tag: para
#: part1-advanced.xml:2645
#, no-c-format
msgid "While it is theoretically possible to redirect the output stream of the response object to write custom data to the response, you should never need to do that, as it would break the UIDL communication protocol."
msgstr ""

#. Tag: para
#: part1-advanced.xml:2651
#, no-c-format
msgid "The servlet request and response objects are defined in the Java Servlet API. Please refer to its documentation for more detailed information."
msgstr ""

#. Tag: title
#: part1-advanced.xml:2661
#, no-c-format
msgid "Managing Cookies"
msgstr ""

#. Tag: primary
#: part1-advanced.xml:2664
#, no-c-format
msgid "cookies"
msgstr ""

#. Tag: para
#: part1-advanced.xml:2667
#, no-c-format
msgid "Setting and reading cookies is one of the typical uses of <classname>HttpServletRequestListener</classname>. The application gets the <classname>HttpServletRequest</classname> object containing the cookies in the <methodname>onRequestStart()</methodname> method."
msgstr ""

#. Tag: title
#: part1-advanced.xml:2675
#, no-c-format
msgid "Setting a Cookie"
msgstr ""

#. Tag: para
#: part1-advanced.xml:2677
#, no-c-format
msgid "You normally set a cookie in an event listener. As the request object is a transient object that exists only for the duration of the request, it is not accessible from the <classname>Application</classname> object. The only way to access it is to store it in <methodname>onRequestStart()</methodname>, as done in the following example."
msgstr ""

#. Tag: programlisting
#: part1-advanced.xml:2686
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[public class CookieExampleApplication extends Application\n"
      "       implements HttpServletRequestListener {\n"
      "    HttpServletResponse response;\n"
      "\n"
      "    public void onRequestStart(HttpServletRequest request,\n"
      "                               HttpServletResponse response) {\n"
      "        // Store the reference to the response object for\n"
      "        // using it in event listeners\n"
      "        this.response = response;\n"
      "        ...\n"
      "   }\n"
      "   ...]]>"
msgstr ""

#. Tag: para
#: part1-advanced.xml:2688
#, no-c-format
msgid "We can then use the reference to set or delete cookies in event listeners. Notice that the <emphasis>cookie path</emphasis> property is automatically set to the application path (such as <filename>/book-examples/cookies</filename>) on the first request, but contains the <filename>UIDL</filename> subpath on subsequent calls (such as <filename>/book-examples/cookies/UIDL</filename>). As the cookies are matched against this path, you may need to set the path explicitly with <methodname>setPath()</methodname>."
msgstr ""

#. Tag: programlisting
#: part1-advanced.xml:2699
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[newuser = new TextField (\"Give a user name\");\n"
      "login = new Button(\"Login\");\n"
      "login.addListener(new Button.ClickListener() {\n"
      "    public void buttonClick(ClickEvent event) {\n"
      "        Object value = newuser.getValue(); \n"
      "        if (value != null &&\n"
      "            ! \"\".equals((String)value)) {\n"
      "            username = (String) value;\n"
      "\n"
      "            Cookie cookie = new Cookie(\"username\",\n"
      "                                       username);\n"
      "            // Use a fixed path\n"
      "            cookie.setPath(\"/book-examples\");\n"
      "            cookie.setMaxAge(3600); // One hour\n"
      "            response.addCookie(cookie);\n"
      "            System.out.println(\"Set cookie.\");\n"
      "\n"
      "            newuser.setEnabled(false);\n"
      "            login.setEnabled(false);\n"
      "            restart.setEnabled(true);\n"
      "            logout.setEnabled(true);\n"
      "        }\n"
      "    }\n"
      "});\n"
      "loginrow.addComponent(newuser);\n"
      "loginrow.addComponent(login);]]>"
msgstr ""

#. Tag: para
#: part1-advanced.xml:2701
#, no-c-format
msgid "Removing cookie can be set in similar way by setting the <emphasis>maxAge</emphasis> property to zero."
msgstr ""

#. Tag: programlisting
#: part1-advanced.xml:2706
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[// Delete the cookie\n"
      "Cookie cookie = new Cookie(\"username\", username);\n"
      "cookie.setPath(\"/book-examples\");\n"
      "cookie.setMaxAge(0); // Delete\n"
      "response.addCookie(cookie);]]>"
msgstr ""

#. Tag: title
#: part1-advanced.xml:2710
#, no-c-format
msgid "Reading a Cookie"
msgstr ""

#. Tag: para
#: part1-advanced.xml:2712
#, no-c-format
msgid "Reading a cookie can be done in the <methodname>onRequestStart()</methodname> event. As this method is called also on the first client request before the application is initialized, it is possible to read user identification cookies and such on the first request."
msgstr ""

#. Tag: programlisting
#: part1-advanced.xml:2720
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[public class CookieExampleApplication extends Application\n"
      "       implements HttpServletRequestListener {\n"
      "    String username;\n"
      "\n"
      "    public void onRequestStart(HttpServletRequest request,\n"
      "                               HttpServletResponse response) {\n"
      "        if (username == null) {\n"
      "            Cookie[] cookies = request.getCookies();\n"
      "            for (int i=0; i<cookies.length; i++) {\n"
      "                if (\"username\".equals(cookies[i].getName()))\n"
      "                    // Log the user in automatically\n"
      "                    username = cookies[i].getValue();\n"
      "            }\n"
      "        }\n"
      "    }\n"
      "    ...]]>"
msgstr ""

#. Tag: para
#: part1-advanced.xml:2722
#, no-c-format
msgid "Notice that the request path is the application path (such as <filename>/book-examples/cookies</filename>) on the first request, but contains the <filename>UIDL</filename> subpath on subsequent AJAX calls (such as <filename>/book-examples/cookies/UIDL</filename>). So, if you have set the cookie in an AJAX request without setting the cookie path explicitly to such that does not contain the <filename>UIDL</filename> subpath, the cookie will be filtered out on the initial <methodname>onRequestStart()</methodname> call."
msgstr ""

#. Tag: title
#: part1-advanced.xml:2741
#, no-c-format
msgid "<title>Drag and Drop</title>"
msgstr ""

#. Tag: primary
#: part1-advanced.xml:2744 part1-advanced.xml:3007
#, no-c-format
msgid "<primary>Drag and Drop</primary>"
msgstr ""

#. Tag: para
#: part1-advanced.xml:2747
#, no-c-format
msgid "Dragging an object from one location to another by grabbing it with mouse, holding the mouse button pressed, and then releasing the button to \"drop\" it to the other location is a common way to move, copy, or associate objects. For example, most operating systems allow dragging and dropping files between folders or dragging a document on a program to open it. In Vaadin, it is possible to drag and drop components and parts of certain components."
msgstr ""

#. Tag: para
#: part1-advanced.xml:2756
#, no-c-format
msgid "Dragged objects, or <emphasis>transferables</emphasis>, are essentially data objects. You can drag and drop rows in <classname>Table</classname> and nodes in <classname>Tree</classname> components, either within or between the components. You can also drag entire components by wrapping them inside <classname>DragAndDropWrapper</classname>."
msgstr ""

#. Tag: para
#: part1-advanced.xml:2764
#, no-c-format
msgid "Dragging starts from a <emphasis>drag source</emphasis>, which defines the transferable. Transferables implement the <classname>Transferable</classname> interfaces. For trees and tables, which are bound to <classname>Container</classname> data sources, a node or row transferable is a reference to an <classname>Item</classname> in the Vaadin Data Model. Dragged components are referenced with a <classname>WrapperTransferable</classname>. Starting dragging does not require any client-server communication, you only need to enable dragging. All drag and drop logic occurs in two operations: determining (<emphasis>accepting</emphasis>) where dropping is allowed and actually dropping. Drops can be done on a <emphasis>drop target</emphasis>, which implements the <classname>DropTarget</classname> interface. Three components implement the interface: <classname>Tree</classname>, <classname>Table</classname>, and <classname>DragAndDropWrapper</classname>. These accept and drop operations need to be provided in a <emphasis>drop handler</emphasis>. Essentially all you need to do to enable drag and drop is to enable dragging in the drag source and implement the <methodname>getAcceptCriterion()</methodname> and <methodname>drop()</methodname> methods in the <classname>DropHandler</classname> interface."
msgstr ""

#. Tag: para
#: part1-advanced.xml:2787
#, no-c-format
msgid "The client-server architecture of Vaadin causes special requirements for the drag and drop functionality. The logic for determining where a dragged object can be dropped, that is, <emphasis>accepting</emphasis> a drop, should normally be done on the client-side, in the browser. Server communications are too slow to have much of such logic on the server-side. The drag and drop feature therefore offers a number of ways to avoid the server communications to ensure a good user experience."
msgstr ""

#. Tag: title
#: part1-advanced.xml:2798
#, no-c-format
msgid "Handling Drops"
msgstr ""

#. Tag: para
#: part1-advanced.xml:2800
#, no-c-format
msgid "Most of the user-defined drag and drop logic occurs in a <emphasis>drop handler</emphasis>, which is provided by implementing the <methodname>drop()</methodname> method in the <classname>DropHandler</classname> interface. A closely related definition is the drop accept criterion, which is defined in the <methodname>getAcceptCriterion()</methodname> method in the same interface. It is described in <xref linkend=\"advanced.dragndrop.acceptcriteria\"/> later."
msgstr ""

#. Tag: para
#: part1-advanced.xml:2811
#, no-c-format
msgid "The <methodname>drop()</methodname> method gets a <classname>DragAndDropEvent</classname> as its parameters. The event object provides references to two important object: <classname>Transferable</classname> and <classname>TargetDetails</classname>."
msgstr ""

#. Tag: para
#: part1-advanced.xml:2819
#, no-c-format
msgid "A <classname>Transferable</classname> contains a reference to the object (component or data item) that is being dragged. A tree or table item is represented as a <classname>TreeTransferable</classname> or <classname>TableTransferable</classname> object, which carries the item identifier of the dragged tree or table item. These special transferables, which are bound to some data in a container, are <classname>DataBoundTransferable</classname>. Dragged components are represented as <classname>WrapperTransferable</classname> objects, as the components are wrapped in a <classname>DragAndDropWrapper</classname>."
msgstr ""

#. Tag: para
#: part1-advanced.xml:2831
#, no-c-format
msgid "The <classname>TargetDetails</classname> object provides details regarding the exact location where the transferable object is being dropped. If the target is a tree or a table, the <classname>TreeTargetDetails</classname> and <classname>TableTargetDetails</classname> objects provide the tree or table item on which the drop is being made. For entire components, the information is provided in a <classname>WrapperDropDetails</classname> object. In addition to the target item or component, the details objects provide a <emphasis>drop location</emphasis>. For selection components, the location can be obtained with the <methodname>getDropLocation()</methodname> and for wrapped components with <methodname>verticalDropLocation()</methodname> and <methodname>horizontalDropLocation()</methodname>. The locations are specified as either <classname>VerticalDropLocation</classname> or <classname>HorizontalDropLocation</classname> objects. The drop location objects specify whether the transferable is being dropped above, below, or directly on (at the middle of) a component or item."
msgstr ""

#. Tag: para
#: part1-advanced.xml:2851
#, no-c-format
msgid "Dropping on a <classname>Tree</classname>, <classname>Table</classname>, and a wrapped component is explained further in the following sections."
msgstr ""

#. Tag: title
#: part1-advanced.xml:2858
#, no-c-format
msgid "Dropping Items On a <classname>Tree</classname>"
msgstr ""

#. Tag: para
#: part1-advanced.xml:2860
#, no-c-format
msgid "You can drag items from, to, or within a <classname>Tree</classname>. Making tree a drag source requires simply setting the drag mode with <methodname>setDragMode()</methodname>. <classname>Tree</classname> currently supports only one drag mode, <literal>TreeDragMode.NODE</literal>, which allows dragging single tree nodes. While dragging, the dragged node is referenced with a <classname>TreeTransferable</classname> object, which is a <classname>DataBoundTransferable</classname>. The tree node is identified by the item ID of the container item."
msgstr ""

#. Tag: para
#: part1-advanced.xml:2873
#, no-c-format
msgid "When a transferable is dropped on a tree, the drop location is stored in a <classname>TreeTargetDetails</classname> object, which identifies the target location by item ID of the tree node on which the drop is made. You can get the item ID with <methodname>getItemIdOver()</methodname> method in <classname>AbstractSelectTargetDetails</classname>, which the <classname>TreeTargetDetails</classname> inherits. A drop can occur directly on or above or below a node; the exact location is a <classname>VerticalDropLocation</classname>, which you can get with the <methodname>getDropLocation()</methodname> method."
msgstr ""

#. Tag: para
#: part1-advanced.xml:2885
#, no-c-format
msgid "In the example below, we have a <classname>Tree</classname> and we allow reordering the tree items by drag and drop."
msgstr ""

#. Tag: programlisting
#: part1-advanced.xml:2890
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[final Tree tree = new Tree(\"Inventory\");\n"
      "tree.setContainerDataSource(TreeExample.createTreeContent());\n"
      "layout.addComponent(tree);\n"
      "        \n"
      "// Expand all items\n"
      "for (Iterator<?> it = tree.rootItemIds().iterator(); it.hasNext();)\n"
      "    tree.expandItemsRecursively(it.next());\n"
      "        \n"
      "// Set the tree in drag source mode\n"
      "tree.setDragMode(TreeDragMode.NODE);\n"
      "        \n"
      "// Allow the tree to receive drag drops and handle them\n"
      "tree.setDropHandler(new DropHandler() {\n"
      "    public AcceptCriterion getAcceptCriterion() {\n"
      "        return AcceptAll.get();\n"
      "    }\n"
      "\n"
      "    public void drop(DragAndDropEvent event) {\n"
      "        // Wrapper for the object that is dragged\n"
      "        Transferable t = event.getTransferable();\n"
      "        \n"
      "        // Make sure the drag source is the same tree\n"
      "        if (t.getSourceComponent() != tree)\n"
      "            return;\n"
      "        \n"
      "        TreeTargetDetails target = (TreeTargetDetails)\n"
      "            event.getTargetDetails();\n"
      "\n"
      "        // Get ids of the dragged item and the target item\n"
      "        Object sourceItemId = t.getData(\"itemId\");\n"
      "        Object targetItemId = target.getItemIdOver();\n"
      "\n"
      "        // On which side of the target the item was dropped \n"
      "        VerticalDropLocation location = target.getDropLocation();\n"
      "        \n"
      "        HierarchicalContainer container = (HierarchicalContainer)\n"
      "        tree.getContainerDataSource();\n"
      "\n"
      "        // Drop right on an item -> make it a child\n"
      "        if (location == VerticalDropLocation.MIDDLE)\n"
      "            tree.setParent(sourceItemId, targetItemId);\n"
      "\n"
      "        // Drop at the top of a subtree -> make it previous\n"
      "        else if (location == VerticalDropLocation.TOP) {\n"
      "            Object parentId = container.getParent(targetItemId);\n"
      "            container.setParent(sourceItemId, parentId);\n"
      "            container.moveAfterSibling(sourceItemId, targetItemId);\n"
      "            container.moveAfterSibling(targetItemId, sourceItemId);\n"
      "        }\n"
      "        \n"
      "        // Drop below another item -> make it next \n"
      "        else if (location == VerticalDropLocation.BOTTOM) {\n"
      "            Object parentId = container.getParent(targetItemId);\n"
      "            container.setParent(sourceItemId, parentId);\n"
      "            container.moveAfterSibling(sourceItemId, targetItemId);\n"
      "        }\n"
      "    }\n"
      "});]]>"
msgstr ""

#. Tag: title
#: part1-advanced.xml:2893
#, no-c-format
msgid "Accept Criteria for Trees"
msgstr ""

#. Tag: para
#: part1-advanced.xml:2895
#, no-c-format
msgid "<classname>Tree</classname> defines some specialized accept criteria for trees."
msgstr ""

#. Tag: term
#: part1-advanced.xml:2902
#, no-c-format
msgid "<classname>TargetInSubtree</classname> (client-side)"
msgstr ""

#. Tag: listitem
#: part1-advanced.xml:2903
#, no-c-format
msgid "Accepts if the target item is in the specified sub-tree. The sub-tree is specified by the item ID of the root of the sub-tree in the constructor. The second constructor includes a depth parameter, which specifies how deep from the given root node are drops accepted. Value <literal>-1</literal> means infinite, that is, the entire sub-tree, and is therefore the same as the simpler constructor."
msgstr ""

#. Tag: term
#: part1-advanced.xml:2914
#, no-c-format
msgid "<classname>TargetItemAllowsChildren</classname> (client-side)"
msgstr ""

#. Tag: listitem
#: part1-advanced.xml:2915
#, no-c-format
msgid "Accepts a drop if the tree has <methodname>setChildrenAllowed()</methodname> enabled for the target item. The criterion does not require parameters, so the class is a singleton and can be acquired with <methodname>Tree.TargetItemAllowsChildren.get()</methodname>. For example, the following composite criterion accepts drops only on nodes that allow children, but between all nodes:"
msgstr ""

#. Tag: programlisting
#: part1-advanced.xml:2924
#, no-c-format
msgid "<?pocket-size 65% ?><![CDATA[return new Or (Tree.TargetItemAllowsChildren.get(), new Not(VerticalLocationIs.MIDDLE));]]>"
msgstr ""

#. Tag: term
#: part1-advanced.xml:2928
#, no-c-format
msgid "<classname>TreeDropCriterion</classname> (server-side)"
msgstr ""

#. Tag: listitem
#: part1-advanced.xml:2929
#, no-c-format
msgid "Accepts drops on only some items, which as specified by a set of item IDs. You must extend the abstract class and implement the <methodname>getAllowedItemIds()</methodname> to return the set. While the criterion is server-side, it is lazy-loading, so that the list of accepted target nodes is loaded only once from the server for each drag operation. See <xref linkend=\"advanced.dragndrop.acceptcriteria\"/> for an example."
msgstr ""

#. Tag: para
#: part1-advanced.xml:2941
#, no-c-format
msgid "In addition, the accept criteria defined in <classname>AbstractSelect</classname> are available for a <classname>Tree</classname>, as listed in <xref linkend=\"advanced.dragndrop.acceptcriteria\"/>."
msgstr ""

#. Tag: title
#: part1-advanced.xml:2952
#, no-c-format
msgid "Dropping Items On a <classname>Table</classname>"
msgstr ""

#. Tag: para
#: part1-advanced.xml:2954
#, no-c-format
msgid "You can drag items from, to, or within a <classname>Table</classname>. Making table a drag source requires simply setting the drag mode with <methodname>setDragMode()</methodname>. <classname>Table</classname> supports dragging both single rows, with <literal>TableDragMode.ROW</literal>, and multiple rows, with <literal>TableDragMode.MULTIROW</literal>. While dragging, the dragged node or nodes are referenced with a <classname>TreeTransferable</classname> object, which is a <classname>DataBoundTransferable</classname>. Tree nodes are identified by the item IDs of the container items."
msgstr ""

#. Tag: para
#: part1-advanced.xml:2968
#, no-c-format
msgid "When a transferable is dropped on a table, the drop location is stored in a <classname>AbstractSelectTargetDetails</classname> object, which identifies the target row by its item ID. You can get the item ID with <methodname>getItemIdOver()</methodname> method. A drop can occur directly on or above or below a row; the exact location is a <classname>VerticalDropLocation</classname>, which you can get with the <methodname>getDropLocation()</methodname> method from the details object."
msgstr ""

#. Tag: title
#: part1-advanced.xml:2979
#, no-c-format
msgid "Accept Criteria for Tables"
msgstr ""

#. Tag: para
#: part1-advanced.xml:2981
#, no-c-format
msgid "<classname>Table</classname> defines one specialized accept criterion for tables."
msgstr ""

#. Tag: term
#: part1-advanced.xml:2988
#, no-c-format
msgid "<classname>TableDropCriterion</classname> (server-side)"
msgstr ""

#. Tag: listitem
#: part1-advanced.xml:2989
#, no-c-format
msgid "Accepts drops only on (or above or below) items that are specified by a set of item IDs. You must extend the abstract class and implement the <methodname>getAllowedItemIds()</methodname> to return the set. While the criterion is server-side, it is lazy-loading, so that the list of accepted target items is loaded only once from the server for each drag operation."
msgstr ""

#. Tag: title
#: part1-advanced.xml:3004
#, no-c-format
msgid "Accepting Drops"
msgstr ""

#. Tag: secondary
#: part1-advanced.xml:3008
#, no-c-format
msgid "Accept Criteria"
msgstr ""

#. Tag: para
#: part1-advanced.xml:3011
#, no-c-format
msgid "You can not drop the objects you are dragging around just anywhere. Before a drop is possible, the specific drop location on which the mouse hovers must be <emphasis>accepted</emphasis>. Hovering a dragged object over an accepted location displays an <emphasis>accept indicator</emphasis>, which allows the user to position the drop properly. As such checks have to be done all the time when the mouse pointer moves around the drop targets, it is not feasible to send the accept requests to the server-side, so drops on a target are normally accepted by a client-side <emphasis>accept criterion</emphasis>."
msgstr ""

#. Tag: para
#: part1-advanced.xml:3023
#, no-c-format
msgid "A drop handler must define the criterion on the objects which it accepts to be dropped on the target. The criterion needs to be provided in the <classname>getAcceptCriterion()</classname> method of the <classname>DropHandler</classname> interface. A criterion is represented in an <classname>AcceptCriterion</classname> object, which can be a composite of multiple criteria that are evaluated using logical operations. There are two basic types of criteria: <emphasis>client-side</emphasis> and <emphasis>server-side criteria</emphasis>. The various built-in criteria allow accepting drops based on the identity of the source and target components, and on the <emphasis>data flavor</emphasis> of the dragged objects."
msgstr ""

#. Tag: para
#: part1-advanced.xml:3037
#, no-c-format
msgid "To allow dropping any transferable objects, you can return a universal accept criterion, which you can get with <methodname>AcceptAll.get()</methodname>."
msgstr ""

#. Tag: programlisting
#: part1-advanced.xml:3043
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[tree.setDropHandler(new DropHandler() {\n"
      "    public AcceptCriterion getAcceptCriterion() {\n"
      "        return AcceptAll.get();\n"
      "    }\n"
      "    ...]]>"
msgstr ""

#. Tag: title
#: part1-advanced.xml:3046
#, no-c-format
msgid "Client-Side Criteria"
msgstr ""

#. Tag: para
#: part1-advanced.xml:3048
#, no-c-format
msgid "The <emphasis>client-side criteria</emphasis>, which inherit the <classname>ClientSideCriterion</classname>, are verified on the client-side, so server requests are not needed for verifying whether each component on which the mouse pointer hovers would accept a certain object."
msgstr ""

#. Tag: para
#: part1-advanced.xml:3055
#, no-c-format
msgid "The following client-side criteria are define in <package>com.vaadin.event.dd.acceptcriterion</package>:"
msgstr ""

#. Tag: classname
#: part1-advanced.xml:3062
#, no-c-format
msgid "AcceptAll"
msgstr ""

#. Tag: listitem
#: part1-advanced.xml:3063
#, no-c-format
msgid "Accepts all transferables and targets."
msgstr ""

#. Tag: classname
#: part1-advanced.xml:3068
#, no-c-format
msgid "<classname>And</classname>"
msgstr ""

#. Tag: listitem
#: part1-advanced.xml:3069
#, no-c-format
msgid "Logical AND operation on two client-side criterion; accepts the transferable if all the defined sub-criteria accept it."
msgstr ""

#. Tag: classname
#: part1-advanced.xml:3075
#, no-c-format
msgid "ContainsDataFlavour"
msgstr ""

#. Tag: listitem
#: part1-advanced.xml:3076
#, no-c-format
msgid "The transferable must contain the defined data flavour."
msgstr ""

#. Tag: classname
#: part1-advanced.xml:3082
#, no-c-format
msgid "<classname>Not</classname>"
msgstr ""

#. Tag: listitem
#: part1-advanced.xml:3083
#, no-c-format
msgid "Logical NOT operation on two client-side criterion; accepts the transferable if and only if the sub-criterion does not accept it."
msgstr ""

#. Tag: classname
#: part1-advanced.xml:3090
#, no-c-format
msgid "<classname>Or</classname>"
msgstr ""

#. Tag: listitem
#: part1-advanced.xml:3091
#, no-c-format
msgid "Logical OR operation on two client-side criterion; accepts the transferable if any of the defined sub-criteria accept it."
msgstr ""

#. Tag: classname
#: part1-advanced.xml:3097
#, no-c-format
msgid "SourceIs"
msgstr ""

#. Tag: listitem
#: part1-advanced.xml:3098
#, no-c-format
msgid "Accepts all transferables from any of the given source components"
msgstr ""

#. Tag: classname
#: part1-advanced.xml:3104
#, no-c-format
msgid "SourceIsTarget"
msgstr ""

#. Tag: listitem
#: part1-advanced.xml:3105
#, no-c-format
msgid "Accepts the transferable only if the source component is the same as the target. This criterion is useful for ensuring that items are dragged only within a tree or a table, and not from outside it."
msgstr ""

#. Tag: classname
#: part1-advanced.xml:3113
#, no-c-format
msgid "TargetDetailIs"
msgstr ""

#. Tag: listitem
#: part1-advanced.xml:3114
#, no-c-format
msgid "Accepts any transferable if the target detail, such as the item of a tree node or table row, is of the given data flavor and has the given value."
msgstr ""

#. Tag: para
#: part1-advanced.xml:3122
#, no-c-format
msgid "In addition, target components such as <classname>Tree</classname> and <classname>Table</classname> define some component-specific client-side accept criteria. See <xref linkend=\"advanced.dragndrop.treedrop\"/> for more details."
msgstr ""

#. Tag: para
#: part1-advanced.xml:3129
#, no-c-format
msgid "<classname>AbstractSelect</classname> defines the following criteria for all selection components, including <classname>Tree</classname> and <classname>Table</classname>."
msgstr ""

#. Tag: classname
#: part1-advanced.xml:3137
#, no-c-format
msgid "AcceptItem"
msgstr ""

#. Tag: listitem
#: part1-advanced.xml:3138
#, no-c-format
msgid "Accepts only specific items from a specific selection component. The selection component, which must inherit <classname>AbstractSelect</classname>, is given as the first parameter for the constructor. It is followed by a list of allowed item identifiers in the drag source."
msgstr ""

#. Tag: classname
#: part1-advanced.xml:3147
#, no-c-format
msgid "AcceptItem.ALL"
msgstr ""

#. Tag: listitem
#: part1-advanced.xml:3148
#, no-c-format
msgid "Accepts all transferables as long as they are items."
msgstr ""

#. Tag: classname
#: part1-advanced.xml:3153
#, no-c-format
msgid "TargetItemIs"
msgstr ""

#. Tag: listitem
#: part1-advanced.xml:3154
#, no-c-format
msgid "Accepts all drops on the specified target items. The constructor requires the target component (<classname>AbstractSelect</classname>) followed by a list of allowed item identifiers."
msgstr ""

#. Tag: term
#: part1-advanced.xml:3162
#, no-c-format
msgid "<classname>VerticalLocationIs.MIDDLE</classname>, <classname>TOP</classname>, and <classname>BOTTOM</classname>"
msgstr ""

#. Tag: listitem
#: part1-advanced.xml:3165
#, no-c-format
msgid "The three static criteria accepts drops on, above, or below an item. For example, you could accept drops only in between items with the following:"
msgstr ""

#. Tag: programlisting
#: part1-advanced.xml:3170
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[public AcceptCriterion getAcceptCriterion() {\n"
      "    return new Not(VerticalLocationIs.MIDDLE);\n"
      "}]]>"
msgstr ""

#. Tag: title
#: part1-advanced.xml:3177
#, no-c-format
msgid "Server-Side Criteria"
msgstr ""

#. Tag: para
#: part1-advanced.xml:3179
#, no-c-format
msgid "The <emphasis>server-side criteria</emphasis> are verified on the server-side with the <methodname>accept()</methodname> method of the <classname>ServerSideCriterion</classname> class. This allows fully programmable logic for accepting drops, but the negative side is that it causes a very large amount of server requests. A request is made for every target position on which the pointer hovers. This problem is eased in many cases by the component-specific lazy loading criteria <classname>TableDropCriterion</classname> and <classname>TreeDropCriterion</classname>. They do the server visit once for each drag and drop operation and return all accepted rows or nodes for current <classname>Transferable</classname> at once."
msgstr ""

#. Tag: para
#: part1-advanced.xml:3193
#, no-c-format
msgid "The <methodname>accept()</methodname> method gets the drag event as a parameter so it can perform its logic much like in <methodname>drop()</methodname>."
msgstr ""

#. Tag: programlisting
#: part1-advanced.xml:3199
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[public AcceptCriterion getAcceptCriterion() {\n"
      "    // Server-side accept criterion that allows drops on any other\n"
      "    // location except on nodes that may not have children\n"
      "    ServerSideCriterion criterion = new ServerSideCriterion() {\n"
      "        public boolean accept(DragAndDropEvent dragEvent) {\n"
      "            TreeTargetDetails target = (TreeTargetDetails)\n"
      "                dragEvent.getTargetDetails();\n"
      "\n"
      "            // The tree item on which the load hovers\n"
      "            Object targetItemId = target.getItemIdOver();\n"
      "\n"
      "            // On which side of the target the item is hovered\n"
      "            VerticalDropLocation location = target.getDropLocation();\n"
      "            if (location == VerticalDropLocation.MIDDLE)\n"
      "                if (! tree.areChildrenAllowed(targetItemId))\n"
      "                    return false; // Not accepted\n"
      "\n"
      "            return true; // Accept everything else\n"
      "        }\n"
      "    };\n"
      "    return criterion;\n"
      "}]]>"
msgstr ""

#. Tag: para
#: part1-advanced.xml:3201
#, no-c-format
msgid "The server-side criteria base class <classname>ServerSideCriterion</classname> provides a generic <methodname>accept()</methodname> method. The more specific <classname>TableDropCriterion</classname> and <classname>TreeDropCriterion</classname> are conveniency extensions that allow definiting allowed drop targets as a set of items. They also provide some optimization by lazy loading, which reduces server communications significantly."
msgstr ""

#. Tag: programlisting
#: part1-advanced.xml:3212
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[public AcceptCriterion getAcceptCriterion() {\n"
      "    // Server-side accept criterion that allows drops on any\n"
      "    // other tree node except on node that may not have children\n"
      "    TreeDropCriterion criterion = new TreeDropCriterion() {\n"
      "        @Override\n"
      "        protected Set<Object> getAllowedItemIds(\n"
      "                DragAndDropEvent dragEvent, Tree tree) {\n"
      "            HashSet<Object> allowed = new HashSet<Object>();\n"
      "            for (Iterator<Object> i =\n"
      "                   tree.getItemIds().iterator(); i.hasNext();) {\n"
      "                Object itemId = i.next();\n"
      "                if (tree.hasChildren(itemId))\n"
      "                    allowed.add(itemId);\n"
      "            }\n"
      "            return allowed;\n"
      "        }\n"
      "    };\n"
      "    return criterion;\n"
      "}]]>"
msgstr ""

#. Tag: title
#: part1-advanced.xml:3217
#, no-c-format
msgid "Accept Indicators"
msgstr ""

#. Tag: para
#: part1-advanced.xml:3219
#, no-c-format
msgid "When a dragged object hovers on a drop target, an <emphasis>accept indicator</emphasis> is displayed to show whether or not the location is accepted. For <parameter>MIDDLE</parameter> location, the indicator is a box around the target (tree node, table row, or component). For vertical drop locations, the accepted locations are shown as horizontal lines, and for horizontal drop locations as vertical lines."
msgstr ""

#. Tag: para
#: part1-advanced.xml:3228
#, no-c-format
msgid "For <classname>DragAndDropWrapper</classname> drop targets, you can disable the accept indicators or <emphasis>drag hints</emphasis> with the <parameter>no-vertical-drag-hints</parameter>, <parameter>no-horizontal-drag-hints</parameter>, and <parameter>no-box-drag-hints</parameter> styles. You need to add the styles to the <emphasis>layout that contains</emphasis> the wrapper, not to the wrapper itself."
msgstr ""

#. Tag: programlisting
#: part1-advanced.xml:3238
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[// Have a wrapper\n"
      "DragAndDropWrapper wrapper = new DragAndDropWrapper(c);\n"
      "layout.addComponent(wrapper);\n"
      "\n"
      "// Disable the hints\n"
      "layout.addStyleName(\"no-vertical-drag-hints\");\n"
      "layout.addStyleName(\"no-horizontal-drag-hints\");\n"
      "layout.addStyleName(\"no-box-drag-hints\");]]>"
msgstr ""

#. Tag: title
#: part1-advanced.xml:3247
#, no-c-format
msgid "Dragging Components"
msgstr ""

#. Tag: para
#: part1-advanced.xml:3249
#, no-c-format
msgid "Dragging a component requires wrapping the source component within a <classname>DragAndDropWrapper</classname>. You can then allow dragging by putting the wrapper (and the component) in drag mode with <methodname>setDragStartMode()</methodname>. The method supports two drag modes: <parameter>DragStartMode.WRAPPER</parameter> and <parameter>DragStartMode.COMPONENT</parameter>, which defines whether the entire wrapper is shown as the drag image while dragging or just the wrapped component."
msgstr ""

#. Tag: programlisting
#: part1-advanced.xml:3260
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[// Have a component to drag\n"
      "final Button button = new Button(\"An Absolute Button\");\n"
      "\n"
      "// Put the component in a D&D wrapper and allow dragging it\n"
      "final DragAndDropWrapper buttonWrap = new DragAndDropWrapper(button);\n"
      "buttonWrap.setDragStartMode(DragStartMode.COMPONENT);\n"
      "\n"
      "// Set the wrapper to wrap tightly around the component\n"
      "buttonWrap.setSizeUndefined();\n"
      "        \n"
      "// Add the wrapper, not the component, to the layout\n"
      "layout.addComponent(buttonWrap, \"left: 50px; top: 50px;\");]]>"
msgstr ""

#. Tag: para
#: part1-advanced.xml:3262
#, no-c-format
msgid "The default height of <classname>DragAndDropWrapper</classname> is undefined, but the default width is 100%. If you want to ensure that the wrapper fits tightly around the wrapped component, you should call <methodname>setSizeUndefined()</methodname> for the wrapper. Doing so, you should make sure that the wrapped component does not have a relative size, which would cause a paradox."
msgstr ""

#. Tag: para
#: part1-advanced.xml:3271
#, no-c-format
msgid "Dragged components are referenced in the <classname>WrapperTransferable</classname>. You can get the reference to the dragged component with <methodname>getDraggedComponent()</methodname>. The method will return <literal>null</literal> if the transferable is not a component. Also HTML 5 drags (see later) are held in wrapper transferables."
msgstr ""

#. Tag: title
#: part1-advanced.xml:3283
#, no-c-format
msgid "Dropping on a Component"
msgstr ""

#. Tag: para
#: part1-advanced.xml:3285
#, no-c-format
msgid "Drops on a component are enabled by wrapping the component in a <classname>DragAndDropWrapper</classname>. The wrapper is an ordinary component; the constructor takes the wrapped component as a parameter. You just need to define the <classname>DropHandler</classname> for the wrapper with <methodname>setDropHandler()</methodname>."
msgstr ""

#. Tag: para
#: part1-advanced.xml:3293
#, no-c-format
msgid "In the following example, we allow moving components in an absolute layout. Details on the drop handler are given later."
msgstr ""

#. Tag: programlisting
#: part1-advanced.xml:3298
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[// A layout that allows moving its contained components\n"
      "// by dragging and dropping them\n"
      "final AbsoluteLayout absLayout = new AbsoluteLayout();\n"
      "absLayout.setWidth(\"100%\");\n"
      "absLayout.setHeight(\"400px\");\n"
      "\n"
      "... put some (wrapped) components in the layout ...\n"
      "\n"
      "// Wrap the layout to allow handling drops\n"
      "DragAndDropWrapper layoutWrapper =\n"
      "        new DragAndDropWrapper(absLayout);\n"
      "\n"
      "// Handle moving components within the AbsoluteLayout\n"
      "layoutWrapper.setDropHandler(new DropHandler() {\n"
      "    public AcceptCriterion getAcceptCriterion() {\n"
      "        return AcceptAll.get();\n"
      "    }\n"
      "    \n"
      "    public void drop(DragAndDropEvent event) {\n"
      "        ...        \n"
      "    }\n"
      "});]]>"
msgstr ""

#. Tag: title
#: part1-advanced.xml:3301
#, no-c-format
msgid "Target Details for Wrapped Components"
msgstr ""

#. Tag: para
#: part1-advanced.xml:3303
#, no-c-format
msgid "The drop handler receives the drop target details in a <classname>WrapperTargetDetails</classname> object, which implements the <classname>TargetDetails</classname> interface."
msgstr ""

#. Tag: programlisting
#: part1-advanced.xml:3309
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[public void drop(DragAndDropEvent event) {\n"
      "    WrapperTransferable t =\n"
      "        (WrapperTransferable) event.getTransferable();\n"
      "    WrapperTargetDetails details =\n"
      "        (WrapperTargetDetails) event.getTargetDetails();]]>"
msgstr ""

#. Tag: para
#: part1-advanced.xml:3311
#, no-c-format
msgid "The wrapper target details include a <classname>MouseEventDetails</classname> object, which you can get with <methodname>getMouseEvent()</methodname>. You can use it to get the mouse coordinates for the position where the mouse button was released and the drag ended. Similarly, you can find out the drag start position from the transferable object (if it is a <classname>WrapperTransferable</classname>) with <methodname>getMouseDownEvent()</methodname>."
msgstr ""

#. Tag: programlisting
#: part1-advanced.xml:3322
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[// Calculate the drag coordinate difference\n"
      "int xChange = details.getMouseEvent().getClientX()\n"
      "              - t.getMouseDownEvent().getClientX();\n"
      "int yChange = details.getMouseEvent().getClientY()\n"
      "              - t.getMouseDownEvent().getClientY();\n"
      "\n"
      "// Move the component in the absolute layout\n"
      "ComponentPosition pos =\n"
      "    absLayout.getPosition(t.getSourceComponent());\n"
      "pos.setLeftValue(pos.getLeftValue() + xChange);\n"
      "pos.setTopValue(pos.getTopValue() + yChange);]]>"
msgstr ""

#. Tag: para
#: part1-advanced.xml:3324
#, no-c-format
msgid "You can get the absolute x and y coordinates of the target wrapper with <methodname>getAbsoluteLeft()</methodname> and <methodname>getAbsoluteTop()</methodname>, which allows you to translate the absolute mouse coordinates to coordinates relative to the wrapper. Notice that the coordinates are really the position of the wrapper, not the wrapped component; the wrapper reserves some space for the accept indicators."
msgstr ""

#. Tag: para
#: part1-advanced.xml:3334
#, no-c-format
msgid "The <methodname>verticalDropLocation()</methodname> and <methodname>horizontalDropLocation()</methodname> return the more detailed drop location in the target."
msgstr ""

#. Tag: title
#: part1-advanced.xml:3343
#, no-c-format
msgid "Dragging Files from Outside the Browser"
msgstr ""

#. Tag: para
#: part1-advanced.xml:3345
#, no-c-format
msgid "The <classname>DragAndDropWrapper</classname> allows dragging files from outside the browser and dropping them on a component wrapped in the wrapper. Dropped files are automatically uploaded to the application and can be acquired from the wrapper with <methodname>getFiles()</methodname>. The files are represented as <classname>Html5File</classname> objects as defined in the inner class. You can define an upload <classname>Receiver</classname> to receive the content of a file to an <classname>OutputStream</classname>."
msgstr ""

#. Tag: para
#: part1-advanced.xml:3356
#, no-c-format
msgid "Dragging and dropping files to browser is supported in HTML 5 and requires a compatible browser, such as Mozilla Firefox 3.6 or newer."
msgstr ""

#. Tag: title
#: part1-advanced.xml:3366
#, no-c-format
msgid "Logging"
msgstr ""

#. Tag: para
#: part1-advanced.xml:3368
#, no-c-format
msgid "You can do logging in Vaadin application using the standard <package>java.util.logging</package> facilities. Configuring logging is as easy as putting a file named <filename>logging.properties</filename> in the default package of your Vaadin application. This file is read by the <classname>Logger</classname> class when a new instance of it is initialize."
msgstr ""

#. Tag: title
#: part1-advanced.xml:3377
#, no-c-format
msgid "Logging in Apache Tomcat"
msgstr ""

#. Tag: para
#: part1-advanced.xml:3379
#, no-c-format
msgid "For logging Vaadin applications deployed in Apache Tomcat, you do not need to do anything special to log to the same place as Tomcat itself. If you need to write the Vaadin application related messages elsewhere, just add a custom <filename>logging.properties</filename> file to the default package of your Vaadin application."
msgstr ""

#. Tag: para
#: part1-advanced.xml:3387
#, no-c-format
msgid "If you would like to pipe the log messages through another logging solution, see <xref linkend=\"advanced.logging.slf4j\"/> below."
msgstr ""

#. Tag: title
#: part1-advanced.xml:3394
#, no-c-format
msgid "Logging in Liferay"
msgstr ""

#. Tag: para
#: part1-advanced.xml:3396
#, no-c-format
msgid "Liferay mutes logging through <package>java.util.logging</package> by default. In order to enable logging, you need to add a <filename>logging.properties</filename> file of your own to the default package of your Vaadin application. This file should define at least one destination where to save the log messages."
msgstr ""

#. Tag: para
#: part1-advanced.xml:3404
#, no-c-format
msgid "You can also log through SLF4J, which is used in and bundled with Liferay. Follow the instructions in <xref linkend=\"advanced.logging.slf4j\"/>."
msgstr ""

#. Tag: title
#: part1-advanced.xml:3412
#, no-c-format
msgid "Piping to Log4j using SLF4J"
msgstr ""

#. Tag: para
#: part1-advanced.xml:3414
#, no-c-format
msgid "Piping output from <package>java.util.logging</package> to Log4j is easy with SLF4J (<link xlink:href=\"http://slf4j.org/\">http://slf4j.org/</link>). The basic way to go about this is to add the SLF4J JAR file as well as the <filename>jul-to-slf4j.jar</filename> file, which implements the bridge from <package>java.util.logging</package>, to SLF4J. You will also need to add a third logging implementation JAR file, that is, <filename>slf4j-log4j12-x.x.x.jar</filename>, to log the actual messages using Log4j. For more info on this, please visit the SLF4J site."
msgstr ""

#. Tag: para
#: part1-advanced.xml:3426
#, no-c-format
msgid "In order to get the <package>java.util.logging</package> to SLF4J bridge installed, you need to add the following snippet of code to your <classname>Application</classname> class at the very top:"
msgstr ""

#. Tag: programlisting
#: part1-advanced.xml:3432
#, no-c-format
msgid ""
      "<![CDATA[  static {\n"
      "    SLF4JBridgeHandler.install();\n"
      "  }]]>"
msgstr ""

#. Tag: para
#: part1-advanced.xml:3434
#, no-c-format
msgid "This will make sure that the bridge handler is installed and working before Vaadin starts to process any logging calls."
msgstr ""

#. Tag: title
#: part1-advanced.xml:3440
#, no-c-format
msgid "Please note!"
msgstr ""

#. Tag: para
#: part1-advanced.xml:3442
#, no-c-format
msgid "This can seriously impact on the cost of disabled logging statements (60-fold increase) and a measurable impact on enabled log statements (20% overall increase). However, Vaadin doesn't log very much, so the effect on performance will be negligible."
msgstr ""

#. Tag: title
#: part1-advanced.xml:3452
#, no-c-format
msgid "Logging in Vaadin core and add-ons"
msgstr ""

#. Tag: para
#: part1-advanced.xml:3454
#, no-c-format
msgid "The pattern for logging in the core of Vaadin and in server-side add-ons is that you register a static final logger for each class that does logging, and then just use this logger. For example:"
msgstr ""

#. Tag: programlisting
#: part1-advanced.xml:3460
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[public class MyClass {\n"
      "  private static final Logger logger =\n"
      "          Logger.getLogger(MyClass.class.getName());\n"
      "  \n"
      "  public void myMethod() {\n"
      "    try {\n"
      "      // do something that might fail\n"
      "    } catch (Exception e) {\n"
      "      logger.log(Level.SEVERE, \"FAILED CATASTROPHICALLY!\", e);\n"
      "    } \n"
      "  }\n"
      "}]]>"
msgstr ""

#. Tag: title
#: part1-advanced.xml:3465
#, no-c-format
msgid "Accessing Session-Global Data"
msgstr ""

#. Tag: para
#: part1-advanced.xml:3467
#, no-c-format
msgid "Applications typically need to access some objects from practically all user interface code, such as a user object, a business data model, or a database connection. This data is typically initialized and managed in the application class. Some such data is built-in into the <classname>Application</classname> class, such as the locale."
msgstr ""

#. Tag: para
#: part1-advanced.xml:3475
#, no-c-format
msgid "You can access the application object from any user interface component using the <methodname>getApplication()</methodname> method. For example:"
msgstr ""

#. Tag: programlisting
#: part1-advanced.xml:3480
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[class MyApplication extends Application {\n"
      "    UserData userData;\n"
      "\n"
      "    public void init() {\n"
      "        userData = new UserData();\n"
      "    }\n"
      "\n"
      "    public UserData getUserData() {\n"
      "        return userData;\n"
      "    }\n"
      "}\n"
      "\n"
      "...\n"
      "data = ((MyApplication)component.getApplication()).getUserData();]]>"
msgstr ""

#. Tag: title
#: part1-advanced.xml:3483
#, no-c-format
msgid "The Problem"
msgstr ""

#. Tag: para
#: part1-advanced.xml:3485
#, no-c-format
msgid "The basic problem in accessing session-global data is that the <methodname>getApplication()</methodname> method works only after the component has been attached to the application. Before that, it returns <parameter>null</parameter>. This is the case in constructors of components, such as a <classname>CustomComponent</classname>:"
msgstr ""

#. Tag: programlisting
#: part1-advanced.xml:3493
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[class MyComponent extends CustomComponent {\n"
      "    public MyComponent() {\n"
      "        // This fails with NullPointerException\n"
      "        Label label = new Label(\"Country: \" +\n"
      "            getApplication().getLocale().getCountry());\n"
      "\n"
      "        setCompositionRoot(label);\n"
      "    }\n"
      "}]]>"
msgstr ""

#. Tag: para
#: part1-advanced.xml:3495
#, no-c-format
msgid "Using a static variable or a singleton implemented with such to give a global access to user session data is not possible, because static variables are global in the entire web application, not just the user session. This can be handy for communicating data between the concurrent sessions, but creates a problem within a session."
msgstr ""

#. Tag: para
#: part1-advanced.xml:3503
#, no-c-format
msgid "For example, the following would not work:"
msgstr ""

#. Tag: programlisting
#: part1-advanced.xml:3507
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[class MyApplication extends Application {\n"
      "    static UserData userData;\n"
      "\n"
      "    public void init() {\n"
      "        userData = new UserData();\n"
      "    }\n"
      "\n"
      "    public static UserData getUserData() {\n"
      "        return userData;\n"
      "    }\n"
      "}]]>"
msgstr ""

#. Tag: para
#: part1-advanced.xml:3509
#, no-c-format
msgid "The data would be shared by all users and be reinitialized every time a new user opens the application."
msgstr ""

#. Tag: title
#: part1-advanced.xml:3516
#, no-c-format
msgid "Overview of Solutions"
msgstr ""

#. Tag: para
#: part1-advanced.xml:3518
#, no-c-format
msgid "To get the application object or any other global data, you have the following solutions:"
msgstr ""

#. Tag: para
#: part1-advanced.xml:3525
#, no-c-format
msgid "Pass a reference to the global data as a parameter."
msgstr ""

#. Tag: para
#: part1-advanced.xml:3530
#, no-c-format
msgid "Initialize components in <methodname>attach()</methodname> method."
msgstr ""

#. Tag: para
#: part1-advanced.xml:3535
#, no-c-format
msgid "Store a reference to global data using the <emphasis>ThreadLocal Pattern</emphasis>."
msgstr ""

#. Tag: para
#: part1-advanced.xml:3541
#, no-c-format
msgid "Each solution is described in the following sections."
msgstr ""

#. Tag: title
#: part1-advanced.xml:3547
#, no-c-format
msgid "Passing References Around"
msgstr ""

#. Tag: para
#: part1-advanced.xml:3549
#, no-c-format
msgid "You can pass references to objects as parameters. This is the normal way in object-oriented programming."
msgstr ""

#. Tag: programlisting
#: part1-advanced.xml:3554
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[class MyApplication extends Application {\n"
      "    UserData userData;\n"
      "\n"
      "    public void init() {\n"
      "        Window mainWindow = new Window(\"My Window\");\n"
      "        setMainWindow(mainWindow);\n"
      "\n"
      "        userData = new UserData();\n"
      "        \n"
      "        mainWindow.addComponent(new MyComponent(this));\n"
      "    }\n"
      "\n"
      "    public UserData getUserData() {\n"
      "        return userData;\n"
      "    }\n"
      "}\n"
      "\n"
      "class MyComponent extends CustomComponent {\n"
      "    public MyComponent(MyApplication app) {\n"
      "        Label label = new Label(\"Name: \" +\n"
      "            app.getUserData().getName());\n"
      "\n"
      "        setCompositionRoot(label);\n"
      "    }\n"
      "}]]>"
msgstr ""

#. Tag: para
#: part1-advanced.xml:3556
#, no-c-format
msgid "If you need the reference in other methods, you either have to pass it again as a parameter or store it in a member variable."
msgstr ""

#. Tag: para
#: part1-advanced.xml:3561
#, no-c-format
msgid "The problem with this solution is that practically all constructors in the application need to get a reference to the application object, and passing it further around in the classes is another hard task."
msgstr ""

#. Tag: title
#: part1-advanced.xml:3569
#, no-c-format
msgid "Overriding <methodname>attach()</methodname>"
msgstr ""

#. Tag: para
#: part1-advanced.xml:3571
#, no-c-format
msgid "The <methodname>attach()</methodname> method is called when the component is attached to the application component through containment hierarchy. The <methodname>getApplication()</methodname> method always works."
msgstr ""

#. Tag: programlisting
#: part1-advanced.xml:3578
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[class MyComponent extends CustomComponent {\n"
      "    public MyComponent() {\n"
      "        // Must set a dummy root in constructor\n"
      "        setCompositionRoot(new Label(\"\"));\n"
      "    }\n"
      "\n"
      "    @Override\n"
      "    public void attach() {    \n"
      "        Label label = new Label(\"Name: \" +\n"
      "            ((MyApplication)component.getApplication())\n"
      "                .getUserData().getName());\n"
      "\n"
      "        setCompositionRoot(label);\n"
      "    }\n"
      "}]]>"
msgstr ""

#. Tag: para
#: part1-advanced.xml:3580
#, no-c-format
msgid "While this solution works, it is slightly messy. You may need to do some initialization in the constructor, but any construction requiring the global data must be done in the <methodname>attach()</methodname> method. Especially, <classname>CustomComponent</classname> requires that the <methodname>setCompositionRoot()</methodname> method is called in the constructor. If you can't create the actual composition root component in the constructor, you need to use a temporary dummy root, as is done in the example above."
msgstr ""

#. Tag: para
#: part1-advanced.xml:3591
#, no-c-format
msgid "Using <methodname>getApplication()</methodname> also needs casting if you want to use methods defined in your application class."
msgstr ""

#. Tag: title
#: part1-advanced.xml:3598
#, no-c-format
msgid "ThreadLocal Pattern"
msgstr ""

#. Tag: primary
#: part1-advanced.xml:3600
#, no-c-format
msgid "ThreadLocal pattern"
msgstr ""

#. Tag: para
#: part1-advanced.xml:3602
#, no-c-format
msgid "The ThreadLocal pattern gives a solution to the global access problem by solving two sub-problems."
msgstr ""

#. Tag: para
#: part1-advanced.xml:3607
#, no-c-format
msgid "As the first problem, the servlet container processes requests for many users (sessions) sequentially, so if a static variable is set in a request belonging one user, it could be read or re-set by the next incoming request belonging to another user. This can be solved by setting the global reference at the beginning of each HTTP request to point to data of the current user, as illustrated in Figure <xref linkend=\"figure:advanced.global.threadlocal.sequentiality\" xrefstyle=\"select:labelnumber\"/>."
msgstr ""

#. Tag: title
#: part1-advanced.xml:3619
#, no-c-format
msgid "Switching a static (or ThreadLocal) reference during sequential processing of requests"
msgstr ""

#. Tag: para
#: part1-advanced.xml:3632
#, no-c-format
msgid "You can implement such switching either with the <classname>TransactionListener</classname> or <classname>HttpServletRequestListener</classname> interface by setting the reference in <methodname>transactionStart()</methodname> or <methodname>onRequestStart()</methodname>, respectively. We use the former interface in the example code in this section, as the latter interface has to be implemented in the application class."
msgstr ""

#. Tag: para
#: part1-advanced.xml:3642
#, no-c-format
msgid "The second problem is that servlet containers typically do thread pooling with multiple worker threads that process requests. Therefore, setting a static reference would change it in all threads running concurrently, possibly just when another thread is processing a request for another user. The solution is to store the reference in a thread-local variable instead of a static. You can do so by using the <classname>ThreadLocal</classname> class in Java for the switch reference."
msgstr ""

#. Tag: title
#: part1-advanced.xml:3653
#, no-c-format
msgid "Switching <classname>ThreadLocal</classname> references during concurrent processing of requests"
msgstr ""

#. Tag: para
#: part1-advanced.xml:3666
#, no-c-format
msgid "Notice that if you use a <classname>TransactionListener</classname>, the listeners are attached to the web application context (in practice a user session), not the application instance. The problem is that an application context can have multiple different Vaadin applications that share the same user session. If two of these applications add a transaction listener to the context to listen for requests, both are called and without any checks they would both set the reference to themselves. Therefore, the application data object needs to know which application it belongs to and check that when the transaction begins and ends. Using the <classname>HttpServletRequestListener</classname> frees you from these checks."
msgstr ""

#. Tag: para
#: part1-advanced.xml:3680
#, no-c-format
msgid "While you may not absolutely need to clear the reference in <methodname>transactionEnd()</methodname>, you are probably on the safer side if you do. Setting such unneeded references to <literal>null</literal> can help avoid memory leaks and it could also be a good security precaution not to leave a reference to session data so that it could be seen by another user session in the next request."
msgstr ""

#. Tag: para
#: part1-advanced.xml:3689
#, no-c-format
msgid "We end up with the following code. As we put the application data to a class separate from the application class, we have to make it a <classname>TransactionListener</classname>."
msgstr ""

#. Tag: programlisting
#: part1-advanced.xml:3695
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[/** Holds data for one user session. */\n"
      "public class AppData\n"
      "       implements TransactionListener, Serializable {\n"
      "    private ResourceBundle bundle;\n"
      "    private Locale locale;   // Current locale\n"
      "    private String userData; // Trivial data model for the user\n"
      "    \n"
      "    private Application app; // For distinguishing between apps\n"
      "\n"
      "    private static ThreadLocal<AppData> instance =\n"
      "        new ThreadLocal<AppData>();\n"
      "    \n"
      "    public AppData(Application app) {\n"
      "        this.app = app;\n"
      "\n"
      "        // It's usable from now on in the current request\n"
      "        instance.set(this);\n"
      "    }\n"
      "\n"
      "    @Override\n"
      "    public void transactionStart(Application application,\n"
      "                                 Object transactionData) {\n"
      "        // Set this data instance of this application\n"
      "        // as the one active in the current thread. \n"
      "        if (this.app == application)\n"
      "            instance.set(this);\n"
      "    }\n"
      "\n"
      "    @Override\n"
      "    public void transactionEnd(Application application,\n"
      "                               Object transactionData) {\n"
      "        // Clear the reference to avoid potential problems\n"
      "        if (this.app == application)\n"
      "            instance.set(null);\n"
      "    }\n"
      "\n"
      "    public static void initLocale(Locale locale,\n"
      "                                  String bundleName) {\n"
      "        instance.get().locale = locale;\n"
      "        instance.get().bundle =\n"
      "            ResourceBundle.getBundle(bundleName, locale);\n"
      "    }\n"
      "    \n"
      "    public static Locale getLocale() {\n"
      "        return instance.get().locale;\n"
      "    }\n"
      "\n"
      "    public static String getMessage(String msgId) {\n"
      "        return instance.get().bundle.getString(msgId);\n"
      "    }\n"
      "\n"
      "    public static String getUserData() {\n"
      "        return instance.get().userData;\n"
      "    }\n"
      "\n"
      "    public static void setUserData(String userData) {\n"
      "        instance.get().userData = userData;\n"
      "    }\n"
      "}]]>"
msgstr ""

#. Tag: para
#: part1-advanced.xml:3697
#, no-c-format
msgid "We can then use it in the application as follows. Observe that we do not have a reference to the application object in the constructor of the <classname>MyComponent</classname> class."
msgstr ""

#. Tag: programlisting
#: part1-advanced.xml:3703
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[/** \n"
      " * We can now nicely access the session-global data\n"
      " * in the constuctor of this class.\n"
      " */\n"
      "class MyComponent extends CustomComponent {\n"
      "    public MyComponent() {\n"
      "        VerticalLayout layout = new VerticalLayout();\n"
      "        \n"
      "        // Get stuff from the application data object            \n"
      "        layout.addComponent(new Label(\"Hello, \" +\n"
      "            AppData.getUserData()));\n"
      "\n"
      "        layout.addComponent(new Label(\"Your locale is \" +\n"
      "            AppData.getLocale().getDisplayLanguage()));\n"
      "        \n"
      "        layout.addComponent(new Button(\n"
      "            AppData.getMessage(MyAppCaptions.CancelKey)));\n"
      "        \n"
      "        setCompositionRoot(layout);\n"
      "    }\n"
      "}\n"
      "\n"
      "/** The application class. */\n"
      "public class ThreadLocalApplication extends Application {\n"
      "    public void init() { \n"
      "        Window main = new Window(\"Hello window\"); \n"
      "        setMainWindow(main);\n"
      "        \n"
      "        // Create the application data instance\n"
      "        AppData sessionData = new AppData(this);\n"
      "        \n"
      "        // Register it as a listener in the application context\n"
      "        getContext().addTransactionListener(sessionData);\n"
      "        \n"
      "        // Initialize the session-global data\n"
      "        AppData.initLocale(getLocale(),\n"
      "                           MyAppCaptions.class.getName());\n"
      "        \n"
      "        // Also set the user data model\n"
      "        AppData.setUserData(\"Billy\");\n"
      "        \n"
      "        // Now, we do not pass this application object\n"
      "        // in the constructor, so it couldn't access the\n"
      "        // app data otherwise.\n"
      "        main.addComponent(new MyComponent());\n"
      "    }\n"
      "}]]>"
msgstr ""

