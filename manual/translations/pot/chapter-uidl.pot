# SOME DESCRIPTIVE TITLE.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"Report-Msgid-Bugs-To: http://bugs.kde.org\n"
"POT-Creation-Date: 2012-04-02 14:31+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <kde-i18n-doc@kde.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. Tag: title
#: chapter-uidl.xml:4
#, no-c-format
msgid "User Interface Definition Language (UIDL)"
msgstr ""

#. Tag: primary
#: chapter-uidl.xml:7
#, no-c-format
msgid "UIDL"
msgstr ""

#. Tag: para
#: chapter-uidl.xml:10
#, no-c-format
msgid "User Interface Definition Language (UIDL) is a language for serializing user interface contents and changes in responses from web server to a browser. The idea is that the server-side components \"paint\" themselves to the screen (a web page) with the language. The UIDL messages are parsed in the browser and translated to GWT widgets."
msgstr ""

#. Tag: para
#: chapter-uidl.xml:18
#, no-c-format
msgid "The UIDL is used through both server-side and client-side APIs. The server-side API consists of the <classname>PaintTarget</classname> interface, described in <xref linkend=\"uidl.painting\"/>. The client-side interface depends on the implementation of the client-side engine. In Vaadin Release 5, the client-side engine uses the Google Web Toolkit framework. Painting the user interface with a GWT widget is described in <xref linkend=\"gwt.widgets\"/>."
msgstr ""

#. Tag: primary
#: chapter-uidl.xml:26
#, no-c-format
msgid "Google Web Toolkit"
msgstr ""

#. Tag: para
#: chapter-uidl.xml:29
#, no-c-format
msgid "UIDL supports painting either the entire user interface or just fragments of it. When the application is started by opening the page in a web browser, the entire user interface is painted. If a user interface component changes, only the changes are painted."
msgstr ""

#. Tag: para
#: chapter-uidl.xml:36
#, no-c-format
msgid "Since Vaadin Release 5, the UIDL communications are currently done using JSON (JavaScript Object Notation), which is a lightweight data interchange format that is especially efficient for interfacing with JavaScript-based AJAX code in the browser. The use of JSON as the interchange format is largely transparent; IT Mill Toolkit version 4 (predecessor of Vaadin released in 2006) the older versions used an XML-based UIDL representation with the same API. Nevertheless, the UIDL API uses XML concepts such as attributes and elements. Below, we show examples of a <classname>Button</classname> component in both XML and JSON notation."
msgstr ""

#. Tag: para
#: chapter-uidl.xml:47
#, no-c-format
msgid "With XML notation:"
msgstr ""

#. Tag: programlisting
#: chapter-uidl.xml:51
#, no-c-format
msgid ""
"<![CDATA[<button id=\"PID2\" immediate=\"true\"\n"
"        caption=\"My Button\" focusid=\"1\">\n"
"    <boolean id=\"v1\" name=\"state\"\n"
"             value=\"false\"></boolean>\n"
"</button>]]>"
msgstr ""

#. Tag: para
#: chapter-uidl.xml:53
#, no-c-format
msgid "With JSON notation:"
msgstr ""

#. Tag: programlisting
#: chapter-uidl.xml:57
#, no-c-format
msgid ""
"<![CDATA[[\"button\",\n"
" {\"id\": \"PID2\",\n"
"  \"immediate\":true,\n"
"  \"caption\": \"My Button\",\n"
"  \"focusid\":1,\n"
"  \"v\":{\"state\":false}\n"
" }\n"
"]]]>"
msgstr ""

#. Tag: para
#: chapter-uidl.xml:59
#, no-c-format
msgid "Components are identified with a <emphasis>PID</emphasis> or <emphasis>paintable identifier</emphasis> in the <literal>id</literal> attribute. Each component instance has its individual PID, which is usually an automatically generated string, but can be set manually with <methodname>setDebugId()</methodname> method."
msgstr ""

#. Tag: para
#: chapter-uidl.xml:67
#, no-c-format
msgid "gives further details on JSON. For more information about handling UIDL messages in the client-side components, see <xref linkend=\"gwt\"/>."
msgstr ""

#. Tag: para
#: chapter-uidl.xml:73
#, no-c-format
msgid "You can track and debug UIDL communications easily with the Firebug extension for Mozilla Firefox, as illustrated in <xref linkend=\"uidl.json\"/> below."
msgstr ""

#. Tag: title
#: chapter-uidl.xml:81
#, no-c-format
msgid "API for Painting Components"
msgstr ""

#. Tag: para
#: chapter-uidl.xml:83
#, no-c-format
msgid "Serialization or \"painting\" of user interface components from server to the client-side engine running in the browser is done through the <classname>PaintTarget</classname> interface. In Vaadin Release 5, the only implementation of the interface is the <classname>JsonPaintTarget</classname>, detailed in <xref linkend=\"uidl.json\"/> below."
msgstr ""

#. Tag: para
#: chapter-uidl.xml:92
#, no-c-format
msgid "The abstract <classname>AbstractComponent</classname> class allows easy painting of user interface components by managing many basic tasks, such as attributes common for all components. Components that inherit the class need to implement the abstract <methodname>getTag()</methodname> method that returns the UIDL tag of the component. For example, the implementation for the <classname>Button</classname> component is as follows:"
msgstr ""

#. Tag: programlisting
#: chapter-uidl.xml:101
#, no-c-format
msgid ""
"<![CDATA[public String getTag() {\n"
"    return \"button\";\n"
"}]]>"
msgstr ""

#. Tag: para
#: chapter-uidl.xml:103
#, no-c-format
msgid "<classname>AbstractComponent</classname> implements the <methodname>paint()</methodname> method of the <classname>Paintable</classname> interface to handle basic tasks in painting, and provides <methodname>paintContent()</methodname> method for components to paint their special contents. The method gets the <classname>PaintTarget</classname> interface as its parameter. The method should call the default implementation to paint any common attributes."
msgstr ""

#. Tag: programlisting
#: chapter-uidl.xml:113
#, no-c-format
msgid ""
"<?pocket-size 70% ?><![CDATA[/* Paint (serialize) the component for the client. */\n"
"public void paintContent(PaintTarget target)\n"
"                throws PaintException {\n"
"    // Superclass writes any common attributes in\n"
"    // the paint target.\n"
"    super.paintContent(target);\n"
"    \n"
"    // Set any values as variables of the paint target.\n"
"    target.addVariable(this, \"colorname\", getColor());\n"
"}]]>"
msgstr ""

#. Tag: para
#: chapter-uidl.xml:115
#, no-c-format
msgid "Serialized data can be attributes or variables, serialized with the <methodname>addAttribute()</methodname> and <methodname>addVariable()</methodname> methods, respectively. You must always serialize the attributes first and the variables only after that."
msgstr ""

#. Tag: para
#: chapter-uidl.xml:122
#, no-c-format
msgid "The API provides a number of variations of the methods for serializing different basic data types. The methods support the native Java data types and strings of the <classname>String</classname> class. <methodname>addVariable()</methodname> also supports vectors of strings."
msgstr ""

#. Tag: para
#: chapter-uidl.xml:130
#, no-c-format
msgid "Contained components are serialized by calling the <methodname>paint()</methodname> method of a sub-component, which will call the <methodname>paintContent()</methodname> for the sub-component, allowing the serialization of user interfaces recursively. The <methodname>paint()</methodname> method is declared in the server-side <classname>Paintable</classname> interface and implemented in the abstract base classes, <classname>AbstractComponent</classname> and <classname>AbstractComponentContainer</classname> (for layouts)."
msgstr ""

#. Tag: para
#: chapter-uidl.xml:141
#, no-c-format
msgid "Layout components have to serialize the essential attributes and variables they need, but not the contained components. The <classname>AbstractComponentContainer</classname> and <classname>AbstractLayout</classname> baseclasses manage the recursive painting of all the contained components in layouts."
msgstr ""

#. Tag: para
#: chapter-uidl.xml:149
#, no-c-format
msgid "The <classname>AbstractField</classname> provides an even higher-level base class for user interface components. The field components hold a value or a <emphasis>property</emphasis>, and implement the <classname>Property</classname> interface to access this property. For example the property of a <classname>Button</classname> is a <classname>Boolean</classname> value."
msgstr ""

#. Tag: programlisting
#: chapter-uidl.xml:158
#, no-c-format
msgid ""
"<?pocket-size 75% ?><![CDATA[public void paintContent(PaintTarget target)\n"
"                 throws PaintException {\n"
"    super.paintContent(target);\n"
"\n"
"    // Serialize the switchMode as an attribute\n"
"    if (isSwitchMode())\n"
"        target.addAttribute(\"type\", \"switch\");\n"
"\n"
"    // Get the state of the Button safely\n"
"    boolean state;\n"
"    try {\n"
"        state = ((Boolean) getValue()).booleanValue();\n"
"    } catch (NullPointerException e) {\n"
"        state = false;\n"
"    }\n"
"    target.addVariable(this, \"state\", state);\n"
"\n"
"}]]>"
msgstr ""

#. Tag: title
#: chapter-uidl.xml:163
#, no-c-format
msgid "JSON Rendering"
msgstr ""

#. Tag: para
#: chapter-uidl.xml:165
#, no-c-format
msgid "Vaadin 5 uses JSON, a lightweight data-interchange format, to communicate UI rendering with the browser, because it is very fast to parse compared to XML. JSON messages are essentially JavaScript statements that can be directly evaluated by the browser. The client-side engine of Vaadin parses and evaluates the UIDL messages with the JSON library that comes with the Google Web Toolkit."
msgstr ""

#. Tag: para
#: chapter-uidl.xml:174
#, no-c-format
msgid "gave a general introduction to JSON as part of the architecture of Vaadin. In this section, we look into the technical details of the format. The technical details of the JSON messages are useful mainly for debugging purposes, for example using the Firebug plugin for Mozilla Firefox."
msgstr ""

#. Tag: para
#: chapter-uidl.xml:182
#, no-c-format
msgid "To view a UIDL message, open the Firebug panel in Firefox, select <guilabel>Net</guilabel> tab, select a \"<literal>POST UIDL</literal>\" request, open the <guilabel>Response</guilabel> tab, and click <guibutton>Load Response</guibutton>. This displays the entire UIDL message, as shown in <xref linkend=\"figure.uidl.json.firebug\"/> below."
msgstr ""

#. Tag: title
#: chapter-uidl.xml:191
#, no-c-format
msgid "Debugging UIDL Messages with Firebug"
msgstr ""

#. Tag: para
#: chapter-uidl.xml:202
#, no-c-format
msgid "JSON messages are represented as nested lists and associative arrays (objects with named properties) in JavaScript syntax. At the top level, we can find an associative array with the following fields:"
msgstr ""

#. Tag: term
#: chapter-uidl.xml:210
#, no-c-format
msgid "changes"
msgstr ""

#. Tag: para
#: chapter-uidl.xml:212
#, no-c-format
msgid "Changes to the UI caused by the request."
msgstr ""

#. Tag: term
#: chapter-uidl.xml:216
#, no-c-format
msgid "meta"
msgstr ""

#. Tag: para
#: chapter-uidl.xml:218
#, no-c-format
msgid "Meta-information regarding the response and the application state."
msgstr ""

#. Tag: term
#: chapter-uidl.xml:223
#, no-c-format
msgid "resources"
msgstr ""

#. Tag: para
#: chapter-uidl.xml:225
#, no-c-format
msgid "Information about application resources."
msgstr ""

#. Tag: term
#: chapter-uidl.xml:229
#, no-c-format
msgid "locales"
msgstr ""

#. Tag: para
#: chapter-uidl.xml:231
#, no-c-format
msgid "Locale-specific data for locale-dependent components, such as names of months and weekdays."
msgstr ""

#. Tag: para
#: chapter-uidl.xml:237
#, no-c-format
msgid "The \"<literal>changes</literal>\" field contains the actual UI changes as a list of components. Components that can contain other components are represented in a recursive list structure."
msgstr ""

#. Tag: para
#: chapter-uidl.xml:243
#, no-c-format
msgid "A component is represented as a list that first contains the UIDL tag of the component, which identifies its class, followed by data fields. The basic representation of component data as attributes and variables is defined in the base classes of the framework. Attributes are represented as an associative array and variables as a separate associative array inside the special \"<literal>v</literal>\" attribute. For example, a <classname>Button</classname> component is communicated with a JSON representation such as the following:"
msgstr ""

#. Tag: programlisting
#: chapter-uidl.xml:253
#, no-c-format
msgid ""
"<![CDATA[[\"button\",\n"
" {\"id\": \"PID5\",\n"
"  \"immediate\": true,\n"
"  \"caption\": \"7\",\n"
"  \"v\":{\"state\":false}}\n"
"] ]]>"
msgstr ""

#. Tag: para
#: chapter-uidl.xml:255
#, no-c-format
msgid "A component can give its data also in additional fields in the list instead of the attributes or variables, as is done for the <classname>Label</classname> component:"
msgstr ""

#. Tag: programlisting
#: chapter-uidl.xml:261
#, no-c-format
msgid ""
"<![CDATA[[\"label\",\n"
" {\"id\": \"PID4\",\n"
"  \"width\": \"100.0%\"},\n"
" \"Some text here\"] ]]>"
msgstr ""

#. Tag: para
#: chapter-uidl.xml:263
#, no-c-format
msgid "The meta-information field can contain certain types of information, which are not displayed in the UI, but used by the client-side engine. The <literal>repaintAll</literal> parameter tells that the changes include the entire window contents, not just partial changes. Other data includes redirection details for expired sessions."
msgstr ""
