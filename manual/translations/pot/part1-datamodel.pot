# SOME DESCRIPTIVE TITLE.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"Report-Msgid-Bugs-To: http://bugs.kde.org\n"
"POT-Creation-Date: 2011-11-03 16:11+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <kde-i18n-doc@kde.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. Tag: title
#: part1-datamodel.xml:4
#, no-c-format
msgid "Binding Components to Data"
msgstr ""

#. Tag: primary
#: part1-datamodel.xml:7
#, no-c-format
msgid "<primary>Vaadin Data Model</primary>"
msgstr ""

#. Tag: para
#: part1-datamodel.xml:10
#, no-c-format
msgid "This chapter describes the Vaadin Data Model and shows how you can use it to bind components directly to data sources, such as database queries."
msgstr ""

#. Tag: title
#: part1-datamodel.xml:16
#, no-c-format
msgid "Overview"
msgstr ""

#. Tag: para
#: part1-datamodel.xml:18
#, no-c-format
msgid "The Vaadin Data Model is one of the core concepts of the library. To allow the view (user interface components) to access the data model of an application directly, we have introduced a standard data interface."
msgstr ""

#. Tag: para
#: part1-datamodel.xml:24
#, no-c-format
msgid "The model allows binding user interface components directly to the data that they display and possibly allow to edit. There are three nested levels of hierarchy in the data model: <emphasis>property</emphasis>, <emphasis>item</emphasis>, and <emphasis>container</emphasis>. Using a spreadsheet application as an analogy, these would correspond to a cell, a row, and a table, respectively."
msgstr ""

#. Tag: title
#: part1-datamodel.xml:34
#, no-c-format
msgid "<title>Vaadin Data Model</title>"
msgstr ""

#. Tag: para
#: part1-datamodel.xml:45
#, no-c-format
msgid "The Data Model is realized as a set of interfaces in the <classname>com.vaadin.data</classname> package. The package contains the <classname>Property</classname>, <classname>Item</classname>, and <classname>Container</classname> interfaces, along with a number of more specialized interfaces and classes."
msgstr ""

#. Tag: para
#: part1-datamodel.xml:53
#, no-c-format
msgid "Notice that the Data Model does not define data representation, but only interfaces. This leaves the representation fully to the implementation of the containers. The representation can be almost anything, such as a plain old Java object (POJO) structure, a filesystem, or a database query."
msgstr ""

#. Tag: para
#: part1-datamodel.xml:60
#, no-c-format
msgid "The Data Model is used heavily in the core user interface components of Vaadin, especially the field components, that is, components that implement the <classname>Field</classname> interface or more typically extend <classname>AbstractField</classname>, which defines many common features. A key feature of all the built-in field components is that they can either maintain their data by themselves or be bound to an external data source. The value of a field is always available through the <classname>Property</classname> interface. As more than one component can be bound to the same data source, it is easy to implement various viewer-editor patterns."
msgstr ""

#. Tag: para
#: part1-datamodel.xml:73
#, no-c-format
msgid "The relationships of the various interfaces are shown in <xref linkend=\"figure.datamodel.overview.relationships\"/>; the value change event and listener interfaces are shown only for the <classname>Property</classname> interface, while the notifier interfaces are omitted altogether."
msgstr ""

#. Tag: title
#: part1-datamodel.xml:81
#, no-c-format
msgid "Interface Relationships in Vaadin Data Model"
msgstr ""

#. Tag: para
#: part1-datamodel.xml:92
#, no-c-format
msgid "The Data Model has many important and useful features, such as support for change notification. Especially containers have many helper interfaces, including ones that allow indexing, ordering, sorting, and filtering the data. Also <classname>Field</classname> components provide a number of features involving the data model, such as buffering, validation, and lazy loading."
msgstr ""

#. Tag: para
#: part1-datamodel.xml:101
#, no-c-format
msgid "Vaadin provides a number of built-in implementations of the data model interfaces. The built-in implementations are used as the default data models in many field components."
msgstr ""

#. Tag: para
#: part1-datamodel.xml:107
#, no-c-format
msgid "In addition to the built-in implementations, many data model implementations, such as containers, are available as add-ons, either from the Vaadin Directory or from independent sources. Both commercial and free implementations exist. The SQLContainer, descibed in <xref linkend=\"addons.sqlcontainer\"/>, is the most often used commercial container add-on. The installation of add-ons is described in <xref linkend=\"addons\"/>. Notice that unlike with most regular add-on components, you do not need to compile a widget set for add-ons that include just data model implementations."
msgstr ""

#. Tag: title
#: part1-datamodel.xml:120
#, no-c-format
msgid "Properties"
msgstr ""

#. Tag: para
#: part1-datamodel.xml:122
#, no-c-format
msgid "The <classname>Property</classname> interface is the base of the Vaadin Data Model. It provides a standardized API for a single data object that can be read (get) and written (set). A property is always typed, but can optionally support data type conversions. The type of a property can be any Java class. Optionally, properties can provide value change events for following their changes."
msgstr ""

#. Tag: para
#: part1-datamodel.xml:131
#, no-c-format
msgid "The value of a property is written with <methodname>setValue()</methodname> and read with <methodname>getValue()</methodname>. The return value is a generic <classname>Object</classname> reference, so you need to cast it to the proper type. The type can be acquired with <methodname>getType()</methodname>."
msgstr ""

#. Tag: programlisting
#: part1-datamodel.xml:138
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[final TextField tf = new TextField(\"Name\");\n"
      "        \n"
      "// Set the value\n"
      "tf.setValue(\"The text field value\");\n"
      "        \n"
      "// When the field value is edited by the user\n"
      "tf.addListener(new Property.ValueChangeListener() {\n"
      "    public void valueChange(ValueChangeEvent event) {\n"
      "        // Get the value and cast it to proper type\n"
      "        String value = (String) tf.getValue();\n"
      "        \n"
      "        // Do something with it\n"
      "        layout.addComponent(new Label(value));\n"
      "    }\n"
      "});]]>"
msgstr ""

#. Tag: para
#: part1-datamodel.xml:140
#, no-c-format
msgid "Changes in the property value usually emit a <classname>ValueChangeEvent</classname>, which can be handled with a <classname>ValueChangeListener</classname>. The event object provides reference to the property with <methodname>getProperty()</methodname>."
msgstr ""

#. Tag: para
#: part1-datamodel.xml:148
#, no-c-format
msgid "Properties are in themselves unnamed. They are collected in <emphasis>items</emphasis>, which associate the properties with names: the <emphasis>Property Identifiers</emphasis> or <emphasis>PID</emphasis>s. Items can be further contained in containers and are identified with <emphasis>Item Identifiers</emphasis> or <emphasis>IID</emphasis>s. In the spreadsheet analogy, <emphasis>Property Identifiers</emphasis> would correspond to column names and <emphasis>Item Identifiers</emphasis> to row names. The identifiers can be arbitrary objects, but must implement the <methodname>equals(Object)</methodname> and <methodname>hashCode()</methodname> methods so that they can be used in any standard Java <classname>Collection</classname>."
msgstr ""

#. Tag: para
#: part1-datamodel.xml:162
#, no-c-format
msgid "The <classname>Property</classname> interface can be utilized either by implementing the interface or by using some of the built-in property implementations. Vaadin includes a <classname>Property</classname> interface implementation for arbitrary function pairs and bean properties, with the <classname>MethodProperty</classname> class, and for simple object properties, with the <classname>ObjectProperty</classname> class, as described later."
msgstr ""

#. Tag: para
#: part1-datamodel.xml:171
#, no-c-format
msgid "In addition to the simple components, many selection components such as <classname>Select</classname>, <classname>Table</classname>, and <classname>Tree</classname> provide their current selection through the <classname>Property</classname> property. In single selection mode, the property is a single item identifier, while in multiple selection mode it is a set of item identifiers. Please see the documentation of the selection components for further details."
msgstr ""

#. Tag: para
#: part1-datamodel.xml:181
#, no-c-format
msgid "Components that can be bound to a property have an internal default data source object, typically a <classname>ObjectProperty</classname>, which is described later. As all such components are viewers or editors, also described later, so you can rebind a component to any data source with <methodname>setPropertyDataSource()</methodname>."
msgstr ""

#. Tag: title
#: part1-datamodel.xml:190
#, no-c-format
msgid "Property Viewers and Editors"
msgstr ""

#. Tag: para
#: part1-datamodel.xml:192
#, no-c-format
msgid "The most important function of the <classname>Property</classname> as well as of the other data model interfaces is to connect classes implementing the interface directly to editor and viewer classes. This means connecting a data source (model) to a user interface component (views) to allow editing or viewing the data model."
msgstr ""

#. Tag: para
#: part1-datamodel.xml:200
#, no-c-format
msgid "A property can be bound to a component implementing the <classname>Viewer</classname> interface with <methodname>setPropertyDataSource()</methodname>."
msgstr ""

#. Tag: programlisting
#: part1-datamodel.xml:206
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[// Have a data model\n"
      "ObjectProperty property =\n"
      "    new ObjectProperty(\"Hello\", String.class);\n"
      "        \n"
      "// Have a component that implements Viewer\n"
      "Label viewer = new Label();\n"
      "        \n"
      "// Bind it to the data\n"
      "viewer.setPropertyDataSource(property);]]>"
msgstr ""

#. Tag: para
#: part1-datamodel.xml:208
#, no-c-format
msgid "You can use the same method in the <classname>Editor</classname> interface to bind a component that allows editing a particular property type to a property."
msgstr ""

#. Tag: programlisting
#: part1-datamodel.xml:214
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[// Have a data model\n"
      "ObjectProperty property =\n"
      "    new ObjectProperty(\"Hello\", String.class);\n"
      "        \n"
      "// Have a component that implements Viewer\n"
      "TextField editor = new TextField(\"Edit Greeting\");\n"
      "        \n"
      "// Bind it to the data\n"
      "editor.setPropertyDataSource(property);\n"
      "]]>"
msgstr ""

#. Tag: para
#: part1-datamodel.xml:216
#, no-c-format
msgid "As all field components implement the <classname>Property</classname> interface, you can bind any component implementing the <classname>Viewer</classname> interface to any field, assuming that the viewer is able the view the object type of the field. Continuing from the above example, we can bind a <classname>Label</classname> to the <classname>TextField</classname> value:"
msgstr ""

#. Tag: programlisting
#: part1-datamodel.xml:225
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[Label viewer = new Label();\n"
      "viewer.setPropertyDataSource(editor);\n"
      "\n"
      "// The value shown in the viewer is updated immediately\n"
      "// after editing the value in the editor (once it\n"
      "// loses the focus)\n"
      "editor.setImmediate(true);]]>"
msgstr ""

#. Tag: title
#: part1-datamodel.xml:230
#, no-c-format
msgid "<classname>ObjectProperty</classname> Implementation"
msgstr ""

#. Tag: para
#: part1-datamodel.xml:232
#, no-c-format
msgid "The <classname>ObjectProperty</classname> class is a simple implementation of the <classname>Property</classname> interface that allows storing an arbitrary Java object."
msgstr ""

#. Tag: programlisting
#: part1-datamodel.xml:238
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[// Have a component that implements Viewer interface\n"
      "final TextField tf = new TextField(\"Name\");\n"
      "        \n"
      "// Have a data model with some data\n"
      "String myObject = \"Hello\";\n"
      "        \n"
      "// Wrap it in an ObjectProperty\n"
      "ObjectProperty property =\n"
      "    new ObjectProperty(myObject, String.class);\n"
      "        \n"
      "// Bind the property to the component\n"
      "tf.setPropertyDataSource(property);]]>"
msgstr ""

#. Tag: title
#: part1-datamodel.xml:243
#, no-c-format
msgid "Implementing the <classname>Property</classname> Interface"
msgstr ""

#. Tag: para
#: part1-datamodel.xml:245
#, no-c-format
msgid "Implementation of the <classname>Property</classname> interface requires defining setters and getters for the value and the <emphasis>read-only</emphasis> mode. Only a getter is needed for the property type, as the type is often fixed in property implementations."
msgstr ""

#. Tag: para
#: part1-datamodel.xml:252
#, no-c-format
msgid "The following example shows a simple implementation of the <classname>Property</classname> interface:"
msgstr ""

#. Tag: programlisting
#: part1-datamodel.xml:257
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[class MyProperty implements Property {\n"
      "    Integer data     = 0;\n"
      "    boolean readOnly = false;\n"
      "    \n"
      "    // Return the data type of the model\n"
      "    public Class<?> getType() {\n"
      "        return Integer.class;\n"
      "    }\n"
      "\n"
      "    public Object getValue() {\n"
      "        return data;\n"
      "    }\n"
      "    \n"
      "    // Override the default implementation in Object\n"
      "    @Override\n"
      "    public String toString() {\n"
      "        return Integer.toHexString(data);\n"
      "    }\n"
      "\n"
      "    public boolean isReadOnly() {\n"
      "        return readOnly;\n"
      "    }\n"
      "\n"
      "    public void setReadOnly(boolean newStatus) {\n"
      "        readOnly = newStatus;\n"
      "    }\n"
      "\n"
      "    public void setValue(Object newValue)\n"
      "            throws ReadOnlyException, ConversionException {\n"
      "        if (readOnly)\n"
      "            throw new ReadOnlyException();\n"
      "            \n"
      "        // Already the same type as the internal representation\n"
      "        if (newValue instanceof Integer)\n"
      "            data = (Integer) newValue;\n"
      "        \n"
      "        // Conversion from a string is required\n"
      "        else if (newValue instanceof String)\n"
      "            try {\n"
      "                data = Integer.parseInt((String) newValue, 16);\n"
      "            } catch (NumberFormatException e) {\n"
      "                throw new ConversionException();\n"
      "            }\n"
      "        else\n"
      "             // Don't know how to convert any other types\n"
      "            throw new ConversionException();\n"
      "\n"
      "        // Reverse decode the hexadecimal value\n"
      "    }\n"
      "}\n"
      "        \n"
      "// Instantiate the property and set its data\n"
      "MyProperty property = new MyProperty();\n"
      "property.setValue(42);\n"
      "        \n"
      "// Bind it to a component\n"
      "final TextField tf = new TextField(\"Name\", property);]]>"
msgstr ""

#. Tag: para
#: part1-datamodel.xml:259
#, no-c-format
msgid "The components get the displayed value by the <methodname>toString()</methodname> method, so it is necessary to override it. To allow editing the value, value returned in the <methodname>toString()</methodname> must be in a format that is accepted by the <methodname>setValue()</methodname> method, unless the property is read-only. The <methodname>toString()</methodname> can perform any type conversion necessary to make the internal type a string, and the <methodname>setValue()</methodname> must be able to make a reverse conversion."
msgstr ""

#. Tag: para
#: part1-datamodel.xml:271
#, no-c-format
msgid "The implementation example does not notify about changes in the property value or in the read-only mode. You should normally also implement at least the <classname>Property.ValueChangeNotifier</classname> and <classname>Property.ReadOnlyStatusChangeNotifier</classname>. See the <classname>ObjectProperty</classname> class for an example of the implementation."
msgstr ""

#. Tag: title
#: part1-datamodel.xml:284
#, no-c-format
msgid "Holding properties in Items"
msgstr ""

#. Tag: para
#: part1-datamodel.xml:286
#, no-c-format
msgid "The <classname>Item</classname> interface provides access to a set of named properties. Each property is identified by a <emphasis>property identifier</emphasis> (PID) and a reference to such a property can be queried from an <classname>Item</classname> with <methodname>getItemProperty()</methodname> using the identifier."
msgstr ""

#. Tag: para
#: part1-datamodel.xml:294
#, no-c-format
msgid "Examples on the use of items include rows in a <classname>Table</classname>, with the properties corresponding to table columns, nodes in a <classname>Tree</classname>, and the the data bound to a <classname>Form</classname>, with item's properties bound to individual form fields."
msgstr ""

#. Tag: para
#: part1-datamodel.xml:302
#, no-c-format
msgid "Items are generally equivalent to objects in the object-oriented model, but with the exception that they are configurable and provide an event handling mechanism. The simplest way to utilize <classname>Item</classname> interface is to use existing implementations. Provided utility classes include a configurable property set (<classname>PropertysetItem</classname>) and a bean-to-item adapter (<classname>BeanItem</classname>). Also, a <classname>Form</classname> implements the interface and can therefore be used directly as an item."
msgstr ""

#. Tag: para
#: part1-datamodel.xml:313
#, no-c-format
msgid "In addition to being used indirectly by many user interface components, items provide the basic data model underlying the <classname>Form</classname> component. In simple cases, forms can even be generated automatically from items. The properties of the item correspond to the fields of the form."
msgstr ""

#. Tag: para
#: part1-datamodel.xml:320
#, no-c-format
msgid "The <classname>Item</classname> interface defines inner interfaces for maintaining the item property set and listening changes made to it. <classname>PropertySetChangeEvent</classname> events can be emitted by a class implementing the <classname>PropertySetChangeNotifier</classname> interface. They can be received through the <classname>PropertySetChangeListener</classname> interface."
msgstr ""

#. Tag: title
#: part1-datamodel.xml:330
#, no-c-format
msgid "The <classname>PropertysetItem</classname> Implementation"
msgstr ""

#. Tag: para
#: part1-datamodel.xml:332
#, no-c-format
msgid "The <classname>PropertysetItem</classname> is a generic implementation of the <classname>Item</classname> interface that allows storing properties. The properties are added with <methodname>addItemProperty()</methodname>, which takes a name and the property as parameters."
msgstr ""

#. Tag: para
#: part1-datamodel.xml:340
#, no-c-format
msgid "The following example demonstrates a typical case of collecting <classname>ObjectProperty</classname> properties in an item:"
msgstr ""

#. Tag: programlisting
#: part1-datamodel.xml:345
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[PropertysetItem item = new PropertysetItem();\n"
      "item.addItemProperty(\"name\", new ObjectProperty(\"Zaphod\"));\n"
      "item.addItemProperty(\"age\", new ObjectProperty(42));\n"
      "        \n"
      "// Bind it to a component\n"
      "Form form = new Form();\n"
      "form.setItemDataSource(item);]]>"
msgstr ""

#. Tag: title
#: part1-datamodel.xml:350
#, no-c-format
msgid "Wrapping a Bean in a <classname>BeanItem</classname>"
msgstr ""

#. Tag: para
#: part1-datamodel.xml:352
#, no-c-format
msgid "The <classname>BeanItem</classname> implementation of the <classname>Item</classname> interface is a wrapper for Java Bean objects. In fact, only the setters and getters are required while serialization and other bean features are not, so you can wrap almost any POJOs with minimal requirements."
msgstr ""

#. Tag: programlisting
#: part1-datamodel.xml:360
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[// Here is a bean (or more exactly a POJO)\n"
      "class Person {\n"
      "    String name;\n"
      "    int    age;\n"
      "    \n"
      "    public String getName() {\n"
      "        return name;\n"
      "    }\n"
      "    \n"
      "    public void setName(String name) {\n"
      "        this.name = name;\n"
      "    }\n"
      "    \n"
      "    public Integer getAge() {\n"
      "        return age;\n"
      "    }\n"
      "    \n"
      "    public void setAge(Integer age) {\n"
      "        this.age = age.intValue();\n"
      "    }\n"
      "}\n"
      "\n"
      "// Create an instance of the bean\n"
      "Person bean = new Person();\n"
      "        \n"
      "// Wrap it in a BeanItem\n"
      "BeanItem<Person> item = new BeanItem<Person>(bean);\n"
      "        \n"
      "// Bind it to a component\n"
      "Form form = new Form();\n"
      "form.setItemDataSource(item);]]>"
msgstr ""

#. Tag: para
#: part1-datamodel.xml:362
#, no-c-format
msgid "You can use the <methodname>getBean()</methodname> method to get a reference to the underlying bean."
msgstr ""

#. Tag: title
#: part1-datamodel.xml:368
#, no-c-format
msgid "Nested Beans"
msgstr ""

#. Tag: para
#: part1-datamodel.xml:370
#, no-c-format
msgid "You may often have composite classes where one class \"has a\" another class. For example, consider the following <classname>Planet</classname> class which \"has a\" discoverer:"
msgstr ""

#. Tag: programlisting
#: part1-datamodel.xml:376
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[// Here is a bean with two nested beans\n"
      "public class Planet implements Serializable {\n"
      "    String name;\n"
      "    Person discoverer;\n"
      "    \n"
      "    public Planet(String name, Person discoverer) {\n"
      "        this.name = name;\n"
      "        this.discoverer = discoverer;\n"
      "    }\n"
      "\n"
      "    public String getName() {\n"
      "        return name;\n"
      "    }\n"
      "    public void setName(String name) {\n"
      "        this.name = name;\n"
      "    }\n"
      "\n"
      "    public Person getDiscoverer() {\n"
      "        return discoverer;\n"
      "    }\n"
      "    public void setDiscoverer(Person discoverer) {\n"
      "        this.discoverer = discoverer;\n"
      "    }\n"
      "}\n"
      "\n"
      "...\n"
      "// Create an instance of the bean\n"
      "Planet planet = new Planet(\"Uranus\",\n"
      "                    new Person(\"William Herschel\", 1738));]]>"
msgstr ""

#. Tag: para
#: part1-datamodel.xml:378
#, no-c-format
msgid "When shown in a <classname>Form</classname>, for example, you would want to list the properties of the nested bean along the properties of the composite bean. You can do that by binding the properties of the nested bean individually with a <classname>MethodProperty</classname> or <classname>NestedMethodProperty</classname>. You should usually hide the nested bean from binding as a property by listing only the bound properties in the constructor."
msgstr ""

#. Tag: programlisting
#: part1-datamodel.xml:388
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[// Wrap it in a BeanItem and hide the nested bean property\n"
      "BeanItem<Planet> item = new BeanItem<Planet>(planet,\n"
      "        new String[]{\"name\"});\n"
      "    \n"
      "// Bind the nested properties.\n"
      "// Use NestedMethodProperty to bind using dot notation.\n"
      "item.addItemProperty(\"discoverername\",\n"
      "    new NestedMethodProperty(planet, \"discoverer.name\"));\n"
      "    \n"
      "// The other way is to use regular MethodProperty.\n"
      "item.addItemProperty(\"discovererborn\",\n"
      "     new MethodProperty<Person>(planet.getDiscoverer(),\n"
      "                                \"born\"));]]>"
msgstr ""

#. Tag: para
#: part1-datamodel.xml:390
#, no-c-format
msgid "The difference is that <classname>NestedMethodProperty</classname> does not access the nested bean immediately but only when accessing the property values, while when using <classname>MethodProperty</classname> the nested bean is accessed when creating the method property. The difference is only significant if the nested bean can be null or be changed later."
msgstr ""

#. Tag: para
#: part1-datamodel.xml:399
#, no-c-format
msgid "You can use such a bean item for example in a <classname>Form</classname> as follows:"
msgstr ""

#. Tag: programlisting
#: part1-datamodel.xml:404
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[// Bind it to a component\n"
      "Form form = new Form();\n"
      "form.setItemDataSource(item);\n"
      "    \n"
      "// Nicer captions\n"
      "form.getField(\"discoverername\").setCaption(\"Discoverer\");\n"
      "form.getField(\"discovererborn\").setCaption(\"Born\");]]>"
msgstr ""

#. Tag: title
#: part1-datamodel.xml:410
#, no-c-format
msgid "A <classname>Form</classname> with Nested Bean Properties"
msgstr ""

#. Tag: para
#: part1-datamodel.xml:419
#, no-c-format
msgid "The <classname>BeanContainer</classname> and <classname>BeanItemContainer</classname> allow easy definition of nested bean properties with <methodname>addNestedContainerProperty()</methodname>, as described in <xref linkend=\"datamodel.container.beancontainer.nestedproperties\"/>."
msgstr ""

#. Tag: title
#: part1-datamodel.xml:431
#, no-c-format
msgid "Collecting Items in Containers"
msgstr ""

#. Tag: classname
#: part1-datamodel.xml:434
#, no-c-format
msgid "<classname>Container</classname>"
msgstr ""

#. Tag: para
#: part1-datamodel.xml:437
#, no-c-format
msgid "<classname>Container</classname> is the highest-level of the data model interfaces supported by Vaadin. It provides a very flexible way of managing a set of items that share common properties. Contained items are identified by an <emphasis>item identifier</emphasis> or <emphasis>IID</emphasis>."
msgstr ""

#. Tag: para
#: part1-datamodel.xml:444
#, no-c-format
msgid "Items can be added to a container with the <methodname>addItem()</methodname> method. Notice that the actual item is not passed as a parameter to the method, only the item ID, as the interface assumes that the container implementation knows how to create the item. The parameterless version of the method uses an automatically generated item ID. Implementations can provide methods to add externally created items, or they can assume that the item ID is also the item itself."
msgstr ""

#. Tag: para
#: part1-datamodel.xml:454
#, no-c-format
msgid "Properties can be requested from container by first requesting an item with <methodname>getItem()</methodname> and then getting the properties from the item with <methodname>getItemProperty()</methodname>. You can also get a property directly by the item and property ids with <methodname>getContainerProperty()</methodname>."
msgstr ""

#. Tag: para
#: part1-datamodel.xml:462
#, no-c-format
msgid "The <classname>Container</classname> interface was designed with flexibility and efficiency in mind. It contains inner interfaces that containers can optionally implement for ordering the items sequentially, indexing the items, and accessing them hierarchically. Such ordering models provide the basis for the <classname>Table</classname>, <classname>Tree</classname>, and <classname>Select</classname> components. As with other data model interfaces, the <classname>Container</classname> supports events for notifying about changes made to their contents."
msgstr ""

#. Tag: para
#: part1-datamodel.xml:473
#, no-c-format
msgid "As containers can be unordered, ordered, indexed, or hierarchical, they can interface practically any kind of data representation. Vaadin includes data connectors for some common data sources, such as the simple tabular data, with <classname>IndexedContainer</classname>, and the filesystem, with <classname>FilesystemContainer</classname>."
msgstr ""

#. Tag: para
#: part1-datamodel.xml:481
#, no-c-format
msgid "In addition to generic container implementations, also many user interface components are containers as themselves, in addition to being properties. This is especially true for selection components, that is, those that implement <classname>Select</classname>, because they are containers that contain selectable items. Their property is the currently selected item. This is useful as it allows binding components to view and updating each others' data directly, and makes it easy to reuse already constructed data models, for example, a form could edit a row (item) of a table directly, and the table could use a database container as its underlying container. The fields of the form would correspond to the properties of the item, that is, the cells of the table row."
msgstr ""

#. Tag: para
#: part1-datamodel.xml:495
#, no-c-format
msgid "The library contains a set of utilities for converting between different container implementations by adding external ordering or hierarchy into existing containers. In-memory containers implementing indexed and hierarchical models provide easy-to-use tools for setting up in-memory data storages. Such default container implementations include <classname>IndexedContainer</classname>, which can be thought of as a generalization of a two-dimensional data table, and <classname>BeanItemContainer</classname>, which maps standard Java objects (beans) to items of an indexed container. In addition, the built-in containers include a hierarchical container for direct file system browsing."
msgstr ""

#. Tag: classname
#: part1-datamodel.xml:509
#, no-c-format
msgid "BeanContainer"
msgstr ""

#. Tag: para
#: part1-datamodel.xml:511
#, no-c-format
msgid "The <classname>BeanContainer</classname> is an in-memory container for JavaBean objects. Each contained bean is wrapped inside a <classname>BeanItem</classname> wrapper. The item properties are determined automatically by inspecting the getter and setter methods of the class. This requires that the bean class has public visibility, local classes for example are not allowed. Only beans of the same type can be added to the container."
msgstr ""

#. Tag: para
#: part1-datamodel.xml:521
#, no-c-format
msgid "The generic has two parameters: a bean type and an item identifier type. The item identifiers can be obtained by defining a custom resolver, using a specific item property for the IDs, or by giving item IDs explicitly. As such, it is more general than the <classname>BeanItemContainer</classname>, which uses the bean object itself as the item identifier, making the use usually simpler. Managing the item IDs makes <classname>BeanContainer</classname> more complex to use, but it is necessary in some cases where the <methodname>equals()</methodname> or <methodname>hashCode()</methodname> methods have been reimplemented in the bean."
msgstr ""

#. Tag: programlisting
#: part1-datamodel.xml:535
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[// Here is a JavaBean\n"
      "public class Bean implements Serializable {\n"
      "    String name;\n"
      "    double energy; // Energy content in kJ/100g\n"
      "    \n"
      "    public Bean(String name, double energy) {\n"
      "        this.name   = name;\n"
      "        this.energy = energy;\n"
      "    }\n"
      "    \n"
      "    public String getName() {\n"
      "        return name;\n"
      "    }\n"
      "    \n"
      "    public void setName(String name) {\n"
      "        this.name = name;\n"
      "    }\n"
      "    \n"
      "    public double getEnergy() {\n"
      "        return energy;\n"
      "    }\n"
      "    \n"
      "    public void setEnergy(double energy) {\n"
      "        this.energy = energy;\n"
      "    }\n"
      "}\n"
      "\n"
      "void basic(VerticalLayout layout) {\n"
      "    // Create a container for such beans with\n"
      "    // strings as item IDs.\n"
      "    BeanContainer<String, Bean> beans =\n"
      "        new BeanContainer<String, Bean>(Bean.class);\n"
      "    \n"
      "    // Use the name property as the item ID of the bean\n"
      "    beans.setBeanIdProperty(\"name\");\n"
      "\n"
      "    // Add some beans to it\n"
      "    beans.addBean(new Bean(\"Mung bean\",   1452.0));\n"
      "    beans.addBean(new Bean(\"Chickpea\",    686.0));\n"
      "    beans.addBean(new Bean(\"Lentil\",      1477.0));\n"
      "    beans.addBean(new Bean(\"Common bean\", 129.0));\n"
      "    beans.addBean(new Bean(\"Soybean\",     1866.0));\n"
      "\n"
      "    // Bind a table to it\n"
      "    Table table = new Table(\"Beans of All Sorts\", beans);\n"
      "    layout.addComponent(table);\n"
      "}]]>"
msgstr ""

#. Tag: para
#: part1-datamodel.xml:537
#, no-c-format
msgid "To use explicit item IDs, use the methods <methodname>addItem(Object, Object)</methodname>, <methodname>addItemAfter(Object, Object, Object)</methodname>, and <methodname>addItemAt(int, Object, Object)</methodname>."
msgstr ""

#. Tag: para
#: part1-datamodel.xml:544
#, no-c-format
msgid "It is not possible to add additional properties to the container, except properties in a nested bean."
msgstr ""

#. Tag: title
#: part1-datamodel.xml:550
#, no-c-format
msgid "Nested Properties"
msgstr ""

#. Tag: primary
#: part1-datamodel.xml:553 part1-datamodel.xml:703
#, no-c-format
msgid "nested bean properties"
msgstr ""

#. Tag: para
#: part1-datamodel.xml:556
#, no-c-format
msgid "If you have a nested bean with a 1:1 relationship inside a bean type contained in a <classname>BeanContainer</classname> or <classname>BeanItemContainer</classname>, you can add its properties to the container by specifying them with <methodname>addNestedContainerProperty()</methodname>. The feature is defined at the level of <classname>AbstractBeanContainer</classname>."
msgstr ""

#. Tag: methodname
#: part1-datamodel.xml:564
#, no-c-format
msgid "addNestedContainerProperty()"
msgstr ""

#. Tag: para
#: part1-datamodel.xml:567
#, no-c-format
msgid "As with a top-level bean in a bean container, also a nested bean must have public visibility or otherwise an access exception is thrown. Intermediary getters returning a nested bean must always return a non-null value."
msgstr ""

#. Tag: para
#: part1-datamodel.xml:574
#, no-c-format
msgid "For example, assume that we have the following two beans with the first one nested inside the second one."
msgstr ""

#. Tag: section
#: part1-datamodel.xml:577
#, no-c-format
msgid ""
      "<book-example id=\"datamodel.container.beanitemcontainer.nestedbean\" style=\"float: right\"></book-example> <programlisting><?pocket-size 65% ?><![CDATA[/** Bean to be nested */\n"
      "public class EqCoord implements Serializable {\n"
      "    double rightAscension; /* In angle hours */\n"
      "    double declination;    /* In degrees     */\n"
      "\n"
      "    ... constructor and setters and getters for the properties ...\n"
      "}\n"
      "\n"
      "/** Bean containing a nested bean */\n"
      "public class Star implements Serializable {\n"
      "    String  name;\n"
      "    EqCoord equatorial; /* Nested bean */\n"
      "\n"
      "    ... constructor and setters and getters for the properties ...\n"
      "}]]></programlisting> <para> After creating the container, you can declare the nested properties by specifying their property identifiers with the <methodname>addNestedContainerProperty()</methodname> in dot notation. </para> <book-example id=\"datamodel.container.beanitemcontainer.nestedbean\" style=\"float: right\"></book-example> <programlisting><?pocket-size 65% ?><![CDATA[// Create a container for beans\n"
      "final BeanItemContainer<Star> stars =\n"
      "    new BeanItemContainer<Star>(Star.class);\n"
      "\n"
      "// Declare the nested properties to be used in the container\n"
      "stars.addNestedContainerProperty(\"equatorial.rightAscension\");\n"
      "stars.addNestedContainerProperty(\"equatorial.declination\");\n"
      "\n"
      "// Add some items\n"
      "stars.addBean(new Star(\"Sirius\",  new EqCoord(6.75, 16.71611)));\n"
      "stars.addBean(new Star(\"Polaris\", new EqCoord(2.52, 89.26417)));]]></programlisting> <para> If you bind such a container to a <classname>Table</classname>, you probably also need to set the column headers. Notice that the entire nested bean itself is still a property in the container and would be displayed in its own column. The <methodname>toString()</methodname> method is used for obtaining the displayed value, which is by default an object reference. You normally do not want this, so you can hide the column with <methodname>setVisibleColumns()</methodname>. <indexterm><primary><methodname>setVisibleColumns()</methodname></primary></indexterm> </para> <book-example id=\"datamodel.container.beanitemcontainer.nestedbean\" style=\"float: right\"></book-example>"
msgstr ""

#. Tag: programlisting
#: part1-datamodel.xml:605
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[// Put them in a table\n"
      "Table table = new Table(\"Stars\", stars);\n"
      "table.setColumnHeader(\"equatorial.rightAscension\", \"RA\");\n"
      "table.setColumnHeader(\"equatorial.declination\",    \"Decl\");\n"
      "table.setPageLength(table.size());\n"
      "\n"
      "// Have to set explicitly to hide the \"equatorial\" property\n"
      "table.setVisibleColumns(new Object[]{\"name\",\n"
      "    \"equatorial.rightAscension\", \"equatorial.declination\"});]]>"
msgstr ""

#. Tag: para
#: part1-datamodel.xml:607
#, no-c-format
msgid "The resulting table is shown in <xref linkend=\"figure:datamodel.container.beancontainer.nestedproperties\"/>."
msgstr ""

#. Tag: title
#: part1-datamodel.xml:613
#, no-c-format
msgid "<classname>Table</classname> Bound to a <classname>BeanContainer</classname> with Nested Properties"
msgstr ""

#. Tag: para
#: part1-datamodel.xml:624
#, no-c-format
msgid "The bean binding in <classname>AbstractBeanContainer</classname> normally uses the <classname>MethodProperty</classname> implementation of the <classname>Property</classname> interface to access the bean properties using the setter and getter methods. For nested properties, the <classname>NestedMethodProperty</classname> implementation is used."
msgstr ""

#. Tag: classname
#: part1-datamodel.xml:632
#, no-c-format
msgid "MethodProperty"
msgstr ""

#. Tag: classname
#: part1-datamodel.xml:633
#, no-c-format
msgid "NestedMethodProperty"
msgstr ""

#. Tag: title
#: part1-datamodel.xml:640
#, no-c-format
msgid "Defining a Bean ID Resolver"
msgstr ""

#. Tag: para
#: part1-datamodel.xml:642
#, no-c-format
msgid "If a bean ID resolver is set using <methodname>setBeanIdResolver()</methodname> or <methodname>setBeanIdProperty()</methodname>, the methods <methodname>addBean()</methodname>, <methodname>addBeanAfter()</methodname>, <methodname>addBeanAt()</methodname> and <methodname>addAll()</methodname> can be used to add items to the container. If one of these methods is called, the resolver is used to generate an identifier for the item (must not return <parameter>null</parameter>)."
msgstr ""

#. Tag: para
#: part1-datamodel.xml:655
#, no-c-format
msgid "Note that explicit item identifiers can also be used when a resolver has been set by calling the <methodname>addItem*()</methodname> methods - the resolver is only used when adding beans using the <methodname>addBean*()</methodname> or <methodname>addAll(Collection)</methodname> methods."
msgstr ""

#. Tag: classname
#: part1-datamodel.xml:666
#, no-c-format
msgid "BeanItemContainer"
msgstr ""

#. Tag: para
#: part1-datamodel.xml:668
#, no-c-format
msgid "<classname>BeanItemContainer</classname> is a container for JavaBean objects where each bean is wrapped inside a <classname>BeanItem</classname> wrapper. The item properties are determined automatically by inspecting the getter and setter methods of the class. This requires that the bean class has public visibility, local classes for example are not allowed. Only beans of the same type can be added to the container."
msgstr ""

#. Tag: para
#: part1-datamodel.xml:678
#, no-c-format
msgid "<classname>BeanItemContainer</classname> is a specialized version of the <classname>BeanContainer</classname> described in <xref linkend=\"datamodel.container.beancontainer\"/>. It uses the bean itself as the item identifier, which makes it a bit easier to use than <classname>BeanContainer</classname> in many cases. The latter is, however, needed if the bean has reimplemented the <methodname>equals()</methodname> or <methodname>hashCode()</methodname> methods."
msgstr ""

#. Tag: para
#: part1-datamodel.xml:689
#, no-c-format
msgid "Let us revisit the example given in <xref linkend=\"datamodel.container.beancontainer\"/> using the <classname>BeanItemContainer</classname>."
msgstr ""

#. Tag: programlisting
#: part1-datamodel.xml:696
#, no-c-format
msgid ""
      "<?pocket-size 75% ?><![CDATA[// Create a container for the beans\n"
      "BeanItemContainer<Bean> beans =\n"
      "    new BeanItemContainer<Bean>(Bean.class);\n"
      "    \n"
      "// Add some beans to it\n"
      "beans.addBean(new Bean(\"Mung bean\",   1452.0));\n"
      "beans.addBean(new Bean(\"Chickpea\",    686.0));\n"
      "beans.addBean(new Bean(\"Lentil\",      1477.0));\n"
      "beans.addBean(new Bean(\"Common bean\", 129.0));\n"
      "beans.addBean(new Bean(\"Soybean\",     1866.0));\n"
      "\n"
      "// Bind a table to it\n"
      "Table table = new Table(\"Beans of All Sorts\", beans);]]>"
msgstr ""

#. Tag: para
#: part1-datamodel.xml:698
#, no-c-format
msgid "It is not possible to add additional properties to a <classname>BeanItemContainer</classname>, except properties in a nested bean, as described in <xref linkend=\"datamodel.container.beancontainer\"/>."
msgstr ""

#. Tag: title
#: part1-datamodel.xml:708
#, no-c-format
msgid "Iterating Over a Container"
msgstr ""

#. Tag: para
#: part1-datamodel.xml:710
#, no-c-format
msgid "As the items in a <classname>Container</classname> are not necessarily indexed, iterating over the items has to be done using an <classname>Iterator</classname>. The <methodname>getItemIds()</methodname> method of <classname>Container</classname> returns a <classname>Collection</classname> of item identifiers over which you can iterate. The following example demonstrates a typical case where you iterate over the values of check boxes in a column of a <classname>Table</classname> component. The context of the example is the example used in <xref linkend=\"components.table\"/>."
msgstr ""

#. Tag: programlisting
#: part1-datamodel.xml:722
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[// Collect the results of the iteration into this string.\n"
      "String items = \"\";\n"
      "\n"
      "// Iterate over the item identifiers of the table.\n"
      "for (Iterator i = table.getItemIds().iterator(); i.hasNext();) {\n"
      "    // Get the current item identifier, which is an integer.\n"
      "    int iid = (Integer) i.next();\n"
      "    \n"
      "    // Now get the actual item from the table.\n"
      "    Item item = table.getItem(iid);\n"
      "    \n"
      "    // And now we can get to the actual checkbox object.\n"
      "    Button button = (Button)\n"
      "            (item.getItemProperty(\"ismember\").getValue());\n"
      "    \n"
      "    // If the checkbox is selected.\n"
      "    if ((Boolean)button.getValue() == true) {\n"
      "        // Do something with the selected item; collect the\n"
      "        // first names in a string.\n"
      "        items += item.getItemProperty(\"First Name\")\n"
      "                     .getValue() + \" \";\n"
      "    }\n"
      "}\n"
      "\n"
      "// Do something with the results; display the selected items.\n"
      "layout.addComponent (new Label(\"Selected items: \" + items));]]>"
msgstr ""

#. Tag: para
#: part1-datamodel.xml:724
#, no-c-format
msgid "Notice that the <methodname>getItemIds()</methodname> returns an <emphasis>unmodifiable collection</emphasis>, so the <classname>Container</classname> may not be modified during iteration. You can not, for example, remove items from the <classname>Container</classname> during iteration. The modification includes modification in another thread. If the <classname>Container</classname> is modified during iteration, a <classname>ConcurrentModificationException</classname> is thrown and the iterator may be left in an undefined state."
msgstr ""

#. Tag: title
#: part1-datamodel.xml:738
#, no-c-format
msgid "<classname>Filterable</classname> Containers"
msgstr ""

#. Tag: primary
#: part1-datamodel.xml:741
#, no-c-format
msgid "<primary>Container</primary>"
msgstr ""

#. Tag: secondary
#: part1-datamodel.xml:742
#, no-c-format
msgid "Filterable"
msgstr ""

#. Tag: primary
#: part1-datamodel.xml:745
#, no-c-format
msgid "<classname>Filter</classname> (in <classname>Container</classname>)"
msgstr ""

#. Tag: para
#: part1-datamodel.xml:748
#, no-c-format
msgid "Containers that implement the <classname>Container.Filterable</classname> interface can be filtered. For example, the built-in <classname>IndexedContainer</classname> and the bean item containers implement it. Filtering is typically used for filtering the content of a <classname>Table</classname>."
msgstr ""

#. Tag: classname
#: part1-datamodel.xml:755
#, no-c-format
msgid "IndexedContainer"
msgstr ""

#. Tag: classname
#: part1-datamodel.xml:756
#, no-c-format
msgid "Table"
msgstr ""

#. Tag: para
#: part1-datamodel.xml:759
#, no-c-format
msgid "Filters implement the <classname>Filter</classname> interface and you add them to a filterable container with the <methodname>addContainerFilter()</methodname> method. Container items that pass the filter condition are kept and shown in the filterable component."
msgstr ""

#. Tag: methodname
#: part1-datamodel.xml:765
#, no-c-format
msgid "addContainerFilter()"
msgstr ""

#. Tag: programlisting
#: part1-datamodel.xml:770
#, no-c-format
msgid ""
      "<![CDATA[Filter filter = new SimpleStringFilter(\"name\",\n"
      "        \"Douglas\", true, false);\n"
      "table.addContainerFilter(filter);]]>"
msgstr ""

#. Tag: para
#: part1-datamodel.xml:772
#, no-c-format
msgid "If multiple filters are added to a container, they are evaluated using the logical AND operator so that only items that are passed by all the filters are kept."
msgstr ""

#. Tag: title
#: part1-datamodel.xml:779
#, no-c-format
msgid "Atomic and Composite Filters"
msgstr ""

#. Tag: para
#: part1-datamodel.xml:781
#, no-c-format
msgid "Filters can be classified as <emphasis>atomic</emphasis> and <emphasis>composite</emphasis>. Atomic filters, such as <classname>SimpleStringFilter</classname>, define a single condition, usually for a specific container property. Composite filters make filtering decisions based on the result of one or more other filters. The built-in composite filters implement the logical operators AND, OR, or NOT."
msgstr ""

#. Tag: para
#: part1-datamodel.xml:791
#, no-c-format
msgid "For example, the following composite filter would filter out items where the <literal>name</literal> property contains the name \"Douglas\" somewhere <emphasis>and</emphasis> where the <literal>age</literal> property has value less than 42. The properties must have <classname>String</classname> and <classname>Integer</classname> types, respectively."
msgstr ""

#. Tag: programlisting
#: part1-datamodel.xml:799
#, no-c-format
msgid ""
      "<![CDATA[\n"
      "filter = new Or(new SimpleStringFilter(\"name\",\n"
      "        \"Douglas\", true, false),\n"
      "        new Compare.Less(\"age\", 42));]]>"
msgstr ""

#. Tag: title
#: part1-datamodel.xml:803
#, no-c-format
msgid "Built-In Filter Types"
msgstr ""

#. Tag: para
#: part1-datamodel.xml:805
#, no-c-format
msgid "The built-in filter types are the following:"
msgstr ""

#. Tag: classname
#: part1-datamodel.xml:811 part1-datamodel.xml:813
#, no-c-format
msgid "SimpleStringFilter"
msgstr ""

#. Tag: para
#: part1-datamodel.xml:814
#, no-c-format
msgid "Passes items where the specified property, that must be of <classname>String</classname> type, contains the given <parameter>filterString</parameter> as a substring. If <parameter>ignoreCase</parameter> is <parameter>true</parameter>, the search is case insensitive. If the <parameter>onlyMatchPrefix</parameter> is <parameter>true</parameter>, the substring may only be in the beginning of the string, otherwise it may be elsewhere as well."
msgstr ""

#. Tag: classname
#: part1-datamodel.xml:828
#, no-c-format
msgid "IsNull"
msgstr ""

#. Tag: primary
#: part1-datamodel.xml:830
#, no-c-format
msgid "<classname>IsNull</classname> (filter)"
msgstr ""

#. Tag: para
#: part1-datamodel.xml:831
#, no-c-format
msgid "Passes items where the specified property has null value. For in-memory filtering, a simple <literal>==</literal> check is performed. For other containers, the comparison implementation is container dependent, but should correspond to the in-memory null check."
msgstr ""

#. Tag: term
#: part1-datamodel.xml:841
#, no-c-format
msgid "<classname>Equal</classname>, <classname>Greater</classname>, <classname>Less</classname>, <classname>GreaterOrEqual</classname>, and <classname>LessOrEqual</classname>"
msgstr ""

#. Tag: primary
#: part1-datamodel.xml:847
#, no-c-format
msgid "<classname>Equal</classname> (filter)"
msgstr ""

#. Tag: primary
#: part1-datamodel.xml:848
#, no-c-format
msgid "<classname>Greater</classname> (filter)"
msgstr ""

#. Tag: primary
#: part1-datamodel.xml:849
#, no-c-format
msgid "<classname>Less</classname> (filter)"
msgstr ""

#. Tag: primary
#: part1-datamodel.xml:850
#, no-c-format
msgid "<classname>GreaterOrEqual</classname> (filter)"
msgstr ""

#. Tag: primary
#: part1-datamodel.xml:851
#, no-c-format
msgid "<classname>LessOrEqual</classname> (filter)"
msgstr ""

#. Tag: para
#: part1-datamodel.xml:852
#, no-c-format
msgid "The comparison filter implementations compare the specified property value to the given constant and pass items for which the comparison result is true. The comparison operators are included in the abstract <classname>Compare</classname> class."
msgstr ""

#. Tag: para
#: part1-datamodel.xml:858
#, no-c-format
msgid "For the <classname>Equal</classname> filter, the <methodname>equals()</methodname> method for the property is used in built-in in-memory containers. In other types of containers, the comparison is container dependent and may use, for example, database comparison operations."
msgstr ""

#. Tag: para
#: part1-datamodel.xml:865
#, no-c-format
msgid "For the other filters, the property value type must implement the <classname>Comparable</classname> interface to work with the built-in in-memory containers. Again for the other types of containers, the comparison is container dependent."
msgstr ""

#. Tag: term
#: part1-datamodel.xml:874
#, no-c-format
msgid "<classname>And</classname> and <classname>Or</classname>"
msgstr ""

#. Tag: primary
#: part1-datamodel.xml:876
#, no-c-format
msgid "<classname>And</classname> (filter)"
msgstr ""

#. Tag: primary
#: part1-datamodel.xml:877
#, no-c-format
msgid "<classname>Or</classname> (filter)"
msgstr ""

#. Tag: para
#: part1-datamodel.xml:878
#, no-c-format
msgid "These logical operator filters are composite filters that combine multiple other filters."
msgstr ""

#. Tag: classname
#: part1-datamodel.xml:885
#, no-c-format
msgid "<classname>Not</classname>"
msgstr ""

#. Tag: primary
#: part1-datamodel.xml:887
#, no-c-format
msgid "<classname>Not</classname> (filter)"
msgstr ""

#. Tag: para
#: part1-datamodel.xml:888
#, no-c-format
msgid "The logical unary operator filter negates which items are passed by the filter given as the parameter."
msgstr ""

#. Tag: title
#: part1-datamodel.xml:898
#, no-c-format
msgid "Implementing Custom Filters"
msgstr ""

#. Tag: para
#: part1-datamodel.xml:900
#, no-c-format
msgid "A custom filter needs to implement the <classname>Container.Filter</classname> interface."
msgstr ""

#. Tag: para
#: part1-datamodel.xml:905
#, no-c-format
msgid "A filter can use a single or multiple properties for the filtering logic. The properties used by the filter must be returned with the <methodname>appliesToProperty()</methodname> method. If the filter applies to a user-defined property or properties, it is customary to give the properties as the first argument for the constructor of the filter."
msgstr ""

#. Tag: section
#: part1-datamodel.xml:912
#, no-c-format
msgid ""
      "<book-example id=\"datamodel.container.filter.custom\" style=\"float: right\"></book-example> <programlisting><?pocket-size 65% ?><![CDATA[class MyCustomFilter implements Container.Filter {\n"
      "    protected String propertyId;\n"
      "    protected String regex;\n"
      "    \n"
      "    public MyCustomFilter(String propertyId, String regex) {\n"
      "        this.propertyId = propertyId;\n"
      "        this.regex      = regex;\n"
      "    }\n"
      "\n"
      "    /** Tells if this filter works on the given property. */\n"
      "    @Override\n"
      "    public boolean appliesToProperty(Object propertyId) {\n"
      "        return propertyId != null &&\n"
      "               propertyId.equals(this.propertyId);\n"
      "    }]]></programlisting> <para> The actual filtering logic is done in the <methodname>passesFilter()</methodname> method, which simply returns <literal>true</literal> if the item should pass the filter and <literal>false</literal> if it should be filtered out. </para> <book-example id=\"datamodel.container.filter.custom\" style=\"float: right\"></book-example>"
msgstr ""

#. Tag: programlisting
#: part1-datamodel.xml:925
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[    /** Apply the filter on an item to check if it passes. */\n"
      "    @Override\n"
      "    public boolean passesFilter(Object itemId, Item item)\n"
      "            throws UnsupportedOperationException {\n"
      "        // Acquire the relevant property from the item object\n"
      "        Property p = item.getItemProperty(propertyId);\n"
      "        \n"
      "        // Should always check validity\n"
      "        if (p == null || !p.getType().equals(String.class))\n"
      "            return false;\n"
      "        String value = (String) p.getValue();\n"
      "        \n"
      "        // The actual filter logic\n"
      "        return value.matches(regex);\n"
      "    }\n"
      "}]]>"
msgstr ""

#. Tag: para
#: part1-datamodel.xml:928
#, no-c-format
msgid "You can use such a custom filter just like any other:"
msgstr ""

#. Tag: programlisting
#: part1-datamodel.xml:932
#, no-c-format
msgid ""
      "<?pocket-size 75% ?><![CDATA[c.addContainerFilter(\n"
      "    new MyCustomFilter(\"Name\", (String) tf.getValue()));]]>"
msgstr ""

