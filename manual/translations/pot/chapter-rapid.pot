# SOME DESCRIPTIVE TITLE.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"Report-Msgid-Bugs-To: http://bugs.kde.org\n"
"POT-Creation-Date: 2011-11-03 16:13+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <kde-i18n-doc@kde.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. Tag: title
#: part1-rapid.xml:4
#, no-c-format
msgid "Rapid Development Using Vaadin and Roo"
msgstr ""

#. Tag: para
#: part1-rapid.xml:6
#, no-c-format
msgid "This chapter presents a tutorial for developing a basic application using rapid application development tools: Spring Roo and Vaadin Plugin for Eclipse. The application includes database binding with JPAContainer, internationalization, and testing with Vaadin TestBench."
msgstr ""

#. Tag: title
#: part1-rapid.xml:14
#, no-c-format
msgid "Overview"
msgstr ""

#. Tag: para
#: part1-rapid.xml:16
#, no-c-format
msgid "In this tutorial, we develop a simple application while demonstrating also the basic tasks of making a typical business application:"
msgstr ""

#. Tag: para
#: part1-rapid.xml:23
#, no-c-format
msgid "Creating a business data model using Roo"
msgstr ""

#. Tag: para
#: part1-rapid.xml:26
#, no-c-format
msgid "Database binding using Java Persistence API (JPA) and the JPAContainer add-on"
msgstr ""

#. Tag: para
#: part1-rapid.xml:29
#, no-c-format
msgid "Creating CRUD views using the Vaadin Plugin for Spring Roo"
msgstr ""

#. Tag: para
#: part1-rapid.xml:32
#, no-c-format
msgid "Customizing views using Vaadin Plugin for Eclipse"
msgstr ""

#. Tag: para
#: part1-rapid.xml:35
#, no-c-format
msgid "Using the Vaadin Calendar add-on"
msgstr ""

#. Tag: para
#: part1-rapid.xml:38
#, no-c-format
msgid "User login with authentication and authorization"
msgstr ""

#. Tag: para
#: part1-rapid.xml:41
#, no-c-format
msgid "<para>Internationalization</para>"
msgstr ""

#. Tag: para
#: part1-rapid.xml:44
#, no-c-format
msgid "Using the Vaadin TestBench for regression testing"
msgstr ""

#. Tag: para
#: part1-rapid.xml:47
#, no-c-format
msgid "Deploying the application to Cloud Foundry"
msgstr ""

#. Tag: para
#: part1-rapid.xml:51
#, no-c-format
msgid "Spring Roo is a rapid development tool for Java applications. It generates code that uses the Spring Framework, Java Persistence API, and Apache Maven. It also allows extending its functionality using add-ons, such as the Vaadin Plugin for Spring Roo. The Vaadin add-on can generate user interface views based on the data model definitions given to Roo. These views can then be customized and combined with views made with the visual editor of the Vaadin Plugin for Eclipse."
msgstr ""

#. Tag: para
#: part1-rapid.xml:61
#, no-c-format
msgid "Vaadin JPAContainer is a <classname>Container</classname> that communicates with a JPA implementation of your choice, which in turn usually communicates with virtually any SQL database you choose. Then by binding the JPAContainer to a component such as a <classname>Table</classname> (in editable mode), you get a no-brainer CRUD component. As the edited table data is updated to the JPAContainer, which is linked to the JPA implementation, everything you do in the UI can immediately be reflected back to the database. JPAContainer is dual-licensed with the open source AGPL for free projects and CVAL for commercial applications."
msgstr ""

#. Tag: title
#: part1-rapid.xml:74
#, no-c-format
msgid "Demo Application"
msgstr ""

#. Tag: para
#: part1-rapid.xml:76
#, no-c-format
msgid "For the purpose of this tutorial, we develop a simple business application. The work hour reporting application allows an employee to report work done for different projects."
msgstr ""

#. Tag: para
#: part1-rapid.xml:82
#, no-c-format
msgid "For authentication, the application will have a login screen, where the user can also select the language. Business tasks are done in the main view, which will have a typical layout with a menu bar."
msgstr ""

#. Tag: title
#: part1-rapid.xml:91
#, no-c-format
msgid "Setting Up the Environment"
msgstr ""

#. Tag: para
#: part1-rapid.xml:93
#, no-c-format
msgid "Let us begin with setting up the environment and creating the project. The tutorial requires installation of:"
msgstr ""

#. Tag: para
#: part1-rapid.xml:100
#, no-c-format
msgid "Spring Roo (bundled with the SpringSource Tool Suite)"
msgstr ""

#. Tag: para
#: part1-rapid.xml:106
#, no-c-format
msgid "Vaadin Plugin for Eclipse"
msgstr ""

#. Tag: para
#: part1-rapid.xml:112
#, no-c-format
msgid "Vaadin Plugin for Spring Roo"
msgstr ""

#. Tag: para
#: part1-rapid.xml:118
#, no-c-format
msgid "Vaadin Calendar Add-on"
msgstr ""

#. Tag: para
#: part1-rapid.xml:124
#, no-c-format
msgid "Vaadin TestBench Add-on"
msgstr ""

#. Tag: para
#: part1-rapid.xml:130
#, no-c-format
msgid "The installation of Vaadin add-ons is covered later in <xref linkend=\"rapid.addons\"/> and Vaadin TestBench in <xref linkend=\"rapid.testing\"/>."
msgstr ""

#. Tag: title
#: part1-rapid.xml:136
#, no-c-format
msgid "Installing Spring Roo"
msgstr ""

#. Tag: para
#: part1-rapid.xml:138
#, no-c-format
msgid "The easiest way to get Spring Roo is to install the SpringSource Tool Suite (STS), which is a distribution of the Eclipse IDE packaged with Roo integration, among other things. You can also install Spring Roo as a command-line tool."
msgstr ""

#. Tag: para
#: part1-rapid.xml:145
#, no-c-format
msgid "You can download the SpringSource Tool Suite from <link xlink:href=\"http://www.springsource.com/developer/sts\">http://www.springsource.com/developer/sts</link>. Please follow the installation instructions at the website. After installing, you can start STS by running the <filename>STS</filename> executable in the installation folder."
msgstr ""

#. Tag: para
#: part1-rapid.xml:153
#, no-c-format
msgid "You need to install the Vaadin Plugin for Eclipse in STS. Please follow the instructions given in <xref linkend=\"getting-started.environment.eclipse-plugin\"/>."
msgstr ""

#. Tag: title
#: part1-rapid.xml:161
#, no-c-format
msgid "Creating the Project"
msgstr ""

#. Tag: para
#: part1-rapid.xml:163
#, no-c-format
msgid "You can create a new Spring Roo project as follows:"
msgstr ""

#. Tag: para
#: part1-rapid.xml:169
#, no-c-format
msgid "Select <menuchoice><guimenu>File</guimenu><guisubmenu>New</guisubmenu><guimenuitem>Spring Roo Project</guimenuitem></menuchoice>."
msgstr ""

#. Tag: para
#: part1-rapid.xml:177
#, no-c-format
msgid "Give the project a <guilabel>Project name</guilabel>. The name must be a proper identifier, that is, no spaces, etc."
msgstr ""

#. Tag: para
#: part1-rapid.xml:182
#, no-c-format
msgid "Give the project a <guilabel>Top-level package name</guilabel>, such as <literal>com.example.rapid</literal>."
msgstr ""

#. Tag: para
#: part1-rapid.xml:187
#, no-c-format
msgid "Make any other necessary project settings. None are required in this tutorial example. Finally, click <guibutton>Next</guibutton> and <guibutton>Finish</guibutton> to create the project. Creating a project can take a few seconds."
msgstr ""

#. Tag: para
#: part1-rapid.xml:194
#, no-c-format
msgid "A Roo Shell is automatically opened for a new Roo project. If closed, you can open a new Roo Shell by selecting <menuchoice><guimenu>Window</guimenu><guisubmenu>Show View</guisubmenu><guimenuitem>Roo Shell</guimenuitem></menuchoice>."
msgstr ""

#. Tag: title
#: part1-rapid.xml:203
#, no-c-format
msgid "Installing Vaadin Plugin for Spring Roo"
msgstr ""

#. Tag: para
#: part1-rapid.xml:205
#, no-c-format
msgid "Installing the Vaadin Plugin for Spring Roo is done in the Roo Shell. While the plugin installation is not project specific and it will work in all projects once installed, a Roo Shell can only be opened for an existing project."
msgstr ""

#. Tag: para
#: part1-rapid.xml:214
#, no-c-format
msgid "If the Roo Shell is not already open, right-click the project folder in the <guilabel>Package Explorer</guilabel> and select <menuchoice><guimenu>Spring Tools</guimenu><guimenuitem>Open Roo Shell</guimenuitem></menuchoice>."
msgstr ""

#. Tag: para
#: part1-rapid.xml:223
#, no-c-format
msgid "In the Roo Shell view enter:"
msgstr ""

#. Tag: screen
#: part1-rapid.xml:227
#, no-c-format
msgid ""
      "<?pocket-size 70% ?><prompt>roo&gt;</prompt> <command>pgp trust</command> <parameter>--keyId</parameter> 0xBF0451C0\n"
      "<prompt>roo&gt;</prompt> <command>download</command> accept terms of use\n"
      "<prompt>roo&gt;</prompt> <command>addon install bundle</command> <parameter>--bundleSymbolicName</parameter>\n"
      "     com.vaadin.spring.roo.addon"
msgstr ""

#. Tag: title
#: part1-rapid.xml:233
#, no-c-format
msgid "Setting up the Roo Data Layer"
msgstr ""

#. Tag: para
#: part1-rapid.xml:235
#, no-c-format
msgid "Binding application data model to a database with Java Persistence API (JPA) is amazingly easy with Roo. You simply need to set up persistence as follows:"
msgstr ""

#. Tag: screen
#: part1-rapid.xml:240
#, no-c-format
msgid ""
      "<?pocket-size 75% ?><prompt>roo&gt;</prompt> <command>persistence setup</command> <parameter>--provider</parameter> ECLIPSELINK\n"
      "                       <parameter>--database</parameter> HYPERSONIC_IN_MEMORY"
msgstr ""

#. Tag: para
#: part1-rapid.xml:242
#, no-c-format
msgid "The above example sets up persistence using the EclipseLink JPA layer and an in-memory HSQLDB database. Hitting <keycombo><keycap>Ctrl</keycap><keycap>Space</keycap></keycombo> completion shows the possible values for the <parameter>--provider</parameter> and <parameter>--database</parameter> parameters."
msgstr ""

#. Tag: para
#: part1-rapid.xml:250
#, no-c-format
msgid "When using a real database, you need to configure the database connection in <filename>src/main/resources/META-INF/spring/database.properties</filename>."
msgstr ""

#. Tag: title
#: part1-rapid.xml:258
#, no-c-format
msgid "Creating the Domain Model"
msgstr ""

#. Tag: para
#: part1-rapid.xml:260
#, no-c-format
msgid "Spring Roo automates the creation of a domain model. Using simple commands, it creates the entity classes and their property fields. As we enabled persistence for the project earlier, creating the entities also creates the JPA mappings between the domain objects and their underlying database representation."
msgstr ""

#. Tag: title
#: part1-rapid.xml:268
#, no-c-format
msgid "Domain Model Design"
msgstr ""

#. Tag: para
#: part1-rapid.xml:270
#, no-c-format
msgid "The domain model of the work hour reporting system consists of three entities, illustrated in <xref linkend=\"figure:rapid.datamodel.entity-diagram\"/>. Employees working on projects, who are also the users of the system, are represented as <classname>RapidUser</classname> entities. Authorization is managed simply with an <literal>admin</literal> flag."
msgstr ""

#. Tag: para
#: part1-rapid.xml:279
#, no-c-format
msgid "An employee uses the system to enter work entries, represented with the <classname>WorkEntry</classname> class. Each entry has starts and ends at a specific date and time and has a comment. A work entry is always associated with a project, represented in the <classname>Project</classname> class. A project has a name and ended projects can be disabled so that they can no longer be selected."
msgstr ""

#. Tag: title
#: part1-rapid.xml:309
#, no-c-format
msgid "Entity Diagram of the Domain Model"
msgstr ""

#. Tag: title
#: part1-rapid.xml:322
#, no-c-format
msgid "Creating the Model in Roo"
msgstr ""

#. Tag: para
#: part1-rapid.xml:324
#, no-c-format
msgid "Roo Shell helps you in creating your model objects. The <command>entity</command> command creates a new entity class, specified with the <parameter>--class</parameter> parameter. Tilde (~) can be used to refer to the project package. The <parameter>--testAutomatically</parameter> option creates integration tests for the entity. As always with Roo Shell, hitting CTRL-SPACE can hint or autocomplete your commands."
msgstr ""

#. Tag: screen
#: part1-rapid.xml:334
#, no-c-format
msgid "<?pocket-size 70% ?><prompt>roo&gt;</prompt> <command>entity</command> <parameter>--class</parameter> ~.domain.RapidUser <parameter>--testAutomatically</parameter>"
msgstr ""

#. Tag: para
#: part1-rapid.xml:336
#, no-c-format
msgid "The <command>field</command> command in Roo creates class properties. The first parameter for the command is the field type, such as <parameter>string</parameter>, <parameter>boolean</parameter>, or <parameter>date</parameter>. The name of the field is specified with the <parameter>--fieldName</parameter> parameter. The <parameter>--notNull</parameter> specifies that the field value may not be null. The <parameter>string</parameter> type as additional options, such as minimum (<parameter>--sizeMin</parameter>) and maximum (<parameter>--sizeMax</parameter>) length."
msgstr ""

#. Tag: screen
#: part1-rapid.xml:348
#, no-c-format
msgid "<?pocket-size 70% ?><prompt>roo&gt;</prompt> <command>field string</command> <parameter>--fieldName</parameter> username <parameter>--notNull --sizeMin</parameter> 2"
msgstr ""

#. Tag: para
#: part1-rapid.xml:350
#, no-c-format
msgid "To create the domain model described earlier, the following commands need to be issued in all (including the ones explained above):"
msgstr ""

#. Tag: screen
#: part1-rapid.xml:355
#, no-c-format
msgid ""
      "<?pocket-size 65% ?>entity --class ~.domain.RapidUser --testAutomatically\n"
      "field string --fieldName username --notNull --sizeMin 2\n"
      "field string --fieldName password --notNull --sizeMin 4\n"
      "field boolean --fieldName admin --primitive\n"
      "\n"
      "entity --class ~.domain.Project --testAutomatically\n"
      "field string --fieldName name --notNull --sizeMin 2 --sizeMax 255\n"
      "field boolean --fieldName enabled --primitive\n"
      "\n"
      "entity --class ~.domain.WorkEntry --testAutomatically\n"
      "field string --fieldName comment --sizeMax 255\n"
      "field reference --fieldName project --type ~.domain.Project --notNull\n"
      "field reference --fieldName employee --type ~.domain.RapidUser --notNull\n"
      "field date --fieldName startTime --type java.util.Date --notNull\n"
      "field date --fieldName endTime --type java.util.Date --notNull"
msgstr ""

#. Tag: para
#: part1-rapid.xml:357
#, no-c-format
msgid "The <parameter>reference</parameter> field type is used for references to other entities. The entity type is given with the <parameter>--type</parameter> option."
msgstr ""

#. Tag: para
#: part1-rapid.xml:363
#, no-c-format
msgid "As we gave the <parameter>--testAutomatically</parameter> parameter when we created domain objects, Roo should have generated some tests automatically. To validate the domain model, type the following command in the Roo Shell:"
msgstr ""

#. Tag: screen
#: part1-rapid.xml:369
#, no-c-format
msgid "<prompt>roo&gt;</prompt> <command>perform tests</command>"
msgstr ""

#. Tag: title
#: part1-rapid.xml:374
#, no-c-format
msgid "Creating Vaadin Application and CRUD Views"
msgstr ""

#. Tag: para
#: part1-rapid.xml:376
#, no-c-format
msgid "Spring Roo is essentially a code generator. As already seen in the data model part of this tutorial, it will write a whole bunch of boiler plate code for JPA entities. You get an even greater advantage of Roo when you want a simple user interface around the domain models."
msgstr ""

#. Tag: para
#: part1-rapid.xml:383
#, no-c-format
msgid "By default, Spring Roo uses JSP pages (Spring MVC to be more specific) to create basic CRUD (Create, Remove, Update, Delete) views. This is covered in Roo's own tutorials. We choose a bit different route and use the Vaadin plugin for Roo to create an advanced Vaadin-based server-side RIA user interface for our backend."
msgstr ""

#. Tag: title
#: part1-rapid.xml:391
#, no-c-format
msgid "Creating the Application Skeleton"
msgstr ""

#. Tag: para
#: part1-rapid.xml:393
#, no-c-format
msgid "First, we use the <command>vaadin setup</command> command to create the basic application skeleton, on which we later build the user interface. Issue the following command in the Roo shell:"
msgstr ""

#. Tag: screen
#: part1-rapid.xml:399
#, no-c-format
msgid "<?pocket-size 65% ?><command>vaadin setup</command> <parameter>--applicationPackage</parameter> ~.web <parameter>--baseName</parameter> RapidWorkHours <parameter>--themeName</parameter> rapid <parameter>--useJpaContainer</parameter> true"
msgstr ""

#. Tag: para
#: part1-rapid.xml:401
#, no-c-format
msgid "The command creates everything that you need or might need later during development:"
msgstr ""

#. Tag: listitem
#: part1-rapid.xml:407
#, no-c-format
msgid "a \"<package>web</package>\" package where all your Vaadin related code will be added"
msgstr ""

#. Tag: listitem
#: part1-rapid.xml:408
#, no-c-format
msgid "an <classname>Application</classname> class"
msgstr ""

#. Tag: listitem
#: part1-rapid.xml:409
#, no-c-format
msgid "a <filename>web.xml</filename> file to configure Vaadin application for servlet containers"
msgstr ""

#. Tag: listitem
#: part1-rapid.xml:410
#, no-c-format
msgid "a theme"
msgstr ""

#. Tag: para
#: part1-rapid.xml:413
#, no-c-format
msgid "With <parameter>--useJpaContainer true</parameter>, we instruct the application to use JPAContainer later when we create the CRUD views. As JPAContainer is lazy-loading, this will save some memory in our application server in case the database grows a lot."
msgstr ""

#. Tag: title
#: part1-rapid.xml:422
#, no-c-format
msgid "Generating CRUD Views"
msgstr ""

#. Tag: para
#: part1-rapid.xml:424
#, no-c-format
msgid "Next, we create the actual CRUD views. Issue the following command in the Roo Shell:"
msgstr ""

#. Tag: screen
#: part1-rapid.xml:429
#, no-c-format
msgid "<?pocket-size 65% ?><command>vaadin generate all</command> <parameter>--package</parameter> ~.web.ui <parameter>--visuallyComposable</parameter> true"
msgstr ""

#. Tag: para
#: part1-rapid.xml:431
#, no-c-format
msgid "The command creates CRUD views for all the domain objects into <package>web.ui</package> package. The <parameter>--visuallyComposable</parameter> parameter instructs the Roo plugin to build views in such a way that we can later modify them with Vaadin Visual Designer. Without this parameter, the views are constructed in bit different manner, which may be bit more maintainable for advanced Vaadin users."
msgstr ""

#. Tag: para
#: part1-rapid.xml:441
#, no-c-format
msgid "In case you add new domain objects later, you may issue this command again to create views for new domain objects."
msgstr ""

#. Tag: title
#: part1-rapid.xml:448
#, no-c-format
msgid "Deploying to Development Server"
msgstr ""

#. Tag: para
#: part1-rapid.xml:450
#, no-c-format
msgid "At this point, we have a working Vaadin application ready, so we naturally want to see it in action. In the STS IDE, you can simply select the project and use <menuchoice><guimenu>Run</guimenu><guisubmenu>Run as</guisubmenu><guimenuitem>Run on Server</guimenuitem></menuchoice>. You can use the VMware vFabric server bundled with STS, but any other servlet container (such as the Jetty-based JEE Preview) should work fine as well."
msgstr ""

#. Tag: para
#: part1-rapid.xml:461
#, no-c-format
msgid "In case you feel more comfortable in the Maven world, the project can also be deployed for testing with, for example, the <literal>jetty:run</literal> target. The Jetty plugin is automatically installed for the generated project."
msgstr ""

#. Tag: title
#: part1-rapid.xml:471
#, no-c-format
msgid "Using Vaadin Add-ons in a Roo project"
msgstr ""

#. Tag: para
#: part1-rapid.xml:473
#, no-c-format
msgid "Complex Vaadin application often need to use some add-ons in addition to the core Vaadin. In our example project, we need the Vaadin Calendar and JPAContainer add-ons. The JPAContainer add-on is installed automatically by the Roo plugin, but the Calendar add-on needs to be installed manually."
msgstr ""

#. Tag: para
#: part1-rapid.xml:480
#, no-c-format
msgid "We will next:"
msgstr ""

#. Tag: para
#: part1-rapid.xml:485
#, no-c-format
msgid "Install the Vaadin Calendar add-on"
msgstr ""

#. Tag: para
#: part1-rapid.xml:486
#, no-c-format
msgid "Compile the widget set"
msgstr ""

#. Tag: para
#: part1-rapid.xml:487
#, no-c-format
msgid "Configure the Deployment Assembly"
msgstr ""

#. Tag: para
#: part1-rapid.xml:490
#, no-c-format
msgid "The Vaadin Plugin for Roo supports installing add-ons from the Vaadin Directory and compiling the included widget sets."
msgstr ""

#. Tag: title
#: part1-rapid.xml:496
#, no-c-format
msgid "Installing Add-ons"
msgstr ""

#. Tag: para
#: part1-rapid.xml:498
#, no-c-format
msgid "Open or select a Roo Shell and enter:"
msgstr ""

#. Tag: programlisting
#: part1-rapid.xml:502
#, no-c-format
msgid "<?pocket-size 65% ?><![CDATA[roo> vaadin addon install --artifactId vaadin-calendar]]>"
msgstr ""

#. Tag: para
#: part1-rapid.xml:504
#, no-c-format
msgid "You can type the beginning of the command up to the <literal>--artifactId</literal>, followed by a space, and then hit <keycombo><keycap>Ctrl</keycap><keycap>Space</keycap></keycombo> for completion. It lists all the available add-ons in the Directory. If you enter the beginning of an add-on name, such as <literal>vaadin-</literal>, before the completion, it shows just those add-ons, as shown in <xref linkend=\"figure:rapid.addons.install.completion\"/>."
msgstr ""

#. Tag: title
#: part1-rapid.xml:515
#, no-c-format
msgid "Getting List of Add-ons in Directory"
msgstr ""

#. Tag: title
#: part1-rapid.xml:525
#, no-c-format
msgid "Compiling the Widget Set"
msgstr ""

#. Tag: para
#: part1-rapid.xml:527
#, no-c-format
msgid "Add-ons that include custom widgets, in this case the Vaadin Calendar component, require compilation of a <emphasis>widget set</emphasis>, as described in detail in <xref linkend=\"addons\"/>. Roo makes the compilation simple, you only have to enter the following command in the Roo Shell:"
msgstr ""

#. Tag: programlisting
#: part1-rapid.xml:534
#, no-c-format
msgid "<?pocket-size 65% ?><![CDATA[roo> vaadin widgetset create]]>"
msgstr ""

#. Tag: para
#: part1-rapid.xml:536
#, no-c-format
msgid "Executing the command can take considerable time, as it downloads all the necessary Maven dependencies on the first run. The actual widget set compilation takes usually between 20 to 60 seconds, depending on the hardware."
msgstr ""

#. Tag: para
#: part1-rapid.xml:543
#, no-c-format
msgid "This creates a <emphasis>combining widget set</emphasis> that includes all the widget sets from different add-ons and also the default widget set of the Vaadin core library. The compiled widget set should appear in the <filename>target/rapid-0.1.0-SNAPSHOT/VAADIN/widgetsets/com.vaadin.rapid.web.RapidWidgetset</filename> folder and be referenced in the <filename>web.xml</filename> deployment descriptor of the application."
msgstr ""

#. Tag: para
#: part1-rapid.xml:552
#, no-c-format
msgid "Generally, only add-ons that introduce entirely new user interface components include a widget set that needs to be compiled. These are the majority of Vaadin add-ons. Add-ons providing a theme or container implementation do not include a widget set."
msgstr ""

#. Tag: para
#: part1-rapid.xml:559
#, no-c-format
msgid "If you later add other add-ons, you need to issue the <literal>vaadin widgetset update</literal> command, which updates the combining widget set definition file. The <literal>vaadin widgetset compile</literal> command simply recompiles the widget set without updating the combining widget set definition file."
msgstr ""

#. Tag: title
#: part1-rapid.xml:569
#, no-c-format
msgid "Configuring the Deployment Assembly"
msgstr ""

#. Tag: para
#: part1-rapid.xml:571
#, no-c-format
msgid "The widget set is compiled under the <filename>target/rapid-0.1.0.BUILD-SNAPSHOT</filename> folder, which is not included in the deployment path by default."
msgstr ""

#. Tag: para
#: part1-rapid.xml:578
#, no-c-format
msgid "Open the project properties for the project"
msgstr ""

#. Tag: para
#: part1-rapid.xml:579
#, no-c-format
msgid "Select <guilabel>Deployment Assembly</guilabel>"
msgstr ""

#. Tag: para
#: part1-rapid.xml:580
#, no-c-format
msgid "Click <guibutton>Add</guibutton>"
msgstr ""

#. Tag: para
#: part1-rapid.xml:581
#, no-c-format
msgid "Select <menuchoice><guimenu>Folder</guimenu></menuchoice>"
msgstr ""

#. Tag: para
#: part1-rapid.xml:582
#, no-c-format
msgid "Select <filename>target/rapid-0.1.0.BUILD-SNAPSHOT</filename>"
msgstr ""

#. Tag: para
#: part1-rapid.xml:583
#, no-c-format
msgid "Click <guibutton>Finish</guibutton> and <guibutton>OK</guibutton> to save the settings"
msgstr ""

#. Tag: para
#: part1-rapid.xml:586
#, no-c-format
msgid "If you are using Maven to debug your application, you will face the same issue. As a workaround, use the <literal>jetty-run</literal> or <literal>jetty:run-exploded</literal> targets that use the target directory as the base directory for the web app. Another option is to modify the <literal>gwt-maven-plugin</literal> to compile the widget set to <filename>src/main/webapp</filename> with its <literal>inplace</literal> mode."
msgstr ""

#. Tag: title
#: part1-rapid.xml:599
#, no-c-format
msgid "Customizing Views"
msgstr ""

#. Tag: para
#: part1-rapid.xml:601
#, no-c-format
msgid "For basic use, the entity views created by Roo work just fine. However in some cases, modifying the form or changing visible properties in the table component may be needed to satisfy critical end users. In this section, we discuss some methods how you can modify the application skeleton generated by Roo."
msgstr ""

#. Tag: title
#: part1-rapid.xml:610
#, no-c-format
msgid "Modifying Roo generated entity form"
msgstr ""

#. Tag: para
#: part1-rapid.xml:612
#, no-c-format
msgid "As discussed in <xref linkend=\"rapid.crudviews.skeleton\"/>, entity forms generated by Roo can be made compatible with the visual editor of the Eclipse plugin. If you gave the <parameter>--visuallyComposable true</parameter> parameter for Roo when creating the views, you can open for example the <filename>WorkEntryForm.java</filename> file with the Visual Designer. For example, right-click on the the file in the <guilabel>Project Explorer</guilabel> view. Then, choosing the <guilabel>Design</guilabel> view from the bottom of the screen opens the form generated by Roo in a graphical editor. Use the editor to organize the view according to your preferences. Also, add a <classname>Label</classname> component to the view and name it as <parameter>hoursLabel</parameter>."
msgstr ""

#. Tag: para
#: part1-rapid.xml:627
#, no-c-format
msgid "When you switch back to the source view, you can immediately see the changes made by the visual mode. To fill proper value for the newly created <parameter>hoursLabel</parameter>, modify the <methodname>setItemDataSource()</methodname> method to call an <methodname>updateDuration()</methodname> method that you create to calculate the duration between start and the end times. The resulting value should be shown in the label. You might also call this method from a value change listener hooked to start and end time fields."
msgstr ""

#. Tag: para
#: part1-rapid.xml:638
#, no-c-format
msgid "At any time you may switch between the source code editor and the visual editor without losing changes done on the other side. Just make sure not to modify parts of the code (methods and field declarations) that are marked with <literal>@AutoGenerated</literal> annotation."
msgstr ""

#. Tag: title
#: part1-rapid.xml:647
#, no-c-format
msgid "Creating a Calendar View for Filling Work Entries"
msgstr ""

#. Tag: para
#: part1-rapid.xml:649
#, no-c-format
msgid "In this section, we build an alternative view for <classname>WorkEntry</classname> entities built around the Vaadin Calendar add-on. The Calendar displays filled entries for the end user in a nice graphical presentation. User can get a quick overview of what he has done during the week and it is also easy to spot if there is some missing entries. The user can also select and modify time ranges visually with the calendar, which speeds up the daily tasks."
msgstr ""

#. Tag: para
#: part1-rapid.xml:659
#, no-c-format
msgid "Start by sketching the view with the Visual Designer."
msgstr ""

#. Tag: para
#: part1-rapid.xml:665
#, no-c-format
msgid "Choose <menuchoice><guimenu>File</guimenu><guisubmenu>New</guisubmenu><guisubmenu>Vaadin</guisubmenu><guimenuitem>Composite</guimenuitem></menuchoice>"
msgstr ""

#. Tag: para
#: part1-rapid.xml:671
#, no-c-format
msgid "Fill in the proper package and class name (such as <filename>~web.ui</filename> and <classname>CalendarView</classname>). The Vaadin Plugin for Eclipse creates a class that extends <classname>CustomComponent</classname>."
msgstr ""

#. Tag: para
#: part1-rapid.xml:679
#, no-c-format
msgid "Switch to the <guilabel>Design</guilabel> tab using the tab selector below the source code and the visual editor opens."
msgstr ""

#. Tag: para
#: part1-rapid.xml:686
#, no-c-format
msgid "For our view we need three components: two <classname>ComboBox</classname>es to select the project and employee, and a <classname>Calendar</classname> from the add-on that we installed previously. Filtering may help you in finding them from the component list. Drag them to the the composite and sketch the view according to your preferences. Also use the <guilabel>Properties</guilabel> tab to give components more meaningful names and possibly fill in a suitable caption. When you return to the source code view, you can see the generated code."
msgstr ""

#. Tag: title
#: part1-rapid.xml:698
#, no-c-format
msgid "Customizing Generated Code"
msgstr ""

#. Tag: para
#: part1-rapid.xml:700
#, no-c-format
msgid "The constructor has a comment to indicate the place where you should add your custom code. To make our view display some data, we need to connect the combo boxes to the data sources and provide events to the <classname>Calendar</classname> component via its <classname>CalendarEventProvider</classname> interface. For the project and employee selectors, the easiest option is to use the <classname>JPAContainer</classname>."
msgstr ""

#. Tag: para
#: part1-rapid.xml:710
#, no-c-format
msgid "When implementing the <classname>CalendarEventProvider</classname>, you need to extend the data model with a method that lists <classname>WorkEntry</classname> objects within a specific time ranges and also implement a light-weight wrapper for <classname>WorkEntry</classname> to make them compatible with the <classname>Calendar</classname> component."
msgstr ""

#. Tag: title
#: part1-rapid.xml:721
#, no-c-format
msgid "Using Custom Views"
msgstr ""

#. Tag: para
#: part1-rapid.xml:723
#, no-c-format
msgid "Once you have some data sources connected, you most probably want to check out how your new view looks in the application. The Vaadin application skeleton generated by Roo uses the Navigator add-on and a generated <literal>RapidEntityManagerView</literal> (where Rapid is the application base name) class as the view controller. For complex applications, you might want to build your own navigation system, but for this application we can just modify the <classname>RapidEntityManagerView</classname> to include our custom views."
msgstr ""

#. Tag: para
#: part1-rapid.xml:734
#, no-c-format
msgid "Let the composite implement the <classname>org.vaadin.navigator.Navigator.View</classname> interface and modify <methodname>addEntityViewsToList()</methodname> method in <classname>RapidEntityManagerView</classname> to include your custom view to the navigation. After that, deploy the application and verify the view is shown. You may add some test data in the <classname>WorkEntry</classname> views generated by Roo and check that it is shown in the <classname>CalendarView</classname>."
msgstr ""

#. Tag: title
#: part1-rapid.xml:747
#, no-c-format
msgid "Adding New Entries"
msgstr ""

#. Tag: para
#: part1-rapid.xml:749
#, no-c-format
msgid "To allow users to add new entries via Calendar, implement a <classname>RangeSelectHandler</classname> and register it to the Calendar. In the handler, you can create an new instance of <classname>WorkEntry</classname>. Fill in the time range from the provided event object and default values for the project and employee fields that you can find through the combo boxes that we created earlier."
msgstr ""

#. Tag: para
#: part1-rapid.xml:759
#, no-c-format
msgid "The new <classname>WorkEntry</classname> object now contains the most essential information, but it still has the default comment field. The user might also want to review the new entry. Here we can use the previously fine-tuned <classname>WorkEntry</classname> form that was originally automatically created by the Roo. Wrap the <classname>WorkEntry</classname> object in a <classname>BeanItem</classname> and pass it to a <classname>WorkEntryForm</classname> instance. As our Calendar component consumes quite a lot of space on the screen, it is best to show the editor form in a modal Window. Again, use your existing Java know-how and extract the recyclable parts to helper methods (such as <methodname>showEditorPopup(WorkEntry)</methodname>)."
msgstr ""

#. Tag: para
#: part1-rapid.xml:774
#, no-c-format
msgid "To fine-tune the usability of the view, you may add more hooks in the <classname>Calendar</classname>:"
msgstr ""

#. Tag: listitem
#: part1-rapid.xml:780
#, no-c-format
msgid "<classname>EventClickHandler</classname> to open editor for existing event"
msgstr ""

#. Tag: listitem
#: part1-rapid.xml:781
#, no-c-format
msgid "<classname>EventMoveHandler</classname> to adjust the time range"
msgstr ""

#. Tag: listitem
#: part1-rapid.xml:782
#, no-c-format
msgid "<classname>EventResizeHandler</classname> to adjust the time range"
msgstr ""

#. Tag: title
#: part1-rapid.xml:788
#, no-c-format
msgid "Creating a Custom View for Reporting"
msgstr ""

#. Tag: para
#: part1-rapid.xml:790
#, no-c-format
msgid "Our example project also has a report view for easy listing of work entries. The query can be filtered by project, employee and the time range. Most of the process is similar to creating the calendar view, but in the <classname>ReportView</classname> one can survive with just standard Vaadin components. The table component at the bottom of the view lists entries matching the criteria defined by the controls above it."
msgstr ""

#. Tag: para
#: part1-rapid.xml:799
#, no-c-format
msgid "When you have sketched the view connect selects to the data sources. Also hook a <classname>JPAContainer</classname> to the <classname>Table</classname>. Add <classname>ChangeListener</classname> to all fields and update filters in the <classname>JPAContainer</classname> instance hooked to the result table."
msgstr ""

#. Tag: title
#: part1-rapid.xml:809
#, no-c-format
msgid "Authentication and Authorization"
msgstr ""

#. Tag: para
#: part1-rapid.xml:811
#, no-c-format
msgid "The goals of authentication and authorization are preventing unauthorized viewing and editing of data. In the case of our tutorial application, only administrators should be allowed to view and edit hours and projects entered by users other than themselves."
msgstr ""

#. Tag: title
#: part1-rapid.xml:819
#, no-c-format
msgid "Implementing Authentication and Authorization"
msgstr ""

#. Tag: para
#: part1-rapid.xml:821
#, no-c-format
msgid "Since the requirements of the example project are very simple, all authentication is handled with a simple <classname>Authenticator</classname> class that checks if a certain user with a certain password exists in the database. The <classname>Authenticator</classname> could just as easily be implemented using Spring Security or some other security framework. The authenticator has two responsibilities:"
msgstr ""

#. Tag: para
#: part1-rapid.xml:833
#, no-c-format
msgid "Authenticate users based on a username / password pair"
msgstr ""

#. Tag: para
#: part1-rapid.xml:838
#, no-c-format
msgid "Keep track of views that require administrator privileges to access and answer the simple question: \"Is this view accessible in the current session?\""
msgstr ""

#. Tag: para
#: part1-rapid.xml:846
#, no-c-format
msgid "This approach is too simplistic for a real project, but the basics should be fairly similar when integrating a framework such as Spring Security with Vaadin."
msgstr ""

#. Tag: para
#: part1-rapid.xml:852
#, no-c-format
msgid "To authenticate users, the system needs to show a login view before letting users view any possibly sensitive data. For the example project, the Vaadin composite <classname>LoginView</classname> was created using Vaadin Visual Designer. By default the Visual Designer creates a <classname>AbsoluteLayout</classname> as the root layout. This was changed into a <classname>VerticalLayout</classname> and a <classname>LoginForm</classname> was placed inside of it. The login form was then aligned to the middle center, making it appear in the middle of the browser window when the login view is the only visible layout in the main window."
msgstr ""

#. Tag: para
#: part1-rapid.xml:865
#, no-c-format
msgid "In order to display the login view before anything else, the main window, which is defined by the <classname>RapidWindow</classname> class has to be edited. Instead of setting the content of the window to a new <classname>RapidEntityManagerView</classname>, the content is set to the login view, unless a user is already logged in, and a <classname>LoginListener</classname> is registered to the login view. The login listener is called when the \"Login\" button is clicked, and passed the values of the text fields in the login form. By default, a username and a password is passed in and these are passed off to the authenticator for authentication. If the authentication succeeds, the content of the <classname>RapidWindow</classname> is replaced with a new <classname>RapidEntityManagerView</classname>, just as before introducing the login view."
msgstr ""

#. Tag: programlisting
#: part1-rapid.xml:881
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[public class RapidWindow extends Window\n"
      "        implements LoginListener {\n"
      "\n"
      "    public RapidWindow() {\n"
      "        if (RapidApplication.get().getUser() == null) {\n"
      "            setContent(new LoginView(this));\n"
      "        } else {\n"
      "            showMainUI();\n"
      "        }\n"
      "\n"
      "        // select window theme\n"
      "        setTheme(\"rapid\");\n"
      "    }\n"
      "\n"
      "    public void showMainUI() {\n"
      "        // entity manager\n"
      "        setContent(new RapidEntityManagerView());\n"
      "    }\n"
      "\n"
      "    @Override\n"
      "    public void onLogin(LoginEvent event) {\n"
      "        String username = event.getLoginParameter(\"username\");\n"
      "        String password = event.getLoginParameter(\"password\");\n"
      "        if (Authenticator.login(username, password)) {\n"
      "            showMainUI();\n"
      "        }\n"
      "    }\n"
      "}]]>"
msgstr ""

#. Tag: para
#: part1-rapid.xml:883
#, no-c-format
msgid "The check whether a user is already logged in is important, because of the multi-window support that is automatically enabled in all Vaadin projects created with Spring Roo. Without the check, a user could first log in as one user and then open a new window and log in as another user, causing both windows to be logged in as the latter user. This is because all windows open to the same application in the same browser share the same session, and only the last user to be logged in is stored in the session."
msgstr ""

#. Tag: para
#: part1-rapid.xml:893
#, no-c-format
msgid "Authorization is handled in the <methodname>addEntityViewsToList()</methodname> method in <classname>RapidEntityManagerView</classname> class. Before the view is added to the list, the authenticator is asked whether the user is allowed access the view and only adds the view if the answer is <literal>true</literal>."
msgstr ""

#. Tag: programlisting
#: part1-rapid.xml:902
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[if (Authenticator.isViewAccessible(viewClass) &&\n"
      "    Navigator.View.class.isAssignableFrom(viewClass)) {\n"
      "    navigator.addView(key, viewClass);\n"
      "    ...\n"
      "}]]>"
msgstr ""

#. Tag: title
#: part1-rapid.xml:907
#, no-c-format
msgid "<title>Internationalization</title>"
msgstr ""

#. Tag: para
#: part1-rapid.xml:909
#, no-c-format
msgid "We want to have the user interface to be available in different languages. Details such as the formatting of dates has to change depending on the selected language."
msgstr ""

#. Tag: para
#: part1-rapid.xml:915
#, no-c-format
msgid "The login view has a drop-down select that allows the user to choose the language. The application attempts to detect the preferred language reported by the browser, and defaults to English if the preferred language is not available. The preferred language is detected and the locale set in the application class, as follows:"
msgstr ""

#. Tag: programlisting
#: part1-rapid.xml:923
#, no-c-format
msgid ""
      "<?pocket-size 75% ?><![CDATA[public void init() {\n"
      "    ...\n"
      "    // Use the locale from the request as default.\n"
      "    // Login uses this setting later.\n"
      "    setLocale(((WebApplicationContext)getContext())\n"
      "            .getBrowser().getLocale());\n"
      "    ...\n"
      "}]]>"
msgstr ""

#. Tag: para
#: part1-rapid.xml:925
#, no-c-format
msgid "Now that we know the preferred language of the user, we can start internationalizing the application. Vaadin does not have a preferred way of doing internationalization, so you are free to choose whichever method you prefer. Quite often, the common Java practice of using <classname>ResourceBundle</classname>s and <filename>.properties</filename> files is sufficient, and this suits our application perfectly. Please refer to Java documentation for more details regarding internationalization in Java."
msgstr ""

#. Tag: para
#: part1-rapid.xml:935
#, no-c-format
msgid "The <emphasis>Externalize Strings</emphasis> feature in the Eclipse IDE (and STS) will handle most of the boilerplate generation. In the <guilabel>Package Explorer</guilabel>, select the package that holds the UI classes (<package>com.vaadin.rapid.web</package>) and select <menuchoice><guimenu>Source</guimenu><guimenuitem>Externalize Strings</guimenuitem></menuchoice>. The dialog shows a list of files that contains strings that are yet to be translated - you need to open one at a time and externalize the strings. In the externalize dialog, first make sure the location of the <filename>messages.properties</filename> is suitable (and stays the same for all files you go trough), in our case we want it in the <package>com.vaadin.rapid.web</package> package. The IDE will generate the <filename>messages.properties</filename> and a <classname>Messages</classname> class the first time you run it. In the <guilabel>String to externalize</guilabel> list, make sure that strings that do not need to be translated have an X mark and that strings that should be translated have a check mark. Also, change all keys for translated strings to something descriptive."
msgstr ""

#. Tag: title
#: part1-rapid.xml:956
#, no-c-format
msgid "The Externalize Strings Dialog"
msgstr ""

#. Tag: para
#: part1-rapid.xml:964
#, no-c-format
msgid "Externalize Strings marks strings that should not be translated using a special comment in the code, so that the next time you run the function, it will only show the new strings or strings you have forgotten."
msgstr ""

#. Tag: para
#: part1-rapid.xml:970
#, no-c-format
msgid "Note that if you externalize strings from a visually editable component, the Visual Editor can no longer open the component, because the generated code has been changed. This will probably be fixed in a future release of the Visual Editor, but for now you can go ahead and move the code rows that contain translations to the constructor."
msgstr ""

#. Tag: para
#: part1-rapid.xml:978
#, no-c-format
msgid "Next, we will translate the names of the Views. We'll do this dynamically in the <classname>RapidEntityManagerView</classname> by prefixing the translation key with \"<literal>View.</literal>\" and appending the view name (with spaces removed)."
msgstr ""

#. Tag: programlisting
#: part1-rapid.xml:984
#, no-c-format
msgid "<?pocket-size 65% ?><![CDATA[final String viewCaption = Messages.getString(\"View.\" + viewName);]]>"
msgstr ""

#. Tag: para
#: part1-rapid.xml:986
#, no-c-format
msgid "In this application we do not want to translate the URI fragment that is shown in the browser, so we make some small changes to keep the viewName and the translated viewCaption separate throughout the code. Whether or not one wants to translate depends on the application - if you translate the fragment, it will be more descriptive in the users own language, but users with different language settings will not be able to share deep links."
msgstr ""

#. Tag: para
#: part1-rapid.xml:995
#, no-c-format
msgid "To translate the column headers of the various tables, we add some code to the end of the <methodname>refresh()</methodname> in <classname>AbstractEntityView</classname>. This will allow us to translate the headers after the content has been set:"
msgstr ""

#. Tag: programlisting
#: part1-rapid.xml:1002
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[protected void refresh() {\n"
      "    ...\n"
      "    // Translate column headers\n"
      "    Object[] columns = getTableColumns();\n"
      "    String[] headers = new String[columns.length];\n"
      "    for (int i = 0; i < headers.length; i++)\n"
      "        headers[i] = Messages.getString(getClass().getSimpleName()\n"
      "                     + \".\" + columns[i].toString());\n"
      "    table.setColumnHeaders(headers);\n"
      "    ...\n"
      "}]]>"
msgstr ""

#. Tag: para
#: part1-rapid.xml:1004
#, no-c-format
msgid "To translate boolean values and localize dates in the various tables, we modify the <methodname>createTable()</methodname> in <classname>AbstractEntityView</classname> so that it returns our own <classname>RapidTable</classname>, which overrides <methodname>formatPropertyValue()</methodname>:"
msgstr ""

#. Tag: programlisting
#: part1-rapid.xml:1012
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[protected String formatPropertyValue(Object rowId, Object colId,\n"
      "                                     Property property) {\n"
      "    Object value = property.getValue();\n"
      "    if (value instanceof Boolean) {\n"
      "        // Translate boolean values\n"
      "        return Messages.getString(\"Boolean.\"\n"
      "            + ((Boolean) value).toString());\n"
      "    } else if (value instanceof Date) {\n"
      "        // Localize date/time\n"
      "        return DateFormat.getDateTimeInstance(DateFormat.SHORT,\n"
      "            DateFormat.SHORT, RapidApplication.get().getLocale())\n"
      "                .format((Date) value);\n"
      "    }\n"
      "    return super.formatPropertyValue(rowId, colId, property);\n"
      "}]]>"
msgstr ""

#. Tag: para
#: part1-rapid.xml:1014
#, no-c-format
msgid "There is one more translation task to do: <classname>BeansValidation</classname> (JSR 303) is used for validating values according to annotations on the entities. This process produces some messages that originate from the <classname>BeansValidation</classname>, and need to be translated separately. <classname>BeansValidation</classname> also uses property files, namely <filename>ValidationMessages.properties</filename>, that should be placed in the <filename>src/main/resources</filename> folder. To tell <classname>BeansValidation</classname> which locale to use we currently need some boilerplate - this will hopefully be fixed soon. In each <classname>Form</classname> class (<classname>ProjectForm</classname>, <classname>RapidUserForm</classname>, <classname>WorkEntryForm</classname>) we need to call a helper that goes trough our validators and sets the locale:"
msgstr ""

#. Tag: programlisting
#: part1-rapid.xml:1029
#, no-c-format
msgid ""
      "<?pocket-size 75% ?><![CDATA[public void setItemDataSource(Item item) {\n"
      "    ...\n"
      "    for (Object propertyId : getBeanPropertyIds())\n"
      "        ValidatorMessageUtil.updateValidators(\n"
      "                getField(propertyId));\n"
      "    ...\n"
      "}]]>"
msgstr ""

#. Tag: para
#: part1-rapid.xml:1031
#, no-c-format
msgid "The helper method in <classname>ValidatorMessageUtil</classname> iterates trough the validators for the field, updating the locale."
msgstr ""

#. Tag: title
#: part1-rapid.xml:1038
#, no-c-format
msgid "Testing the Application"
msgstr ""

#. Tag: para
#: part1-rapid.xml:1040
#, no-c-format
msgid "In the data model section, we already discussed briefly about automatic integration tests that Roo generates for the domain objects. They are a good start, but only ensure that simple CRUD methods work from domain model to the persistency layer. In serious application development, you should write tests for any additional business logic, as well for the UI layers."
msgstr ""

#. Tag: title
#: part1-rapid.xml:1049
#, no-c-format
msgid "Overview of Testing"
msgstr ""

#. Tag: para
#: part1-rapid.xml:1051
#, no-c-format
msgid "Writing unit tests for the user interface layer of an application can be a time consuming task. Yet, they do not necessary ensure that the UI works properly. Deployment problems, timing issues, and the browser layer may still cause issues that break the UI. In this step of the tutorial, we will use the Vaadin TestBench to test the user interface layer. TestBench executes tests with real browsers, by simulating user actions in the browser. This way, we do not just test the UI layer, but the entire stack from JavaScripts running in the browser down to the database."
msgstr ""

#. Tag: para
#: part1-rapid.xml:1062
#, no-c-format
msgid "Vaadin TestBench tests are normally recorded with a browser plugin. Advanced users may fine tune the tests by hand and, for example, configure tests with parameters. Tests scripts are then converted into JUnit test cases, which can be integrated into an existing testing environment. Roo projects are based on the Maven build system, so we will configure the <filename>pom.xml</filename> of the project so that TestBench tests are run automatically. The TestBench setup and usage is discussed briefly. Please refer to <xref linkend=\"testbench\"/> in case you face problems."
msgstr ""

#. Tag: para
#: part1-rapid.xml:1074
#, no-c-format
msgid "To help the integration tests, we use the Maven Failsafe plugin. It is a testing plugin that automatically runs all tests named, for example, <filename>*ITCase.java</filename> in the test sources with the <literal>verify</literal> goal. The Failsafe plugin also provides necessary hooks where we can configure how our application server is started and stopped. If you want to test on a separate server, you can do just deploy and un-deploy at these phases. The necessary Maven snippet can be found from the Failsafe project page."
msgstr ""

#. Tag: title
#: part1-rapid.xml:1087
#, no-c-format
msgid "Running the Test Server"
msgstr ""

#. Tag: para
#: part1-rapid.xml:1089
#, no-c-format
msgid "The Jetty plugin should be already installed in your <filename>pom.xml</filename>, but we will configure Jetty to start automatically before the integration test phase and close cleanly when the tests have been run. Add the following XML snippet inside the definition of your Jetty plugin:"
msgstr ""

#. Tag: programlisting
#: part1-rapid.xml:1097
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[<executions>\n"
      "    <!-- start and stop jetty (running our app) when running\n"
      "         integration tests -->\n"
      "    <execution>\n"
      "        <id>start-jetty</id>\n"
      "        <phase>pre-integration-test</phase>\n"
      "        <goals>\n"
      "            <goal>run-exploded</goal>\n"
      "        </goals>\n"
      "        <configuration>\n"
      "            <scanIntervalSeconds>0</scanIntervalSeconds>\n"
      "            <daemon>true</daemon>\n"
      "            <stopKey>STOP</stopKey>\n"
      "            <stopPort>8866</stopPort>\n"
      "        </configuration>\n"
      "    </execution>\n"
      "    <execution>\n"
      "        <id>stop-jetty</id>\n"
      "        <phase>post-integration-test</phase>\n"
      "        <goals>\n"
      "            <goal>stop</goal>\n"
      "        </goals>\n"
      "        <configuration>\n"
      "            <stopPort>8866</stopPort>\n"
      "            <stopKey>STOP</stopKey>\n"
      "        </configuration>\n"
      "    </execution>\n"
      "</executions>]]>"
msgstr ""

#. Tag: para
#: part1-rapid.xml:1099
#, no-c-format
msgid "To verify that the integration test system works, you can create a simple smoke test. Create a JUnit test case and name it as <filename>SmokeTestITCase.java</filename> and create a test method that connects to the test server. Verify that a proper kickstart page is returned. This verifies that the application is properly deployed for more advanced tests. Run your integration test with <command>mvn verify</command>. If this basic integration test passes fine, you are ready to continue setting up the TestBench."
msgstr ""

#. Tag: title
#: part1-rapid.xml:1112
#, no-c-format
msgid "Installing TestBench with Maven"
msgstr ""

#. Tag: para
#: part1-rapid.xml:1114
#, no-c-format
msgid "TestBench is not available in any public Maven repository. Unless you have TestBench already installed, download it from vaadin.com/directory. Install the JAR to your local repository (or Maven proxy) by executing the following command in the install directory of TestBench:"
msgstr ""

#. Tag: screen
#: part1-rapid.xml:1122
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><command>mvn install::install-file</command> -Dfile=vaadin-testbench-2.2.2.jar\n"
      "-DgroupId=com.vaadin -DartifactId=testbench -Dversion=2.2.2\n"
      "-Dpackaging=jar -DgeneratePom=true"
msgstr ""

#. Tag: para
#: part1-rapid.xml:1124
#, no-c-format
msgid "You also need to specify the dependency <filename>pom.xml</filename> file of the project. Use the <literal>test</literal> scope as the JAR file is not needed in the actual application execution. We will need it when compiling test scripts from HTML to JUnit test cases, and also when executing the actual JUnit tests."
msgstr ""

#. Tag: para
#: part1-rapid.xml:1132
#, no-c-format
msgid "Notice that Vaadin TestBench is licensed with the Commercial Vaadin Add-on License. You can download the product for a 30-day free trial period with Maven, after which you need a license which you can buy from the Vaadin Directory."
msgstr ""

#. Tag: title
#: part1-rapid.xml:1141
#, no-c-format
msgid "Generating JUnit Tests"
msgstr ""

#. Tag: para
#: part1-rapid.xml:1143
#, no-c-format
msgid "The test cases for Vaadin TestBench are recorded as HTML files and need to be compiled as JUnit tests, as described in <xref linkend=\"testbench.junit\"/>. This needs to be automated."
msgstr ""

#. Tag: para
#: part1-rapid.xml:1149
#, no-c-format
msgid "Native scripts are kept in source repository as they are more maintainable than the compiled JUnit tests. The conversion is done by <classname>com.vaadin.testbenc.DirectoryTestConverter</classname> tool. You can use it most conveniently through the Maven Exec plugin. Configure it to be run at, for example, <filename>generate-test-sources</filename> and add generated java files to test sources. The Exec plugin has an option to do this, but you may need to use <literal>build-helper-maven-plugin</literal> instead."
msgstr ""

#. Tag: title
#: part1-rapid.xml:1162
#, no-c-format
msgid "Configuring System Properties"
msgstr ""

#. Tag: para
#: part1-rapid.xml:1164
#, no-c-format
msgid "The test setup is now almost ready. As the last step, we need to provide some system properties to be defined for the JUnit tests generated by TestBench. Add the following configuration snippet to the configuration of the Failsafe plugin:"
msgstr ""

#. Tag: programlisting
#: part1-rapid.xml:1171
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[<configuration>\n"
      "    <!-- Define some necessary system properties for -->\n"
      "    <!-- TestBench JUnit tests.                      -->\n"
      "    <systemPropertyVariables>\n"
      "        <com.vaadin.testbench.tester.host>\n"
      "            ${testbench.hubhost}\n"
      "        </com.vaadin.testbench.tester.host>\n"
      "        <com.vaadin.testbench.deployment.url>\n"
      "            ${testbench.appurl}\n"
      "        </com.vaadin.testbench.deployment.url>\n"
      "        <com.vaadin.testbench.screenshot.directory>\n"
      "            ${project.build.directory}/testbench-generated\n"
      "        </com.vaadin.testbench.screenshot.directory>\n"
      "    </systemPropertyVariables>\n"
      "    <encoding>UTF-8</encoding>\n"
      "</configuration>]]>"
msgstr ""

#. Tag: para
#: part1-rapid.xml:1173
#, no-c-format
msgid "The parameters are described in <xref linkend=\"testbench.junit.ant-configuration\"/>. Define the used parameters and you are ready to go. The <literal>localhost</literal> and <literal>http://localhost:8080/${project.name}</literal> will work fine for local testing. Save your scripts under <filename>src/test/resources/</filename> with the filenames ending with <filename>ITCase.html</filename>, and they will be automatically executed when you issue <command>mvn verify</command>. Your first test can simply login as the admin user and then assert some text to verify that the initial screen gets rendered."
msgstr ""

#. Tag: title
#: part1-rapid.xml:1188
#, no-c-format
msgid "Notes"
msgstr ""

#. Tag: para
#: part1-rapid.xml:1190
#, no-c-format
msgid "Notice that we did not configure the TestBench hub (nor a remote control) to start and stop from Maven. Instead, we just defined the host where the hub is running. So, before actually executing the integration tests, make sure that the TestBench is up and running, as described in <xref linkend=\"testbench\"/>. Commonly, TestBench is used so that the hub and its slaves are running in a separate cluster, rather than on developer's workstations. If you have access to this kind of external hub, you can give its address as <literal>com.vaadin.testbench.tester.host</literal>. The <literal>localhost</literal> does not work as the deployment URL in this case, but you should use an URL which the test machines can access. If no separate test cluster is used, you might want to customize your Maven build to start and stop TestBench in a way similar to Jetty."
msgstr ""

#. Tag: para
#: part1-rapid.xml:1206
#, no-c-format
msgid "Your more advanced tests can then use the login test as a base and test various features. Record tests for at least basic CRUD actions for all entity types. To verify authorization code to work, you can also create a non-admin user in one test and verify with the new user that admin only features are not visible. Most actions can be recorded with the TestBench Recorder automatically, but there are some limitations. For example, selecting a time range in the Calendar view needs to be manually built using Selenium methods. (The TestBench version 2.2.0 also has a regression that adds an excess <literal>selectWindow</literal> command when logging in with LoginForm, so remove that command manually in case your test seems to fail in the very beginning.)"
msgstr ""

#. Tag: para
#: part1-rapid.xml:1220
#, no-c-format
msgid "When building tests, notice that integration tests use the same database by default, so the data filled in the previous test will be visible during the next test. Tests are run in alphabetical order, so you may use a naming convention to control the test execution order."
msgstr ""

#. Tag: title
#: part1-rapid.xml:1230
#, no-c-format
msgid "Exception Handling"
msgstr ""

#. Tag: para
#: part1-rapid.xml:1232
#, no-c-format
msgid "When something goes wrong in a Vaadin application, a small error indicator icon is shown on the control that was interacted with. When hovering over the icon, a tooltip containing the entire stacktrace of the exception is shown. No normal person (that is, other than a software developer) understands what this means and knows what to do."
msgstr ""

#. Tag: para
#: part1-rapid.xml:1240
#, no-c-format
msgid "In this section, we will remove the stack traces and replace them with error messages in terms that a normal user would understand."
msgstr ""

#. Tag: title
#: part1-rapid.xml:1246
#, no-c-format
msgid "Preventing Stacktraces in the UI"
msgstr ""

#. Tag: para
#: part1-rapid.xml:1248
#, no-c-format
msgid "The autogenerated code lets the exceptions fall all the way through to the user interface. This can easily be changed by overriding the <methodname>terminalError()</methodname> method in the <classname>Application</classname> subclass."
msgstr ""

#. Tag: programlisting
#: part1-rapid.xml:1255
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[@Override\n"
      "public void terminalError(Terminal.ErrorEvent event) {\n"
      "    Window errorWindow = findWindowForError(event);\n"
      "    // Shows an error notification\n"
      "    if (errorWindow != null) {\n"
      "        errorWindow.showNotification(\n"
      "            \"An internal error has occurred, please \" +\n"
      "                \"contact the administrator!\",\n"
      "            Notification.TYPE_ERROR_MESSAGE);\n"
      "    }\n"
      "\n"
      "    // print the error\n"
      "    logger.log(Level.SEVERE,\n"
      "        \"An uncaught exception occurred: \",\n"
      "        event.getThrowable());\n"
      "}]]>"
msgstr ""

#. Tag: title
#: part1-rapid.xml:1259
#, no-c-format
msgid "Where to Catch Exceptions"
msgstr ""

#. Tag: para
#: part1-rapid.xml:1261
#, no-c-format
msgid "The most likely places for errors to occur in the example application are when interacting with the database. Validation errors are already handled in the generated code, but errors due to constraint violations on the database level and communication failures need to be caught and handled correctly."
msgstr ""

#. Tag: para
#: part1-rapid.xml:1269
#, no-c-format
msgid "Almost all saving and deleting of entities is handled through the <classname>AbstractEntityView</classname>, which is the super type of all but one view. <classname>CalendarView</classname> is the custom view that does not extend <classname>AbstractEntityView</classname>, and thus needs to catch the exceptions separately. Almost all exceptions can be handled in a good way by handling them in <classname>AbstractEntityView</classname> and <classname>CalendarView</classname>. When an exception occurs, an error notification should be displayed to the user."
msgstr ""

#. Tag: title
#: part1-rapid.xml:1282
#, no-c-format
msgid "Handling Exceptions in AbstractEntityView"
msgstr ""

#. Tag: para
#: part1-rapid.xml:1284
#, no-c-format
msgid "The Vaadin plug-in for Spring Roo generates the <classname>AbstractEntityView</classname> class for handling CRUD for all different entities in the application. This means that the methods that handle saving and deleting of entities can be changed to include customized exception handling. Roo generates an aspect, <classname>AbstractEntityView_Roo_AbstractEntityView</classname> containing the <methodname>doCommit()</methodname> and <methodname>doDelete()</methodname> methods. These methods can be changed by moving them to the <classname>AbstractEntityView</classname>, which will cause Roo to stop autogenerating the methods in the <classname>AbstractEntityView_Roo_AbstractEntityView</classname> aspect."
msgstr ""

#. Tag: para
#: part1-rapid.xml:1300
#, no-c-format
msgid "Move the methods to <classname>AbstractEntityView</classname> and surround the method contents with a <literal>try...catch</literal> block, catching all <classname>Exception</classname>s and showing a notification about which operation failed."
msgstr ""

#. Tag: programlisting
#: part1-rapid.xml:1307
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[@Transactional\n"
      "public void doDelete() {\n"
      "    try {\n"
      "        Object id = getIdForEntity(getEntityForItem(\n"
      "                        getForm().getItemDataSource()));\n"
      "        if (id != null) {\n"
      "            getTable().removeItem(id);\n"
      "        }\n"
      "    } catch (Exception e) {\n"
      "        logger.log(Level.SEVERE, \"Could not delete entity\", e);\n"
      "        getWindow().showNotification(\n"
      "            \"Deletion of the item failed.\",\n"
      "            Notification.TYPE_ERROR_MESSAGE);\n"
      "    }\n"
      "}]]>"
msgstr ""

#. Tag: title
#: part1-rapid.xml:1311
#, no-c-format
msgid "Handling Exceptions in CalendarView"
msgstr ""

#. Tag: para
#: part1-rapid.xml:1313
#, no-c-format
msgid "Since <classname>CalendarView</classname> is a custom view which doesn't extend <classname>AbstractEntityView</classname>, it also needs to handle exceptions. The calendar view does the same things as the other entity views, but with a different layout and logic."
msgstr ""

#. Tag: para
#: part1-rapid.xml:1320
#, no-c-format
msgid "Exception handling needs to be added to all code that persists or deletes data from the database. The <classname>CalendarView</classname> does this in several locations: When creating a new entry, when editing an entry, when moving an entry and when resizing an entry. E.g. the range select handler, which persists a work entry when it is first created should be changed to wrap the call to <methodname>workEntry.persist()</methodname> in a <literal>try...catch</literal> block."
msgstr ""

#. Tag: programlisting
#: part1-rapid.xml:1331
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[@Override\n"
      "public void rangeSelect(RangeSelectEvent event) {\n"
      "\n"
      "    ...\n"
      "    // Build a work entry\n"
      "    ...\n"
      "\n"
      "    try {\n"
      "        workEntry.persist();\n"
      "        showEditorPopup(workEntry, true);\n"
      "    } catch (Exception e) {\n"
      "        logger.log(Level.SEVERE, \"Could not store entity\", e);\n"
      "        getWindow().showNotification(\"Could not create a new \" +\n"
      "                work entry due to an internal error.\",\n"
      "                Notification.TYPE_ERROR_MESSAGE);\n"
      "    }\n"
      "}]]>"
msgstr ""

#. Tag: para
#: part1-rapid.xml:1333
#, no-c-format
msgid "In the rest of the code, all calls to <methodname>persist()</methodname>, <methodname>merge()</methodname> or <methodname>delete()</methodname> are wrapped in <literal>try...catch</literal> blocks and a notification with a suitable message for each of the cases is displayed."
msgstr ""

#. Tag: title
#: part1-rapid.xml:1345
#, no-c-format
msgid "Deploying to Cloud Foundry"
msgstr ""

#. Tag: para
#: part1-rapid.xml:1347
#, no-c-format
msgid "Cloud Foundry (<literal>http://cloudfoundry.com/</literal>) is a new platform-as-a-service solution from SpringSource. Cloud Foundry makes it extremely easy to deploy applications created with Spring Roo and Vaadin to the cloud."
msgstr ""

#. Tag: para
#: part1-rapid.xml:1354
#, no-c-format
msgid "Before you can deploy to Cloud Foundry, you must register an account at <literal>http://cloudfoundry.com/</literal>. The activation might take some time, so you should do the registration several days before you need the account."
msgstr ""

#. Tag: title
#: part1-rapid.xml:1362
#, no-c-format
msgid "Installing the Cloud Foundry Plug-in in STS"
msgstr ""

#. Tag: para
#: part1-rapid.xml:1364
#, no-c-format
msgid "Installing the Cloud Foundry plug-in is easy. Open the STS Dashboard and select the <guilabel>Extensions</guilabel> tab in the lower-left corner of the dashboard view. Scroll down to the <guilabel>Server and Clouds</guilabel> section and choose the <guilabel>Cloud Foundry integration plug-in</guilabel> from there. Click <guibutton>Install</guibutton> and follow the on-screen instructions."
msgstr ""

#. Tag: title
#: part1-rapid.xml:1375
#, no-c-format
msgid "Deploying the Application"
msgstr ""

#. Tag: para
#: part1-rapid.xml:1376
#, no-c-format
msgid "Deploying the application is also very simple."
msgstr ""

#. Tag: para
#: part1-rapid.xml:1382
#, no-c-format
msgid "Open the <guilabel>Servers</guilabel> view, right-click somewhere in it, and create a <menuchoice><guimenu>New</guimenu><guimenuitem>Server</guimenuitem></menuchoice>."
msgstr ""

#. Tag: para
#: part1-rapid.xml:1389
#, no-c-format
msgid "In the <guilabel>New Server</guilabel> window, choose <menuchoice><guimenu>VMWare</guimenu><guimenuitem>Cloud Foundry</guimenuitem></menuchoice> and click <guibutton>Next</guibutton>."
msgstr ""

#. Tag: para
#: part1-rapid.xml:1397
#, no-c-format
msgid "Fill in the account information that you received by email from cloudfoundry.com and choose <guilabel>VMware Cloud Foundry - http://api.cloudfoundry.com</guilabel> from the URL dropdown."
msgstr ""

#. Tag: para
#: part1-rapid.xml:1404
#, no-c-format
msgid "You can click 'Validate Account' to make sure that you filled in your password correctly."
msgstr ""

#. Tag: para
#: part1-rapid.xml:1410
#, no-c-format
msgid "Click 'Finish' to finish the installation of the Cloud Foundry server."
msgstr ""

#. Tag: para
#: part1-rapid.xml:1416
#, no-c-format
msgid "Once the new server is installed, you can add your project to it, just like you would add your project to any other server using the <guilabel>Servers</guilabel> view. Once added, right-click on the project and choose <guibutton>Start</guibutton>. This will ask for a name that identifies your project in the cloud as well as the URL to deploy to. After giving this information, the project will be uploaded and started in the cloud. After a few seconds, you should be able to visit the URL you provided and see your project in action."
msgstr ""

#. Tag: title
#: part1-rapid.xml:1429
#, no-c-format
msgid "Binding to the MySQL Service"
msgstr ""

#. Tag: para
#: part1-rapid.xml:1431
#, no-c-format
msgid "The final part of our demonstration is to bind the application deployed in the Cloud Foundry to a real DBMS. In the following, we describe how you can bind the application to a MySQL database."
msgstr ""

#. Tag: para
#: part1-rapid.xml:1439
#, no-c-format
msgid "Bind a MySQL database to the application in Eclipse. In the <guilabel>Cloud Foundry</guilabel> view:"
msgstr ""

#. Tag: para
#: part1-rapid.xml:1446
#, no-c-format
msgid "Double-click the application deployed in Cloud Foundry"
msgstr ""

#. Tag: para
#: part1-rapid.xml:1452
#, no-c-format
msgid "Select <guilabel>Services</guilabel> and click <guibutton>Add</guibutton> in the upper-right corner"
msgstr ""

#. Tag: para
#: part1-rapid.xml:1459
#, no-c-format
msgid "Give the connection a name and choose a MySQL database"
msgstr ""

#. Tag: para
#: part1-rapid.xml:1465
#, no-c-format
msgid "Drag the created service from the <guilabel>Services</guilabel> panel to the <guilabel>Services</guilabel> table in the application"
msgstr ""

#. Tag: para
#: part1-rapid.xml:1476
#, no-c-format
msgid "Remove the dependency to the HSQLDB that we used at first from <filename>pom.xml</filename>"
msgstr ""

#. Tag: para
#: part1-rapid.xml:1482
#, no-c-format
msgid "Add the MySQL connector dependency as follows:"
msgstr ""

#. Tag: programlisting
#: part1-rapid.xml:1486
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[<dependency>\n"
      "  <groupId>mysql</groupId>\n"
      "  <artifactId>mysql-connector-java</artifactId>\n"
      "  <version>5.1.15</version>\n"
      "</dependency>]]>"
msgstr ""

#. Tag: para
#: part1-rapid.xml:1490
#, no-c-format
msgid "Add the Cloud Foundry runtime dependency as follows:"
msgstr ""

#. Tag: programlisting
#: part1-rapid.xml:1494
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[<dependency>\n"
      "  <groupId>org.cloudfoundry</groupId>\n"
      "  <artifactId>cloudfoundry-runtime</artifactId>\n"
      "  <version>0.6.1</version>\n"
      "</dependency>]]>"
msgstr ""

#. Tag: para
#: part1-rapid.xml:1498
#, no-c-format
msgid "Edit the <filename>persistence.xml</filename> file and change the <classname>org.eclipse.persistence.platform.database.HSQLPlatform</classname> class name to <classname>org.eclipse.persistence.platform.database.MySQLPlatform</classname>."
msgstr ""

#. Tag: para
#: part1-rapid.xml:1507
#, no-c-format
msgid "Edit the <filename>applicationContext.xml</filename> file and change the following line:"
msgstr ""

#. Tag: programlisting
#: part1-rapid.xml:1511
#, no-c-format
msgid "<?pocket-size 65% ?><![CDATA[<beans xmlns=\"http://www.springframework.org/schema/beans\" xmlns:aop= ...]]>"
msgstr ""

#. Tag: para
#: part1-rapid.xml:1513
#, no-c-format
msgid "to the following:"
msgstr ""

#. Tag: programlisting
#: part1-rapid.xml:1517
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[<beans xmlns=\"http://www.springframework.org/schema/beans\"\n"
      "  xmlns:aop=\"http://www.springframework.org/schema/aop\"\n"
      "  xmlns:context=\"http://www.springframework.org/schema/context\"\n"
      "  xmlns:jee=\"http://www.springframework.org/schema/jee\"\n"
      "  xmlns:tx=\"http://www.springframework.org/schema/tx\"\n"
      "  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n"
      "  xmlns:cloud=\"http://schema.cloudfoundry.org/spring\"\n"
      "  xsi:schemaLocation=\"http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-3.0.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd http://schema.cloudfoundry.org/spring http://schema.cloudfoundry.org/spring/cloudfoundry-spring.xsd\">]]>"
msgstr ""

#. Tag: para
#: part1-rapid.xml:1521
#, no-c-format
msgid "Also in the <filename>applicationContext.xml</filename> replace the following:"
msgstr ""

#. Tag: programlisting
#: part1-rapid.xml:1525
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[<bean class=\"org.apache.commons.dbcp.BasicDataSource\"\n"
      "      destroy-method=\"close\" id=\"dataSource\">\n"
      "  <property name=\"driverClassName\"\n"
      "            value=\"${database.driverClassName}\"/>\n"
      "  <property name=\"url\" value=\"${database.url}\"/>\n"
      "  <property name=\"username\" value=\"${database.username}\"/>\n"
      "  <property name=\"password\" value=\"${database.password}\"/>\n"
      "</bean>]]>"
msgstr ""

#. Tag: para
#: part1-rapid.xml:1527
#, no-c-format
msgid "with the following:"
msgstr ""

#. Tag: programlisting
#: part1-rapid.xml:1531
#, no-c-format
msgid "<?pocket-size 65% ?><![CDATA[<cloud:data-source id=\"dataSource\" />]]>"
msgstr ""

