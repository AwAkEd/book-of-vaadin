# SOME DESCRIPTIVE TITLE.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"Report-Msgid-Bugs-To: http://bugs.kde.org\n"
"POT-Creation-Date: 2012-04-02 14:31+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <kde-i18n-doc@kde.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. Tag: title
#: chapter-components.xml:4
#, no-c-format
msgid "User Interface Components"
msgstr ""

#. Tag: para
#: chapter-components.xml:6
#, no-c-format
msgid "This chapter provides an overview and a detailed description of all non-layout components in Vaadin."
msgstr ""

#. Tag: title
#: chapter-components.xml:12
#, no-c-format
msgid "Overview"
msgstr ""

#. Tag: para
#: chapter-components.xml:14
#, no-c-format
msgid "Vaadin provides a comprehensive set of user interface components and allows you to define custom components. <xref linkend=\"figure.uicomponents\"/> illustrates the inheritance hierarchy of the UI component classes and interfaces. Interfaces are displayed in gray, abstract classes in orange, and regular classes in blue. An annotated version of the diagram is featured in the <emphasis>Vaadin Cheat Sheet</emphasis>."
msgstr ""

#. Tag: title
#: chapter-components.xml:24
#, no-c-format
msgid "UI Component Inheritance Diagram"
msgstr ""

#. Tag: classname
#: chapter-components.xml:36
#, no-c-format
msgid "Component"
msgstr ""

#. Tag: para
#: chapter-components.xml:36
#, no-c-format
msgid "At the top of the interface hierarchy, we have the <classname>Component</classname> interface. <indexterm><primary><classname>AbstractComponent</classname></primary></indexterm> At the top of the class hierarchy, we have the <classname>AbstractComponent</classname> class. <indexterm><primary><classname>AbstractField</classname></primary></indexterm> <indexterm><primary><classname>AbstractComponentContainer</classname></primary></indexterm> It is inherited by two other abstract classes: <classname>AbstractField</classname>, inherited further by field components, and <classname>AbstractComponentContainer</classname>, inherited by various container and layout components. Components that are not bound to a content data model, such as labels and links, inherit <classname>AbstractComponent</classname> directly."
msgstr ""

#. Tag: primary
#: chapter-components.xml:58
#, no-c-format
msgid "layout"
msgstr ""

#. Tag: classname
#: chapter-components.xml:59
#, no-c-format
msgid "Layout"
msgstr ""

#. Tag: para
#: chapter-components.xml:59
#, no-c-format
msgid "The layout of the various components in a window is controlled, logically, by layout components, just like in conventional Java UI toolkits for desktop applications. In addition, with the <classname>CustomLayout</classname> component, you can write a custom layout as an XHTML template that includes the locations of any contained components. Looking at the inheritance diagram, we can see that layout components inherit the <classname>AbstractComponentContainer</classname> and the <classname>Layout</classname> interface. Layout components are described in detail in <xref linkend=\"layout\"/>."
msgstr ""

#. Tag: classname
#: chapter-components.xml:73
#, no-c-format
msgid "Window"
msgstr ""

#. Tag: para
#: chapter-components.xml:73
#, no-c-format
msgid "Looking at it from the perspective of an object hierarchy, we would have a <classname>Window</classname> object, which contains a hierachy of layout components, which again contain other layout components, field components, and other visible components."
msgstr ""

#. Tag: primary
#: chapter-components.xml:82
#, no-c-format
msgid "Sampler"
msgstr ""

#. Tag: primary
#: chapter-components.xml:83
#, no-c-format
msgid "JavaDoc"
msgstr ""

#. Tag: para
#: chapter-components.xml:83
#, no-c-format
msgid "You can browse the built-in UI components of Vaadin library in the <application>Sampler</application> application of the <application>Vaadin Demo</application>. The Sampler shows a description, JavaDoc documentation, and a code samples for each of the components."
msgstr ""

#. Tag: para
#: chapter-components.xml:91
#, no-c-format
msgid "In addition to the built-in components, many components are available as add-ons, either from the Vaadin Directory or from independent sources. Both commercial and free components exist. The installation of add-ons is described in <xref linkend=\"addons\"/>."
msgstr ""

#. Tag: title
#: chapter-components.xml:99
#, no-c-format
msgid "Vaadin Cheat Sheet and Refcard"
msgstr ""

#. Tag: para
#: chapter-components.xml:101
#, no-c-format
msgid "is included in the Vaadin Cheat Sheet that illustrates the basic relationship hierarchy of the user interface components and data binding classes and interfaces. You can download it at <link xlink:href=\"http://dev.vaadin.com/browser/doc/trunk/cheatsheet/vaadin-cheatsheet-duplex.pdf\">http://dev.vaadin.com/browser/doc/trunk/cheatsheet/vaadin-cheatsheet-duplex.pdf</link>."
msgstr ""

#. Tag: para
#: chapter-components.xml:109
#, no-c-format
msgid "The diagram is also included in the six-page DZone Refcard, which you can find at <link xlink:href=\"https://vaadin.com/refcard\">https://vaadin.com/refcard</link>."
msgstr ""

#. Tag: title
#: chapter-components.xml:139
#, no-c-format
msgid "Interfaces and Abstractions"
msgstr ""

#. Tag: primary
#: chapter-components.xml:142
#, no-c-format
msgid "interfaces"
msgstr ""

#. Tag: para
#: chapter-components.xml:142
#, no-c-format
msgid "Vaadin user interface components are built on a skeleton of interfaces and abstract classes that define and implement the features common to all components and the basic logic how the component states are serialized between the server and the client."
msgstr ""

#. Tag: para
#: chapter-components.xml:150
#, no-c-format
msgid "This section gives details on the basic component interfaces and abstractions. The layout and other component container abstractions are described in <xref linkend=\"layout\"/>. The interfaces that define the Vaadin data model are described in <xref linkend=\"datamodel\"/>."
msgstr ""

#. Tag: title
#: chapter-components.xml:158
#, no-c-format
msgid "Component Interfaces and Abstractions"
msgstr ""

#. Tag: classname
#: chapter-components.xml:170
#, no-c-format
msgid "Paintable"
msgstr ""

#. Tag: classname
#: chapter-components.xml:171
#, no-c-format
msgid "VariableOwner"
msgstr ""

#. Tag: para
#: chapter-components.xml:171
#, no-c-format
msgid "All components also implement the <classname>Paintable</classname> interface, which is used for serializing (\"painting\") the components to the client, and the reverse <classname>VariableOwner</classname> interface, which is needed for deserializing component state or user interaction from the client."
msgstr ""

#. Tag: classname
#: chapter-components.xml:180
#, no-c-format
msgid "Serializable"
msgstr ""

#. Tag: para
#: chapter-components.xml:180
#, no-c-format
msgid "In addition to the interfaces defined within the Vaadin framework, all components implement the <classname>java.io.Serializable</classname> interface to allow serialization. Serialization is needed in many clustering and cloud computing solutions."
msgstr ""

#. Tag: title
#: chapter-components.xml:189
#, no-c-format
msgid "<classname>Component</classname> Interface"
msgstr ""

#. Tag: primary
#: chapter-components.xml:192 chapter-components.xml:253
#, no-c-format
msgid "<classname>Component</classname> interface"
msgstr ""

#. Tag: para
#: chapter-components.xml:195
#, no-c-format
msgid "The <classname>Component</classname> interface is paired with the <classname>AbstractComponent</classname> class, which implements all the methods defined in the interface."
msgstr ""

#. Tag: title
#: chapter-components.xml:202
#, no-c-format
msgid "Component Tree Management"
msgstr ""

#. Tag: para
#: chapter-components.xml:204
#, no-c-format
msgid "Components are laid out in the user interface hierarchically. The layout is managed by layout components, or more generally components that implement the <classname>ComponentContainer</classname> interface. Such a container is the parent of the contained components."
msgstr ""

#. Tag: para
#: chapter-components.xml:211
#, no-c-format
msgid "The <methodname>getParent()</methodname> method allows retrieving the parent component of a component. While there is a <methodname>setParent()</methodname>, you rarely need it as you usually add components with the <methodname>addComponent()</methodname> method of the <classname>ComponentContainer</classname> interface, which automatically sets the parent."
msgstr ""

#. Tag: para
#: chapter-components.xml:221
#, no-c-format
msgid "A component does not know its parent when the component is created, so you can not refer to the parent in the constructor with <methodname>getParent()</methodname>. Also, it is not possible to fetch a reference to the application object with <methodname>getApplication()</methodname> before having a parent. For example, the following is invalid:"
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:230
#, no-c-format
msgid ""
"<?pocket-size 65% ?><![CDATA[public class AttachExample extends CustomComponent {\n"
"    public AttachExample() {\n"
"        // ERROR: We can't access the application object yet.\n"
"        ClassResource r = new ClassResource(\"smiley.jpg\",\n"
"                                            getApplication());\n"
"        Embedded image = new Embedded(\"Image:\", r); \n"
"        setCompositionRoot(image);\n"
"    }\n"
"}]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:232
#, no-c-format
msgid "Adding a component to an application triggers calling the <methodname>attach()</methodname> method for the component. Correspondingly, removing a component from a container triggers calling the <methodname>detach()</methodname> method. If the parent of an added component is already connected to the application, the <methodname>attach()</methodname> is called immediately from <methodname>setParent()</methodname>."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:242
#, no-c-format
msgid ""
"<?pocket-size 65% ?><![CDATA[public class AttachExample extends CustomComponent {\n"
"    public AttachExample() {\n"
"    }\n"
"    \n"
"    @Override\n"
"    public void attach() {\n"
"        super.attach(); // Must call.\n"
"        \n"
"        // Now we know who ultimately owns us.\n"
"        ClassResource r = new ClassResource(\"smiley.jpg\",\n"
"                                            getApplication());\n"
"        Embedded image = new Embedded(\"Image:\", r); \n"
"        setCompositionRoot(image);\n"
"    }\n"
"}]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:244
#, no-c-format
msgid "The attachment logic is implemented in <classname>AbstractComponent</classname>, as described in <xref linkend=\"components.interfaces.abstractcomponent\"/>."
msgstr ""

#. Tag: classname
#: chapter-components.xml:258 chapter-components.xml:261
#, no-c-format
msgid "AbstractComponent"
msgstr ""

#. Tag: para
#: chapter-components.xml:264
#, no-c-format
msgid "<classname>AbstractComponent</classname> is the base class for all user interface components. It is the (only) implementation of the <classname>Component</classname> interface, implementing all the methods defined in the interface."
msgstr ""

#. Tag: para
#: chapter-components.xml:271
#, no-c-format
msgid "<classname>AbstractComponent</classname> has a single abstract method, <methodname>getTag()</methodname>, which returns the serialization identifier of a particular component class. It needs to be implemented when (and only when) creating entirely new components. <classname>AbstractComponent</classname> manages much of the serialization of component states between the client and the server. Creation of new components and serialization is described in <xref linkend=\"gwt\"/>, and the server-side serialization API in <xref linkend=\"uidl\"/>."
msgstr ""

#. Tag: title
#: chapter-components.xml:287
#, no-c-format
msgid "Field Components (<classname>Field</classname> and <classname>AbstractField</classname>)"
msgstr ""

#. Tag: classname
#: chapter-components.xml:290
#, no-c-format
msgid "Field"
msgstr ""

#. Tag: para
#: chapter-components.xml:293
#, no-c-format
msgid "<emphasis>Fields</emphasis> are components that have a value that the user can change through the user interface. <xref linkend=\"figure.components.fields\"/> illustrates the inheritance relationships and the important interfaces and base classes."
msgstr ""

#. Tag: title
#: chapter-components.xml:301
#, no-c-format
msgid "Field Components"
msgstr ""

#. Tag: para
#: chapter-components.xml:312
#, no-c-format
msgid "Field components are built upon the framework defined in the <classname>Field</classname> interface and the <classname>AbstractField</classname> base class."
msgstr ""

#. Tag: para
#: chapter-components.xml:318
#, no-c-format
msgid "Fields are strongly coupled with the Vaadin data model. The field value is handled as a <classname>Property</classname> of the field component. Selection fields allow management of the selectable items through the <classname>Container</classname> interface."
msgstr ""

#. Tag: para
#: chapter-components.xml:325
#, no-c-format
msgid "The description of the field interfaces and base classes is broken down in the following sections."
msgstr ""

#. Tag: title
#: chapter-components.xml:331
#, no-c-format
msgid "<classname>Field</classname> Interface"
msgstr ""

#. Tag: para
#: chapter-components.xml:333
#, no-c-format
msgid "The <classname>Field</classname> interface inherits the <classname>Component</classname> superinterface and also the <classname>Property</classname> interface to have a value for the field. <classname>AbstractField</classname> is the only class implementing the <classname>Field</classname> interface directly. The relationships are illustrated in <xref linkend=\"figure.components.fields.field\"/>."
msgstr ""

#. Tag: title
#: chapter-components.xml:344
#, no-c-format
msgid "<classname>Field</classname> Interface Inheritance Diagram"
msgstr ""

#. Tag: para
#: chapter-components.xml:355
#, no-c-format
msgid "You can set the field value with the <methodname>setValue()</methodname> and read with the <methodname>getValue()</methodname> method defined in the <classname>Property</classname> interface. The actual value type depends on the component."
msgstr ""

#. Tag: para
#: chapter-components.xml:362
#, no-c-format
msgid "The <classname>Field</classname> interface defines a number of attributes, which you can retrieve or manipulate with the corresponding setters and getters."
msgstr ""

#. Tag: methodname
#: chapter-components.xml:370
#, no-c-format
msgid "<methodname>description</methodname>"
msgstr ""

#. Tag: para
#: chapter-components.xml:372
#, no-c-format
msgid "All fields have a description. Notice that while this attribute is defined in the <classname>Field</classname> component, it is implemented in <classname>AbstractField</classname>, which does not directly implement <classname>Field</classname>, but only through the <classname>AbstractField</classname> class."
msgstr ""

#. Tag: methodname
#: chapter-components.xml:384
#, no-c-format
msgid "required"
msgstr ""

#. Tag: para
#: chapter-components.xml:386
#, no-c-format
msgid "When enabled, a required indicator (usually the asterisk * character) is displayed on the left, above, or right the field, depending on the containing layout and whether the field has a caption. If such fields are validated but are empty and the <methodname>requiredError</methodname> property (see below) is set, an error indicator is shown and the component error is set to the text defined with the error property. Without validation, the required indicator is merely a visual guide."
msgstr ""

#. Tag: methodname
#: chapter-components.xml:400
#, no-c-format
msgid "requiredError"
msgstr ""

#. Tag: para
#: chapter-components.xml:402
#, no-c-format
msgid "Defines the error message to show when a value is required, but none is entered. The error message is set as the component error for the field and is usually displayed in a tooltip when the mouse pointer hovers over the error indicator. The <classname>Form</classname> component can display the error message in a special error indicator area."
msgstr ""

#. Tag: title
#: chapter-components.xml:417
#, no-c-format
msgid "Handling Field Value Changes"
msgstr ""

#. Tag: para
#: chapter-components.xml:419
#, no-c-format
msgid "<classname>Field</classname> inherits <classname>Property.ValueChangeListener</classname> to allow listening for field value changes and <classname>Property.Editor</classname> to allow editing values."
msgstr ""

#. Tag: para
#: chapter-components.xml:426
#, no-c-format
msgid "When the value of a field changes, a <classname>Property.ValueChangeEvent</classname> is triggered for the field. You should not implement the <methodname>valueChange()</methodname> method in a class inheriting <classname>AbstractField</classname>, as it is already implemented in <classname>AbstractField</classname>. You should instead implement the method explicitly by adding the implementing object as a listener."
msgstr ""

#. Tag: title
#: chapter-components.xml:439
#, no-c-format
msgid "<classname>AbstractField</classname> Base Class"
msgstr ""

#. Tag: para
#: chapter-components.xml:441
#, no-c-format
msgid "<classname>AbstractField</classname> is the base class for all field components. In addition to the component features inherited from <classname>AbstractComponent</classname>, it implements a number of features defined in <classname>Property</classname>, <classname>Buffered</classname>, <classname>Validatable</classname>, and <classname>Component.Focusable</classname> interfaces."
msgstr ""

#. Tag: title
#: chapter-components.xml:458
#, no-c-format
msgid "Common Component Features"
msgstr ""

#. Tag: para
#: chapter-components.xml:460
#, no-c-format
msgid "The component base classes and interfaces provide a large number of features. Let us look at some of the most commonly needed features. Features not documented here can be found from the Java API Reference."
msgstr ""

#. Tag: para
#: chapter-components.xml:466
#, no-c-format
msgid "The interface defines a number of properties, which you can retrieve or manipulate with the corresponding setters and getters."
msgstr ""

#. Tag: title
#: chapter-components.xml:472
#, no-c-format
msgid "Caption"
msgstr ""

#. Tag: primary
#: chapter-components.xml:475
#, no-c-format
msgid "caption property"
msgstr ""

#. Tag: primary
#: chapter-components.xml:479 chapter-components.xml:576
#: chapter-components.xml:671 chapter-components.xml:761
#: chapter-components.xml:834 chapter-components.xml:937
#: chapter-components.xml:1038 chapter-components.xml:1102
#, no-c-format
msgid "Component interface"
msgstr ""

#. Tag: secondary
#: chapter-components.xml:480
#, no-c-format
msgid "caption"
msgstr ""

#. Tag: para
#: chapter-components.xml:483
#, no-c-format
msgid "A caption is an explanatory textual label accompanying a user interface component, usually shown above, left of, or inside the component. The contents of a caption are automatically quoted, so no raw XHTML can be rendered in a caption."
msgstr ""

#. Tag: para
#: chapter-components.xml:490
#, no-c-format
msgid "The caption text can usually be given as the first parameter of a constructor of a component or with <methodname>setCaption()</methodname>."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:495
#, no-c-format
msgid ""
"<?pocket-size 75% ?><![CDATA[// New text field with caption \"Name\"\n"
"TextField name = new TextField(\"Name\");\n"
"layout.addComponent(name);]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:497
#, no-c-format
msgid "The caption of a component is, by default, managed and displayed by the layout component or component container inside which the component is placed. For example, the <classname>VerticalLayout</classname> component shows the captions left-aligned above the contained components, while the <classname>FormLayout</classname> component shows the captions on the left side of the vertically laid components, with the captions and their associated components left-aligned in their own columns. The <classname>CustomComponent</classname> does not manage the caption of its composition root, so if the root component has a caption, it will not be rendered."
msgstr ""

#. Tag: title
#: chapter-components.xml:511
#, no-c-format
msgid "Caption Management by <classname>VerticalLayout</classname> and <classname>FormLayout</classname> components."
msgstr ""

#. Tag: para
#: chapter-components.xml:522
#, no-c-format
msgid "Some components, such as <classname>Button</classname> and <classname>Panel</classname>, manage the caption themselves and display it inside the component."
msgstr ""

#. Tag: para
#: chapter-components.xml:528
#, no-c-format
msgid "Icon (see <xref linkend=\"components.features.icon\"/>) is closely related to caption and is usually displayed horizontally before or after it, depending on the component and the containing layout. Also the required indicator in field components is usually shown before or after the caption."
msgstr ""

#. Tag: para
#: chapter-components.xml:536
#, no-c-format
msgid "An alternative way to implement a caption is to use another component as the caption, typically a <classname>Label</classname>, a <classname>TextField</classname>, or a <classname>Panel</classname>. A <classname>Label</classname>, for example, allows highlighting a shortcut key with XHTML markup or to bind the caption to a data source. The <classname>Panel</classname> provides an easy way to add both a caption and a border around a component."
msgstr ""

#. Tag: title
#: chapter-components.xml:547 chapter-components.xml:717
#: chapter-components.xml:814 chapter-components.xml:1010
#: chapter-components.xml:1375 chapter-components.xml:1691
#: chapter-components.xml:1818 chapter-components.xml:2164
#: chapter-components.xml:2292 chapter-components.xml:2344
#: chapter-components.xml:2453 chapter-components.xml:2665
#: chapter-components.xml:2749 chapter-components.xml:2845
#: chapter-components.xml:2907 chapter-components.xml:3320
#: chapter-components.xml:3383 chapter-components.xml:3428
#: chapter-components.xml:3517 chapter-components.xml:3613
#: chapter-components.xml:4635 chapter-components.xml:4812
#: chapter-components.xml:5208 chapter-components.xml:5565
#: chapter-components.xml:5705
#, no-c-format
msgid "CSS Style Rules"
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:549
#, no-c-format
msgid ""
"<![CDATA[.v-caption {}\n"
"  .v-captiontext {}\n"
"  .v-caption-clearelem {}\n"
"  .v-required-field-indicator {}]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:551
#, no-c-format
msgid "A caption is be rendered inside an HTML element that has the <literal>v-caption</literal> CSS style class. The containing layout may enclose a caption inside other caption-related elements."
msgstr ""

#. Tag: para
#: chapter-components.xml:557
#, no-c-format
msgid "Some layouts put the caption text in a <literal>v-captiontext</literal> element. A <literal>v-caption-clearelem</literal> is used in some layouts to clear a CSS <literal>float</literal> property in captions. An optional required indicator in field components is contained in a separate element with <literal>v-required-field-indicator</literal> style."
msgstr ""

#. Tag: title
#: chapter-components.xml:569
#, no-c-format
msgid "Description and Tooltips"
msgstr ""

#. Tag: primary
#: chapter-components.xml:572
#, no-c-format
msgid "description property"
msgstr ""

#. Tag: secondary
#: chapter-components.xml:577
#, no-c-format
msgid "<secondary>description</secondary>"
msgstr ""

#. Tag: primary
#: chapter-components.xml:581
#, no-c-format
msgid "tooltips"
msgstr ""

#. Tag: para
#: chapter-components.xml:584
#, no-c-format
msgid "All components (that inherit <classname>AbstractComponent</classname>) have a description separate from their caption. The description is usually shown as a tooltip that appears when the mouse pointer hovers over the component for a short time."
msgstr ""

#. Tag: para
#: chapter-components.xml:591
#, no-c-format
msgid "You can set the description with <methodname>setDescription()</methodname> and retrieve with <methodname>getDescription()</methodname>."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:596
#, no-c-format
msgid ""
"<?pocket-size 65% ?><![CDATA[Button button = new Button(\"A Button\");\n"
"button.setDescription(\"This is the tooltip\");]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:598
#, no-c-format
msgid "The tooltip is shown in <xref linkend=\"figure.components.tooltip.plain\"/>."
msgstr ""

#. Tag: title
#: chapter-components.xml:604
#, no-c-format
msgid "Component Description as a Tooltip"
msgstr ""

#. Tag: para
#: chapter-components.xml:615
#, no-c-format
msgid "A description is rendered as a tooltip in most components. <classname>Form</classname> shows it as text in the top area of the component, as described in <xref linkend=\"components.form.layout\"/>."
msgstr ""

#. Tag: para
#: chapter-components.xml:622
#, no-c-format
msgid "When a component error has been set with <methodname>setComponentError()</methodname>, the error is usually also displayed in the tooltip, below the description (<classname>Form</classname> displays it in the bottom area of the form). Components that are in error state will also display the error indicator. See <xref linkend=\"application.errors.error-indicator\"/>."
msgstr ""

#. Tag: para
#: chapter-components.xml:631
#, no-c-format
msgid "The description is actually not plain text, but you can use XHTML tags to format it. Such a rich text description can contain any HTML elements, including images."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:637
#, no-c-format
msgid ""
"<?pocket-size 60% ?><![CDATA[button.setDescription(\n"
"    \"<h2><img src=\\\"../VAADIN/themes/sampler/icons/comment_yellow.gif\\\"/>\"+\n"
"    \"A richtext tooltip</h2>\"+\n"
"    \"<ul>\"+\n"
"    \"  <li>Use rich formatting with XHTML</li>\"+\n"
"    \"  <li>Include images from themes</li>\"+\n"
"    \"  <li>etc.</li>\"+\n"
"    \"</ul>\");]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:639
#, no-c-format
msgid "The result is shown in <xref linkend=\"figure.components.tooltip.richtext\"/>."
msgstr ""

#. Tag: title
#: chapter-components.xml:645
#, no-c-format
msgid "A Rich Text Tooltip"
msgstr ""

#. Tag: para
#: chapter-components.xml:656
#, no-c-format
msgid "Notice that the setter and getter are defined for all fields in the <classname>Field</classname> interface, not for all components in the <classname>Component</classname> interface."
msgstr ""

#. Tag: title
#: chapter-components.xml:664
#, no-c-format
msgid "Enabled"
msgstr ""

#. Tag: primary
#: chapter-components.xml:667
#, no-c-format
msgid "enabled property"
msgstr ""

#. Tag: secondary
#: chapter-components.xml:672
#, no-c-format
msgid "enabled"
msgstr ""

#. Tag: para
#: chapter-components.xml:675
#, no-c-format
msgid "The <emphasis>enabled</emphasis> property controls whether the user can actually use the component. A disabled component is visible, but grayed to indicate the disabled state."
msgstr ""

#. Tag: para
#: chapter-components.xml:681
#, no-c-format
msgid "Components are always enabled by default. You can disable a component with <methodname>setEnabled(false)</methodname>."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:686
#, no-c-format
msgid ""
"<?pocket-size 75% ?><![CDATA[Button enabled = new Button(\"Enabled\");\n"
"enabled.setEnabled(true); // The default\n"
"layout.addComponent(enabled);\n"
"        \n"
"Button disabled = new Button(\"Disabled\");\n"
"disabled.setEnabled(false);\n"
"layout.addComponent(disabled);]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:688
#, no-c-format
msgid "shows the enabled and disabled buttons."
msgstr ""

#. Tag: title
#: chapter-components.xml:694
#, no-c-format
msgid "An Enabled and Disabled <classname>Button</classname>"
msgstr ""

#. Tag: para
#: chapter-components.xml:705
#, no-c-format
msgid "A disabled component is automatically put in read-only state. No client interaction with such a component is sent to the server and, as an important security feature, the server-side components do not receive state updates from the client in the read-only state. This feature exists in all built-in components in Vaadin and is automatically handled for all <classname>Field</classname> components for the field property value. For custom widgets, you need to make sure that the read-only state is checked on the server-side for all safety-critical variables."
msgstr ""

#. Tag: para
#: chapter-components.xml:719
#, no-c-format
msgid "Disabled components have the <literal>v-disabled</literal> CSS style in addition to the component-specific style. To match a component with both the styles, you have to join the style class names with a dot as done in the example below."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:726
#, no-c-format
msgid ""
"<?pocket-size 75% ?><![CDATA[.v-textfield.v-disabled {\n"
"    border: dotted;\n"
"}]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:728
#, no-c-format
msgid "This would make the border of all disabled text fields dotted."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:732
#, no-c-format
msgid ""
"<?pocket-size 75% ?><![CDATA[TextField disabled = new TextField(\"Disabled\");\n"
"disabled.setValue(\"Read-only value\");\n"
"disabled.setEnabled(false);\n"
"layout.addComponent(disabled);]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:734
#, no-c-format
msgid "The result is illustrated in <xref linkend=\"figure.components.features.enabled.styling\"/>."
msgstr ""

#. Tag: title
#: chapter-components.xml:740
#, no-c-format
msgid "Styling Disabled Components"
msgstr ""

#. Tag: title
#: chapter-components.xml:754
#, no-c-format
msgid "Icon"
msgstr ""

#. Tag: primary
#: chapter-components.xml:757
#, no-c-format
msgid "icon property"
msgstr ""

#. Tag: secondary
#: chapter-components.xml:762
#, no-c-format
msgid "icon"
msgstr ""

#. Tag: para
#: chapter-components.xml:765
#, no-c-format
msgid "An icon is an explanatory graphical label accompanying a user interface component, usually shown above, left of, or inside the component. Icon is closely related to caption (see <xref linkend=\"components.features.caption\"/>) and is usually displayed horizontally before or after it, depending on the component and the containing layout."
msgstr ""

#. Tag: para
#: chapter-components.xml:774
#, no-c-format
msgid "The icon of a component can be set with the <methodname>setIcon()</methodname> method. The image is provided as a resource, perhaps most typically a <classname>ThemeResource</classname>."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:780
#, no-c-format
msgid ""
"<?pocket-size 75% ?><![CDATA[// Component with an icon from a custom theme\n"
"TextField name = new TextField(\"Name\");\n"
"name.setIcon(new ThemeResource(\"icons/user.png\"));\n"
"layout.addComponent(name);\n"
"        \n"
"// Component with an icon from another theme ('runo')\n"
"Button ok = new Button(\"OK\");\n"
"ok.setIcon(new ThemeResource(\"../runo/icons/16/ok.png\"));\n"
"layout.addComponent(ok);]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:782
#, no-c-format
msgid "The icon of a component is, by default, managed and displayed by the layout component or component container in which the component is placed. For example, the <classname>VerticalLayout</classname> component shows the icons left-aligned above the contained components, while the <classname>FormLayout</classname> component shows the icons on the left side of the vertically laid components, with the icons and their associated components left-aligned in their own columns. The <classname>CustomComponent</classname> does not manage the icon of its composition root, so if the root component has an icon, it will not be rendered."
msgstr ""

#. Tag: title
#: chapter-components.xml:796
#, no-c-format
msgid "Displaying an Icon from a Theme Resource."
msgstr ""

#. Tag: para
#: chapter-components.xml:807
#, no-c-format
msgid "Some components, such as <classname>Button</classname> and <classname>Panel</classname>, manage the icon themselves and display it inside the component."
msgstr ""

#. Tag: para
#: chapter-components.xml:816
#, no-c-format
msgid "An icon will be rendered inside an HTML element that has the <literal>v-icon</literal> CSS style class. The containing layout may enclose an icon and a caption inside elements related to the caption, such as <literal>v-caption</literal>."
msgstr ""

#. Tag: title
#: chapter-components.xml:826
#, no-c-format
msgid "Locale"
msgstr ""

#. Tag: primary
#: chapter-components.xml:829
#, no-c-format
msgid "locale property"
msgstr ""

#. Tag: secondary
#: chapter-components.xml:830
#, no-c-format
msgid "in <classname>Component</classname>"
msgstr ""

#. Tag: secondary
#: chapter-components.xml:835
#, no-c-format
msgid "locale"
msgstr ""

#. Tag: para
#: chapter-components.xml:838
#, no-c-format
msgid "The locale property defines the country and language used in a component. You can use the locale information in conjunction with an internationalization scheme to acquire localized resources. Some components, such as <classname>DateField</classname>, use the locale for component localization."
msgstr ""

#. Tag: para
#: chapter-components.xml:846
#, no-c-format
msgid "You can set the locale of a component (or the application) with <methodname>setLocale()</methodname>."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:851
#, no-c-format
msgid ""
"<?pocket-size 65% ?><![CDATA[// Component for which the locale is meaningful\n"
"InlineDateField date = new InlineDateField(\"Datum\");\n"
"        \n"
"// German language specified with ISO 639-1 language\n"
"// code and ISO 3166-1 alpha-2 country code. \n"
"date.setLocale(new Locale(\"de\", \"DE\"));\n"
"        \n"
"date.setResolution(DateField.RESOLUTION_DAY);\n"
"layout.addComponent(date);]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:853
#, no-c-format
msgid "The resulting date field is shown in <xref linkend=\"figure.components.features.locale.simple\"/>."
msgstr ""

#. Tag: title
#: chapter-components.xml:859
#, no-c-format
msgid "Set Locale for <classname>InlineDateField</classname>"
msgstr ""

#. Tag: methodname
#: chapter-components.xml:871
#, no-c-format
msgid "getLocale()"
msgstr ""

#. Tag: para
#: chapter-components.xml:871
#, no-c-format
msgid "You can get the locale of a component with <methodname>getLocale()</methodname>. If the locale is undefined for a component, that is, not explicitly set, the locale of the parent component is used. If none of the parent components have a locale set, the locale of the application is used, and if that is not set, the default system locale is set, as given by <methodname>Locale.getDefault()</methodname>."
msgstr ""

#. Tag: para
#: chapter-components.xml:881
#, no-c-format
msgid "Because of the requirement that the component must be attached to the application, it is awkward to use <methodname>getLocale()</methodname> for internationalization. You can not use it in the constructor, so you would have to get the locale in <methodname>attach()</methodname> as shown in the following example:"
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:889
#, no-c-format
msgid ""
"<?pocket-size 65% ?><![CDATA[Button cancel = new Button() {\n"
"    @Override\n"
"    public void attach() {\n"
"        ResourceBundle bundle = ResourceBundle.getBundle(\n"
"                MyAppCaptions.class.getName(), getLocale());\n"
"        setCaption(bundle.getString(\"CancelKey\"));\n"
"    }\n"
"};\n"
"layout.addComponent(cancel);]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:891
#, no-c-format
msgid "It is normally a better practice to get the locale from an application-global parameter and use it to get the localized resource right when the component is created."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:897
#, no-c-format
msgid ""
"<?pocket-size 65% ?><![CDATA[// Captions are stored in MyAppCaptions resource bundle\n"
"// and the application object is known in this context.\n"
"ResourceBundle bundle =\n"
"    ResourceBundle.getBundle(MyAppCaptions.class.getName(),\n"
"                             getApplication().getLocale());\n"
"        \n"
"// Get a localized resource from the bundle\n"
"Button cancel = new Button(bundle.getString(\"CancelKey\"));\n"
"layout.addComponent(cancel);]]>"
msgstr ""

#. Tag: title
#: chapter-components.xml:900 chapter-components.xml:915
#, no-c-format
msgid "Selecting a Locale"
msgstr ""

#. Tag: para
#: chapter-components.xml:902
#, no-c-format
msgid "A common task in many applications is selecting a locale. This is done in the following example with a <classname>Select</classname> component."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:907
#, no-c-format
msgid ""
"<?pocket-size 65% ?><![CDATA[// The locale in which we want to have the language\n"
"// selection list\n"
"Locale displayLocale = Locale.ENGLISH;\n"
"        \n"
"// All known locales\n"
"final Locale[] locales = Locale.getAvailableLocales();\n"
"        \n"
"// Allow selecting a language. We are in a constructor of a\n"
"// CustomComponent, so preselecting the current\n"
"// language of the application can not be done before\n"
"// this (and the selection) component are attached to\n"
"// the application.\n"
"final Select select = new Select(\"Select a language\") {\n"
"    @Override\n"
"    public void attach() {\n"
"        setValue(getLocale());\n"
"    }\n"
"};\n"
"for (int i=0; i<locales.length; i++) {\n"
"    select.addItem(locales[i]);\n"
"    select.setItemCaption(locales[i],\n"
"                          locales[i].getDisplayName(displayLocale));\n"
"    \n"
"    // Automatically select the current locale\n"
"    if (locales[i].equals(getLocale()))\n"
"        select.setValue(locales[i]);\n"
"}\n"
"layout.addComponent(select);\n"
"\n"
"// Locale code of the selected locale\n"
"final Label localeCode = new Label(\"\");\n"
"layout.addComponent(localeCode);\n"
"\n"
"// A date field which language the selection will change\n"
"final InlineDateField date =\n"
"    new InlineDateField(\"Calendar in the selected language\");\n"
"date.setResolution(DateField.RESOLUTION_DAY);\n"
"layout.addComponent(date);\n"
"        \n"
"// Handle language selection\n"
"select.addListener(new Property.ValueChangeListener() {\n"
"    public void valueChange(ValueChangeEvent event) {\n"
"        Locale locale = (Locale) select.getValue();\n"
"        date.setLocale(locale);\n"
"        localeCode.setValue(\"Locale code: \" +\n"
"                            locale.getLanguage() + \"_\" +\n"
"                            locale.getCountry());\n"
"    }\n"
"});\n"
"select.setImmediate(true);]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:909
#, no-c-format
msgid "The user interface is shown in <xref linkend=\"figure.components.features.locale.selection\"/>."
msgstr ""

#. Tag: title
#: chapter-components.xml:930
#, no-c-format
msgid "Read-Only"
msgstr ""

#. Tag: primary
#: chapter-components.xml:933
#, no-c-format
msgid "read-only property"
msgstr ""

#. Tag: secondary
#: chapter-components.xml:938
#, no-c-format
msgid "read-only"
msgstr ""

#. Tag: para
#: chapter-components.xml:941
#, no-c-format
msgid "The property defines whether the value of a component can be changed. The property is mainly applicable to <classname>Field</classname> components, as they have a value that can be edited by the user."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:947
#, no-c-format
msgid ""
"<?pocket-size 65% ?><![CDATA[TextField readwrite = new TextField(\"Read-Write\");\n"
"readwrite.setValue(\"You can change this\");\n"
"readwrite.setReadOnly(false); // The default\n"
"layout.addComponent(readwrite);\n"
"        \n"
"TextField readonly = new TextField(\"Read-Only\");\n"
"readonly.setValue(\"You can't touch this!\");\n"
"readonly.setReadOnly(true);\n"
"layout.addComponent(readonly);]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:949
#, no-c-format
msgid "The resulting read-only text field is shown in <xref linkend=\"figure.components.features.readonly.simple\"/>."
msgstr ""

#. Tag: title
#: chapter-components.xml:955
#, no-c-format
msgid "A Read-Only Component."
msgstr ""

#. Tag: para
#: chapter-components.xml:966
#, no-c-format
msgid "Setting a layout or some other component container as read-only does not usually make the contained components read-only recursively. This is different from, for example, the disabled state, which is usually applied recursively. The <classname>Form</classname> component is an exception, as it applies the read-only state to the form fields."
msgstr ""

#. Tag: para
#: chapter-components.xml:974
#, no-c-format
msgid "Notice that the value of a selection component is the selection, not its items. A read-only selection component doesn't therefore allow its selection to be changed, but other changes are possible. For example, if you have a read-only <classname>Table</classname> in editable mode, its contained fields and the underlying data model can still be edited, and the user could sort it or reorder the columns."
msgstr ""

#. Tag: para
#: chapter-components.xml:983
#, no-c-format
msgid "Client-side state modifications will not be communicated to the server-side and, more importantly, server-side field components will not accept changes to the value of a read-only <classname>Field</classname> component. The latter is an important security feature, because a malicious user can not fabricate state changes in a read-only field. This is handled at the level of <classname>AbstractField</classname> in <methodname>setValue()</methodname>, so you can not change the value programmatically either. Calling <methodname>setValue()</methodname> on a read-only field results in <classname>Property.ReadOnlyException</classname>."
msgstr ""

#. Tag: para
#: chapter-components.xml:996
#, no-c-format
msgid "Also notice that while the read-only status applies automatically to the property value of a field, it does not apply to other component variables. A read-only component can accept some other variable changes from the client-side and some of such changes could be acceptable, such as change in the scroll bar position of a <classname>Table</classname>. Custom widgets should check the read-only state for variables bound to business data."
msgstr ""

#. Tag: para
#: chapter-components.xml:1012
#, no-c-format
msgid "Setting a normally editable component to read-only state can change its appearance to disallow editing the value. In addition to CSS styling, also the HTML structure can change. For example, <classname>TextField</classname> loses the edit box and appears much like a <classname>Label</classname>."
msgstr ""

#. Tag: para
#: chapter-components.xml:1020
#, no-c-format
msgid "A read-only component will have the <literal>v-readonly</literal> style. The following CSS rule would make the text in all read-only <classname>TextField</classname> components appear in italic."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:1026
#, no-c-format
msgid ""
"<?pocket-size 65% ?><![CDATA[.v-textfield.v-readonly {\n"
"    font-style: italic;\n"
"}]]>"
msgstr ""

#. Tag: title
#: chapter-components.xml:1031
#, no-c-format
msgid "Style Name"
msgstr ""

#. Tag: primary
#: chapter-components.xml:1034
#, no-c-format
msgid "style name property"
msgstr ""

#. Tag: secondary
#: chapter-components.xml:1039
#, no-c-format
msgid "style name"
msgstr ""

#. Tag: para
#: chapter-components.xml:1042
#, no-c-format
msgid "The <emphasis>style name</emphasis> property defines one or more custom CSS style class names for the component. The <methodname>getStyleName()</methodname> returns the current style names as a space-separated list. The <methodname>setStyleName()</methodname> replaces all the styles with the given style name or a space-separated list of style names. You can also add and remove individual style names with <methodname>addStylename()</methodname> and <methodname>removeStyleName()</methodname>. A style name must be a valid CSS style name."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:1054
#, no-c-format
msgid ""
"<?pocket-size 65% ?><![CDATA[Label label = new Label(\"This text has a lot of style\");\n"
"label.addStyleName(\"mystyle\");\n"
"layout.addComponent(label);]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:1056
#, no-c-format
msgid "The style name will appear in the component's HTML element in two forms: literally as given and prefixed with the component class specific style name. For example, if you add a style name <literal>mystyle</literal> to a <classname>Button</classname>, the component would get both <literal>mystyle</literal> and <literal>v-button-mystyle</literal> styles. Neither form may conflict with built-in style names of Vaadin or GWT. For example, <literal>focus</literal> style would conflict with a built-in style of the same name, and an <literal>option</literal> style for a <classname>Select</classname> component would conflict with the built-in <literal>v-select-option</literal> style."
msgstr ""

#. Tag: para
#: chapter-components.xml:1069
#, no-c-format
msgid "The following CSS rule would apply the style to any component that has the <literal>mystyle</literal> style."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:1074
#, no-c-format
msgid ""
"<?pocket-size 65% ?><![CDATA[.mystyle {\n"
"    font-family: fantasy;\n"
"    font-style:  italic;\n"
"    font-size:   25px;\n"
"    font-weight: bolder;\n"
"    line-height: 30px;\n"
"}]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:1076
#, no-c-format
msgid "The resulting styled component is shown in"
msgstr ""

#. Tag: title
#: chapter-components.xml:1082
#, no-c-format
msgid "Component with a Custom Style"
msgstr ""

#. Tag: title
#: chapter-components.xml:1095
#, no-c-format
msgid "Visible"
msgstr ""

#. Tag: primary
#: chapter-components.xml:1098
#, no-c-format
msgid "visible property"
msgstr ""

#. Tag: secondary
#: chapter-components.xml:1103
#, no-c-format
msgid "visible"
msgstr ""

#. Tag: para
#: chapter-components.xml:1106
#, no-c-format
msgid "Components can be hidden by setting the <emphasis>visible</emphasis> property to <emphasis>false</emphasis>. Also the caption, icon and any other component features are made hidden. Hidden components are not just invisible, but their content is not communicated to the browser at all. That is, they are not made invisible cosmetically with only CSS rules. This feature is important for security if you have components that contain security-critical information that must only be shown in specific application states."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:1117
#, no-c-format
msgid ""
"<?pocket-size 65% ?><![CDATA[TextField readonly = new TextField(\"Read-Only\");\n"
"readonly.setValue(\"You can't see this!\");\n"
"readonly.setVisible(false);\n"
"layout.addComponent(readonly);]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:1119
#, no-c-format
msgid "The resulting invisible component is shown in <xref linkend=\"figure.components.features.visible.simple\"/>."
msgstr ""

#. Tag: title
#: chapter-components.xml:1125
#, no-c-format
msgid "An Invisible Component."
msgstr ""

#. Tag: para
#: chapter-components.xml:1136
#, no-c-format
msgid "Beware that invisible beings can leave footprints. The containing layout cell that holds the invisible component will not go away, but will show in the layout as extra empty space. Also expand ratios work just like if the component was visible - it is the layout cell that expands, not the component."
msgstr ""

#. Tag: para
#: chapter-components.xml:1144
#, no-c-format
msgid "If you need to make a component only cosmetically invisible, you should use a custom theme to set it <literal>display: none</literal> style. This is mainly useful for certain special components such as <classname>ProgressIndicator</classname>, which have effects even when made invisible in CSS. If the hidden component has undefined size and is enclosed in a layout that also has undefined size, the containing layout will collapse when the component disappears. If you want to have the component keep its size, you have to make it invisible by setting all its font and other attributes to be transparent. In such cases, the invisible content of the component can be made visible easily in the browser."
msgstr ""

#. Tag: para
#: chapter-components.xml:1157
#, no-c-format
msgid "A component made invisible with the <emphasis>visible</emphasis> property has no particular CSS style class to indicate that it is hidden. The element does exist though, but has <literal>display: none</literal> style, which overrides any CSS styling."
msgstr ""

#. Tag: title
#: chapter-components.xml:1166
#, no-c-format
msgid "Sizing Components"
msgstr ""

#. Tag: primary
#: chapter-components.xml:1169
#, no-c-format
msgid "<classname>Sizeable</classname> interface"
msgstr ""

#. Tag: para
#: chapter-components.xml:1172
#, no-c-format
msgid "Vaadin components are sizeable; not in the sense that they were fairly large or that the number of the components and their features are sizeable, but in the sense that you can make them fairly large on the screen if you like, or small or whatever size."
msgstr ""

#. Tag: para
#: chapter-components.xml:1179
#, no-c-format
msgid "The <classname>Sizeable</classname> interface, shared by all components, provides a number of manipulation methods and constants for setting the height and width of a component in absolute or relative units, or for leaving the size undefined."
msgstr ""

#. Tag: para
#: chapter-components.xml:1186
#, no-c-format
msgid "The size of a component can be set with <methodname>setWidth()</methodname> and <methodname>setHeight()</methodname> methods. The methods take the size as a floating-point value. You need to give the unit of the measure as the second parameter for the above methods. The available units are listed in <xref linkend=\"components.features.sizeable.units.table\"/> below."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:1195
#, no-c-format
msgid ""
"<![CDATA[mycomponent.setWidth(100, Sizeable.UNITS_PERCENTAGE);\n"
"mycomponent.setWidth(400, Sizeable.UNITS_PIXELS);]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:1197
#, no-c-format
msgid "Alternatively, you can speficy the size as a string. The format of such a string must follow the HTML/CSS standards for specifying measures."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:1202
#, no-c-format
msgid ""
"<![CDATA[mycomponent.setWidth(\"100%\");\n"
"mycomponent.setHeight(\"400px\");]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:1204
#, no-c-format
msgid "The \"<literal>100%</literal>\" percentage value makes the component take all available size in the particular direction (see the description of <parameter>Sizeable.UNITS_PERCENTAGE</parameter> in the table below). You can also use the shorthand method <methodname>setSizeFull()</methodname> to set the size to 100% in both directions."
msgstr ""

#. Tag: para
#: chapter-components.xml:1212
#, no-c-format
msgid "The size can be <emphasis>undefined</emphasis> in either or both dimensions, which means that the component will take the minimum necessary space. Most components have undefined size by default, but some layouts have full size in horizontal direction. You can set the height or width as undefined with <parameter>Sizeable.SIZE_UNDEFINED</parameter> parameter for <methodname>setWidth()</methodname> and <methodname>setHeight()</methodname>."
msgstr ""

#. Tag: para
#: chapter-components.xml:1222
#, no-c-format
msgid "You always need to keep in mind that <emphasis>a layout with undefined size may not contain components with defined relative size</emphasis>, such as \"full size\". See <xref linkend=\"layout.settings.size\"/> for details."
msgstr ""

#. Tag: para
#: chapter-components.xml:1229
#, no-c-format
msgid "The <xref linkend=\"components.features.sizeable.units.table\"/> lists the available units and their codes defined in the <classname>Sizeable</classname> interface."
msgstr ""

#. Tag: title
#: chapter-components.xml:1236
#, no-c-format
msgid "Size Units"
msgstr ""

#. Tag: parameter
#: chapter-components.xml:1240
#, no-c-format
msgid "UNITS_PIXELS"
msgstr ""

#. Tag: entry
#: chapter-components.xml:1241
#, no-c-format
msgid "<entry>px</entry>"
msgstr ""

#. Tag: entry
#: chapter-components.xml:1243
#, no-c-format
msgid "The <emphasis>pixel</emphasis> is the basic hardware-specific measure of one physical display pixel."
msgstr ""

#. Tag: parameter
#: chapter-components.xml:1248
#, no-c-format
msgid "UNITS_POINTS"
msgstr ""

#. Tag: entry
#: chapter-components.xml:1249
#, no-c-format
msgid "<entry>pt</entry>"
msgstr ""

#. Tag: entry
#: chapter-components.xml:1251
#, no-c-format
msgid "The <emphasis>point</emphasis> is a typographical unit, which is usually defined as 1/72 inches or about 0.35 mm. However, on displays the size can vary significantly depending on display metrics."
msgstr ""

#. Tag: parameter
#: chapter-components.xml:1257
#, no-c-format
msgid "UNITS_PICAS"
msgstr ""

#. Tag: entry
#: chapter-components.xml:1258
#, no-c-format
msgid "<entry>pc</entry>"
msgstr ""

#. Tag: entry
#: chapter-components.xml:1260
#, no-c-format
msgid "The <emphasis>pica</emphasis> is a typographical unit, defined as 12 points, or 1/7 inches or about 4.233 mm. On displays, the size can vary depending on display metrics."
msgstr ""

#. Tag: parameter
#: chapter-components.xml:1266
#, no-c-format
msgid "UNITS_EM"
msgstr ""

#. Tag: entry
#: chapter-components.xml:1267
#, no-c-format
msgid "<entry>em</entry>"
msgstr ""

#. Tag: entry
#: chapter-components.xml:1269
#, no-c-format
msgid "A unit relative to the used font, the width of the upper-case \"M\" letter."
msgstr ""

#. Tag: parameter
#: chapter-components.xml:1273
#, no-c-format
msgid "UNITS_EX"
msgstr ""

#. Tag: entry
#: chapter-components.xml:1274
#, no-c-format
msgid "<entry>ex</entry>"
msgstr ""

#. Tag: entry
#: chapter-components.xml:1276
#, no-c-format
msgid "A unit relative to the used font, the height of the lower-case \"x\" letter."
msgstr ""

#. Tag: parameter
#: chapter-components.xml:1280
#, no-c-format
msgid "UNITS_MM"
msgstr ""

#. Tag: entry
#: chapter-components.xml:1281
#, no-c-format
msgid "<entry>mm</entry>"
msgstr ""

#. Tag: entry
#: chapter-components.xml:1283
#, no-c-format
msgid "A physical length unit, millimeters on the surface of a display device. However, the actual size depends on the display, its metrics in the operating system, and the browser."
msgstr ""

#. Tag: parameter
#: chapter-components.xml:1289
#, no-c-format
msgid "UNITS_CM"
msgstr ""

#. Tag: entry
#: chapter-components.xml:1290
#, no-c-format
msgid "<entry>cm</entry>"
msgstr ""

#. Tag: entry
#: chapter-components.xml:1292
#, no-c-format
msgid "A physical length unit, <emphasis>centimeters</emphasis> on the surface of a display device. However, the actual size depends on the display, its metrics in the operating system, and the browser."
msgstr ""

#. Tag: parameter
#: chapter-components.xml:1298
#, no-c-format
msgid "UNITS_INCH"
msgstr ""

#. Tag: entry
#: chapter-components.xml:1299
#, no-c-format
msgid "<entry>in</entry>"
msgstr ""

#. Tag: entry
#: chapter-components.xml:1301
#, no-c-format
msgid "A physical length unit, <emphasis>inches</emphasis> on the surface of a display device. However, the actual size depends on the display, its metrics in the operating system, and the browser."
msgstr ""

#. Tag: parameter
#: chapter-components.xml:1307
#, no-c-format
msgid "UNITS_PERCENTAGE"
msgstr ""

#. Tag: entry
#: chapter-components.xml:1308
#, no-c-format
msgid "<entry>%</entry>"
msgstr ""

#. Tag: entry
#: chapter-components.xml:1310
#, no-c-format
msgid "A relative percentage of the available size. For example, for the top-level layout <parameter>100%</parameter> would be the full width or height of the browser window. The percentage value must be between 0 and 100."
msgstr ""

#. Tag: para
#: chapter-components.xml:1319
#, no-c-format
msgid "If a component inside <classname>HorizontalLayout</classname> or <classname>VerticalLayout</classname> has full size in the namesake direction of the layout, the component will expand to take all available space not needed by the other components. See <xref linkend=\"layout.settings.size\"/> for details."
msgstr ""

#. Tag: title
#: chapter-components.xml:1337
#, no-c-format
msgid "Managing Input Focus"
msgstr ""

#. Tag: para
#: chapter-components.xml:1339
#, no-c-format
msgid "When the user clicks on a component, the component gets the <emphasis>input focus</emphasis>, which is indicated by highlighting according to style definitions. If the component allows inputting text, the focus and insertion point are indicated by a cursor. Pressing the <keycap>Tab</keycap> key moves the focus to the component next in the <emphasis>focus order</emphasis>."
msgstr ""

#. Tag: para
#: chapter-components.xml:1348
#, no-c-format
msgid "Focusing is supported by all <classname>Field</classname> components and also by <classname>Form</classname> and <classname>Upload</classname>."
msgstr ""

#. Tag: para
#: chapter-components.xml:1353
#, no-c-format
msgid "The focus order or <emphasis>tab index</emphasis> of a component is defined as a positive integer value, which you can set with <methodname>setTabIndex()</methodname> and get with <methodname>getTabIndex()</methodname>. The tab index is managed in the context of the application-level <classname>Window</classname> in which the components are contained. The focus order can therefore jump between two any lower-level component containers, such as sub-windows or panels."
msgstr ""

#. Tag: para
#: chapter-components.xml:1363
#, no-c-format
msgid "The default focus order is determined by the natural hierarchical order of components in the order in which they were added under their parents. The default tab index is 0 (zero)."
msgstr ""

#. Tag: para
#: chapter-components.xml:1369
#, no-c-format
msgid "Giving a negative integer as the tab index removes the component from the focus order entirely."
msgstr ""

#. Tag: para
#: chapter-components.xml:1377
#, no-c-format
msgid "The component having the focus will have an additional style class with the <literal>-focus</literal> suffix. For example, a <classname>TextField</classname>, which normally has the <literal>v-textfield</literal> style, would additionally have the <literal>v-textfield-focus</literal> style."
msgstr ""

#. Tag: para
#: chapter-components.xml:1385
#, no-c-format
msgid "For example, the following would make a text field blue when it has focus."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:1390
#, no-c-format
msgid ""
"<![CDATA[.v-textfield-focus {\n"
"    background: lightblue;\n"
"}]]>"
msgstr ""

#. Tag: classname
#: chapter-components.xml:1396
#, no-c-format
msgid "Label"
msgstr ""

#. Tag: para
#: chapter-components.xml:1398
#, no-c-format
msgid "<classname>Label</classname> is a text component that displays non-editable text. In addition to regular text, you can also display preformatted text and HTML, depending on the <emphasis>content mode</emphasis> of the label."
msgstr ""

#. Tag: section
#: chapter-components.xml:1402
#, no-c-format
msgid ""
"<book-example id=\"component.label.basic\" style=\"float: right\"></book-example> <programlisting><?pocket-size 75% ?><![CDATA[// A container that is 100% wide by default\n"
"VerticalLayout layout = new VerticalLayout();\n"
"\n"
"Label label = new Label(\"Labeling can be dangerous\");\n"
"layout.addComponent(label);]]></programlisting> <para> The text will wrap around and continue on the next line if it exceeds the width of the <classname>Label</classname>. The default width is 100%, so the containing layout must also have a defined width. Some layout components have undefined width by default, such as <classname>HorizontalLayout</classname>, so you need to pay special care with them. </para> <book-example id=\"component.label.wrap\" style=\"float: right\"></book-example>"
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:1416
#, no-c-format
msgid ""
"<?pocket-size 65% ?><![CDATA[// A container with a defined width. The default content layout\n"
"// of Panel is VerticalLayout, which has 100% default width.\n"
"Panel panel = new Panel(\"Panel Containing a Label\");\n"
"panel.setWidth(\"300px\");\n"
"\n"
"panel.addComponent(\n"
"    new Label(\"This is a Label inside a Panel. There is \" +\n"
"              \"enough text in the label to make the text \" +\n"
"              \"wrap when it exceeds the width of the panel.\"));]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:1418
#, no-c-format
msgid "As the size of the <classname>Panel</classname> in the above example is fixed and the width of <classname>Label</classname> is the default 100%, the text in the <classname>Label</classname> will wrap to fit the panel, as shown in <xref linkend=\"figure.components.label\"/>."
msgstr ""

#. Tag: title
#: chapter-components.xml:1426
#, no-c-format
msgid "The Label Component"
msgstr ""

#. Tag: para
#: chapter-components.xml:1437
#, no-c-format
msgid "Setting <classname>Label</classname> to undefined width will cause it to not wrap at the end of the line, as the width of the content defines the width. If placed inside a layout with defined width, the <classname>Label</classname> will overflow the layout horizontally and, normally, be truncated."
msgstr ""

#. Tag: para
#: chapter-components.xml:1444
#, no-c-format
msgid "Even though <classname>Label</classname> is text and often used as a caption, it also has a caption, just like any other component. As with other components, the caption is managed by the containing layout."
msgstr ""

#. Tag: title
#: chapter-components.xml:1451
#, no-c-format
msgid "Content Mode"
msgstr ""

#. Tag: para
#: chapter-components.xml:1453
#, no-c-format
msgid "The contents of a label are formatted depending on the content mode. By default, the text is assumed to be plain text and any contained XML-specific characters will be quoted appropriately to allow rendering the contents of a label in XHTML in a web browser. The content mode can be set in the constructor or with <methodname>setContentMode()</methodname>, and can have the following values:"
msgstr ""

#. Tag: constant
#: chapter-components.xml:1464
#, no-c-format
msgid "CONTENT_DEFAULT"
msgstr ""

#. Tag: para
#: chapter-components.xml:1466
#, no-c-format
msgid "The default content mode is <varname>CONTENT_TEXT</varname> (see below)."
msgstr ""

#. Tag: constant
#: chapter-components.xml:1473
#, no-c-format
msgid "CONTENT_PREFORMATTED"
msgstr ""

#. Tag: para
#: chapter-components.xml:1475
#, no-c-format
msgid "Content mode, where the label contains preformatted text. It will be, by default, rendered with a fixed-width typewriter font. Preformatted text can contain line breaks, written in Java with the <literal>\\n</literal> escape sequence for a newline character (ASCII 0x0a), or tabulator characters written with <literal>\\t</literal> (ASCII 0x08)."
msgstr ""

#. Tag: constant
#: chapter-components.xml:1486
#, no-c-format
msgid "CONTENT_RAW"
msgstr ""

#. Tag: para
#: chapter-components.xml:1488
#, no-c-format
msgid "Content mode where the label contains raw text. Output is not required to be valid XML. It can be, for example, HTML, which can be unbalanced or otherwise invalid XML. The example below uses the &lt;br&gt; tag in HTML. While XHTML should be preferred in most cases, this can be useful for some specific purposes where you may need to display loosely formatted HTML content. The raw mode also preserves character entities, some of which might otherwise be interpreted incorrectly."
msgstr ""

#. Tag: para
#: chapter-components.xml:1499 chapter-components.xml:1527
#: chapter-components.xml:1542
#, no-c-format
msgid "Please note the security and validity warnings regarding the content mode later in this section."
msgstr ""

#. Tag: constant
#: chapter-components.xml:1506
#, no-c-format
msgid "CONTENT_TEXT"
msgstr ""

#. Tag: para
#: chapter-components.xml:1508
#, no-c-format
msgid "Content mode, where the label contains only plain text. All characters are allowed, including the special <literal>&lt;</literal>, <literal>&gt;</literal>, and <literal>&amp;</literal> characters in XML or HTML, which are quoted properly in XHTML while rendering the component. This is the default mode."
msgstr ""

#. Tag: constant
#: chapter-components.xml:1519
#, no-c-format
msgid "CONTENT_XHTML"
msgstr ""

#. Tag: para
#: chapter-components.xml:1521
#, no-c-format
msgid "Content mode where the label contains XHTML. The content will be enclosed in a DIV element having the namespace \"<uri>http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd</uri>\"."
msgstr ""

#. Tag: constant
#: chapter-components.xml:1534
#, no-c-format
msgid "CONTENT_XML"
msgstr ""

#. Tag: para
#: chapter-components.xml:1536
#, no-c-format
msgid "Content mode, where the label contains well-formed and well-balanced XML. Each of the root elements must have their default namespace specified."
msgstr ""

#. Tag: constant
#: chapter-components.xml:1549
#, no-c-format
msgid "CONTENT_UIDL"
msgstr ""

#. Tag: para
#: chapter-components.xml:1551
#, no-c-format
msgid "Formatted content mode, where the contents are XML that is restricted to UIDL 1.0, the internal language of Vaadin for AJAX communications between the server and the browser. Obsolete since IT Mill Toolkit 5.0."
msgstr ""

#. Tag: title
#: chapter-components.xml:1562
#, no-c-format
msgid "Cross-Site Scripting Warning"
msgstr ""

#. Tag: para
#: chapter-components.xml:1564
#, no-c-format
msgid "Having <classname>Label</classname> in <constant>RAW</constant>, <constant>XHTML</constant>, or <constant>XML</constant> content modes allows pure HTML content. If the content comes from user input, you should always carefully sanitize it to prevent cross-site scripting (XSS) attacks. Please see <xref linkend=\"advanced.security.sanitizing\"/>."
msgstr ""

#. Tag: para
#: chapter-components.xml:1573
#, no-c-format
msgid "Also, the validity of the XML content is not checked when rendering the component and any errors can result in an error in the browser. If the content comes from an uncertain source, you should always validate it before displaying it in the component."
msgstr ""

#. Tag: para
#: chapter-components.xml:1581
#, no-c-format
msgid "The following example demonstrates the use of <classname>Label</classname> in different modes."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:1586
#, no-c-format
msgid ""
"<?pocket-size 65% ?><![CDATA[GridLayout labelgrid = new GridLayout (2,1);\n"
"\n"
"labelgrid.addComponent (new Label (\"CONTENT_DEFAULT\"));\n"
"labelgrid.addComponent (\n"
"    new Label (\"This is a label in default mode: <plain text>\",\n"
"               Label.CONTENT_DEFAULT));\n"
"\n"
"labelgrid.addComponent (new Label (\"CONTENT_PREFORMATTED\"));\n"
"labelgrid.addComponent (\n"
"    new Label (\"This is a preformatted label.\\n\"+\n"
"               \"The newline character \\\\n breaks the line.\",\n"
"               Label.CONTENT_PREFORMATTED));\n"
"\n"
"labelgrid.addComponent (new Label (\"CONTENT_RAW\"));\n"
"labelgrid.addComponent (\n"
"    new Label (\"This is a label in raw mode.<br>It can contain, \"+\n"
"               \"for example, unbalanced markup.\",\n"
"               Label.CONTENT_RAW));\n"
"\n"
"labelgrid.addComponent (new Label (\"CONTENT_TEXT\"));\n"
"labelgrid.addComponent (\n"
"    new Label (\"This is a label in (plain) text mode\",\n"
"               Label.CONTENT_TEXT));\n"
"\n"
"labelgrid.addComponent (new Label (\"CONTENT_XHTML\"));\n"
"labelgrid.addComponent (\n"
"    new Label (\"<i>This</i> is an <b>XHTML</b> formatted label\",\n"
"               Label.CONTENT_XHTML));\n"
"\n"
"labelgrid.addComponent (new Label (\"CONTENT_XML\"));\n"
"labelgrid.addComponent (\n"
"    new Label (\"This is an <myelement>XML</myelement> \"+\n"
"               \"formatted label\",\n"
"               Label.CONTENT_XML));\n"
"\n"
"main.addComponent(labelgrid);]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:1588
#, no-c-format
msgid "The rendering will look as follows:"
msgstr ""

#. Tag: title
#: chapter-components.xml:1593
#, no-c-format
msgid "Label Modes Rendered on Screen"
msgstr ""

#. Tag: title
#: chapter-components.xml:1606
#, no-c-format
msgid "Making Use of the XHTML Mode"
msgstr ""

#. Tag: para
#: chapter-components.xml:1608
#, no-c-format
msgid "Using the XHTML, XML, or raw modes allow inclusion of, for example, images within the text flow, which is not possible with any regular layout components. The following example includes an image within the text flow, with the image coming from a class loader resource."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:1615
#, no-c-format
msgid ""
"<?pocket-size 65% ?><![CDATA[ClassResource labelimage = new ClassResource (\"labelimage.jpg\",\n"
"                                              this);\n"
"main.addComponent(new Label(\"Here we have an image <img src=\\\"\" +\n"
"                            this.getRelativeLocation(labelimage) +\n"
"                            \"\\\"/> within text.\",\n"
"                            Label.CONTENT_XHTML));]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:1617
#, no-c-format
msgid "When you use a class loader resource, the image has to be included in the JAR of the web application. In this case, the <filename>labelimage.jpg</filename> needs to be in the default package. When rendered in a web browser, the output will look as follows:"
msgstr ""

#. Tag: title
#: chapter-components.xml:1626
#, no-c-format
msgid "Referencing An Image Resource in Label"
msgstr ""

#. Tag: para
#: chapter-components.xml:1634
#, no-c-format
msgid "Another solution would be to use the <classname>CustomLayout</classname> component, where you can write the component content as an XHTML fragment in a theme, but such a solution may be too heavy for most cases."
msgstr ""

#. Tag: para
#: chapter-components.xml:1641
#, no-c-format
msgid "Notice that the rendering of XHTML depends on the assumption that the client software and the terminal adapter are XHTML based. It is possible to write a terminal adapter for a custom thin client application, which may not be able to render XHTML at all. There are also differences between web browsers in their support of XHTML."
msgstr ""

#. Tag: title
#: chapter-components.xml:1651
#, no-c-format
msgid "Spacing with a <classname>Label</classname>"
msgstr ""

#. Tag: para
#: chapter-components.xml:1653
#, no-c-format
msgid "You can use a <classname>Label</classname> to create vertical or horizontal space in a layout. If you need a empty \"line\" in a vertical layout, having just a label with empty text is not enough, as it will collapse to zero height. The same goes for a label with only whitespace as the label text. You need to use a non-breaking space character, either <literal>&amp;nbsp;</literal> or <literal>&amp;#160;</literal>:"
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:1662
#, no-c-format
msgid "<?pocket-size 65% ?><![CDATA[layout.addComponent(new Label(\"&nbsp;\", Label.CONTENT_XHTML));]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:1664
#, no-c-format
msgid "Using the <parameter>Label.CONTENT_PREFORMATTED</parameter> mode has the same effect; preformatted spaces do not collapse in a vertical layout. In a <classname>HorizontalLayout</classname>, the width of a space character may be unpredictable if the label font is proportional, so you can use the preformatted mode to add em-width wide spaces."
msgstr ""

#. Tag: para
#: chapter-components.xml:1672
#, no-c-format
msgid "If you want a gap that has adjustable width or height, you can use an empty label if you specify a height or width for it. For example, to create vertical space in a <classname>VerticalLayout</classname>:"
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:1678
#, no-c-format
msgid ""
"<![CDATA[Label gap = new Label();\n"
"gap.setHeight(\"1em\");\n"
"verticalLayout.addComponent(gap);]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:1680
#, no-c-format
msgid "You can make a flexible expanding spacer by having a relatively sized empty label with <literal>100%</literal> height or width and setting the label as expanding in the layout."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:1686
#, no-c-format
msgid ""
"<![CDATA[// A wide component bar\n"
"HorizontalLayout horizontal = new HorizontalLayout();\n"
"horizontal.setWidth(\"100%\");\n"
"\n"
"// Have a component before the gap (a collapsing cell)\n"
"Button button1 = new Button(\"I'm on the left\");\n"
"horizontal.addComponent(button1);\n"
"\n"
"// An expanding gap spacer\n"
"Label expandingGap = new Label();\n"
"expandingGap.setWidth(\"100%\");\n"
"horizontal.addComponent(expandingGap);\n"
"horizontal.setExpandRatio(expandingGap, 1.0f);\n"
"\n"
"// A component after the gap (a collapsing cell)\n"
"Button button2 = new Button(\"I'm on the right\");\n"
"horizontal.addComponent(button2);]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:1693
#, no-c-format
msgid "The <classname>Label</classname> component has a <literal>v-label</literal> overall style."
msgstr ""

#. Tag: para
#: chapter-components.xml:1698
#, no-c-format
msgid "The Reindeer theme includes a number of predefined styles for typical formatting cases. These include \"<literal>h1</literal>\" (<methodname>Reindeer.LABEL_H1</methodname>) and \"<literal>h2</literal>\" (<methodname>Reindeer.LABEL_H2</methodname>) heading styles and \"<literal>light</literal>\" (<methodname>Reindeer.LABEL_SMALL</methodname>) style."
msgstr ""

#. Tag: classname
#: chapter-components.xml:1710
#, no-c-format
msgid "Link"
msgstr ""

#. Tag: para
#: chapter-components.xml:1712
#, no-c-format
msgid "The <classname>Link</classname> component allows making hyperlinks. References to locations are represented as resource objects, explained in <xref linkend=\"application.resources\"/>. The <classname>Link</classname> is a regular HTML hyperlink, that is, an <literal>&lt;a href&gt;</literal> anchor element that is handled natively by the browser. Unlike when clicking a <classname>Button</classname>, clicking a <classname>Link</classname> does not cause an event on the server-side."
msgstr ""

#. Tag: para
#: chapter-components.xml:1722
#, no-c-format
msgid "Links to an arbitrary URL can be made by using an <classname>ExternalResource</classname> as follows:"
msgstr ""

#. Tag: section
#: chapter-components.xml:1725
#, no-c-format
msgid ""
"<book-example id=\"component.link.basic\" style=\"float: right\"></book-example> <programlisting><![CDATA[// Textual link\n"
"Link link = new Link(\"Click Me!\",\n"
"        new ExternalResource(\"http://vaadin.com/\"));]]></programlisting> <para> You can use <methodname>setIcon()</methodname> to make image links as follows: </para> <programlisting><?pocket-size 65% ?><![CDATA[// Image link\n"
"Link iconic = new Link(null,\n"
"        new ExternalResource(\"http://vaadin.com/\"));\n"
"iconic.setIcon(new ThemeResource(\"img/nicubunu_Chain.png\"));\n"
"\n"
"// Image + caption\n"
"Link combo = new Link(\"To appease both literal and visual\",\n"
"        new ExternalResource(\"http://vaadin.com/\"));\n"
"combo.setIcon(new ThemeResource(\"img/nicubunu_Chain.png\"));]]></programlisting> <para> The resulting links are shown in <xref linkend=\"figure.components.link.basic\"/>. You could add a \"<literal>display: block</literal>\" style for the icon element to place the caption below it. </para> <figure xml:id=\"figure.components.link.basic\"> <title><classname>Link</classname> Example</title> <mediaobject> <imageobject role=\"html\"> <imagedata align=\"center\" fileref=\"img/components/link.png\"/> </imageobject> <imageobject role=\"fo\"> <imagedata smallscale=\"80%\" align=\"center\" fileref=\"img/components/link.png\"/> </imageobject> </mediaobject> </figure> <para> With the simple constructor used in the above example, the resource is opened in the current window. Using the constructor that takes the target window as a parameter, or by setting the target window with <methodname>setTargetName()</methodname>, you can open the resource in another window, such as a native popup window. As the target name is an HTML <literal>target</literal> string managed by the browser, the target can be any window, including windows not managed by the application itself. You can use the special underscored target names, such as <literal>_blank</literal> to open the link to a new browser window or tab. </para> <book-example id=\"component.link.target\" style=\"float: right\"></book-example>"
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:1767
#, no-c-format
msgid ""
"<?pocket-size 65% ?><![CDATA[// Hyperlink to a given URL\n"
"Link link = new Link(\"Take me a away to a faraway land\",\n"
"        new ExternalResource(\"http://vaadin.com/\"));\n"
"\n"
"// Open the URL in a new window/tab\n"
"link.setTargetName(\"_blank\");\n"
"        \n"
"// Indicate visually that it opens in a new window/tab\n"
"link.setIcon(new ThemeResource(\"icons/external-link.png\"));\n"
"link.addStyleName(\"icon-after-caption\");]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:1769
#, no-c-format
msgid "Normally, the link icon is before the caption. You can have it right of the caption by reversing the text direction in the containing element."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:1774
#, no-c-format
msgid ""
"<?pocket-size 65% ?><![CDATA[/* Position icon right of the link caption. */\n"
".icon-after-caption {\n"
"    direction: rtl;\n"
"}\n"
"/* Add some padding around the icon. */\n"
".icon-after-caption .v-icon {\n"
"    padding: 0 3px;\n"
"}]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:1776
#, no-c-format
msgid "The resulting link is shown in <xref linkend=\"figure.components.link.new-window\"/>."
msgstr ""

#. Tag: title
#: chapter-components.xml:1781
#, no-c-format
msgid "Link That Opens a New Window"
msgstr ""

#. Tag: para
#: chapter-components.xml:1792
#, no-c-format
msgid "With the <literal>_blank</literal> target, a normal new browser window is opened. If you wish to open it in a popup window, you need to give a size for the window with <methodname>setTargetWidth()</methodname> and <methodname>setTargetHeight()</methodname>. You can control the window border style with <methodname>setTargetBorder()</methodname>, which takes any of the defined border styles <parameter>TARGET_BORDER_DEFAULT</parameter>, <parameter>TARGET_BORDER_MINIMAL</parameter>, and <parameter>TARGET_BORDER_NONE</parameter>. The exact result depends on the browser."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:1804
#, no-c-format
msgid ""
"<?pocket-size 65% ?><![CDATA[// Open the URL in a popup\n"
"link.setTargetName(\"_blank\");\n"
"link.setTargetBorder(Link.TARGET_BORDER_NONE);\n"
"link.setTargetHeight(300);\n"
"link.setTargetWidth(400);]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:1808
#, no-c-format
msgid "In addition to the <classname>Link</classname> component, Vaadin allows alternative ways to make hyperlinks. The <classname>Button</classname> component has a <parameter>Reindeer.BUTTON_LINK</parameter> style name that makes it look like a hyperlink, while handling clicks in a server-side click listener instead of in the browser. Also, you can make hyperlinks (or any other HTML) in a <classname>Label</classname> in XHTML content mode."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:1820
#, no-c-format
msgid ""
"<?dbfo-need height=\"3cm\" ?><![CDATA[.v-link { }\n"
"  a { }\n"
"    .v-icon {}\n"
"    span {}]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:1822
#, no-c-format
msgid "The overall style for the <classname>Link</classname> component is <literal>v-link</literal>. The root element contains the <literal>&lt;a href&gt;</literal> hyperlink anchor. Inside the anchor are the icon, with <literal>v-icon</literal> style, and the caption in a text span."
msgstr ""

#. Tag: para
#: chapter-components.xml:1829
#, no-c-format
msgid "Hyperlink anchors have a number of <emphasis>pseudo-classes</emphasis> that are active at different times. An unvisited link has <literal>a:link</literal> class and a visited link <literal>a:visited</literal>. When the mouse pointer hovers over the link, it will have <varname>a:hover</varname>, and when the mouse button is being pressed over the link, the <literal>a:active</literal> class. When combining the pseudo-classes in a selector, please notice that <literal>a:hover</literal> must come after an <literal>a:link</literal> and <literal>a:visited</literal>, and <literal>a:active</literal> after the <literal>a:hover</literal>."
msgstr ""

#. Tag: classname
#: chapter-components.xml:1845 chapter-components.xml:1848
#, no-c-format
msgid "TextField"
msgstr ""

#. Tag: para
#: chapter-components.xml:1851
#, no-c-format
msgid "<classname>TextField</classname> is one of the most commonly used user interface components. It is a <classname>Field</classname> component that allows entering textual values using keyboard."
msgstr ""

#. Tag: para
#: chapter-components.xml:1857
#, no-c-format
msgid "The following example creates a simple text field:"
msgstr ""

#. Tag: section
#: chapter-components.xml:1859
#, no-c-format
msgid ""
"<book-example id=\"component.textfield.basic\" style=\"float: right\"></book-example> <programlisting><?pocket-size 65% ?><![CDATA[// Create a text field\n"
"TextField tf = new TextField(\"A Field\");\n"
"        \n"
"// Put some initial content in it\n"
"tf.setValue(\"Stuff in the field\");]]></programlisting> <para> See the result in <xref linkend=\"figure.components.textfield.basic\"/>. </para> <figure xml:id=\"figure.components.textfield.basic\"> <title><classname>TextField</classname> Example</title> <mediaobject> <imageobject role=\"html\"> <imagedata align=\"center\" fileref=\"img/components/textfield-example.png\"/> </imageobject> <imageobject role=\"fo\"> <imagedata smallscale=\"90%\" align=\"center\" fileref=\"img/components/textfield-example.png\"/> </imageobject> </mediaobject> </figure> <para> Value changes are handled with a <classname>Property.ValueChangeListener</classname>, as in most other fields. The value can be acquired with <methodname>getValue()</methodname> directly from the text field, as is done in the example below, or from the property reference of the event. </para> <book-example id=\"component.textfield.inputhandling\" style=\"float: right\"></book-example>"
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:1891
#, no-c-format
msgid ""
"<?pocket-size 65% ?><![CDATA[// Handle changes in the value\n"
"tf.addListener(new Property.ValueChangeListener() {\n"
"    public void valueChange(ValueChangeEvent event) {\n"
"        // Assuming that the value type is a String\n"
"        String value = (String) tf.getValue();\n"
"\n"
"        // Do something with the value\n"
"        getWindow().showNotification(\"Value is:\", value);\n"
"    }\n"
"});\n"
"        \n"
"// Fire value changes immediately when the field loses focus\n"
"tf.setImmediate(true);]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:1893
#, no-c-format
msgid "Much of the API of <classname>TextField</classname> is defined in <classname>AbstractTextField</classname>, which allows different kinds of text input fields, such as rich text editors, which do not share all the features of the single-line text fields."
msgstr ""

#. Tag: title
#: chapter-components.xml:1901
#, no-c-format
msgid "Text Field Class Relationships"
msgstr ""

#. Tag: title
#: chapter-components.xml:1913
#, no-c-format
msgid "Data Binding"
msgstr ""

#. Tag: section
#: chapter-components.xml:1913
#, no-c-format
msgid ""
"<book-example id=\"component.textfield.valuetype\" style=\"float: right\"></book-example> <para> You can bind a <classname>TextField</classname> to any property type that allows conversion of the value to and from <classname>String</classname> with the <methodname>getValue()</methodname> and <methodname>setValue()</methodname> methods. </para> <book-example id=\"component.textfield.databinding\" style=\"float: right\"></book-example> <programlisting><?pocket-size 65% ?><![CDATA[// Have an initial data model. As Double is unmodificable and\n"
"// doesn't support assignment from String, the object is\n"
"// reconstructed in the wrapper when the value is changed.\n"
"Double trouble = 42.0;\n"
"        \n"
"// Wrap it in a property data source\n"
"final ObjectProperty<Double> property =\n"
"    new ObjectProperty<Double>(trouble);\n"
"        \n"
"// Create a text field bound to it\n"
"TextField tf = new TextField(\"The Answer\", property);\n"
"tf.setImmediate(true);\n"
"\n"
"// Show that the value is really written back to the\n"
"// data source when edited by user.\n"
"Label feedback = new Label(property);\n"
"feedback.setCaption(\"The Value\");]]></programlisting> <para> When you put values in a <classname>Form</classname> or <classname>Table</classname>, the <classname>DefaultFieldFactory</classname> creates a <classname>TextField</classname> for almost every property type by default. However, you often need to make a custom factory that sets the text field description, immediateness, validation, formatting, and so on. </para> <para> See <xref linkend=\"datamodel\"/> for more details on data binding, field factories for <classname>Table</classname> in <xref linkend=\"components.table.editing\"/>, and for <classname>Form</classname> in <xref linkend=\"components.form.binding.fieldfactory\"/>. </para> <book-example id=\"component.textfield.beanbinding\"> Bean Binding </book-example>"
msgstr ""

#. Tag: title
#: chapter-components.xml:1949
#, no-c-format
msgid "String Length"
msgstr ""

#. Tag: para
#: chapter-components.xml:1951
#, no-c-format
msgid "The <methodname>setMaxLength()</methodname> method sets the maximum length of the input string so that the browser prevents the user from entering a longer one. As a security feature, the input value is automatically truncated on the server-side, as the maximum length setting could be bypassed on the client-side. The maximum length property is defined at <classname>AbstractTextField</classname> level."
msgstr ""

#. Tag: para
#: chapter-components.xml:1960
#, no-c-format
msgid "Notice that the maximum length setting does not affect the width of the field. You can set the width with <methodname>setWidth()</methodname>, as with other components. Using <emphasis>em</emphasis> widths is recommended to better approximate the proper width in relation to the size of the used font. There is no standard way in HTML for setting the width exactly to a number of letters (in a monospaced font). You can trick your way around this restriction by putting the text field in an undefined-width <classname>VerticalLayout</classname> together with an undefined-width <classname>Label</classname> that contains a sample text, and setting the width of the text field as 100%. The layout will get its width from the label, and the text field will use that."
msgstr ""

#. Tag: book-example
#: chapter-components.xml:1974
#, no-c-format
msgid "Fitting TextField width to fixed input length"
msgstr ""

#. Tag: title
#: chapter-components.xml:1980
#, no-c-format
msgid "Handling Null Values"
msgstr ""

#. Tag: primary
#: chapter-components.xml:1983
#, no-c-format
msgid "Null representation"
msgstr ""

#. Tag: methodname
#: chapter-components.xml:1987
#, no-c-format
msgid "setNullRepresentation()"
msgstr ""

#. Tag: para
#: chapter-components.xml:1987
#, no-c-format
msgid "As with any field, the value of a <classname>TextField</classname> can be set as <parameter>null</parameter>. This occurs most commonly when you create a new field without setting a value for it or bind the field value to a data source that allows null values. In such case, you might want to show a special value that stands for the null value. You can set the null representation with the <methodname>setNullRepresentation()</methodname> method. Most typically, you use an empty string for the null representation, unless you want to differentiate from a string that is explicitly empty. The default null representation is \"<literal>null</literal>\", which essentially warns that you may have forgotten to initialize your data objects properly."
msgstr ""

#. Tag: methodname
#: chapter-components.xml:2003
#, no-c-format
msgid "setNullSettingAllowed()"
msgstr ""

#. Tag: para
#: chapter-components.xml:2003
#, no-c-format
msgid "The <methodname>setNullSettingAllowed()</methodname> controls whether the user can actually input a null value by using the null value representation. If the setting is <literal>false</literal>, which is the default, inputting the null value representation string sets the value as the literal value of the string, not null. This default assumption is a safeguard for data sources that may not allow null values."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:2015
#, no-c-format
msgid ""
"<?pocket-size 75% ?><![CDATA[// Create a text field without setting its value\n"
"TextField tf = new TextField(\"Field Energy (J)\");\n"
"tf.setNullRepresentation(\"-- null-point energy --\");\n"
"\n"
"// The null value is actually the default\n"
"tf.setValue(null);\n"
"        \n"
"// Allow user to input the null value by\n"
"// its representation\n"
"tf.setNullSettingAllowed(true);\n"
"\n"
"// Feedback to see the value\n"
"Label value = new Label(tf);\n"
"value.setCaption(\"Current Value:\");]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:2017
#, no-c-format
msgid "The <classname>Label</classname>, which is bound to the value of the <classname>TextField</classname>, displays a null value as empty. The resulting user interface is shown in <xref linkend=\"figure.components.textfield.nullvalues\"/>."
msgstr ""

#. Tag: title
#: chapter-components.xml:2025
#, no-c-format
msgid "Null Value Representation"
msgstr ""

#. Tag: title
#: chapter-components.xml:2048 chapter-components.xml:2079
#, no-c-format
msgid "Text Change Events"
msgstr ""

#. Tag: classname
#: chapter-components.xml:2051
#, no-c-format
msgid "Text change events"
msgstr ""

#. Tag: para
#: chapter-components.xml:2054
#, no-c-format
msgid "Often you want to receive a change event immediately when the text field value changes. The <emphasis>immediate</emphasis> mode is not literally immediate, as the changes are transmitted only after the field loses focus. In the other extreme, using keyboard events for every keypress would make typing unbearably slow and also processing the keypresses is too complicated for most purposes. <emphasis>Text change events</emphasis> are transmitted asynchronously soon after typing and do not block typing while an event is being processed."
msgstr ""

#. Tag: para
#: chapter-components.xml:2065
#, no-c-format
msgid "Text change events are received with a <classname>TextChangeListener</classname>, as is done in the following example that demonstrates how to create a text length counter:"
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:2072
#, no-c-format
msgid ""
"<?pocket-size 65% ?><![CDATA[// Text field with maximum length\n"
"final TextField tf = new TextField(\"My Eventful Field\");\n"
"tf.setValue(\"Initial content\");\n"
"tf.setMaxLength(20);\n"
"\n"
"// Counter for input length\n"
"final Label counter = new Label();\n"
"counter.setValue(tf.toString().length() +\n"
"                 \" of \" + tf.getMaxLength());\n"
"        \n"
"// Display the current length interactively in the counter\n"
"tf.addListener(new TextChangeListener() {\n"
"    public void textChange(TextChangeEvent event) {\n"
"        int len = event.getText().length();\n"
"        counter.setValue(len + \" of \" + tf.getMaxLength());\n"
"    }\n"
"});\n"
"\n"
"// This is actually the default\n"
"tf.setTextChangeEventMode(TextChangeEventMode.LAZY);]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:2074
#, no-c-format
msgid "The result is shown in <xref linkend=\"figure.components.textfield.textchangeevents\"/>."
msgstr ""

#. Tag: para
#: chapter-components.xml:2090
#, no-c-format
msgid "The <emphasis>text change event mode</emphasis> defines how quickly the changes are transmitted to the server and cause a server-side event. Lazier change events allow sending larger changes in one event if the user is typing fast, thereby reducing server requests."
msgstr ""

#. Tag: para
#: chapter-components.xml:2097
#, no-c-format
msgid "You can set the text change event mode of a <classname>TextField</classname> with <methodname>setTextChangeEventMode()</methodname>. The allowed modes are defined in <classname>TextChangeEventMode</classname> class and are the following:"
msgstr ""

#. Tag: term
#: chapter-components.xml:2107
#, no-c-format
msgid "<parameter>TextChangeEventMode.LAZY</parameter> (default)"
msgstr ""

#. Tag: para
#: chapter-components.xml:2109
#, no-c-format
msgid "An event is triggered when there is a pause in editing the text. The length of the pause can be modified with <methodname>setInputEventTimeout()</methodname>. As with the <parameter>TIMEOUT</parameter> mode, a text change event is forced before a possible <classname>ValueChangeEvent</classname>, even if the user did not keep a pause while entering the text."
msgstr ""

#. Tag: para
#: chapter-components.xml:2119
#, no-c-format
msgid "This is the default mode."
msgstr ""

#. Tag: parameter
#: chapter-components.xml:2125
#, no-c-format
msgid "TextChangeEventMode.TIMEOUT"
msgstr ""

#. Tag: para
#: chapter-components.xml:2127
#, no-c-format
msgid "A text change in the user interface causes the event to be communicated to the application after a timeout period. If more changes are made during this period, the event sent to the server-side includes the changes made up to the last change. The length of the timeout can be set with <methodname>setInputEventTimeout()</methodname>."
msgstr ""

#. Tag: para
#: chapter-components.xml:2136
#, no-c-format
msgid "If a <classname>ValueChangeEvent</classname> would occur before the timeout period, a <classname>TextChangeEvent</classname> is triggered before it, on the condition that the text content has changed since the previous <classname>TextChangeEvent</classname>."
msgstr ""

#. Tag: parameter
#: chapter-components.xml:2146
#, no-c-format
msgid "TextChangeEventMode.EAGER"
msgstr ""

#. Tag: para
#: chapter-components.xml:2148
#, no-c-format
msgid "An event is triggered immediately for every change in the text content, typically caused by a key press. The requests are separate and are processed sequentially one after another. Change events are nevertheless communicated asynchronously to the server, so further input can be typed while event requests are being processed."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:2166 chapter-components.xml:2346
#, no-c-format
msgid "<![CDATA[.v-textfield { }]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:2168
#, no-c-format
msgid "The HTML structure of <classname>TextField</classname> is extremely simple, consisting only of an element with <literal>v-textfield</literal> style."
msgstr ""

#. Tag: para
#: chapter-components.xml:2173
#, no-c-format
msgid "For example, the following custom style uses dashed border:"
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:2179
#, no-c-format
msgid ""
"<?pocket-size 65% ?><![CDATA[.v-textfield-dashing {\n"
"    border:     thin dashed;\n"
"    background: white; /* Has shading image by default */\n"
"}]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:2181
#, no-c-format
msgid "The result is shown in <xref linkend=\"figure.components.textfield.css\"/>."
msgstr ""

#. Tag: title
#: chapter-components.xml:2186
#, no-c-format
msgid "Styling TextField with CSS"
msgstr ""

#. Tag: para
#: chapter-components.xml:2197
#, no-c-format
msgid "The style name for <classname>TextField</classname> is also used in several components that contain a text input field, even if the text input is not an actual <classname>TextField</classname>. This ensures that the style of different text input boxes is similar."
msgstr ""

#. Tag: classname
#: chapter-components.xml:2209
#, no-c-format
msgid "TextArea"
msgstr ""

#. Tag: para
#: chapter-components.xml:2211
#, no-c-format
msgid "<classname>TextArea</classname> is a multi-line version of the <classname>TextField</classname> component described in <xref linkend=\"components.textfield\"/>."
msgstr ""

#. Tag: para
#: chapter-components.xml:2217
#, no-c-format
msgid "The following example creates a simple text area:"
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:2223
#, no-c-format
msgid ""
"<?pocket-size 65% ?><![CDATA[// Create the area\n"
"TextArea area = new TextArea(\"Big Area\");\n"
"        \n"
"// Put some content in it\n"
"area.setValue(\"A row\\n\"+\n"
"              \"Another row\\n\"+\n"
"              \"Yet another row\");]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:2225
#, no-c-format
msgid "The result is shown in <xref linkend=\"figure.components.textarea\"/>."
msgstr ""

#. Tag: title
#: chapter-components.xml:2230
#, no-c-format
msgid "<classname>TextArea</classname> Example"
msgstr ""

#. Tag: para
#: chapter-components.xml:2241
#, no-c-format
msgid "You can set the number of visible rows with <methodname>setRows()</methodname> or use the regular <methodname>setHeight()</methodname> to define the height in other units. If the actual number of rows exceeds the number, a vertical scrollbar will appear. Setting the height with <methodname>setRows()</methodname> leaves space for a horizontal scrollbar, so the actual number of visible rows may be one higher if the scrollbar is not visible."
msgstr ""

#. Tag: para
#: chapter-components.xml:2251
#, no-c-format
msgid "You can set the width with the regular <methodname>setWidth()</methodname> method. Setting the size with the <emphasis>em</emphasis> unit, which is relative to the used font size, is recommended."
msgstr ""

#. Tag: title
#: chapter-components.xml:2258
#, no-c-format
msgid "Word Wrap"
msgstr ""

#. Tag: para
#: chapter-components.xml:2260
#, no-c-format
msgid "The <methodname>setWordwrap()</methodname> sets whether long lines are wrapped (<literal>true</literal> - default) when the line length reaches the width of the writing area. If the word wrap is disabled (<literal>false</literal>), a vertical scrollbar will appear instead. The word wrap is only a visual feature and wrapping a long line does not insert line break characters in the field value; shortening a wrapped line will undo the wrapping."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:2272
#, no-c-format
msgid ""
"<?pocket-size 65% ?><![CDATA[TextArea area1 = new TextArea(\"Wrapping\");\n"
"area1.setWordwrap(true); // The default\n"
"area1.setValue(\"A quick brown fox jumps over the lazy dog\");\n"
"\n"
"TextArea area2 = new TextArea(\"Nonwrapping\");\n"
"area2.setWordwrap(false);\n"
"area2.setValue(\"Victor jagt zw&ouml;lf Boxk&auml;mpfer quer \"+\n"
"               \"&uuml;ber den Sylter Deich\");]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:2274
#, no-c-format
msgid "The result is shown in <xref linkend=\"figure.components.textarea.wordwrap\"/>."
msgstr ""

#. Tag: title
#: chapter-components.xml:2279
#, no-c-format
msgid "Word Wrap in <classname>TextArea</classname>"
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:2294
#, no-c-format
msgid "<![CDATA[.v-textarea { }]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:2296
#, no-c-format
msgid "The HTML structure of <classname>TextArea</classname> is extremely simple, consisting only of an element with <literal>v-textarea</literal> style."
msgstr ""

#. Tag: book-example
#: chapter-components.xml:2301 chapter-components.xml:2355
#, no-c-format
msgid "CSS Styling"
msgstr ""

#. Tag: classname
#: chapter-components.xml:2306 chapter-components.xml:2323
#, no-c-format
msgid "PasswordField"
msgstr ""

#. Tag: para
#: chapter-components.xml:2308
#, no-c-format
msgid "The <classname>PasswordField</classname> is a variant of <classname>TextField</classname> that hides the typed input from visual inspection."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:2316
#, no-c-format
msgid "<?pocket-size 65% ?><![CDATA[PasswordField tf = new PasswordField(\"Keep it secret\");]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:2318
#, no-c-format
msgid "The result is shown in <xref linkend=\"figure.components.passwordfield.basic\"/>."
msgstr ""

#. Tag: para
#: chapter-components.xml:2334
#, no-c-format
msgid "You should note that the <classname>PasswordField</classname> hides the input only from \"over the shoulder\" visual observation. Unless the server connection is encrypted with a secure connection, such as HTTPS, the input is transmitted in clear text and may be intercepted by anyone with low-level access to the network. Also phishing attacks that intercept the input in the browser may be possible by exploiting JavaScript execution security holes in the browser."
msgstr ""

#. Tag: para
#: chapter-components.xml:2348
#, no-c-format
msgid "The <classname>PasswordField</classname> does not have its own CSS style name but uses the same <literal>v-textfield</literal> style as the regular <classname>TextField</classname>. See <xref linkend=\"components.textfield.css\"/> for information on styling it."
msgstr ""

#. Tag: classname
#: chapter-components.xml:2360
#, no-c-format
msgid "RichTextArea"
msgstr ""

#. Tag: para
#: chapter-components.xml:2362
#, no-c-format
msgid "The <classname>RichTextArea</classname> field allows entering or editing formatted text. The toolbar provides all basic editing functionalities. The text content of <classname>RichTextArea</classname> is represented in HTML format. <classname>RichTextArea</classname> inherits <classname>TextField</classname> and does not add any API functionality over it. You can add new functionality by extending the client-side components <classname>VRichTextArea</classname> and <classname>VRichTextToolbar</classname>."
msgstr ""

#. Tag: para
#: chapter-components.xml:2373
#, no-c-format
msgid "As with <classname>TextField</classname>, the textual content of the rich text area is the <classname>Property</classname> of the field and can be set with <methodname>setValue()</methodname> and read with <methodname>getValue()</methodname>."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:2380
#, no-c-format
msgid ""
"<![CDATA[// Create a rich text area\n"
"final RichTextArea rtarea = new RichTextArea();\n"
"rtarea.setCaption(\"My Rich Text Area\");\n"
"\n"
"// Set initial content as HTML\n"
"rtarea.setValue(\"<h1>Hello</h1>\\n\" +\n"
"    \"<p>This rich text area contains some text.</p>\");]]>"
msgstr ""

#. Tag: title
#: chapter-components.xml:2383
#, no-c-format
msgid "Rich Text Area Component"
msgstr ""

#. Tag: para
#: chapter-components.xml:2394
#, no-c-format
msgid "Above, we used context-specific tags such as <literal>&lt;h1&gt;</literal> in the initial HTML content. The rich text area component does not allow creating such tags, only formatting tags, but it does preserve them unless the user edits them away. Any non-visible whitespace such as the new line character (<literal>\\n</literal>) are removed from the content. For example, the value set above will be as follows when read from the field with <methodname>getValue()</methodname>:"
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:2404
#, no-c-format
msgid "<![CDATA[<h1>Hello</h1> <p>This rich text area contains some text.</p>]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:2406
#, no-c-format
msgid "The rich text area is one of the few components in Vaadin that contain textual labels. The selection boxes in the toolbar are in English and currently can not be localized in any other way than by inheriting or reimplementing the client-side <classname>VRichTextToolbar</classname> widget. The buttons can be localized simply with CSS by downloading a copy of the toolbar background image, editing it, and replacing the default toolbar. The toolbar is a single image file from which the individual button icons are picked, so the order of the icons is different from the rendered. The image file depends on the client-side implementation of the toolbar."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:2418
#, no-c-format
msgid ""
"<?pocket-size 75% ?><![CDATA[\n"
".v-richtextarea-richtextexample .gwt-ToggleButton\n"
".gwt-Image {\n"
"  background-image: url(img/richtextarea-toolbar-fi.png)\n"
"                    !important;\n"
"}]]>"
msgstr ""

#. Tag: title
#: chapter-components.xml:2421
#, no-c-format
msgid "Regular English and a Localized Rich Text Area Toolbar"
msgstr ""

#. Tag: title
#: chapter-components.xml:2435
#, no-c-format
msgid "Cross-Site Scripting with <classname>RichTextArea</classname>"
msgstr ""

#. Tag: para
#: chapter-components.xml:2437
#, no-c-format
msgid "The user input from a <classname>RichTextArea</classname> is transmitted as XHTML from the browser to server-side and is not sanitized. As the entire purpose of the <classname>RichTextArea</classname> component is to allow input of formatted text, you can not sanitize it just by removing all HTML tags. Also many attributes, such as <parameter>style</parameter>, should pass through the sanitization."
msgstr ""

#. Tag: para
#: chapter-components.xml:2446
#, no-c-format
msgid "See <xref linkend=\"advanced.security.sanitizing\"/> for more details on Cross-Site scripting vulnerabilities and sanitization of user input."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:2455
#, no-c-format
msgid ""
"<![CDATA[.v-richtextarea { }\n"
".v-richtextarea .gwt-RichTextToolbar { }\n"
".v-richtextarea .gwt-RichTextArea { }]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:2457
#, no-c-format
msgid "The rich text area consists of two main parts: the toolbar with overall style <literal>.gwt-RichTextToolbar</literal> and the editor area with style <literal>.gwt-RichTextArea</literal>. The editor area obviously contains all the elements and their styles that the HTML content contains. The toolbar contains buttons and drop-down list boxes with the following respective style names:"
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:2466
#, no-c-format
msgid ""
"<![CDATA[.gwt-ToggleButton { }\n"
".gwt-ListBox { }]]>"
msgstr ""

#. Tag: title
#: chapter-components.xml:2473
#, no-c-format
msgid "Date and Time Input with <classname>DateField</classname>"
msgstr ""

#. Tag: para
#: chapter-components.xml:2474
#, no-c-format
msgid "The <classname>DateField</classname> component provides the means to display and input date and time. The field comes in two variations: <classname>PopupDateField</classname>, with a numeric input box and a popup calendar view, and <classname>InlineDateField</classname>, with the calendar view always visible. The <classname>DateField</classname> base class defaults to the popup variation."
msgstr ""

#. Tag: para
#: chapter-components.xml:2483
#, no-c-format
msgid "The example below illustrates the use of the <classname>DateField</classname> baseclass, which is equivalent to the <classname>PopupDateField</classname>. We set the initial time of the date field to current time by using the default constructor of the <classname>java.util.Date</classname> class."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:2491
#, no-c-format
msgid ""
"<![CDATA[// Create a DateField with the default style\n"
"DateField date = new DateField();\n"
"        \n"
"// Set the date and time to present\n"
"date.setValue(new Date());]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:2493
#, no-c-format
msgid "The result is shown in <xref linkend=\"figure.components.datefield.basic\"/>."
msgstr ""

#. Tag: title
#: chapter-components.xml:2498
#, no-c-format
msgid "<classname>DateField</classname> (<classname>PopupDateField</classname>) for Selecting Date and Time"
msgstr ""

#. Tag: classname
#: chapter-components.xml:2510
#, no-c-format
msgid "PopupDateField"
msgstr ""

#. Tag: para
#: chapter-components.xml:2512
#, no-c-format
msgid "The <classname>PopupDateField</classname> provides date input using a text box for the date and time. As the <classname>DateField</classname> defaults to this component, the use is exactly the same as described earlier. Clicking the handle right of the date opens a popup view for selecting the year, month, and day, as well as time. Also the <keycap>Down</keycap> key opens the popup. Once opened, the user can navigate the calendar using the cursor keys."
msgstr ""

#. Tag: para
#: chapter-components.xml:2522
#, no-c-format
msgid "The date and time selected from the popup are displayed in the text box according to the default date and time format of the current locale, or as specified with <methodname>setDateFormat()</methodname>. The same format definitions are used for parsing user input."
msgstr ""

#. Tag: title
#: chapter-components.xml:2530
#, no-c-format
msgid "Date and Time Format"
msgstr ""

#. Tag: para
#: chapter-components.xml:2532
#, no-c-format
msgid "The date and time are normally displayed according to the default format for the current locale (see <xref linkend=\"components.features.locale\"/>). You can specify a custom format with <methodname>setDateFormat()</methodname>. It takes a format string that follows the format of the <classname>SimpleDateFormat</classname> in Java."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:2541
#, no-c-format
msgid ""
"<?pocket-size 75% ?><![CDATA[// Display only year, month, and day in ISO format\n"
"date.setDateFormat(\"yyyy-MM-dd\");]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:2543
#, no-c-format
msgid "The result is shown in <xref linkend=\"figure.components.datefield.popupdatefield.format\"/>."
msgstr ""

#. Tag: title
#: chapter-components.xml:2549
#, no-c-format
msgid "Custom Date Format for <classname>PopupDateField</classname>"
msgstr ""

#. Tag: para
#: chapter-components.xml:2561
#, no-c-format
msgid "The same format specification is also used for parsing user-input date and time, as described later."
msgstr ""

#. Tag: title
#: chapter-components.xml:2568
#, no-c-format
msgid "Handling Malformed User Input"
msgstr ""

#. Tag: para
#: chapter-components.xml:2570
#, no-c-format
msgid "A user can easily input a malformed or otherwise invalid date or time. <classname>DateField</classname> has two validation layers: first on the client-side and then on the server-side."
msgstr ""

#. Tag: para
#: chapter-components.xml:2576
#, no-c-format
msgid "The validity of the entered date is first validated on the client-side, immediately when the input box loses focus. If the date format is invalid, the <literal>v-datefield-parseerror</literal> style is set. Whether this causes a visible indication of a problem depends on the theme. The built-in <literal>reindeer</literal> theme does not shown any indication by default, making server-side handling of the problem more convenient."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:2586
#, no-c-format
msgid ""
"<?pocket-size 65% ?><![CDATA[.mydate.v-datefield-parseerror .v-textfield {\n"
"    background: pink;\n"
"}]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:2588
#, no-c-format
msgid "The <methodname>setLenient(true)</methodname> setting enables relaxed interpretation of dates, so that invalid dates, such as February 30th or March 0th, are wrapped to the next or previous month, for example."
msgstr ""

#. Tag: para
#: chapter-components.xml:2594
#, no-c-format
msgid "The server-side validation phase occurs when the date value is sent to the server. If the date field is set in immediate state, it occurs immediately after the field loses focus. Once this is done and if the status is still invalid, an error indicator is displayed beside the component. Hovering the mouse pointer over the indicator shows the error message."
msgstr ""

#. Tag: para
#: chapter-components.xml:2603
#, no-c-format
msgid "You can handle the errors by overriding the <methodname>handleUnparsableDateString()</methodname> method. The method gets the user input as a string parameter and can provide a custom parsing mechanism, as shown in the following example."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:2610
#, no-c-format
msgid ""
"<?pocket-size 65% ?><![CDATA[// Create a date field with a custom parsing and a\n"
"// custom error message for invalid format\n"
"PopupDateField date = new PopupDateField(\"My Date\") {\n"
"    @Override\n"
"    protected Date handleUnparsableDateString(String dateString)\n"
"    throws Property.ConversionException {\n"
"        // Try custom parsing\n"
"        String fields[] = dateString.split(\"/\");\n"
"        if (fields.length >= 3) {\n"
"            try {\n"
"                int year  = Integer.parseInt(fields[0]);\n"
"                int month = Integer.parseInt(fields[1])-1;\n"
"                int day   = Integer.parseInt(fields[2]);\n"
"                GregorianCalendar c =\n"
"                    new GregorianCalendar(year, month, day);\n"
"                return c.getTime();\n"
"            } catch (NumberFormatException e) {\n"
"                throw new Property.\n"
"                    ConversionException(\"Not a number\");\n"
"            }\n"
"        }\n"
"        \n"
"        // Bad date\n"
"        throw new Property.\n"
"            ConversionException(\"Your date needs two slashes\");\n"
"    }\n"
"};\n"
"        \n"
"// Display only year, month, and day in slash-delimited format\n"
"date.setDateFormat(\"yyyy/MM/dd\");\n"
"\n"
"// Don't be too tight about the validity of dates\n"
"// on the client-side\n"
"date.setLenient(true);]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:2612
#, no-c-format
msgid "The handler method must either return a parsed <classname>Date</classname> object or throw a <classname>ConversionException</classname>. Returning <parameter>null</parameter> will set the field value to <parameter>null</parameter> and clear the input box."
msgstr ""

#. Tag: title
#: chapter-components.xml:2622
#, no-c-format
msgid "Customizing the Error Message"
msgstr ""

#. Tag: para
#: chapter-components.xml:2624
#, no-c-format
msgid "In addition to customized parsing, overriding the handler method for unparseable input is useful for internationalization and other customization of the error message. You can also use it for another way for reporting the errors, as is done in the example below:"
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:2631
#, no-c-format
msgid ""
"<?pocket-size 65% ?><![CDATA[// Create a date field with a custom error message for invalid format\n"
"PopupDateField date = new PopupDateField(\"My Date\") {\n"
"    @Override\n"
"    protected Date handleUnparsableDateString(String dateString)\n"
"    throws Property.ConversionException {\n"
"        // Have a notification for the error\n"
"        getWindow().showNotification(\n"
"                \"Your date needs two slashes\",\n"
"                Notification.TYPE_WARNING_MESSAGE);\n"
"        \n"
"        // A failure must always also throw an exception\n"
"        throw new Property.ConversionException(\"Bad date\");\n"
"    }\n"
"};]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:2633
#, no-c-format
msgid "If the input is invalid, you should always throw the exception; returning a <parameter>null</parameter> value would make the input field empty, which is probably undesired."
msgstr ""

#. Tag: title
#: chapter-components.xml:2641
#, no-c-format
msgid "Input Prompt"
msgstr ""

#. Tag: para
#: chapter-components.xml:2643
#, no-c-format
msgid "Like other fields that have a text box, <classname>PopupDateField</classname> allows an input prompt that is visible until the user has input a value. You can set the prompt with <methodname>setInputPrompt</methodname>."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:2650
#, no-c-format
msgid ""
"<?pocket-size 65% ?><![CDATA[PopupDateField date = new PopupDateField();\n"
"\n"
"// Set the prompt\n"
"date.setInputPrompt(\"Select a date\");\n"
"        \n"
"// Set width explicitly to accommodate the prompt\n"
"date.setWidth(\"10em\");]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:2652
#, no-c-format
msgid "The date field doesn't automatically scale to accommodate the prompt, so you need to set it explicitly with <methodname>setWidth()</methodname>."
msgstr ""

#. Tag: para
#: chapter-components.xml:2658
#, no-c-format
msgid "The input prompt is not available in the <classname>DateField</classname> superclass."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:2667
#, no-c-format
msgid ""
"<![CDATA[.v-datefield, v-datefield-popupcalendar {}\n"
"  .v-textfield, v-datefield-textfield {}\n"
"  .v-datefield-button {}]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:2669
#, no-c-format
msgid "The top-level element of <classname>DateField</classname> and all its variants have <literal>v-datefield</literal> style. The base class and the <classname>PopupDateField</classname> also have the <literal>v-datefield-popupcalendar</literal> style."
msgstr ""

#. Tag: para
#: chapter-components.xml:2676
#, no-c-format
msgid "In addition, the top-level element has a style that indicates the resolution, with <literal>v-datefield-</literal> basename and an extension, which is one of <literal>full</literal>, <literal>day</literal>, <literal>month</literal>, or <literal>year</literal>. The <literal>-full</literal> style is enabled when the resolution is smaller than a day. These styles are used mainly for controlling the appearance of the popup calendar."
msgstr ""

#. Tag: para
#: chapter-components.xml:2686
#, no-c-format
msgid "The text box has <literal>v-textfield</literal> and <literal>v-datefield-textfield</literal> styles, and the calendar button <literal>v-datefield-button</literal>."
msgstr ""

#. Tag: para
#: chapter-components.xml:2692
#, no-c-format
msgid "Once opened, the calendar popup has the following styles at the top level:"
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:2697
#, no-c-format
msgid ""
"<![CDATA[.v-datefield-popup {}\n"
"  .v-popupcontent {}\n"
"    .v-datefield-calendarpanel {}]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:2699
#, no-c-format
msgid "The top-level element of the floating popup calendar has <literal>.v-datefield-popup</literal> style. Observe that the popup frame is outside the HTML structure of the component, hence it is not enclosed in the <literal>v-datefield</literal> element and does not include any custom styles. The content in the <literal>v-datefield-calendarpanel</literal> is the same as in <classname>InlineDateField</classname>, as described in <xref linkend=\"components.datefield.calendar\"/>."
msgstr ""

#. Tag: classname
#: chapter-components.xml:2716
#, no-c-format
msgid "InlineDateField"
msgstr ""

#. Tag: para
#: chapter-components.xml:2718
#, no-c-format
msgid "The <classname>InlineDateField</classname> provides a date picker component with a month view. The user can navigate months and years by clicking the appropriate arrows. Unlike with the popup variant, the month view is always visible in the inline field."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:2725
#, no-c-format
msgid ""
"<?pocket-size 75% ?><![CDATA[// Create a DateField with the default style\n"
"InlineDateField date = new InlineDateField();\n"
"    \n"
"// Set the date and time to present\n"
"date.setValue(new java.util.Date());]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:2727
#, no-c-format
msgid "The result is shown in <xref linkend=\"figure.components.datefield.inlinedatefield\"/>."
msgstr ""

#. Tag: title
#: chapter-components.xml:2733
#, no-c-format
msgid "Example of the <classname>InlineDateField</classname>"
msgstr ""

#. Tag: para
#: chapter-components.xml:2744
#, no-c-format
msgid "The user can also navigate the calendar using the cursor keys."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:2751
#, no-c-format
msgid ""
"<![CDATA[.v-datefield {}\n"
"  .v-datefield-calendarpanel {}\n"
"    .v-datefield-calendarpanel-header {}\n"
"      .v-datefield-calendarpanel-prevyear {}\n"
"      .v-datefield-calendarpanel-prevmonth {}\n"
"      .v-datefield-calendarpanel-month {}\n"
"      .v-datefield-calendarpanel-nextmonth {}\n"
"      .v-datefield-calendarpanel-nextyear {}\n"
"    .v-datefield-calendarpanel-body {}\n"
"      .v-datefield-calendarpanel-weekdays,\n"
"      .v-datefield-calendarpanel-weeknumbers {}\n"
"        .v-first {}\n"
"        .v-last {}\n"
"      .v-datefield-calendarpanel-weeknumber {}\n"
"      .v-datefield-calendarpanel-day {}\n"
"    .v-datefield-calendarpanel-time {}\n"
"      .v-datefield-time {}\n"
"        .v-select {}\n"
"        .v-label {}]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:2753
#, no-c-format
msgid "The top-level element has the <literal>v-datefield</literal> style. In addition, the top-level element has a style name that indicates the resolution of the calendar, with <literal>v-datefield-</literal> basename and an extension, which is one of <literal>full</literal>, <literal>day</literal>, <literal>month</literal>, or <literal>year</literal>. The <literal>-full</literal> style is enabled when the resolution is smaller than a day."
msgstr ""

#. Tag: para
#: chapter-components.xml:2763
#, no-c-format
msgid "The <literal>v-datefield-calendarpanel-weeknumbers</literal> and <literal>v-datefield-calendarpanel-weeknumber</literal> styles are enabled when the week numbers are enabled. The former controls the appearance of the weekday header and the latter the actual week numbers."
msgstr ""

#. Tag: para
#: chapter-components.xml:2771
#, no-c-format
msgid "The other style names should be self-explanatory. For weekdays, the <literal>v-first</literal> and <literal>v-last</literal> styles allow making rounded endings for the weekday bar."
msgstr ""

#. Tag: title
#: chapter-components.xml:2780
#, no-c-format
msgid "Time Resolution"
msgstr ""

#. Tag: para
#: chapter-components.xml:2782
#, no-c-format
msgid "You probably will not need milliseconds in most applications, and might not even need the time, but just the date, or month or year. The visibility of the input components is controlled by <emphasis>time resolution</emphasis>, which can be set with <methodname>setResolution()</methodname> method. The method takes as its parameters the lowest visible component, typically <parameter>RESOLUTION_DAY</parameter> for just dates and <parameter>RESOLUTION_MIN</parameter> for dates with time in hours and minutes. Please see the API Reference for a complete list of resolution parameters."
msgstr ""

#. Tag: title
#: chapter-components.xml:2797
#, no-c-format
msgid "DateField Locale"
msgstr ""

#. Tag: para
#: chapter-components.xml:2799
#, no-c-format
msgid "The date and time are displayed according to the locale of the user, as reported by the browser. You can set a custom locale with the <methodname>setLocale()</methodname> method of <classname>AbstractComponent</classname>, as described in <xref linkend=\"components.features.locale\"/>. Only Gregorian calendar is supported."
msgstr ""

#. Tag: classname
#: chapter-components.xml:2811
#, no-c-format
msgid "Button"
msgstr ""

#. Tag: para
#: chapter-components.xml:2813
#, no-c-format
msgid "The <classname>Button</classname> is a user interface component that is normally used for finalizing input and initiating some action. When the user clicks a button, a <classname>Button.ClickEvent</classname> is emitted. A listener that inherits the <classname>Button.ClickListener</classname> interface can handle clicks with the <methodname>buttonClick()</methodname> method."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:2822
#, no-c-format
msgid ""
"<?pocket-size 65% ?><![CDATA[public class TheButton extends CustomComponent\n"
"                       implements Button.ClickListener {\n"
"    Button thebutton;\n"
"\n"
"    public TheButton() {\n"
"        // Create a Button with the given caption.\n"
"        thebutton = new Button (\"Do not push this button\");\n"
"        \n"
"        // Listen for ClickEvents.\n"
"        thebutton.addListener(this);\n"
"\n"
"        setCompositionRoot(thebutton);\n"
"    }\n"
"    \n"
"    /** Handle click events for the button. */\n"
"    public void buttonClick (Button.ClickEvent event) {\n"
"        thebutton.setCaption (\"Do not push this button again\");\n"
"    }\n"
"}]]>"
msgstr ""

#. Tag: title
#: chapter-components.xml:2825
#, no-c-format
msgid "An Example of a Button"
msgstr ""

#. Tag: para
#: chapter-components.xml:2833
#, no-c-format
msgid "As a user interface often has several buttons, you can differentiate between them either by comparing the <classname>Button</classname> object reference returned by the <methodname>getButton()</methodname> method of <classname>Button.ClickEvent</classname> to a kept reference or by using a separate listener method for each button. The listening object and method can be given to the constructor. For a detailed description of these patterns together with some examples, please see <xref linkend=\"architecture.events\"/>."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:2847
#, no-c-format
msgid "<![CDATA[.v-button { }]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:2849
#, no-c-format
msgid "The exact CSS style name can be different if a <classname>Button</classname> has the <parameter>switchMode</parameter> attribute enabled. See the alternative CSS styles below."
msgstr ""

#. Tag: para
#: chapter-components.xml:2855
#, no-c-format
msgid "Adding the \"<literal>small</literal>\" style name enables a smaller style for the <classname>Button</classname>. You can also use the <parameter>BUTTON_SMALL</parameter> constant in <classname>Runo</classname> and <classname>Reindeer</classname> theme classes as well. The <classname>BaseTheme</classname> class also has a <parameter>BUTTON_LINK</parameter> style, with \"<literal>link</literal>\" style name, which makes the button look like a hyperlink."
msgstr ""

#. Tag: classname
#: chapter-components.xml:2868
#, no-c-format
msgid "CheckBox"
msgstr ""

#. Tag: para
#: chapter-components.xml:2870
#, no-c-format
msgid "<classname>CheckBox</classname> is a two-state selection component that can be either checked or unchecked. The caption of the check box will be placed right of the actual check box. Vaadin provides two ways to create check boxes: individual check boxes with the <classname>CheckBox</classname> component described in this section and check box groups with the <classname>OptionGroup</classname> component in multiple selection mode, as described in <xref linkend=\"components.selecting.optiongroup\"/>."
msgstr ""

#. Tag: para
#: chapter-components.xml:2880
#, no-c-format
msgid "Clicking on a check box will change its state. The state is the <classname>Boolean</classname> property of the <classname>Button</classname>, and can be set with <methodname>setValue()</methodname> and obtained with <methodname>getValue()</methodname> method of the <classname>Property</classname> interface. Changing the value of a check box will cause a <classname>ValueChangeEvent</classname>, which can be handled by a <classname>ValueChangeListener</classname>."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:2890
#, no-c-format
msgid ""
"<?pocket-size 75% ?><![CDATA[// A check box with default state (not checked, false).\n"
"final CheckBox checkbox1 = new CheckBox(\"My CheckBox\");\n"
"main.addComponent(checkbox1);\n"
"\n"
"// Another check box with explicitly set checked state.\n"
"final CheckBox checkbox2 = new CheckBox(\"Checked CheckBox\");\n"
"checkbox2.setValue(true);\n"
"main.addComponent(checkbox2);\n"
"\n"
"// Make some application logic. We use anonymous listener\n"
"// classes here. The above references were defined as final\n"
"// to allow accessing them from inside anonymous classes.\n"
"checkbox1.addListener(new ValueChangeListener() {\n"
"    public void valueChange(ValueChangeEvent event) {\n"
"        // Copy the value to the other checkbox.\n"
"        checkbox2.setValue(checkbox1.getValue());\n"
"    }\n"
"});\n"
"checkbox2.addListener(new ValueChangeListener() {\n"
"    public void valueChange(ValueChangeEvent event) {\n"
"        // Copy the value to the other checkbox.\n"
"        checkbox1.setValue(checkbox2.getValue());\n"
"    }\n"
"});]]>"
msgstr ""

#. Tag: title
#: chapter-components.xml:2893
#, no-c-format
msgid "An Example of a Check Box"
msgstr ""

#. Tag: para
#: chapter-components.xml:2901
#, no-c-format
msgid "For an example on the use of check boxes in a table, see <xref linkend=\"components.table\"/>."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:2909
#, no-c-format
msgid "<![CDATA[.v-checkbox { }]]>"
msgstr ""

#. Tag: title
#: chapter-components.xml:2916
#, no-c-format
msgid "Selecting Items"
msgstr ""

#. Tag: para
#: chapter-components.xml:2918
#, no-c-format
msgid "Vaadin gives many alternatives for selecting one or more items from a list, using drop-down and regular lists, radio button and check box groups, tables, trees, and so on."
msgstr ""

#. Tag: para
#: chapter-components.xml:2924
#, no-c-format
msgid "The core library includes the following selection components, all based on the <classname>AbstractSelect</classname> class:"
msgstr ""

#. Tag: classname
#: chapter-components.xml:2931
#, no-c-format
msgid "Select"
msgstr ""

#. Tag: listitem
#: chapter-components.xml:2932
#, no-c-format
msgid "In single selection mode, a drop-down list with a text input area, which the user can use to filter the displayed items. In multiselect mode, a list box equivalent to <classname>ListSelect</classname>."
msgstr ""

#. Tag: classname
#: chapter-components.xml:2939
#, no-c-format
msgid "ComboBox"
msgstr ""

#. Tag: listitem
#: chapter-components.xml:2940
#, no-c-format
msgid "A drop-down list for single selection. Otherwise as <classname>Select</classname>, but the user can also enter new items. The component also provides an input prompt."
msgstr ""

#. Tag: classname
#: chapter-components.xml:2947 chapter-components.xml:3354
#, no-c-format
msgid "ListSelect"
msgstr ""

#. Tag: listitem
#: chapter-components.xml:2948
#, no-c-format
msgid "A vertical list box for selecting items in either single or multiple selection mode."
msgstr ""

#. Tag: classname
#: chapter-components.xml:2954
#, no-c-format
msgid "NativeSelect"
msgstr ""

#. Tag: listitem
#: chapter-components.xml:2955
#, no-c-format
msgid "Provides selection using the native selection component of the browser, typically a drop-down list for single selection and a multi-line list in multiselect mode. This uses the <literal>&lt;select&gt;</literal> element in HTML."
msgstr ""

#. Tag: classname
#: chapter-components.xml:2963 chapter-components.xml:3715
#, no-c-format
msgid "OptionGroup"
msgstr ""

#. Tag: listitem
#: chapter-components.xml:2964
#, no-c-format
msgid "Shows the items as a vertically arranged group of radio buttons in the single selection mode and of check boxes in multiple selection mode."
msgstr ""

#. Tag: classname
#: chapter-components.xml:2970
#, no-c-format
msgid "TwinColSelect"
msgstr ""

#. Tag: listitem
#: chapter-components.xml:2971
#, no-c-format
msgid "Shows two list boxes side by side where the user can select items from a list of available items and move them to a list of selected items using control buttons."
msgstr ""

#. Tag: para
#: chapter-components.xml:2979
#, no-c-format
msgid "In addition, the <classname>Tree</classname> and <classname>Table</classname> components allow special forms of selection. They also inherit the <classname>AbstractSelect</classname>."
msgstr ""

#. Tag: title
#: chapter-components.xml:2986
#, no-c-format
msgid "Binding Selection Components to Data"
msgstr ""

#. Tag: para
#: chapter-components.xml:2988
#, no-c-format
msgid "The selection components are strongly coupled with the Vaadin Data Model. The selectable items in all selection components are objects that implement the <classname>Item</classname> interface and are contained in a <classname>Container</classname>. The current selection is bound to the <classname>Property</classname> interface."
msgstr ""

#. Tag: para
#: chapter-components.xml:2996
#, no-c-format
msgid "Even though the data model is used, the selection components allow simple use in the most common cases. Each selection component is bound to a default container type, which supports management of items without need to implement a container."
msgstr ""

#. Tag: para
#: chapter-components.xml:3003
#, no-c-format
msgid "See <xref linkend=\"datamodel\"/> for a detailed description of the data model, its interfaces, and built-in implementations."
msgstr ""

#. Tag: title
#: chapter-components.xml:3009
#, no-c-format
msgid "Adding New Items"
msgstr ""

#. Tag: para
#: chapter-components.xml:3011
#, no-c-format
msgid "New items are added with the <methodname>addItem()</methodname> method defined in the <classname>Container</classname> interface."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:3016
#, no-c-format
msgid ""
"<![CDATA[// Create a selection component\n"
"Select select = new Select (\"Select something here\");\n"
"\n"
"// Add some items and give each an item ID\n"
"select.addItem(\"Mercury\");\n"
"select.addItem(\"Venus\");\n"
"select.addItem(\"Earth\");]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:3018
#, no-c-format
msgid "The <methodname>addItem()</methodname> method creates an empty <classname>Item</classname>, which is identified by its <emphasis>item identifier</emphasis> (IID) object, given as the parameter. This item ID is by default used also as the caption of the item, as explained in the next section. The identifier is typically a <classname>String</classname>. The item is of a type specific to the container and has itself little relevance for most selection components, as the properties of an item may not be used in any way (except in <classname>Table</classname>), only the item ID."
msgstr ""

#. Tag: para
#: chapter-components.xml:3030
#, no-c-format
msgid "The item identifier can be of any object type. We could as well have given integers for the item identifiers and set the captions explicitly with <methodname>setItemCaption()</methodname>. You could also add an item with the parameterless <methodname>addItem()</methodname>, which returns an automatically generated item ID."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:3039
#, no-c-format
msgid ""
"<?pocket-size 65% ?><![CDATA[// Create a selection component\n"
"Select select = new Select(\"My Select\");\n"
"        \n"
"// Add an item with a generated ID\n"
"Object itemId = select.addItem();\n"
"select.setItemCaption(itemId, \"The Sun\");\n"
"        \n"
"// Select the item\n"
"select.setValue(itemId);]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:3041
#, no-c-format
msgid "Some container types may support passing the actual data object to the add method. For example, you can add items to a <classname>BeanItemContainer</classname> with <methodname>addBean()</methodname>. Such implementations can use a separate item ID object, or the data object itself as the item ID, as is done in <methodname>addBean()</methodname>. In the latter case you can not depend on the default way of acquiring the item caption; see the description of the different caption modes later."
msgstr ""

#. Tag: para
#: chapter-components.xml:3052
#, no-c-format
msgid "The following section describes the different options for determining the item captions."
msgstr ""

#. Tag: title
#: chapter-components.xml:3059
#, no-c-format
msgid "Item Captions"
msgstr ""

#. Tag: para
#: chapter-components.xml:3061
#, no-c-format
msgid "The displayed captions of items in a selection component can be set explicitly with <methodname>setItemCaption()</methodname> or determined from the item IDs or item properties. This behaviour is defined with the <emphasis>caption mode</emphasis>, which you can set with <methodname>setItemCaptionMode()</methodname>. The default mode is <parameter>ITEM_CAPTION_MODE_EXPLICIT_DEFAULTS_ID</parameter>, which uses the item identifiers for the captions, unless given explicitly."
msgstr ""

#. Tag: para
#: chapter-components.xml:3072
#, no-c-format
msgid "In addition to a caption, an item can have an icon. The icon is set with <methodname>setItemIcon()</methodname>."
msgstr ""

#. Tag: title
#: chapter-components.xml:3078
#, no-c-format
msgid "Caption Modes for Selection Components"
msgstr ""

#. Tag: constant
#: chapter-components.xml:3080
#, no-c-format
msgid "ITEM_CAPTION_MODE_EXPLICIT_DEFAULTS_ID"
msgstr ""

#. Tag: para
#: chapter-components.xml:3082
#, no-c-format
msgid "This is the default caption mode and its flexibility allows using it in most cases. By default, the item identifier will be used as the caption. The identifier object does not necessarily have to be a string; the caption is retrieved with <methodname>toString()</methodname> method. If the caption is specified explicitly with <methodname>setItemCaption()</methodname>, it overrides the item identifier."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:3094
#, no-c-format
msgid ""
"<?pocket-size 65% ?><![CDATA[Select select = new Select(\"Moons of Mars\");\n"
"        \n"
"// Use the item ID also as the caption of this item\n"
"select.addItem(new Integer(1));\n"
"        \n"
"// Set item caption for this item explicitly\n"
"select.addItem(2); // same as \"new Integer(2)\"\n"
"select.setItemCaption(2, \"Deimos\");]]>"
msgstr ""

#. Tag: constant
#: chapter-components.xml:3099
#, no-c-format
msgid "ITEM_CAPTION_MODE_EXPLICIT"
msgstr ""

#. Tag: para
#: chapter-components.xml:3101
#, no-c-format
msgid "Captions must be explicitly specified with <methodname>setItemCaption()</methodname>. If they are not, the caption will be empty. Such items with empty captions will nevertheless be displayed in the <classname>Select</classname> component as empty items. If they have an icon, they will be visible."
msgstr ""

#. Tag: constant
#: chapter-components.xml:3112
#, no-c-format
msgid "ITEM_CAPTION_MODE_ICON_ONLY"
msgstr ""

#. Tag: para
#: chapter-components.xml:3114
#, no-c-format
msgid "Only icons are shown, captions are hidden."
msgstr ""

#. Tag: constant
#: chapter-components.xml:3120
#, no-c-format
msgid "ITEM_CAPTION_MODE_ID"
msgstr ""

#. Tag: para
#: chapter-components.xml:3122
#, no-c-format
msgid "String representation of the item identifier object is used as caption. This is useful when the identifier is a string, and also when the identifier is an complex object that has a string representation. For example:"
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:3129
#, no-c-format
msgid ""
"<?pocket-size 70% ?><![CDATA[Select select = new Select(\"Inner Planets\");\n"
"select.setItemCaptionMode(Select.ITEM_CAPTION_MODE_ID);\n"
"        \n"
"// A class that implements toString()\n"
"class PlanetId extends Object implements Serializable {\n"
"    String planetName;\n"
"    PlanetId (String name) {\n"
"        planetName = name;\n"
"    }\n"
"    public String toString () {\n"
"        return \"The Planet \" + planetName;\n"
"    }\n"
"}\n"
"\n"
"// Use such objects as item identifiers\n"
"String planets[] = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\"};\n"
"for (int i=0; i<planets.length; i++)\n"
"    select.addItem(new PlanetId(planets[i]));]]>"
msgstr ""

#. Tag: constant
#: chapter-components.xml:3133
#, no-c-format
msgid "ITEM_CAPTION_MODE_INDEX"
msgstr ""

#. Tag: para
#: chapter-components.xml:3135
#, no-c-format
msgid "Index number of item is used as caption. This caption mode is applicable only to data sources that implement the <classname>Container.Indexed</classname> interface. If the interface is not available, the component will throw a <classname>ClassCastException</classname>. The <classname>Select</classname> component itself does not implement this interface, so the mode is not usable without a separate data source. An <classname>IndexedContainer</classname>, for example, would work."
msgstr ""

#. Tag: constant
#: chapter-components.xml:3149
#, no-c-format
msgid "ITEM_CAPTION_MODE_ITEM"
msgstr ""

#. Tag: para
#: chapter-components.xml:3151
#, no-c-format
msgid "<classname>String</classname> representation of item, acquired with <methodname>toString()</methodname>, is used as the caption. This is applicable mainly when using a custom <classname>Item</classname> class, which also requires using a custom <classname>Container</classname> that is used as a data source for the <classname>Select</classname> component."
msgstr ""

#. Tag: constant
#: chapter-components.xml:3162
#, no-c-format
msgid "ITEM_CAPTION_MODE_PROPERTY"
msgstr ""

#. Tag: para
#: chapter-components.xml:3164
#, no-c-format
msgid "Item captions are read from the <classname>String</classname> representation of the property with the identifier specified with <methodname>setItemCaptionPropertyId()</methodname>. This is useful, for example, when you have a container that you use as the data source for a <classname>Select</classname>, and you want to use a specific property for caption."
msgstr ""

#. Tag: para
#: chapter-components.xml:3173
#, no-c-format
msgid "In the example below, we bind a selection component to a bean container and use a property of the bean as the caption."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:3178
#, no-c-format
msgid ""
"<?pocket-size 65% ?><![CDATA[/* A bean with a \"name\" property. */\n"
"public class Planet implements Serializable {\n"
"    String name;\n"
"\n"
"    public Planet(String name) {\n"
"        this.name = name;\n"
"    }\n"
"\n"
"    public void setName(String name) {\n"
"        this.name = name;\n"
"    }\n"
"\n"
"    public String getName() {\n"
"        return name;\n"
"    }\n"
"}\n"
"\n"
"void propertyModeExample() {\n"
"    VerticalLayout layout = new VerticalLayout();\n"
"\n"
"    // Have a bean container to put the beans in\n"
"    BeanItemContainer<Planet> container =\n"
"        new BeanItemContainer<Planet>(Planet.class);\n"
"\n"
"    // Put some example data in it\n"
"    container.addItem(new Planet(\"Mercury\"));\n"
"    container.addItem(new Planet(\"Venus\"));\n"
"    container.addItem(new Planet(\"Earth\"));\n"
"    container.addItem(new Planet(\"Mars\"));\n"
"\n"
"    // Create a selection component bound to the container\n"
"    Select select = new Select(\"Planets\", container);\n"
"\n"
"    // Set the caption mode to read the caption directly\n"
"    // from the 'name' property of the bean\n"
"    select.setItemCaptionMode(\n"
"            Select.ITEM_CAPTION_MODE_PROPERTY);\n"
"    select.setItemCaptionPropertyId(\"name\");\n"
"\n"
"    layout.addComponent(select);]]>"
msgstr ""

#. Tag: title
#: chapter-components.xml:3187
#, no-c-format
msgid "Getting and Setting Selection"
msgstr ""

#. Tag: para
#: chapter-components.xml:3189
#, no-c-format
msgid "A selection component provides the current selection as the property of the component (with the <classname>Property</classname> interface). The property value is an item identifier object that identifies the selected item. You can get the identifier with <methodname>getValue()</methodname> of the <classname>Property</classname> interface."
msgstr ""

#. Tag: para
#: chapter-components.xml:3197
#, no-c-format
msgid "You can select an item with the corresponding <methodname>setValue()</methodname> method. In multiselect mode, the property will be an unmodifiable set of item identifiers. If no item is selected, the property will be <parameter>null</parameter> in single selection mode or an empty collection in multiselect mode."
msgstr ""

#. Tag: para
#: chapter-components.xml:3205
#, no-c-format
msgid "The <classname>Select</classname> and <classname>NativeSelect</classname> components will show \"-\" selection when no actual item is selected. This is the <emphasis>null selection item identifier</emphasis>. You can set an alternative ID with <methodname>setNullSelectionItemId()</methodname>. Setting the alternative null ID is merely a visual text; the <methodname>getValue()</methodname> will still return <parameter>null</parameter> value if no item is selected, or an empty set in multiselect mode."
msgstr ""

#. Tag: para
#: chapter-components.xml:3216
#, no-c-format
msgid "The item identifier of the currently selected item will be set as the property of the <classname>Select</classname> object. You can access it with the <methodname>getValue()</methodname> method of the <classname>Property</classname> interface of the component. Also, when handling changes in a <classname>Select</classname> component with the <classname>Property.ValueChangeListener</classname> interface, the <classname>Property.ValueChangeEvent</classname> will have the selected item as the property of the event, accessible with the <methodname>getProperty()</methodname> method."
msgstr ""

#. Tag: title
#: chapter-components.xml:3229
#, no-c-format
msgid "Selected Item"
msgstr ""

#. Tag: title
#: chapter-components.xml:3248
#, no-c-format
msgid "Basic <classname>Select</classname> Component"
msgstr ""

#. Tag: para
#: chapter-components.xml:3250
#, no-c-format
msgid "The <classname>Select</classname> component allows, in single selection mode, selecting an item from a drop-down list. The component also has a text field area, which allows entering search text by which the items shown in the drop-down list are filtered."
msgstr ""

#. Tag: para
#: chapter-components.xml:3257
#, no-c-format
msgid "In multiple selection mode, the component shows the items in a vertical list box, identical to <classname>ListSelect</classname>."
msgstr ""

#. Tag: title
#: chapter-components.xml:3263
#, no-c-format
msgid "The Select Component"
msgstr ""

#. Tag: title
#: chapter-components.xml:3272 chapter-components.xml:3310
#, no-c-format
msgid "Filtered Selection"
msgstr ""

#. Tag: para
#: chapter-components.xml:3274
#, no-c-format
msgid "The <classname>Select</classname> component allows filtering the items available for selection. The component shows as an input box for entering text. The text entered in the input box is used for filtering the available items shown in a drop-down list. Pressing <keycap>Enter</keycap> will complete the item in the input box. Pressing <keycap>Up</keycap>- and <keycap>Down</keycap>-arrows can be used for selecting an item from the drop-down list. The drop-down list is paged and clicking on the scroll buttons will change to the next or previous page. The list selection can also be done with the arrow keys on the keyboard. The shown items are loaded from the server as needed, so the number of items held in the component can be quite large."
msgstr ""

#. Tag: para
#: chapter-components.xml:3289
#, no-c-format
msgid "Vaadin provides two filtering modes: <parameter>FILTERINGMODE_CONTAINS</parameter> matches any item that contains the string given in the text field part of the component and <parameter>FILTERINGMODE_STARTSWITH</parameter> matches only items that begin with the given string. The filtering mode is set with <methodname>setFilteringMode()</methodname>. Setting the filtering mode to the default value <parameter>FILTERINGMODE_OFF</parameter> disables filtering."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:3300
#, no-c-format
msgid ""
"<?pocket-size 65% ?><![CDATA[Select select = new Select(\"Enter containing substring\");\n"
"\n"
"select.setFilteringMode(AbstractSelect.Filtering.FILTERINGMODE_CONTAINS);\n"
"\n"
"/* Fill the component with some items. */\n"
"final String[] planets = new String[] {\n"
"        \"Mercury\", \"Venus\", \"Earth\", \"Mars\",\n"
"        \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\" };\n"
"\n"
"for (int i = 0; i < planets.length; i++)\n"
"    for (int j = 0; j < planets.length; j++) {\n"
"        select.addItem(planets[j] + \" to \" + planets[i]);]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:3302
#, no-c-format
msgid "The above example uses the containment filter that matches to all items containing the input string. As shown in <xref linkend=\"figure.select.filter\"/> below, when we type some text in the input area, the drop-down list will show all the matching items."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:3322
#, no-c-format
msgid ""
"<![CDATA[.v-filterselect { }\n"
".v-filterselect-input { }\n"
".v-filterselect-button { }\n"
".v-filterselect-suggestpopup { }\n"
".v-filterselect-prefpage-off { }\n"
".v-filterselect-suggestmenu { }\n"
".v-filterselect-status { }\n"
".v-select { }\n"
".v-select-select { }]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:3324
#, no-c-format
msgid "In its default state, only the input field of the <classname>Select</classname> component is visible. The entire component is enclosed in <literal>v-filterselect</literal> style, the input field has <literal>v-filterselect-input</literal> style and the button in the right end that opens and closes the drop-down result list has <literal>v-filterselect-button</literal> style."
msgstr ""

#. Tag: para
#: chapter-components.xml:3333
#, no-c-format
msgid "The drop-down result list has an overall <literal>v-filterselect-suggestpopup</literal> style. It contains the list of suggestions with <literal>v-filterselect-suggestmenu</literal> style and a status bar in the bottom with <literal>v-filterselect-status</literal> style. The list of suggestions is padded with an area with <literal>v-filterselect-prefpage-off</literal> style above and below the list."
msgstr ""

#. Tag: para
#: chapter-components.xml:3344
#, no-c-format
msgid "In multiselect-mode, the styles of the component aere identical to <classname>ListSelect</classname> component, with <literal>v-select</literal> overall style and <literal>v-select-select</literal> for the native selection element."
msgstr ""

#. Tag: para
#: chapter-components.xml:3356
#, no-c-format
msgid "The <classname>ListSelect</classname> component is list box that shows the selectable items in a vertical list. If the number of items exceeds the height of the component, a scrollbar is shown. The component allows both single and multiple selection modes, which you can set with <methodname>setMultiSelect()</methodname>. It is visually identical in both modes."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:3365
#, no-c-format
msgid ""
"<?pocket-size 65% ?><![CDATA[// Create the selection component\n"
"ListSelect select = new ListSelect(\"My Selection\");\n"
"        \n"
"// Add some items\n"
"select.addItem(\"Mercury\");\n"
"select.addItem(\"Venus\");\n"
"select.addItem(\"Earth\");\n"
"...\n"
"\n"
"select.setNullSelectionAllowed(false);\n"
"\n"
"// Show 5 items and a scrollbar if there are more\n"
"select.setRows(5);]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:3367
#, no-c-format
msgid "The number of visible items is set with <methodname>setRows()</methodname>."
msgstr ""

#. Tag: title
#: chapter-components.xml:3373
#, no-c-format
msgid "The <classname>ListSelect</classname> Component"
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:3385 chapter-components.xml:3430
#, no-c-format
msgid ""
"<![CDATA[.v-select {}\n"
".v-select-select {}]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:3387 chapter-components.xml:3432
#, no-c-format
msgid "The component has a <literal>v-select</literal> overall style. The native <literal>select</literal> element has <literal>v-select-select</literal> style."
msgstr ""

#. Tag: title
#: chapter-components.xml:3396
#, no-c-format
msgid "Native Selection Component <classname>NativeSelect</classname>"
msgstr ""

#. Tag: para
#: chapter-components.xml:3398
#, no-c-format
msgid "<classname>NativeSelect</classname> offers the native selection component of web browsers, using the HTML <literal>&lt;select&gt;</literal> element. The component is shown as a drop-down list."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:3404
#, no-c-format
msgid ""
"<?pocket-size 65% ?><![CDATA[// Create the selection component\n"
"final NativeSelect select = new NativeSelect(\"Native Selection\");\n"
"        \n"
"// Add some items\n"
"select.addItem(\"Mercury\");\n"
"select.addItem(\"Venus\");\n"
"...\n"
"        \n"
"// Set the width in \"columns\" as in TextField\n"
"select.setColumns(10);\n"
"        \n"
"select.setNullSelectionAllowed(false);]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:3406
#, no-c-format
msgid "The <methodname>setColumns()</methodname> allows setting the width of the list as \"columns\", which is a measure that depends on the browser."
msgstr ""

#. Tag: title
#: chapter-components.xml:3412
#, no-c-format
msgid "The <classname>NativeSelect</classname> Component"
msgstr ""

#. Tag: para
#: chapter-components.xml:3420
#, no-c-format
msgid "Multiple selection mode is not allowed; you should use the <classname>ListSelect</classname> component instead. Also adding new items, which would be enabled with <methodname>setNewItemsAllowed()</methodname>, is not allowed."
msgstr ""

#. Tag: title
#: chapter-components.xml:3441
#, no-c-format
msgid "Radio Button and Check Box Groups with <classname>OptionGroup</classname>"
msgstr ""

#. Tag: para
#: chapter-components.xml:3442
#, no-c-format
msgid "The <classname>OptionGroup</classname> class provides selection from alternatives using a group of radio buttons in single selection mode. In multiple selection mode, the items show up as check boxes."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:3448
#, no-c-format
msgid ""
"<?pocket-size 70% ?><![CDATA[OptionGroup optiongroup = new OptionGroup(\"My Option Group\");\n"
"\n"
"// Use the multiple selection mode.\n"
"myselect.setMultiSelect(true);]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:3450
#, no-c-format
msgid "shows the <classname>OptionGroup</classname> in both single and multiple selection mode."
msgstr ""

#. Tag: title
#: chapter-components.xml:3456
#, no-c-format
msgid "Option Button Group in Single and Multiple Selection Mode"
msgstr ""

#. Tag: para
#: chapter-components.xml:3464
#, no-c-format
msgid "You can create check boxes individually using the <classname>CheckBox</classname> class, as described in <xref linkend=\"components.checkbox\"/>. The advantages of the <classname>OptionGroup</classname> component are that as it maintains the individual check box objects, you can get an array of the currently selected items easily, and that you can easily change the appearance of a single component."
msgstr ""

#. Tag: title
#: chapter-components.xml:3475
#, no-c-format
msgid "Disabling Items"
msgstr ""

#. Tag: para
#: chapter-components.xml:3477
#, no-c-format
msgid "You can disable individual items in an <classname>OptionGroup</classname> with <methodname>setItemEnabled()</methodname>. The user can not select or deselect disabled items in multi-select mode, but in single-select mode the use can change the selection from a disabled to an enabled item. The selections can be changed programmatically regardless of whether an item is enabled or disabled. You can find out whether an item is enabled with <methodname>isItemEnabled()</methodname>."
msgstr ""

#. Tag: para
#: chapter-components.xml:3488
#, no-c-format
msgid "The <methodname>setItemEnabled()</methodname> identifies the item to be disabled by its item ID."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:3493
#, no-c-format
msgid ""
"<?pocket-size 65% ?><![CDATA[// Have an option group\n"
"OptionGroup group = new OptionGroup(\"My Disabled Group\");\n"
"group.addItem(\"One\");\n"
"group.addItem(\"Two\");\n"
"group.addItem(\"Three\");\n"
"\n"
"// Disable one item\n"
"group.setItemEnabled(\"Two\", false);]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:3495
#, no-c-format
msgid "The item IDs are also used for the captions in this example. The result is shown in <xref linkend=\"figure.components.selecting.optiongroup.disabling\"/>."
msgstr ""

#. Tag: title
#: chapter-components.xml:3502
#, no-c-format
msgid "<classname>OptionGroup</classname> with a Disabled Item"
msgstr ""

#. Tag: para
#: chapter-components.xml:3510
#, no-c-format
msgid "Setting an item as disabled turns on the <literal>v-disabled</literal> style for it."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:3519
#, no-c-format
msgid ""
"<![CDATA[.v-select-optiongroup {}\n"
".v-select-option.v-checkbox {}\n"
".v-select-option.v-radiobutton {}]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:3521
#, no-c-format
msgid "The <literal>v-select-optiongroup</literal> is the overall style for the component. Each check box will have the <literal>v-checkbox</literal> style, borrowed from the <classname>CheckBox</classname> component, and each radio button the <literal>v-radiobutton</literal> style. Both the radio buttons and check boxes will also have the <literal>v-select-option</literal> style that allows styling regardless of the option type. Disabled items have additionally the <literal>v-disabled</literal> style."
msgstr ""

#. Tag: para
#: chapter-components.xml:3532
#, no-c-format
msgid "The options are normally laid out vertically. You can use horizontal layout by setting <literal>display: inline-block</literal> for the options. The <literal>nowrap</literal> setting for the overall element prevents wrapping if there is not enough horizontal space in the layout, or if the horizontal width is undefined."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:3540
#, no-c-format
msgid ""
"<?pocket-size 65% ?><![CDATA[/* Lay the options horizontally */\n"
".v-select-optiongroup-horizontal .v-select-option {\n"
"    display: inline-block;\n"
"}\n"
"\n"
"/* Avoid wrapping if the layout is too tight */\n"
".v-select-optiongroup-horizontal {\n"
"    white-space: nowrap;\n"
"}\n"
"\n"
"/* Some extra spacing is needed */\n"
".v-select-optiongroup-horizontal\n"
"  .v-select-option.v-radiobutton {\n"
"    padding-right: 10px;\n"
"}]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:3542
#, no-c-format
msgid "Use of the above rules requires setting a custom <literal>horizontal</literal> style name for the component. The result is shown in <xref linkend=\"figure.components.selecting.optiongroup.horizontal\"/>."
msgstr ""

#. Tag: title
#: chapter-components.xml:3550
#, no-c-format
msgid "Horizontal <classname>OptionGroup</classname>"
msgstr ""

#. Tag: title
#: chapter-components.xml:3562
#, no-c-format
msgid "Twin Column Selection with <classname>TwinColSelect</classname>"
msgstr ""

#. Tag: para
#: chapter-components.xml:3563
#, no-c-format
msgid "The <classname>TwinColSelect</classname> field provides a multiple selection component that shows two lists side by side, with the left column containing unselected items and the right column the selected items. The user can select items from the list on the left and click on the \"&gt;&gt;\" button to move them to the list on the right. Items can be deselected by selecting them in the right list and clicking on the \"&lt;&lt;\" button."
msgstr ""

#. Tag: para
#: chapter-components.xml:3573
#, no-c-format
msgid "<classname>TwinColSelect</classname> is always in multi-select mode, so its property value is always a collection of the item IDs of the selected items, that is, the items in the right column."
msgstr ""

#. Tag: para
#: chapter-components.xml:3579
#, no-c-format
msgid "The selection columns can have their own captions, separate from the overall component caption, which is managed by the containing layout. You can set the column captions with <methodname>setLeftColumnCaption()</methodname> and <methodname>setRightColumnCaption()</methodname>."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:3589
#, no-c-format
msgid ""
"<?pocket-size 65% ?><![CDATA[final TwinColSelect select =\n"
"    new TwinColSelect(\"Select Targets to Destroy\");\n"
"\n"
"// Set the column captions (optional)\n"
"select.setLeftColumnCaption(\"These are left\");\n"
"select.setRightColumnCaption(\"These are done for\");\n"
"        \n"
"// Put some data in the select\n"
"String planets[] = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\",\n"
"        \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n"
"for (int pl=0; pl<planets.length; pl++)\n"
"    select.addItem(planets[pl]);\n"
"\n"
"// Set the number of visible items\n"
"select.setRows(planets.length);]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:3591
#, no-c-format
msgid "The resulting component is shown in <xref linkend=\"figure.components.selecting.twincolselect.captions\"/>."
msgstr ""

#. Tag: title
#: chapter-components.xml:3597
#, no-c-format
msgid "Twin Column Selection"
msgstr ""

#. Tag: para
#: chapter-components.xml:3605
#, no-c-format
msgid "The <methodname>setRows()</methodname> method sets the height of the component by the number of visible items in the selection boxes. Setting the height with <methodname>setHeight()</methodname> to a defined value overrides the rows setting."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:3615
#, no-c-format
msgid ""
"<![CDATA[.v-select-twincol {}\n"
"  .v-select-twincol-options-caption {}\n"
"  .v-select-twincol-selections-caption {}\n"
"  .v-select-twincol-options {}\n"
"  .v-select-twincol-buttons {}\n"
"    .v-button {}\n"
"      .v-button-wrap {}\n"
"        .v-button-caption {}\n"
"    .v-select-twincol-deco {}\n"
"  .v-select-twincol-selections {}]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:3617
#, no-c-format
msgid "The <classname>TwinColSelect</classname> component has an overall <literal>v-select-twincol</literal> style. If set, the left and right column captions have <literal>v-select-twincol-options-caption</literal> and <literal>v-select-twincol-options-caption</literal> style names, respectively. The left box, which displays the unselected items, has <literal>v-select-twincol-options-caption</literal> style and the right box, which displays the selected items, has <literal>v-select-twincol-options-selections</literal> style. Between them is the button area, which has overall <literal>v-select-twincol-buttons</literal> style; the actual buttons reuse the styles for the <classname>Button</classname> component. Between the buttons is a divider element with <literal>v-select-twincol-deco</literal> style."
msgstr ""

#. Tag: title
#: chapter-components.xml:3639
#, no-c-format
msgid "Allowing Adding New Items"
msgstr ""

#. Tag: para
#: chapter-components.xml:3641
#, no-c-format
msgid "The selection components allow the user to add new items, with a user interface similar to combo boxes in desktop user interfaces. You need to enable the <parameter>newItemsAllowed</parameter> mode with the <methodname>setNewItemsAllowed()</methodname> method."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:3648
#, no-c-format
msgid "<![CDATA[myselect.setNewItemsAllowed(true);]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:3650
#, no-c-format
msgid "The user interface for adding new items depends on the selection component and the selection mode. The regular <classname>Select</classname> component in single selection mode, which appears as a combo box, allows you to simply type the new item in the combo box and hit <keycap>Enter</keycap> to add it. In most other selection components, as well as in the multiple selection mode of the regular <classname>Select</classname> component, a text field that allows entering new items is shown below the selection list, and clicking the <guibutton>+</guibutton> button will add the item in the list, as illustrated in <xref linkend=\"figure.components.selecting.newitems\"/>."
msgstr ""

#. Tag: title
#: chapter-components.xml:3664
#, no-c-format
msgid "Select Component with Adding New Items Allowed"
msgstr ""

#. Tag: para
#: chapter-components.xml:3672
#, no-c-format
msgid "The identifier of an item added by the user will be a <classname>String</classname> object identical to the caption of the item. You should consider this if the item identifier of automatically filled items is some other type or otherwise not identical to the caption."
msgstr ""

#. Tag: para
#: chapter-components.xml:3679
#, no-c-format
msgid "Adding new items is possible in both single and multiple selection modes and in all styles. Adding new items may not be possible if the <classname>Select</classname> is bound to an external <classname>Container</classname> that does not allow adding new items."
msgstr ""

#. Tag: title
#: chapter-components.xml:3689 chapter-components.xml:3911
#, no-c-format
msgid "Multiple Selection Mode"
msgstr ""

#. Tag: para
#: chapter-components.xml:3693
#, no-c-format
msgid "Setting the <classname>Select</classname>, <classname>NativeSelect</classname>, or <classname>OptionGroup</classname> components to multiple selection mode with the <methodname>setMultiSelect()</methodname> method changes their appearance to allow selecting multiple items."
msgstr ""

#. Tag: term
#: chapter-components.xml:3703
#, no-c-format
msgid "<classname>Select</classname> and <classname>NativeSelect</classname>"
msgstr ""

#. Tag: para
#: chapter-components.xml:3705
#, no-c-format
msgid "These components appear as a native HTML selection list, as shown in <xref linkend=\"figure.components.selecting.newitems\"/>. By holding the <keycap>Ctrl</keycap> or <keycap>Shift</keycap> key pressed, the user can select multiple items."
msgstr ""

#. Tag: listitem
#: chapter-components.xml:3716
#, no-c-format
msgid "The option group, which is a radio button group in single selection mode, will show as a check box group in multiple selection mode. See <xref linkend=\"components.selecting.optiongroup\"/>."
msgstr ""

#. Tag: para
#: chapter-components.xml:3725
#, no-c-format
msgid "The <classname>TwinColSelect</classname>, described in <xref linkend=\"components.selecting.twincolselect\"/>, is a special multiple selection mode that is not meaningful for single selection."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:3731
#, no-c-format
msgid "<![CDATA[myselect.setMultiSelect(true);]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:3733
#, no-c-format
msgid "As in single selection mode, the selected items are set as the property of the <classname>Select</classname> object. In multiple selection mode, the property is a <classname>Collection</classname> of currently selected items. You can get and set the property with the <methodname>getValue()</methodname> and <methodname>setValue()</methodname> methods as usual."
msgstr ""

#. Tag: para
#: chapter-components.xml:3742
#, no-c-format
msgid "A change in the selection will trigger a <classname>ValueChangeEvent</classname>, which you can handle with a <classname>Propery.ValueChangeListener</classname>. As usual, you should use <methodname>setImmediate(true)</methodname> to trigger the event immediately when the user changes the selection. The following example shows how to handle selection changes with a listener."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:3751
#, no-c-format
msgid ""
"<?pocket-size 65% ?><![CDATA[public class SelectExample\n"
"           extends CustomComponent\n"
"           implements Property.ValueChangeListener {\n"
"    // Create a Select object with a caption.\n"
"    Select select = new Select(\"This is a Select component\");\n"
"\n"
"    VerticalLayout layout = new VerticalLayout();\n"
"    Label status = new Label(\"-\");\n"
"    \n"
"    SelectExample () {\n"
"        setCompositionRoot (layout);\n"
"        layout.addComponent(select);\n"
"\n"
"        // Fill the component with some items.\n"
"        final String[] planets = new String[] {\n"
"            \"Mercury\", \"Venus\", \"Earth\", \"Mars\",\n"
"            \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n"
"        for (int i=0; i<planets.length; i++)\n"
"            select.addItem(planets[i]);\n"
"\n"
"        // By default, the change event is not triggered\n"
"        // immediately when the selection changes.\n"
"        // This enables the immediate events.\n"
"        select.setImmediate(true);\n"
"        \n"
"        // Listen for changes in the selection.\n"
"        select.addListener(this);\n"
"\n"
"        layout.addComponent(status);\n"
"    }\n"
"\n"
"    /* Respond to change in the selection. */\n"
"    public void valueChange(Property.ValueChangeEvent event) {\n"
"        // The event.getProperty() returns the Item ID (IID) \n"
"        // of the currently selected item in the component.\n"
"        status.setValue(\"Currently selected item ID: \" +\n"
"                        event.getProperty());\n"
"    }\n"
"}]]>"
msgstr ""

#. Tag: title
#: chapter-components.xml:3756
#, no-c-format
msgid "Other Common Features"
msgstr ""

#. Tag: title
#: chapter-components.xml:3759
#, no-c-format
msgid "Item Icons"
msgstr ""

#. Tag: para
#: chapter-components.xml:3761
#, no-c-format
msgid "You can set an icon for each item with <methodname>setItemIcon()</methodname>, or define an item property that provides the icon resource with <methodname>setItemIconPropertyId()</methodname>, in a fashion similar to captions. Notice, however, that icons are not supported in <classname>NativeSelect</classname>, <classname>TwinColSelect</classname>, and some other selection components and modes. This is because HTML does not support images inside the native <literal>select</literal> elements. Icons are also not really visually applicable."
msgstr ""

#. Tag: classname
#: chapter-components.xml:3783 chapter-components.xml:3786
#, no-c-format
msgid "Table"
msgstr ""

#. Tag: para
#: chapter-components.xml:3789
#, no-c-format
msgid "The <classname>Table</classname> component is intended for presenting tabular data organized in rows and columns. The <classname>Table</classname> is one of the most versatile components in Vaadin. Table cells can include text or arbitrary UI components. You can easily implement editing of the table data, for example clicking on a cell could change it to a text field for editing."
msgstr ""

#. Tag: para
#: chapter-components.xml:3797
#, no-c-format
msgid "The data contained in a <classname>Table</classname> is managed using the Data Model of Vaadin (see <xref linkend=\"datamodel\"/>), through the <classname>Container</classname> interface of the <classname>Table</classname>. This makes it possible to bind a table directly to a data source, such as a database query. Only the visible part of the table is loaded into the browser and moving the visible window with the scrollbar loads content from the server. While the data is being loaded, a tooltip will be displayed that shows the current range and total number of items in the table. The rows of the table are <emphasis>items</emphasis> in the container and the columns are <emphasis>properties</emphasis>. Each table row (item) is identified with an <emphasis>item identifier</emphasis> (IID), and each column (property) with a <emphasis>property identifier</emphasis> (PID)."
msgstr ""

#. Tag: para
#: chapter-components.xml:3812
#, no-c-format
msgid "When creating a table, you first need to define columns with <methodname>addContainerProperty()</methodname>. This method comes in two flavors. The simpler one takes the property ID of the column and uses it also as the caption of the column. The more complex one allows differing PID and header for the column. This may make, for example, internationalization of table headers easier, because if a PID is internationalized, the internationalization has to be used everywhere where the PID is used. The complex form of the method also allows defining an icon for the column from a resource. The \"default value\" parameter is used when new properties (columns) are added to the table, to fill in the missing values. (This default has no meaning in the usual case, such as below, where we add items after defining the properties.)"
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:3827
#, no-c-format
msgid ""
"<?pocket-size 65% ?><![CDATA[/* Create the table with a caption. */\n"
"Table table = new Table(\"This is my Table\");\n"
"\n"
"/* Define the names and data types of columns.\n"
" * The \"default value\" parameter is meaningless here. */\n"
"table.addContainerProperty(\"First Name\", String.class,  null);\n"
"table.addContainerProperty(\"Last Name\",  String.class,  null);\n"
"table.addContainerProperty(\"Year\",       Integer.class, null);\n"
"\n"
"/* Add a few items in the table. */\n"
"table.addItem(new Object[] {\n"
"    \"Nicolaus\",\"Copernicus\",new Integer(1473)}, new Integer(1));\n"
"table.addItem(new Object[] {\n"
"    \"Tycho\",   \"Brahe\",     new Integer(1546)}, new Integer(2));\n"
"table.addItem(new Object[] {\n"
"    \"Giordano\",\"Bruno\",     new Integer(1548)}, new Integer(3));\n"
"table.addItem(new Object[] {\n"
"    \"Galileo\", \"Galilei\",   new Integer(1564)}, new Integer(4));\n"
"table.addItem(new Object[] {\n"
"    \"Johannes\",\"Kepler\",    new Integer(1571)}, new Integer(5));\n"
"table.addItem(new Object[] {\n"
"    \"Isaac\",   \"Newton\",    new Integer(1643)}, new Integer(6));]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:3829
#, no-c-format
msgid "In this example, we used an increasing <classname>Integer</classname> object as the Item Identifier, given as the second parameter to <methodname>addItem()</methodname>. The actual rows are given simply as object arrays, in the same order in which the properties were added. The objects must be of the correct class, as defined in the <methodname>addContainerProperty()</methodname> calls."
msgstr ""

#. Tag: title
#: chapter-components.xml:3839
#, no-c-format
msgid "Basic Table Example"
msgstr ""

#. Tag: para
#: chapter-components.xml:3847
#, no-c-format
msgid "Scalability of the <classname>Table</classname> is largely dictated by the container. The default <classname>IndexedContainer</classname> is relatively heavy and can cause scalability problems, for example, when updating the values. Use of an optimized application-specific container is recommended. Table does not have a limit for the number of items and is just as fast with hundreds of thousands of items as with just a few. With the current implementation of scrolling, there is a limit of around 500 000 rows, depending on the browser and the pixel height of rows."
msgstr ""

#. Tag: title
#: chapter-components.xml:3860
#, no-c-format
msgid "Selecting Items in a Table"
msgstr ""

#. Tag: para
#: chapter-components.xml:3862
#, no-c-format
msgid "The <classname>Table</classname> allows selecting one or more items by clicking them with the mouse. When the user selects an item, the IID of the item will be set as the property of the table and a <classname>ValueChangeEvent</classname> is triggered. To enable selection, you need to set the table <emphasis>selectable</emphasis>. You will also need to set it as <emphasis>immediate</emphasis> in most cases, as we do below, because without it, the change in the property will not be communicated immediately to the server."
msgstr ""

#. Tag: para
#: chapter-components.xml:3873
#, no-c-format
msgid "The following example shows how to enable the selection of items in a <classname>Table</classname> and how to handle <classname>ValueChangeEvent</classname> events that are caused by changes in selection. You need to handle the event with the <methodname>valueChange()</methodname> method of the <classname>Property.ValueChangeListener</classname> interface."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:3882
#, no-c-format
msgid ""
"<?pocket-size 65% ?><![CDATA[// Allow selecting items from the table.\n"
"table.setSelectable(true);\n"
"\n"
"// Send changes in selection immediately to server.\n"
"table.setImmediate(true);\n"
"\n"
"// Shows feedback from selection.\n"
"final Label current = new Label(\"Selected: -\");\n"
"\n"
"// Handle selection change.\n"
"table.addListener(new Property.ValueChangeListener() {\n"
"    public void valueChange(ValueChangeEvent event) {\n"
"        current.setValue(\"Selected: \" + table.getValue());\n"
"    }\n"
"});]]>"
msgstr ""

#. Tag: title
#: chapter-components.xml:3885
#, no-c-format
msgid "Table Selection Example"
msgstr ""

#. Tag: para
#: chapter-components.xml:3893
#, no-c-format
msgid "If the user clicks on an already selected item, the selection will deselected and the table property will have <parameter>null</parameter> value. You can disable this behaviour by setting <methodname>setNullSelectionAllowed(false)</methodname> for the table."
msgstr ""

#. Tag: para
#: chapter-components.xml:3900
#, no-c-format
msgid "The selection is the value of the table's property, so you can get it with <methodname>getValue()</methodname>. You can get it also from a reference to the table itself. In single selection mode, the value is the item identifier of the selected item or <parameter>null</parameter> if no item is selected. In multiple selection mode (see below), the value is a <classname>Set</classname> of item identifiers. Notice that the set is unmodifiable, so you can not simply change it to change the selection."
msgstr ""

#. Tag: para
#: chapter-components.xml:3913
#, no-c-format
msgid "A table can also be in <emphasis>multiselect</emphasis> mode, where a user can select multiple items by clicking them with left mouse button while holding the <keycap>Ctrl</keycap> key (or <keycap>Meta</keycap> key) pressed. If <keycap>Ctrl</keycap> is not held, clicking an item will select it and other selected items are deselected. The user can select a range by selecting an item, holding the <keycap>Shift</keycap> key pressed, and clicking another item, in which case all the items between the two are also selected. Multiple ranges can be selected by first selecting a range, then selecting an item while holding <keycap>Ctrl</keycap>, and then selecting another item with both <keycap>Ctrl</keycap> and <keycap>Shift</keycap> pressed."
msgstr ""

#. Tag: para
#: chapter-components.xml:3928
#, no-c-format
msgid "The multiselect mode is enabled with the <methodname>setMultiSelect()</methodname> method of the <classname>Select</classname> interface of <classname>Table</classname>. Setting table in multiselect mode does not implicitly set it as <emphasis>selectable</emphasis>, so it must be set separately."
msgstr ""

#. Tag: para
#: chapter-components.xml:3937
#, no-c-format
msgid "The <methodname>setMultiSelectMode()</methodname> property affects the control of multiple selection: <parameter>MultiSelectMode.DEFAULT</parameter> is the default behaviour, which requires holding the <keycap>Ctrl</keycap> (or <keycap>Meta</keycap>) key pressed while selecting items, while in <parameter>MultiSelectMode.SIMPLE</parameter> holding the <keycap>Ctrl</keycap> key is not needed. In the simple mode, items can only be deselected by clicking them."
msgstr ""

#. Tag: title
#: chapter-components.xml:3951
#, no-c-format
msgid "Table Features"
msgstr ""

#. Tag: title
#: chapter-components.xml:3954
#, no-c-format
msgid "Page Length and Scrollbar"
msgstr ""

#. Tag: para
#: chapter-components.xml:3956
#, no-c-format
msgid "The default style for <classname>Table</classname> provides a table with a scrollbar. The scrollbar is located at the right side of the table and becomes visible when the number of items in the table exceeds the page length, that is, the number of visible items. You can set the page length with <methodname>setPageLength()</methodname>."
msgstr ""

#. Tag: para
#: chapter-components.xml:3964
#, no-c-format
msgid "Setting the page length to zero makes all the rows in a table visible, no matter how many rows there are. Notice that this also effectively disables buffering, as all the entire table is loaded to the browser at once. Using such tables to generate reports does not scale up very well, as there is some inevitable overhead in rendering a table with Ajax. For very large reports, generating HTML directly is a more scalable solution."
msgstr ""

#. Tag: title
#: chapter-components.xml:3976 chapter-components.xml:4001
#, no-c-format
msgid "Resizing Columns"
msgstr ""

#. Tag: para
#: chapter-components.xml:3978
#, no-c-format
msgid "You can set the width of a column programmatically from the server-side with <methodname>setColumnWidth()</methodname>. The column is identified by the property ID and the width is given in pixels."
msgstr ""

#. Tag: para
#: chapter-components.xml:3984
#, no-c-format
msgid "The user can resize table columns by dragging the resize handle between two columns. Resizing a table column causes a <classname>ColumnResizeEvent</classname>, which you can handle with a <classname>Table.ColumnResizeListener</classname>. The table must be set in immediate mode if you want to receive the resize events immediately, which is typical."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:3993
#, no-c-format
msgid ""
"<?pocket-size 65% ?><![CDATA[table.addListener(new Table.ColumnResizeListener() {\n"
"    public void columnResize(ColumnResizeEvent event) {\n"
"        // Get the new width of the resized column\n"
"        int width = event.getCurrentWidth();\n"
"        \n"
"        // Get the property ID of the resized column\n"
"        String column = (String) event.getPropertyId();\n"
"\n"
"        // Do something with the information\n"
"        table.setColumnFooter(column, String.valueOf(width) + \"px\");\n"
"    }\n"
"});\n"
"        \n"
"// Must be immediate to send the resize events immediately\n"
"table.setImmediate(true);]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:3995
#, no-c-format
msgid "See <xref linkend=\"figure.component.table.columnresize\"/> for a result after the columns of a table has been resized."
msgstr ""

#. Tag: title
#: chapter-components.xml:4011
#, no-c-format
msgid "Reordering Columns"
msgstr ""

#. Tag: para
#: chapter-components.xml:4013
#, no-c-format
msgid "If <methodname>setColumnReorderingAllowed(true)</methodname> is set, the user can reorder table columns by dragging them with the mouse from the column header,"
msgstr ""

#. Tag: title
#: chapter-components.xml:4021 chapter-components.xml:4046
#, no-c-format
msgid "Collapsing Columns"
msgstr ""

#. Tag: para
#: chapter-components.xml:4023
#, no-c-format
msgid "When <methodname>setColumnCollapsingAllowed(true)</methodname> is set, the right side of the table header shows a drop-down list that allows selecting which columns are shown. Collapsing columns is different than hiding columns with <methodname>setVisibleColumns()</methodname>, which hides the columns completely so that they can not be made visible (uncollapsed) from the user interface."
msgstr ""

#. Tag: para
#: chapter-components.xml:4032
#, no-c-format
msgid "You can collapse columns programmatically with <methodname>setColumnCollapsed()</methodname>. Collapsing must be enabled before collapsing columns with the method or it will throw an <classname>IllegalAccessException</classname>."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:4039
#, no-c-format
msgid ""
"<?pocket-size 65% ?><![CDATA[// Allow the user to collapse and uncollapse columns\n"
"table.setColumnCollapsingAllowed(true);\n"
"\n"
"// Collapse this column programmatically\n"
"try {\n"
"    table.setColumnCollapsed(\"born\", true);\n"
"} catch (IllegalAccessException e) {\n"
"    // Can't occur - collapsing was allowed above\n"
"    System.err.println(\"Something horrible occurred\");\n"
"}\n"
"        \n"
"// Give enough width for the table to accommodate the\n"
"// initially collapsed column later\n"
"table.setWidth(\"250px\");]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:4041
#, no-c-format
msgid "See <xref linkend=\"figure.component.table.columncollapsing\"/>."
msgstr ""

#. Tag: para
#: chapter-components.xml:4054
#, no-c-format
msgid "If the table has undefined width, it minimizes its width to fit the width of the visible columns. If some columns are initially collapsed, the width of the table may not be enough to accomodate them later, which will result in an ugly horizontal scrollbar. You should consider giving the table enough width to accomodate columns uncollapsed by the user."
msgstr ""

#. Tag: title
#: chapter-components.xml:4065
#, no-c-format
msgid "Components Inside a Table"
msgstr ""

#. Tag: para
#: chapter-components.xml:4067
#, no-c-format
msgid "The cells of a <classname>Table</classname> can contain any user interface components, not just strings. If the rows are higher than the row height defined in the default theme, you have to define the proper row height in a custom theme."
msgstr ""

#. Tag: para
#: chapter-components.xml:4074
#, no-c-format
msgid "When handling events for components inside a <classname>Table</classname>, such as for the <classname>Button</classname> in the example below, you usually need to know the item the component belongs to. Components do not themselves know about the table or the specific item in which a component is contained. Therefore, the handling method must use some other means for finding out the Item ID of the item. There are a few possibilities. Usually the easiest way is to use the <methodname>setData()</methodname> method to attach an arbitrary object to a component. You can subclass the component and include the identity information there. You can also simply search the entire table for the item with the component, although that solution may not be so scalable."
msgstr ""

#. Tag: para
#: chapter-components.xml:4090
#, no-c-format
msgid "The example below includes table rows with a <classname>Label</classname> in XHTML formatting mode, a multiline <classname>TextField</classname>, a <classname>CheckBox</classname>, and a <classname>Button</classname> that shows as a link."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:4097
#, no-c-format
msgid ""
"<?pocket-size 65% ?><![CDATA[// Create a table and add a style to allow setting the row height in theme.\n"
"final Table table = new Table();\n"
"table.addStyleName(\"components-inside\");\n"
"\n"
"/* Define the names and data types of columns.\n"
" * The \"default value\" parameter is meaningless here. */\n"
"table.addContainerProperty(\"Sum\",            Label.class,     null);\n"
"table.addContainerProperty(\"Is Transferred\", CheckBox.class,  null);\n"
"table.addContainerProperty(\"Comments\",       TextField.class, null);\n"
"table.addContainerProperty(\"Details\",        Button.class,    null);\n"
"\n"
"/* Add a few items in the table. */\n"
"for (int i=0; i<100; i++) {\n"
"    // Create the fields for the current table row\n"
"    Label sumField = new Label(String.format(\n"
"                   \"Sum is <b>$%04.2f</b><br/><i>(VAT incl.)</i>\",\n"
"                   new Object[] {new Double(Math.random()*1000)}),\n"
"                               Label.CONTENT_XHTML);\n"
"    CheckBox transferredField = new CheckBox(\"is transferred\");\n"
"    \n"
"    // Multiline text field. This required modifying the \n"
"    // height of the table row.\n"
"    TextField commentsField = new TextField();\n"
"    commentsField.setRows(3);\n"
"    \n"
"    // The Table item identifier for the row.\n"
"    Integer itemId = new Integer(i);\n"
"    \n"
"    // Create a button and handle its click. A Button does not\n"
"    // know the item it is contained in, so we have to store the\n"
"    // item ID as user-defined data.\n"
"    Button detailsField = new Button(\"show details\");\n"
"    detailsField.setData(itemId);\n"
"    detailsField.addListener(new Button.ClickListener() {\n"
"        public void buttonClick(ClickEvent event) {\n"
"            // Get the item identifier from the user-defined data.\n"
"            Integer itemId = (Integer)event.getButton().getData();\n"
"            getWindow().showNotification(\"Link \"+\n"
"                                   itemId.intValue()+\" clicked.\");\n"
"        } \n"
"    });\n"
"    detailsField.addStyleName(\"link\");\n"
"    \n"
"    // Create the table row.\n"
"    table.addItem(new Object[] {sumField, transferredField,\n"
"                                commentsField, detailsField},\n"
"                  itemId);\n"
"}\n"
"\n"
"// Show just three rows because they are so high.\n"
"table.setPageLength(3);]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:4099
#, no-c-format
msgid "The row height has to be set higher than the default with a style rule such as the following:"
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:4104
#, no-c-format
msgid ""
"<?pocket-size 65% ?><![CDATA[/* Table rows contain three-row TextField components. */\n"
".v-table-components-inside .v-table-cell-content {\n"
"        height: 54px;\n"
"}]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:4106
#, no-c-format
msgid "The table will look as shown in <xref linkend=\"figure.components.table.components-inside\"/>."
msgstr ""

#. Tag: title
#: chapter-components.xml:4112
#, no-c-format
msgid "Components in a Table"
msgstr ""

#. Tag: title
#: chapter-components.xml:4122
#, no-c-format
msgid "Iterating Over a Table"
msgstr ""

#. Tag: para
#: chapter-components.xml:4124
#, no-c-format
msgid "As the items in a <classname>Table</classname> are not indexed, iterating over the items has to be done using an iterator. The <methodname>getItemIds()</methodname> method of the <classname>Container</classname> interface of <classname>Table</classname> returns a <classname>Collection</classname> of item identifiers over which you can iterate using an <classname>Iterator</classname>. For an example about iterating over a <classname>Table</classname>, please see <xref linkend=\"datamodel.container\"/>. Notice that you may not modify the <classname>Table</classname> during iteration, that is, add or remove items. Changing the data is allowed."
msgstr ""

#. Tag: title
#: chapter-components.xml:4139
#, no-c-format
msgid "Filtering Table Contents"
msgstr ""

#. Tag: para
#: chapter-components.xml:4141
#, no-c-format
msgid "A table can be filtered if its container data source implements the <classname>Filterable</classname> interface, as the default <classname>IndexedContainer</classname> does. See <xref linkend=\"datamodel.container.filtered\"/>."
msgstr ""

#. Tag: primary
#: chapter-components.xml:4147
#, no-c-format
msgid "Container"
msgstr ""

#. Tag: secondary
#: chapter-components.xml:4147
#, no-c-format
msgid "Filterable"
msgstr ""

#. Tag: title
#: chapter-components.xml:4153
#, no-c-format
msgid "Editing the Values in a Table"
msgstr ""

#. Tag: para
#: chapter-components.xml:4155
#, no-c-format
msgid "Normally, a <classname>Table</classname> simply displays the items and their fields as text. If you want to allow the user to edit the values, you can either put them inside components as we did above, or you can simply call <methodname>setEditable(true)</methodname> and the cells are automatically turned into editable fields."
msgstr ""

#. Tag: para
#: chapter-components.xml:4163
#, no-c-format
msgid "Let us begin with a regular table with a some columns with usual Java types, namely a <classname>Date</classname>, <classname>Boolean</classname>, and a <classname>String</classname>."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:4169
#, no-c-format
msgid ""
"<?pocket-size 65% ?><![CDATA[// Create a table. It is by default not editable.\n"
"final Table table = new Table();\n"
"\n"
"// Define the names and data types of columns.\n"
"table.addContainerProperty(\"Date\",     Date.class,  null);\n"
"table.addContainerProperty(\"Work\",     Boolean.class, null);\n"
"table.addContainerProperty(\"Comments\", String.class,  null);\n"
"\n"
"// Add a few items in the table.\n"
"for (int i=0; i<100; i++) {\n"
"    Calendar calendar = new GregorianCalendar(2008,0,1);\n"
"    calendar.add(Calendar.DAY_OF_YEAR, i);\n"
"    \n"
"    // Create the table row.\n"
"    table.addItem(new Object[] {calendar.getTime(),\n"
"                                new Boolean(false),\n"
"                                \"\"},\n"
"                  new Integer(i)); // Item identifier\n"
"}\n"
"\n"
"table.setPageLength(8);\n"
"layout.addComponent(table);]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:4171
#, no-c-format
msgid "You could put the table in editable mode right away if you need to. We'll continue the example by adding a mechanism to switch the <classname>Table</classname> from and to the editable mode."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:4177
#, no-c-format
msgid ""
"<?pocket-size 65% ?><![CDATA[final CheckBox switchEditable = new CheckBox(\"Editable\");\n"
"switchEditable.addListener(new Property.ValueChangeListener() {\n"
"    public void valueChange(ValueChangeEvent event) {\n"
"        table.setEditable(((Boolean)event.getProperty()\n"
"                             .getValue()).booleanValue());\n"
"    }\n"
"});\n"
"switchEditable.setImmediate(true);\n"
"layout.addComponent(switchEditable);]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:4179
#, no-c-format
msgid "Now, when you check to checkbox, the components in the table turn into editable fields, as shown in <xref linkend=\"figure.component.table.editable\"/>."
msgstr ""

#. Tag: title
#: chapter-components.xml:4186
#, no-c-format
msgid "A Table in Normal and Editable Mode"
msgstr ""

#. Tag: title
#: chapter-components.xml:4198
#, no-c-format
msgid "Field Factories"
msgstr ""

#. Tag: para
#: chapter-components.xml:4200
#, no-c-format
msgid "The field components that allow editing the values of particular types in a table are defined in a field factory that implements the <classname>TableFieldFactory</classname> interface. The default implementation is <classname>DefaultFieldFactory</classname>, which offers the following crude mappings:"
msgstr ""

#. Tag: title
#: chapter-components.xml:4209
#, no-c-format
msgid "Type to Field Mappings in <classname>DefaultFieldFactory</classname>"
msgstr ""

#. Tag: entry
#: chapter-components.xml:4213
#, no-c-format
msgid "Property Type"
msgstr ""

#. Tag: entry
#: chapter-components.xml:4214
#, no-c-format
msgid "Mapped to Field Class"
msgstr ""

#. Tag: classname
#: chapter-components.xml:4219
#, no-c-format
msgid "Date"
msgstr ""

#. Tag: entry
#: chapter-components.xml:4220
#, no-c-format
msgid "A <classname>DateField</classname>."
msgstr ""

#. Tag: classname
#: chapter-components.xml:4223
#, no-c-format
msgid "Boolean"
msgstr ""

#. Tag: entry
#: chapter-components.xml:4224
#, no-c-format
msgid "A <classname>CheckBox</classname>."
msgstr ""

#. Tag: classname
#: chapter-components.xml:4227
#, no-c-format
msgid "Item"
msgstr ""

#. Tag: entry
#: chapter-components.xml:4229
#, no-c-format
msgid "A <classname>Form</classname>. The fields of the form are automatically created from the item's properties using a <classname>FormFieldFactory</classname>. The normal use for this property type is inside a <classname>Form</classname> and is less useful inside a <classname>Table</classname>."
msgstr ""

#. Tag: emphasis
#: chapter-components.xml:4237
#, no-c-format
msgid "other"
msgstr ""

#. Tag: entry
#: chapter-components.xml:4239
#, no-c-format
msgid "A <classname>TextField</classname>. The text field manages conversions from the basic types, if possible."
msgstr ""

#. Tag: para
#: chapter-components.xml:4247
#, no-c-format
msgid "Field factories are covered with more detail in <xref linkend=\"components.form.binding\"/>. You could just implement the <classname>TableFieldFactory</classname> interface, but we recommend that you extend the <classname>DefaultFieldFactory</classname> according to your needs. In the default implementation, the mappings are defined in the <methodname>createFieldByPropertyType()</methodname> method (you might want to look at the source code) both for tables and forms."
msgstr ""

#. Tag: title
#: chapter-components.xml:4259
#, no-c-format
msgid "Navigation in Editable Mode"
msgstr ""

#. Tag: para
#: chapter-components.xml:4261
#, no-c-format
msgid "In the editable mode, the editor fields can have focus. Pressing <keycap>Tab</keycap> moves the focus to next column or, at the last column, to the first column of the next item. Respectively, pressing <keycombo><keycap>Shift</keycap><keycap>Tab</keycap></keycombo> moves the focus backward. If the focus is in the last column of the last visible item, the pressing <keycap>Tab</keycap> moves the focus outside the table. Moving backward from the first column of the first item moves the focus to the table itself. Some updates to the table, such as changing the headers or footers or regenerating a column, can move the focus from an editor component to the table itself."
msgstr ""

#. Tag: para
#: chapter-components.xml:4274
#, no-c-format
msgid "The default behaviour may be undesirable in many cases. For example, the focus also goes through any read-only editor fields and can move out of the table inappropriately. You can provide better navigation is to use event handler for shortcut keys such as <keycap>Tab</keycap>, <keycap>Arrow Up</keycap>, <keycap>Arrow Down</keycap>, and <keycap>Enter</keycap>."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:4283
#, no-c-format
msgid ""
"<?pocket-size 65% ?><![CDATA[// Keyboard navigation\n"
"class KbdHandler implements Handler {\n"
"    Action tab_next = new ShortcutAction(\"Tab\",\n"
"            ShortcutAction.KeyCode.TAB, null);\n"
"    Action tab_prev = new ShortcutAction(\"Shift+Tab\",\n"
"            ShortcutAction.KeyCode.TAB,\n"
"            new int[] {ShortcutAction.ModifierKey.SHIFT});\n"
"    Action cur_down = new ShortcutAction(\"Down\",\n"
"            ShortcutAction.KeyCode.ARROW_DOWN, null);\n"
"    Action cur_up   = new ShortcutAction(\"Up\",\n"
"            ShortcutAction.KeyCode.ARROW_UP,   null);\n"
"    Action enter   = new ShortcutAction(\"Enter\",\n"
"            ShortcutAction.KeyCode.ENTER,      null);\n"
"    public Action[] getActions(Object target, Object sender) {\n"
"        return new Action[] {tab_next, tab_prev, cur_down,\n"
"                             cur_up, enter};\n"
"    }\n"
"\n"
"    public void handleAction(Action action, Object sender,\n"
"                             Object target) {\n"
"        if (target instanceof TextField) {\n"
"            // Move according to keypress\n"
"            int itemid = (Integer) ((TextField) target).getData();\n"
"            if (action == tab_next || action == cur_down)\n"
"                itemid++;\n"
"            else if (action == tab_prev || action == cur_up)\n"
"                itemid--;\n"
"            // On enter, just stay where you were. If we did\n"
"            // not catch the enter action, the focus would be\n"
"            // moved to wrong place.\n"
"            \n"
"            if (itemid >= 0 && itemid < table.size()) {\n"
"                TextField newTF = valueFields.get(itemid);\n"
"                if (newTF != null)\n"
"                    newTF.focus();\n"
"            }\n"
"        }\n"
"    }\n"
"}\n"
"\n"
"// Panel that handles keyboard navigation\n"
"Panel navigator = new Panel();\n"
"navigator.addStyleName(Reindeer.PANEL_LIGHT);\n"
"navigator.addComponent(table);\n"
"navigator.addActionHandler(new KbdHandler());]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:4285
#, no-c-format
msgid "The main issue in implementing keyboard navigation in an editable table is that the editor fields do not know the table they are in. To find the parent table, you can either look up in the component container hierarchy or simply store a reference to the table with <methodname>setData()</methodname> in the field component. The other issue is that you can not acquire a reference to an editor field from the <classname>Table</classname> component. One solution is to use some external collection, such as a <classname>HashMap</classname>, to map item IDs to the editor fields."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:4297
#, no-c-format
msgid ""
"<?pocket-size 65% ?><![CDATA[// Can't access the editable components from the table so\n"
"// must store the information\n"
"final HashMap<Integer,TextField> valueFields =\n"
"    new HashMap<Integer,TextField>();]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:4299
#, no-c-format
msgid "The map has to be filled in a <classname>TableFieldFactory</classname>, such as in the following. You also need to set the reference to the table there and you can also set the initial focus there."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:4306
#, no-c-format
msgid ""
"<?pocket-size 65% ?><![CDATA[table.setTableFieldFactory(new TableFieldFactory () {\n"
"    public Field createField(Container container, Object itemId,\n"
"            Object propertyId, Component uiContext) {\n"
"        TextField field = new TextField((String) propertyId);\n"
"        \n"
"        // User can only edit the numeric column\n"
"        if (\"Source of Fear\".equals(propertyId))\n"
"            field.setReadOnly(true);\n"
"        else { // The numeric column\n"
"            // The field needs to know the item it is in\n"
"            field.setData(itemId);\n"
"            \n"
"            // Remember the field\n"
"            valueFields.put((Integer) itemId, field);\n"
"            \n"
"            // Focus the first editable value\n"
"            if (((Integer)itemId) == 0)\n"
"                field.focus();\n"
"        }\n"
"        return field;\n"
"    }\n"
"});]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:4308
#, no-c-format
msgid "The issues are complicated by the fact that the editor fields are not generated for the entire table, but only for a cache window that includes the visible items and some items above and below it. For example, if the beginning of a big scrollable table is visible, the editor component for the last item does not exist. This issue is relevant mostly if you want to have wrap-around navigation that jumps from the last to first item and vice versa."
msgstr ""

#. Tag: title
#: chapter-components.xml:4322
#, no-c-format
msgid "Column Headers and Footers"
msgstr ""

#. Tag: para
#: chapter-components.xml:4324
#, no-c-format
msgid "<classname>Table</classname> supports both column headers and footers; the headers are enabled by default."
msgstr ""

#. Tag: title
#: chapter-components.xml:4330
#, no-c-format
msgid "Headers"
msgstr ""

#. Tag: para
#: chapter-components.xml:4332
#, no-c-format
msgid "The table header displays the column headers at the top of the table. You can use the column headers to reorder or resize the columns, as described earlier. By default, the header of a column is the property ID of the column, unless given explicitly with <methodname>setColumnHeader()</methodname>."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:4340
#, no-c-format
msgid ""
"<?pocket-size 65% ?><![CDATA[// Define the properties\n"
"table.addContainerProperty(\"lastname\", String.class, null);\n"
"table.addContainerProperty(\"born\", Integer.class, null);\n"
"table.addContainerProperty(\"died\", Integer.class, null);\n"
"\n"
"// Set nicer header names\n"
"table.setColumnHeader(\"lastname\", \"Name\");\n"
"table.setColumnHeader(\"born\", \"Born\");\n"
"table.setColumnHeader(\"died\", \"Died\");]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:4342
#, no-c-format
msgid "The text of the column headers and the visibility of the header depends on the <emphasis>column header mode</emphasis>. The header is visible by default, but you can disable it with <methodname>setColumnHeaderMode(Table.COLUMN_HEADER_MODE_HIDDEN)</methodname>."
msgstr ""

#. Tag: title
#: chapter-components.xml:4351
#, no-c-format
msgid "Footers"
msgstr ""

#. Tag: para
#: chapter-components.xml:4353
#, no-c-format
msgid "The table footer can be useful for displaying sums or averages of values in a column, and so on. The footer is not visible by default; you can enable it with <methodname>setFooterVisible(true)</methodname>. Unlike in the header, the column headers are empty by default. You can set their value with <methodname>setColumnFooter()</methodname>. The columns are identified by their property ID."
msgstr ""

#. Tag: para
#: chapter-components.xml:4363
#, no-c-format
msgid "The following example shows how to calculate average of the values in a column:"
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:4368
#, no-c-format
msgid ""
"<?pocket-size 65% ?><![CDATA[// Have a table with a numeric column\n"
"Table table = new Table(\"Custom Table Footer\");\n"
"table.addContainerProperty(\"Name\", String.class, null);\n"
"table.addContainerProperty(\"Died At Age\", Integer.class, null);\n"
"        \n"
"// Insert some data\n"
"Object people[][] = {{\"Galileo\",  77},\n"
"                     {\"Monnier\",  83},\n"
"                     {\"Vaisala\",  79},\n"
"                     {\"Oterma\",   86}};\n"
"for (int i=0; i<people.length; i++)\n"
"    table.addItem(people[i], new Integer(i));\n"
"        \n"
"// Calculate the average of the numeric column\n"
"double avgAge = 0;\n"
"for (int i=0; i<people.length; i++)\n"
"    avgAge += (Integer) people[i][1];\n"
"avgAge /= people.length;\n"
"\n"
"// Set the footers\n"
"table.setFooterVisible(true);\n"
"table.setColumnFooter(\"Name\", \"Average\");\n"
"table.setColumnFooter(\"Died At Age\", String.valueOf(avgAge));\n"
"\n"
"// Adjust the table height a bit\n"
"table.setPageLength(table.size());]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:4370
#, no-c-format
msgid "The resulting table is shown in <xref linkend=\"figure.components.table.headersfooters.footer\"/>."
msgstr ""

#. Tag: title
#: chapter-components.xml:4376
#, no-c-format
msgid "A Table with a Footer"
msgstr ""

#. Tag: title
#: chapter-components.xml:4389
#, no-c-format
msgid "Handling Mouse Clicks on Headers and Footers"
msgstr ""

#. Tag: para
#: chapter-components.xml:4391
#, no-c-format
msgid "Normally, when the user clicks a column header, the table will be sorted by the column, assuming that the data source is <classname>Sortable</classname> and sorting is not disabled. In some cases, you might want some other functionality when the user clicks the column header, such as selecting the column in some way."
msgstr ""

#. Tag: para
#: chapter-components.xml:4399
#, no-c-format
msgid "Clicks in the header cause a <classname>HeaderClickEvent</classname>, which you can handle with a <classname>Table.HeaderClickListener</classname>. Click events on the table header (and footer) are, like button clicks, sent immediately to server, so there is no need to set <methodname>setImmediate()</methodname>."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:4408
#, no-c-format
msgid ""
"<?pocket-size 65% ?><![CDATA[// Handle the header clicks\n"
"table.addListener(new Table.HeaderClickListener() {\n"
"    public void headerClick(HeaderClickEvent event) {\n"
"        String column = (String) event.getPropertyId();\n"
"        getWindow().showNotification(\"Clicked \" + column +\n"
"                \"with \" + event.getButtonName());\n"
"    }\n"
"});\n"
"        \n"
"// Disable the default sorting behavior\n"
"table.setSortDisabled(true);]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:4410
#, no-c-format
msgid "Setting a click handler does not automatically disable the sorting behavior of the header; you need to disable it explicitly with <methodname>setSortDisabled(true)</methodname>. Header click events are not sent when the user clicks the column resize handlers to drag them."
msgstr ""

#. Tag: para
#: chapter-components.xml:4419
#, no-c-format
msgid "The <classname>HeaderClickEvent</classname> object provides the identity of the clicked column with <methodname>getPropertyId()</methodname>. The <methodname>getButton()</methodname> reports the mouse button with which the click was made: <parameter>BUTTON_LEFT</parameter>, <parameter>BUTTON_RIGHT</parameter>, or <parameter>BUTTON_MIDDLE</parameter>. The <methodname>getButtonName()</methodname> a human-readable button name in English: \"<parameter>left</parameter>\", \"<parameter>right</parameter>\", or \"<parameter>middle</parameter>\". The <methodname>isShiftKey()</methodname>, <methodname>isCtrlKey()</methodname>, etc., methods indicate if the <keycap>Shift</keycap>, <keycap>Ctrl</keycap>, <keycap>Alt</keycap> or other modifier keys were pressed during the click."
msgstr ""

#. Tag: para
#: chapter-components.xml:4437
#, no-c-format
msgid "Clicks in the footer cause a <classname>FooterClickEvent</classname>, which you can handle with a <classname>Table.FooterClickListener</classname>. Footers do not have any default click behavior, like the sorting in the header. Otherwise, handling clicks in the footer is equivalent to handling clicks in the header."
msgstr ""

#. Tag: title
#: chapter-components.xml:4449
#, no-c-format
msgid "Generated Table Columns"
msgstr ""

#. Tag: para
#: chapter-components.xml:4451
#, no-c-format
msgid "You might want to have a column that has values calculated from other columns. Or you might want to format table columns in some way, for example if you have columns that display currencies. The <classname>ColumnGenerator</classname> interface allows defining custom generators for such columns."
msgstr ""

#. Tag: para
#: chapter-components.xml:4459
#, no-c-format
msgid "You add new generated columns to a <classname>Table</classname> with <methodname>addGeneratedColumn()</methodname>. It takes the column identifier as its parameters. Usually you want to have a more user-friendly and possibly internationalized column header. You can set the header and a possible icon by calling <methodname>addContainerProperty()</methodname> <emphasis>before</emphasis> adding the generated column."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:4469
#, no-c-format
msgid ""
"<?pocket-size 65% ?><![CDATA[// Define table columns. \n"
"table.addContainerProperty(\n"
"    \"date\",     Date.class,   null, \"Date\",         null, null);\n"
"table.addContainerProperty(\n"
"    \"quantity\", Double.class, null, \"Quantity (l)\", null, null);\n"
"table.addContainerProperty(\n"
"    \"price\",    Double.class, null, \"Price (e/l)\",  null, null);\n"
"table.addContainerProperty(\n"
"    \"total\",    Double.class, null, \"Total (e)\",    null, null);\n"
"\n"
"// Define the generated columns and their generators.\n"
"table.addGeneratedColumn(\"date\",\n"
"                         new DateColumnGenerator());\n"
"table.addGeneratedColumn(\"quantity\",\n"
"                         new ValueColumnGenerator(\"%.2f l\"));\n"
"table.addGeneratedColumn(\"price\",\n"
"                         new PriceColumnGenerator());\n"
"table.addGeneratedColumn(\"total\",\n"
"                         new ValueColumnGenerator(\"%.2f e\"));]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:4471
#, no-c-format
msgid "Notice that the <methodname>addGeneratedColumn()</methodname> always places the generated columns as the last column, even if you defined some other order previously. You will have to set the proper order with <methodname>setVisibleColumns()</methodname>."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:4478
#, no-c-format
msgid "<?pocket-size 65% ?><![CDATA[table.setVisibleColumns(new Object[] {\"date\", \"quantity\", \"price\", \"total\"});]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:4480
#, no-c-format
msgid "The generators are objects that implement the <classname>Table.ColumnGenerator</classname> interface and its <methodname>generateCell()</methodname> method. The method gets the identity of the item and column as its parameters, in addition to the table object. It has to return a component object."
msgstr ""

#. Tag: para
#: chapter-components.xml:4488
#, no-c-format
msgid "The following example defines a generator for formatting <classname>Double</classname> valued fields according to a format string (as in <classname>java.util.Formatter</classname>)."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:4494
#, no-c-format
msgid ""
"<?pocket-size 65% ?><![CDATA[/** Formats the value in a column containing Double objects. */\n"
"class ValueColumnGenerator implements Table.ColumnGenerator {\n"
"    String format; /* Format string for the Double values. */\n"
"\n"
"    /**\n"
"     * Creates double value column formatter with the given\n"
"     * format string.\n"
"     */\n"
"    public ValueColumnGenerator(String format) {\n"
"        this.format = format;\n"
"    }\n"
"\n"
"    /**\n"
"     * Generates the cell containing the Double value.\n"
"     * The column is irrelevant in this use case.\n"
"     */\n"
"    public Component generateCell(Table source, Object itemId,\n"
"                                  Object columnId) {\n"
"        // Get the object stored in the cell as a property\n"
"        Property prop =\n"
"            source.getItem(itemId).getItemProperty(columnId);\n"
"        if (prop.getType().equals(Double.class)) {\n"
"            Label label = new Label(String.format(format,\n"
"                    new Object[] { (Double) prop.getValue() }));\n"
"            \n"
"            // Set styles for the column: one indicating that it's\n"
"            // a value and a more specific one with the column\n"
"            // name in it. This assumes that the column name\n"
"            // is proper for CSS.\n"
"            label.addStyleName(\"column-type-value\");\n"
"            label.addStyleName(\"column-\" + (String) columnId);\n"
"            return label;\n"
"        }\n"
"        return null;\n"
"    }\n"
"}]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:4503
#, no-c-format
msgid "The generator is called for all the visible (or more accurately cached) items in a table. If the user scrolls the table to another position in the table, the columns of the new visible rows are generated dynamically. The columns in the visible (cached) rows are also generated always when an item has a value change. It is therefore usually safe to calculate the value of generated cells from the values of different rows (items)."
msgstr ""

#. Tag: para
#: chapter-components.xml:4512
#, no-c-format
msgid "When you set a table as <parameter>editable</parameter>, regular fields will change to editing fields. When the user changes the values in the fields, the generated columns will be updated automatically. Putting a table with generated columns in editable mode has a few quirks. The editable mode of <classname>Table</classname> does not affect generated columns. You have two alternatives: either you generate the editing fields in the generator or, in case of formatter generators, remove the generator in the editable mode. The example below uses the latter approach."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:4523
#, no-c-format
msgid ""
"<?pocket-size 65% ?><![CDATA[// Have a check box that allows the user\n"
"// to make the quantity and total columns editable.\n"
"final CheckBox editable = new CheckBox(\n"
"    \"Edit the input values - calculated columns are regenerated\");\n"
"\n"
"editable.setImmediate(true);\n"
"editable.addListener(new ClickListener() {\n"
"    public void buttonClick(ClickEvent event) {\n"
"        table.setEditable(editable.booleanValue());\n"
"        \n"
"        // The columns may not be generated when we want to\n"
"        // have them editable.\n"
"        if (editable.booleanValue()) {\n"
"            table.removeGeneratedColumn(\"quantity\");\n"
"            table.removeGeneratedColumn(\"total\");\n"
"        } else { // Not editable\n"
"            // Show the formatted values.\n"
"            table.addGeneratedColumn(\"quantity\",\n"
"                new ValueColumnGenerator(\"%.2f l\"));\n"
"            table.addGeneratedColumn(\"total\",\n"
"                new ValueColumnGenerator(\"%.2f e\"));\n"
"        }\n"
"        // The visible columns are affected by removal\n"
"        // and addition of generated columns so we have\n"
"        // to redefine them.\n"
"        table.setVisibleColumns(new Object[] {\"date\", \"quantity\",\n"
"                 \"price\", \"total\", \"consumption\", \"dailycost\"});\n"
"    }\n"
"});]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:4525
#, no-c-format
msgid "You will also have to set the editing fields in <parameter>immediate</parameter> mode to have the update occur immediately when an edit field loses the focus. You can set the fields in <parameter>immediate</parameter> mode with the a custom <classname>TableFieldFactory</classname>, such as the one given below, that just extends the default implementation to set the mode:"
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:4534
#, no-c-format
msgid ""
"<?pocket-size 65% ?><![CDATA[public class ImmediateFieldFactory extends DefaultFieldFactory {\n"
"    public Field createField(Container container,\n"
"                             Object itemId,\n"
"                             Object propertyId,\n"
"                             Component uiContext) {\n"
"        // Let the DefaultFieldFactory create the fields...\n"
"        Field field = super.createField(container, itemId,\n"
"                                        propertyId, uiContext);\n"
"        \n"
"        // ...and just set them as immediate.\n"
"        ((AbstractField)field).setImmediate(true);\n"
"        \n"
"        return field;\n"
"    }\n"
"}\n"
"...\n"
"table.setFieldFactory(new ImmediateFieldFactory());]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:4536
#, no-c-format
msgid "If you generate the editing fields with the column generator, you avoid having to use such a field factory, but of course have to generate the fields for both normal and editable modes."
msgstr ""

#. Tag: para
#: chapter-components.xml:4542
#, no-c-format
msgid "shows a table with columns calculated (blue) and simply formatted (black) with column generators."
msgstr ""

#. Tag: title
#: chapter-components.xml:4549
#, no-c-format
msgid "Table with Generated Columns in Normal and Editable Mode"
msgstr ""

#. Tag: title
#: chapter-components.xml:4564
#, no-c-format
msgid "Formatting Table Columns"
msgstr ""

#. Tag: para
#: chapter-components.xml:4566
#, no-c-format
msgid "The displayed values of properties shown in a table are normally formatted using the <methodname>toString()</methodname> method of each property. Customizing the format of a column can be done in several ways:"
msgstr ""

#. Tag: listitem
#: chapter-components.xml:4573
#, no-c-format
msgid "Using <classname>ColumnGenerator</classname> to generate a second column that is formatted. The original column needs to be set invisible. See <xref linkend=\"components.table.columngenerator\"/>."
msgstr ""

#. Tag: listitem
#: chapter-components.xml:4578
#, no-c-format
msgid "Using a <classname>PropertyFormatter</classname> as a proxy between the table and the data property. This also normally requires using an mediate container in the table."
msgstr ""

#. Tag: listitem
#: chapter-components.xml:4582
#, no-c-format
msgid "Overriding the default <methodname>formatPropertyValue()</methodname> in <classname>Table</classname>."
msgstr ""

#. Tag: para
#: chapter-components.xml:4587
#, no-c-format
msgid "As using a <classname>PropertyFormatter</classname> is generally much more awkward than overriding the <methodname>formatPropertyValue()</methodname>, its use is not described here."
msgstr ""

#. Tag: para
#: chapter-components.xml:4594
#, no-c-format
msgid "You can override <methodname>formatPropertyValue()</methodname> as is done in the following example:"
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:4599
#, no-c-format
msgid ""
"<?pocket-size 65% ?><![CDATA[// Create a table that overrides the default\n"
"// property (column) format\n"
"final Table table = new Table(\"Formatted Table\") {\n"
"    @Override\n"
"    protected String formatPropertyValue(Object rowId,\n"
"            Object colId, Property property) {\n"
"        // Format by property type\n"
"        if (property.getType() == Date.class) {\n"
"            SimpleDateFormat df =\n"
"                new SimpleDateFormat(\"yyyy-MM-dd hh:mm:ss\");\n"
"            return df.format((Date)property.getValue());\n"
"        }\n"
"\n"
"        return super.formatPropertyValue(rowId, colId, property);\n"
"    }\n"
"};\n"
"        \n"
"// The table has some columns\n"
"table.addContainerProperty(\"Time\", Date.class, null);\n"
"        \n"
"... Fill the table with data ...]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:4601
#, no-c-format
msgid "You can also distinguish between columns by the <parameter>colId</parameter> parameter, which is the property ID of the column. <classname>DecimalFormat</classname> is useful for formatting decimal values."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:4608
#, no-c-format
msgid ""
"<?pocket-size 65% ?><![CDATA[... in formatPropertyValue() ...\n"
"} else if (\"Value\".equals(pid)) {\n"
"    // Format a decimal value for a specific locale\n"
"    DecimalFormat df = new DecimalFormat(\"#.00\",\n"
"            new DecimalFormatSymbols(locale));\n"
"    return df.format((Double) property.getValue());\n"
"}\n"
"...\n"
"table.addContainerProperty(\"Value\", Double.class, null);]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:4610
#, no-c-format
msgid "A table with the formatted date and decimal value columns is shown in <xref linkend=\"figure.components.table.columnformatting\"/>."
msgstr ""

#. Tag: title
#: chapter-components.xml:4616
#, no-c-format
msgid "Formatted Table Columns"
msgstr ""

#. Tag: para
#: chapter-components.xml:4627
#, no-c-format
msgid "You can use CSS for further styling of table rows, columns, and individual cells by using a <classname>CellStyleGenerator</classname>. It is described in <xref linkend=\"components.table.css\"/>."
msgstr ""

#. Tag: para
#: chapter-components.xml:4637
#, no-c-format
msgid "Styling the overall style of a <classname>Table</classname> can be done with the following CSS rules."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:4642
#, no-c-format
msgid ""
"<?pocket-size 75% ?><![CDATA[.v-table {}\n"
"  .v-table-header-wrap {}\n"
"    .v-table-header {}\n"
"      .v-table-header-cell {}\n"
"        .v-table-resizer {} /* Column resizer handle. */\n"
"        .v-table-caption-container {}\n"
"  .v-table-body {}\n"
"    .v-table-row-spacer {}\n"
"    .v-table-table {}\n"
"      .v-table-row {}\n"
"        .v-table-cell-content {}]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:4644
#, no-c-format
msgid "Notice that some of the widths and heights in a table are calculated dynamically and can not be set in CSS."
msgstr ""

#. Tag: title
#: chapter-components.xml:4650
#, no-c-format
msgid "Setting Individual Cell Styles"
msgstr ""

#. Tag: para
#: chapter-components.xml:4652
#, no-c-format
msgid "The <classname>Table.CellStyleGenerator</classname> interface allows you to set the CSS style for each individual cell in a table. You need to implement the <methodname>getStyle()</methodname>, which gets the row (item) and column (property) identifiers as parameters and can return a style name for the cell. The returned style name will be concatenated to prefix \"<literal>v-table-cell-content-</literal>\". <para> </para> Alternatively, you can use a <classname>Table.ColumnGenerator</classname> (see <xref linkend=\"components.table.columngenerator\"/>) to generate the actual UI components of the cells and add style names to them."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:4668
#, no-c-format
msgid ""
"<?pocket-size 65% ?><![CDATA[Table table = new Table(\"Table with Cell Styles\");\n"
"table.addStyleName(\"checkerboard\");\n"
"\n"
"// Add some columns in the table. In this example, the property\n"
"// IDs of the container are integers so we can determine the\n"
"// column number easily.\n"
"table.addContainerProperty(\"0\", String.class, null, \"\", null, null);\n"
"for (int i=0; i<8; i++)\n"
"    table.addContainerProperty(\"\"+(i+1), String.class, null,\n"
"                         String.valueOf((char) (65+i)), null, null);\n"
"\n"
"// Add some items in the table.\n"
"table.addItem(new Object[]{\n"
"    \"1\", \"R\", \"N\", \"B\", \"Q\", \"K\", \"B\", \"N\", \"R\"}, new Integer(0));\n"
"table.addItem(new Object[]{\n"
"    \"2\", \"P\", \"P\", \"P\", \"P\", \"P\", \"P\", \"P\", \"P\"}, new Integer(1));\n"
"for (int i=2; i<6; i++)\n"
"    table.addItem(new Object[]{String.valueOf(i+1), \n"
"                 \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"}, new Integer(i));\n"
"table.addItem(new Object[]{\n"
"    \"7\", \"P\", \"P\", \"P\", \"P\", \"P\", \"P\", \"P\", \"P\"}, new Integer(6));\n"
"table.addItem(new Object[]{\n"
"    \"8\", \"R\", \"N\", \"B\", \"Q\", \"K\", \"B\", \"N\", \"R\"}, new Integer(7));\n"
"table.setPageLength(8);\n"
"\n"
"// Set cell style generator\n"
"table.setCellStyleGenerator(new Table.CellStyleGenerator() {\n"
"    public String getStyle(Object itemId, Object propertyId) {\n"
"        int row = ((Integer)itemId).intValue();\n"
"        int col = Integer.parseInt((String)propertyId);\n"
"        \n"
"        // The first column.\n"
"        if (col == 0)\n"
"            return \"rowheader\";\n"
"        \n"
"        // Other cells.\n"
"        if ((row+col)%2 == 0)\n"
"            return \"black\";\n"
"        else\n"
"            return \"white\";\n"
"    }\n"
"});]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:4670
#, no-c-format
msgid "You can then style the cells, for example, as follows:"
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:4674
#, no-c-format
msgid ""
"<?pocket-size 65% ?><![CDATA[/* Center the text in header. */\n"
".v-table-header-cell {\n"
"    text-align: center;\n"
"}\n"
"\n"
"/* Basic style for all cells. */\n"
".v-table-checkerboard .v-table-cell-content {\n"
"    text-align: center;\n"
"    vertical-align: middle;\n"
"    padding-top: 12px;\n"
"    width: 20px;\n"
"    height: 28px;\n"
"}\n"
"\n"
"/* Style specifically for the row header cells. */\n"
".v-table-cell-content-rowheader {\n"
"        background: #E7EDF3\n"
"     url(../default/table/img/header-bg.png) repeat-x scroll 0 0;\n"
"}\n"
"\n"
"/* Style specifically for the \"white\" cells. */\n"
".v-table-cell-content-white {\n"
"    background: white;\n"
"    color: black;\n"
"}\n"
"\n"
"/* Style specifically for the \"black\" cells. */\n"
".v-table-cell-content-black {\n"
"    background: black;\n"
"    color: white;\n"
"}]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:4676
#, no-c-format
msgid "The table will look as shown in <xref linkend=\"figure.components.table.cell-style\"/>."
msgstr ""

#. Tag: title
#: chapter-components.xml:4682
#, no-c-format
msgid "Cell Style Generator for a Table"
msgstr ""

#. Tag: classname
#: chapter-components.xml:4700
#, no-c-format
msgid "Tree"
msgstr ""

#. Tag: para
#: chapter-components.xml:4702
#, no-c-format
msgid "The <classname>Tree</classname> component allows a natural way to represent data that has hierarchical relationships, such as filesystems or message threads. The <classname>Tree</classname> component in Vaadin works much like the tree components of most modern desktop user interface toolkits, for example in directory browsing."
msgstr ""

#. Tag: para
#: chapter-components.xml:4710
#, no-c-format
msgid "The typical use of the <classname>Tree</classname> component is for displaying a hierachical menu, like a menu on the left side of the screen, as in <xref linkend=\"figure.components.tree\"/>, or for displaying filesystems or other hierarchical datasets. The <parameter>menu</parameter> style makes the appearance of the tree more suitable for this purpose."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:4718
#, no-c-format
msgid ""
"<?pocket-size 65% ?><![CDATA[final Object[][] planets = new Object[][]{\n"
"        new Object[]{\"Mercury\"}, \n"
"        new Object[]{\"Venus\"},\n"
"        new Object[]{\"Earth\", \"The Moon\"},    \n"
"        new Object[]{\"Mars\", \"Phobos\", \"Deimos\"},\n"
"        new Object[]{\"Jupiter\", \"Io\", \"Europa\", \"Ganymedes\",\n"
"                                \"Callisto\"},\n"
"        new Object[]{\"Saturn\",  \"Titan\", \"Tethys\", \"Dione\",\n"
"                                \"Rhea\", \"Iapetus\"},\n"
"        new Object[]{\"Uranus\",  \"Miranda\", \"Ariel\", \"Umbriel\",\n"
"                                \"Titania\", \"Oberon\"},\n"
"        new Object[]{\"Neptune\", \"Triton\", \"Proteus\", \"Nereid\",\n"
"                                \"Larissa\"}};\n"
"        \n"
"Tree tree = new Tree(\"The Planets and Major Moons\");\n"
"\n"
"/* Add planets as root items in the tree. */\n"
"for (int i=0; i<planets.length; i++) {\n"
"    String planet = (String) (planets[i][0]);\n"
"    tree.addItem(planet);\n"
"    \n"
"    if (planets[i].length == 1) {\n"
"        // The planet has no moons so make it a leaf.\n"
"        tree.setChildrenAllowed(planet, false);\n"
"    } else {\n"
"        // Add children (moons) under the planets.\n"
"        for (int j=1; j<planets[i].length; j++) {\n"
"            String moon = (String) planets[i][j];\n"
"            \n"
"            // Add the item as a regular item.\n"
"            tree.addItem(moon);\n"
"            \n"
"            // Set it to be a child.\n"
"            tree.setParent(moon, planet);\n"
"            \n"
"            // Make the moons look like leaves.\n"
"            tree.setChildrenAllowed(moon, false);\n"
"        }\n"
"\n"
"        // Expand the subtree.\n"
"        tree.expandItemsRecursively(planet);\n"
"    }\n"
"}\n"
"\n"
"main.addComponent(tree);]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:4720
#, no-c-format
msgid "below shows the tree from the code example in a practical situation."
msgstr ""

#. Tag: title
#: chapter-components.xml:4726
#, no-c-format
msgid "A <classname>Tree</classname> Component as a Menu"
msgstr ""

#. Tag: para
#: chapter-components.xml:4737
#, no-c-format
msgid "You can read or set the currently selected item by the value property of the <classname>Tree</classname> component, that is, with <methodname>getValue()</methodname> and <methodname>setValue()</methodname>. When the user clicks an item on a tree, the tree will receive an <classname>ValueChangeEvent</classname>, which you can catch with a <classname>ValueChangeListener</classname>. To receive the event immediately after the click, you need to set the tree as <classname>setImmediate(true)</classname>."
msgstr ""

#. Tag: para
#: chapter-components.xml:4748
#, no-c-format
msgid "The <classname>Tree</classname> component uses <classname>Container</classname> data sources much like the <classname>Table</classname> component, with the addition that it also utilizes hierarchy information maintained by a <classname>HierarchicalContainer</classname>. The contained items can be of any item type supported by the container. The default container and its <methodname>addItem()</methodname> assume that the items are strings and the string value is used as the item ID."
msgstr ""

#. Tag: classname
#: chapter-components.xml:4761
#, no-c-format
msgid "MenuBar"
msgstr ""

#. Tag: para
#: chapter-components.xml:4763
#, no-c-format
msgid "The <classname>MenuBar</classname> component allows creating horizontal dropdown menus, much like the main menu in desktop applications."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:4768
#, no-c-format
msgid ""
"<![CDATA[// Create a menu bar\n"
"final MenuBar menubar = new MenuBar();\n"
"main.addComponent(menubar);]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:4770
#, no-c-format
msgid "You insert the top-level menu items to a <classname>MenuBar</classname> object with the <methodname>addItem()</methodname> method. It takes a string label, an icon resource, and a command as its parameters. The icon and command are not required and can be <parameter>null</parameter>."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:4777
#, no-c-format
msgid ""
"<![CDATA[MenuBar.MenuItem beverages =\n"
"      menubar.addItem(\"Beverages\", null, null);]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:4779
#, no-c-format
msgid "The command is called when the user clicks the item. A menu command is a class that implements the <classname>MenuBar.Command</classname> interface."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:4784
#, no-c-format
msgid ""
"<?pocket-size 75% ?><![CDATA[// A feedback component\n"
"final Label selection = new Label(\"-\");\n"
"main.addComponent(selection);\n"
"\n"
"// Define a common menu command for all the menu items.\n"
"MenuBar.Command mycommand = new MenuBar.Command() {\n"
"    public void menuSelected(MenuItem selectedItem) {\n"
"        selection.setValue(\"Ordered a \" +\n"
"                           selectedItem.getText() +\n"
"                           \" from menu.\");\n"
"    }  \n"
"};]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:4786
#, no-c-format
msgid "The <methodname>addItem()</methodname> method returns a <classname>MenuBar.MenuItem</classname> object, which you can use to add sub-menu items. The <classname>MenuItem</classname> has an identical <methodname>addItem()</methodname> method."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:4793
#, no-c-format
msgid ""
"<?pocket-size 75% ?><![CDATA[// Put some items in the menu hierarchically\n"
"MenuBar.MenuItem beverages =\n"
"    menubar.addItem(\"Beverages\", null, null);\n"
"MenuBar.MenuItem hot_beverages =\n"
"    beverages.addItem(\"Hot\", null, null);\n"
"hot_beverages.addItem(\"Tea\", null, mycommand);\n"
"hot_beverages.addItem(\"Coffee\", null, mycommand);\n"
"MenuBar.MenuItem cold_beverages =\n"
"    beverages.addItem(\"Cold\", null, null);\n"
"cold_beverages.addItem(\"Milk\", null, mycommand);\n"
"\n"
"// Another top-level item\n"
"MenuBar.MenuItem snacks =\n"
"    menubar.addItem(\"Snacks\", null, null);\n"
"snacks.addItem(\"Weisswurst\", null, mycommand);\n"
"snacks.addItem(\"Salami\", null, mycommand);\n"
"\n"
"// Yet another top-level item\n"
"MenuBar.MenuItem services =\n"
"    menubar.addItem(\"Services\", null, null);\n"
"services.addItem(\"Car Service\", null, mycommand);]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:4795
#, no-c-format
msgid "The menu will look as follows:"
msgstr ""

#. Tag: title
#: chapter-components.xml:4800
#, no-c-format
msgid "Menu Bar"
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:4814
#, no-c-format
msgid ""
"<![CDATA[.v-menubar { }\n"
".gwt-MenuItem {}\n"
".gwt-MenuItem-selected {}]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:4816
#, no-c-format
msgid "The menu bar has the overall style name <literal>.v-menubar</literal>. Each menu item has <literal>.gwt-MenuItem</literal> style normally and <literal>.gwt-MenuItem-selected</literal> when the item is selected."
msgstr ""

#. Tag: classname
#: chapter-components.xml:4827
#, no-c-format
msgid "Embedded"
msgstr ""

#. Tag: para
#: chapter-components.xml:4829
#, no-c-format
msgid "The <classname>Embedded</classname> component allows displaying embedded media objects, such as images, animations, or any embeddable media type supported by the browser. The contents of an <classname>Embedded</classname> component are managed as <emphasis>resources</emphasis>. For documentation on resources, see <xref linkend=\"application.resources\"/>."
msgstr ""

#. Tag: para
#: chapter-components.xml:4837
#, no-c-format
msgid "The following example displays an image from the same Java package as the class itself using the class loader."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:4842
#, no-c-format
msgid ""
"<![CDATA[Embedded image = new Embedded(\"Yes, logo:\",\n"
"    new ClassResource(\"vaadin-logo.png\", this));\n"
"main.addComponent(image);]]>"
msgstr ""

#. Tag: title
#: chapter-components.xml:4846
#, no-c-format
msgid "Embedded Image"
msgstr ""

#. Tag: para
#: chapter-components.xml:4857
#, no-c-format
msgid "The <classname>Embedded</classname> component supports several different content types, which are rendered differently in HTML. You can set the content type with <methodname>setType()</methodname>, although for images, as in the above example, the type is determined automatically."
msgstr ""

#. Tag: parameter
#: chapter-components.xml:4866
#, no-c-format
msgid "Embedded.TYPE_OBJECT"
msgstr ""

#. Tag: listitem
#: chapter-components.xml:4867
#, no-c-format
msgid "The default embedded type, allows embedding certain file types inside HTML <tag>&lt;object&gt;</tag> and <tag>&lt;embed&gt;</tag> elements."
msgstr ""

#. Tag: parameter
#: chapter-components.xml:4873
#, no-c-format
msgid "Embedded.TYPE_IMAGE"
msgstr ""

#. Tag: listitem
#: chapter-components.xml:4874
#, no-c-format
msgid "Embeds an image inside a HTML <tag>&lt;img&gt;</tag> element."
msgstr ""

#. Tag: parameter
#: chapter-components.xml:4879
#, no-c-format
msgid "Embedded.TYPE_BROWSER"
msgstr ""

#. Tag: listitem
#: chapter-components.xml:4880
#, no-c-format
msgid "Embeds a browser frame inside a HTML <tag>&lt;iframe&gt;</tag> element."
msgstr ""

#. Tag: title
#: chapter-components.xml:4888
#, no-c-format
msgid "Embedded Objects"
msgstr ""

#. Tag: para
#: chapter-components.xml:4890
#, no-c-format
msgid "The <parameter>Embedded.TYPE_OBJECT</parameter> is the default and most generic embedded type, which allows embedding media objects inside HTML <tag>&lt;object&gt;</tag> and <tag>&lt;embed&gt;</tag> elements. You need define the MIME type for the object type."
msgstr ""

#. Tag: para
#: chapter-components.xml:4897
#, no-c-format
msgid "Currently, only Shockwave Flash animations are supported (MIME type <literal>application/x-shockwave-flash</literal>)."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:4902
#, no-c-format
msgid ""
"<?pocket-size 65% ?><![CDATA[// Create a Shockware Flash resource\n"
"final ClassResource flashResource =\n"
"    new ClassResource(\"itmill_spin.swf\", getApplication());\n"
"\n"
"// Display the resource in a Embedded compoant\n"
"final Embedded embedded =\n"
"    new Embedded(\"Embedded Caption\", flashResource);\n"
"\n"
"// This is the default type, but we set it anyway.\n"
"embedded.setType(Embedded.TYPE_OBJECT);\n"
"\n"
"// This is recorgnized automatically, but set it anyway.\n"
"embedded.setMimeType(\"application/x-shockwave-flash\");]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:4904
#, no-c-format
msgid "You can set object parameters with <methodname>setParameter()</methodname>, which takes a parameter's name and value as strings. The object parameters are included in the HTML as <tag>&lt;param&gt;</tag> elements."
msgstr ""

#. Tag: title
#: chapter-components.xml:4913
#, no-c-format
msgid "Embedded Images"
msgstr ""

#. Tag: para
#: chapter-components.xml:4915
#, no-c-format
msgid "Images are embedded with the type <parameter>Embedded.TYPE_IMAGE</parameter>, although you do not normally need to set the type explicitly, as it is recognized automatically from the MIME type of the resource, as in the example above."
msgstr ""

#. Tag: para
#: chapter-components.xml:4922
#, no-c-format
msgid "<classname>Embedded</classname> component has by default undefined size in both directions, so it will automatically fit the size of the embedded image. <indexterm><primary>scroll bars</primary></indexterm> If you want scrolling with scroll bars, you can put the <classname>Embedded</classname> inside a <classname>Panel</classname> that has a defined size to enable scrolling, as described in <xref linkend=\"layout.components.panel.scrolling\"/>. You can also give it a defined size and set the <literal>overflow: auto</literal> CSS property for it in a theme."
msgstr ""

#. Tag: indexterm
#: chapter-components.xml:4935
#, no-c-format
msgid "overflow CSS property"
msgstr ""

#. Tag: para
#: chapter-components.xml:4938
#, no-c-format
msgid "You can find another example of displaying an image from <classname>FileResource</classname> in <xref linkend=\"components.upload\"/>. Another example, in <xref linkend=\"application.resources.stream\"/>, shows how you can generate the content of an <classname>Embedded</classname> component dynamically using a <classname>StreamResource</classname>."
msgstr ""

#. Tag: para
#: chapter-components.xml:4947
#, no-c-format
msgid "If you have a dynamically generated image, for example with a <classname>StreamResource</classname>, and the data changes, you need to reload the image in the browser. Because of how caching is handled in some browsers, you are best off by renaming the filename of the resource with a unique name, such as one including a timestamp. You should set cache time to zero with <methodname>setCacheTime()</methodname> for the resource object when you create it."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:4959
#, no-c-format
msgid ""
"<?pocket-size 65% ?><![CDATA[// Create the stream resource with some initial filename.\n"
"StreamResource imageResource =\n"
"    new StreamResource(imageSource, \"initial-filename.png\",\n"
"                       getApplication());\n"
"\n"
"// Instruct browser not to cache the image.\n"
"imageResource.setCacheTime(0);\n"
"\n"
"// Display the image in an Embedded component.\n"
"Embedded embedded = new Embedded(\"\", imageResource);]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:4961
#, no-c-format
msgid "When refreshing, you also need to call <methodname>requestRepaint()</methodname> for the <classname>Embedded</classname> object."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:4967
#, no-c-format
msgid ""
"<?pocket-size 65% ?><![CDATA[// This needs to be done, but is not sufficient.\n"
"embedded.requestRepaint();\n"
"\n"
"// Generate a filename with a timestamp.\n"
"SimpleDateFormat df = new SimpleDateFormat(\"yyyyMMddHHmmssSSS\");\n"
"String filename = \"myfilename-\" + df.format(new Date()) + \".png\";\n"
"\n"
"// Replace the filename in the resource.\n"
"imageResource.setFilename(makeImageFilename());]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:4969
#, no-c-format
msgid "You can find more detailed information about the <classname>StreamResource</classname> in <xref linkend=\"application.resources.stream\"/>."
msgstr ""

#. Tag: title
#: chapter-components.xml:4978
#, no-c-format
msgid "Browser Frames"
msgstr ""

#. Tag: para
#: chapter-components.xml:4980
#, no-c-format
msgid "The browser frame type allows you to embed external content inside an HTML <tag>&lt;iframe&gt;</tag> element. You can refer to a URL with an <classname>ExternalResource</classname> object. URLs are given with the standard Java <classname>URL</classname> class."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:4987
#, no-c-format
msgid ""
"<?pocket-size 65% ?><![CDATA[URL url = new URL(\"http://dev.vaadin.com/\");\n"
"Embedded browser = new Embedded(\"\", new ExternalResource(url));\n"
"browser.setType(Embedded.TYPE_BROWSER);\n"
"main.addComponent(browser);]]>"
msgstr ""

#. Tag: classname
#: chapter-components.xml:4994
#, no-c-format
msgid "Upload"
msgstr ""

#. Tag: para
#: chapter-components.xml:4996
#, no-c-format
msgid "The <classname>Upload</classname> component allows a user to upload files to the server. It displays a file name entry box, a file selection button, and an upload submit button. The user can either write the filename in the text area or click the <guibutton>Browse</guibutton> button to select a file. After the file is selected, the user sends the file by pressing the upload submit button."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:5005
#, no-c-format
msgid ""
"<?pocket-size 65% ?><![CDATA[// Create the Upload component.\n"
"Upload upload = new Upload(\"Upload the file here\", this);]]>"
msgstr ""

#. Tag: title
#: chapter-components.xml:5008
#, no-c-format
msgid "Upload Component"
msgstr ""

#. Tag: para
#: chapter-components.xml:5016
#, no-c-format
msgid "You can set the text of the upload button with <methodname>setButtonCaption()</methodname>, as in the example above, but it is difficult to change the look of the <guibutton>Browse</guibutton> button. This is a security feature of web browsers. The language of the <guibutton>Browse</guibutton> button is determined by the browser, so if you wish to have the language of the <classname>Upload</classname> component consistent, you will have to use the same language in your application."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:5026
#, no-c-format
msgid "<![CDATA[upload.setButtonCaption(\"Upload Now\");]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:5028
#, no-c-format
msgid "The uploaded files are typically stored as files in a file system, in a database, or as temporary objects in memory. The upload component writes the received data to an <classname>java.io.OutputStream</classname> so you have plenty of freedom in how you can process the upload content."
msgstr ""

#. Tag: para
#: chapter-components.xml:5036
#, no-c-format
msgid "To use the <classname>Upload</classname> component, you need to define a class that implements the <classname>Upload.Receiver</classname> interface. The <methodname>receiveUpload()</methodname> method is called when the user clicks the submit button. The method must return an <classname>OutputStream</classname>. To do this, it typically creates a <classname>File</classname> or a memory buffer where the stream is written. The method gets the file name and MIME type of the file, as reported by the browser."
msgstr ""

#. Tag: para
#: chapter-components.xml:5048
#, no-c-format
msgid "When an upload is finished, successfully or unsuccessfully, the <classname>Upload</classname> component will emit the <classname>Upload.FinishedEvent</classname> event. To receive it, you need to implement the <classname>Upload.FinishedListener</classname> interface, and register the listening object in the <classname>Upload</classname> component. The event object will also include the file name, MIME type, and length of the file. Notice that the more specific <classname>Upload.FailedEvent</classname> and <classname>Upload.SucceededEvent</classname> events will be called in the cases where the upload failed or succeeded, respectively."
msgstr ""

#. Tag: para
#: chapter-components.xml:5061
#, no-c-format
msgid "The following example allows uploading images to <filename>/tmp/uploads</filename> directory in (UNIX) filesystem (the directory must exist or the upload fails). The component displays the last uploaded image in an <classname>Embedded</classname> component."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:5068
#, no-c-format
msgid ""
"<?pocket-size 65% ?><![CDATA[import java.io.File;\n"
"import java.io.FileOutputStream;\n"
"import java.io.OutputStream;\n"
"import com.vaadin.terminal.FileResource;\n"
"import com.vaadin.ui.*;\n"
"\n"
"public class MyUploader extends CustomComponent\n"
"                        implements Upload.SucceededListener,\n"
"                                   Upload.FailedListener,\n"
"                                   Upload.Receiver {\n"
"\n"
"    Panel root;         // Root element for contained components.\n"
"    Panel imagePanel;   // Panel that contains the uploaded image.\n"
"    File  file;         // File to write to.\n"
"\n"
"    MyUploader() {\n"
"        root = new Panel(\"My Upload Component\");\n"
"        setCompositionRoot(root);\n"
"\n"
"        // Create the Upload component.\n"
"        final Upload upload =\n"
"                new Upload(\"Upload the file here\", this);\n"
"\n"
"        // Use a custom button caption instead of plain \"Upload\".\n"
"        upload.setButtonCaption(\"Upload Now\");\n"
"\n"
"        // Listen for events regarding the success of upload.\n"
"        upload.addListener((Upload.SucceededListener) this);\n"
"        upload.addListener((Upload.FailedListener) this);\n"
"\n"
"        root.addComponent(upload);\n"
"        root.addComponent(new Label(\"Click 'Browse' to \"+\n"
"                \"select a file and then click 'Upload'.\"));\n"
"\n"
"        // Create a panel for displaying the uploaded image.\n"
"        imagePanel = new Panel(\"Uploaded image\");\n"
"        imagePanel.addComponent(\n"
"                         new Label(\"No image uploaded yet\"));\n"
"        root.addComponent(imagePanel);\n"
"    }\n"
"\n"
"    // Callback method to begin receiving the upload.\n"
"    public OutputStream receiveUpload(String filename,\n"
"                                      String MIMEType) {\n"
"        FileOutputStream fos = null; // Output stream to write to\n"
"        file = new File(\"/tmp/uploads/\" + filename);\n"
"        try {\n"
"            // Open the file for writing.\n"
"            fos = new FileOutputStream(file);\n"
"        } catch (final java.io.FileNotFoundException e) {\n"
"            // Error while opening the file. Not reported here.\n"
"            e.printStackTrace();\n"
"            return null;\n"
"        }\n"
"\n"
"        return fos; // Return the output stream to write to\n"
"    }\n"
"\n"
"    // This is called if the upload is finished.\n"
"    public void uploadSucceeded(Upload.SucceededEvent event) {\n"
"        // Log the upload on screen.\n"
"        root.addComponent(new Label(\"File \" + event.getFilename()\n"
"                + \" of type '\" + event.getMIMEType()\n"
"                + \"' uploaded.\"));\n"
"        \n"
"        // Display the uploaded file in the image panel.\n"
"        final FileResource imageResource =\n"
"                new FileResource(file, getApplication());\n"
"        imagePanel.removeAllComponents();\n"
"        imagePanel.addComponent(new Embedded(\"\", imageResource));\n"
"    }\n"
"\n"
"    // This is called if the upload fails.\n"
"    public void uploadFailed(Upload.FailedEvent event) {\n"
"        // Log the failure on screen.\n"
"        root.addComponent(new Label(\"Uploading \"\n"
"                + event.getFilename() + \" of type '\"\n"
"                + event.getMIMEType() + \"' failed.\"));\n"
"    }\n"
"}]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:5070
#, no-c-format
msgid "The example does not check the type of the uploaded files in any way, which will cause an error if the content is anything else but an image. The program also assumes that the MIME type of the file is resolved correctly based on the file name extension. After uploading an image, the component will look as show in <xref linkend=\"figure.ui.upload.example\"/> below. The browser shows the <guibutton>Browse</guibutton> button localized."
msgstr ""

#. Tag: title
#: chapter-components.xml:5081
#, no-c-format
msgid "Image Upload Example"
msgstr ""

#. Tag: classname
#: chapter-components.xml:5092
#, no-c-format
msgid "Form"
msgstr ""

#. Tag: para
#: chapter-components.xml:5094
#, no-c-format
msgid "Most web applications need forms. The <classname>Form</classname> component in Vaadin offers an easy way to create forms where the fields can be automatically generated from a data source that is bound to the form. The <classname>BeanItem</classname> adapter allows the data sources to be just JavaBeans or Plain Old Java Objects (POJOs) with just the setter and getter methods. <classname>Form</classname> manages buffering so that the form contents can be committed to the data source only when filling the form is complete, and before that, the user can discard any changes."
msgstr ""

#. Tag: para
#: chapter-components.xml:5105
#, no-c-format
msgid "The <classname>Form</classname> component is also a layout, with a bounding box, a caption, a description field, and a special error indicator. As such, it can also be used within logical forms to group input fields."
msgstr ""

#. Tag: title
#: chapter-components.xml:5112
#, no-c-format
msgid "Form as a User Interface Component"
msgstr ""

#. Tag: para
#: chapter-components.xml:5114
#, no-c-format
msgid "To begin with the <classname>Form</classname>, it is a UI component with a layout suitable for its purpose. A <classname>Form</classname> has a caption, a description, a layout that contains the fields, an error indicator, and a footer, as illustrated in <xref linkend=\"figure.ui.form.layout\"/> below. Unlike with other components, the caption is shown within the border. (See the details below on how to enable the border with CSS, as it may not be enabled in the default style.)"
msgstr ""

#. Tag: title
#: chapter-components.xml:5123
#, no-c-format
msgid "Layout of the Form Component"
msgstr ""

#. Tag: para
#: chapter-components.xml:5131
#, no-c-format
msgid "Unlike most components, <classname>Form</classname> does not accept the caption in the constructor, as forms are often captionless, but you can give the caption with the <methodname>setCaption()</methodname>. While the description text, which you can set with <classname>setDescription()</classname>, is shown as a tooltip in most other components, a <classname>Form</classname> displays it in top of the form box as shown in the figure above."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:5141
#, no-c-format
msgid ""
"<?pocket-size 65% ?><classname>Form</classname> form = new <classname>Form</classname>();\n"
"form.setCaption(\"Form Caption\");\n"
"form.setDescription(\"This is a description of the Form that is \" +\n"
"        \"displayed in the upper part of the form. You normally \" +\n"
"        \"enter some descriptive text about the form and its \" +\n"
"        \"use here.\");"
msgstr ""

#. Tag: para
#: chapter-components.xml:5143
#, no-c-format
msgid "<classname>Form</classname> has <classname>FormLayout</classname> as its default layout, but you can set any other layout with <methodname>setLayout()</methodname>. See <xref linkend=\"layout.components.formlayout\"/> for more information. Note that the <classname>Form</classname> itself handles layout for the description, the footer and other common elements of the form. The user-set layout only manages the contained fields and their captions."
msgstr ""

#. Tag: para
#: chapter-components.xml:5154
#, no-c-format
msgid "The <classname>Form</classname> is most of all a container for fields so it offers many kinds of automation for creating and managing fields. You can, of course, create fields directly in the layout, but it is usually more desirable to bind the fields to the connected data source."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:5161
#, no-c-format
msgid ""
"<?pocket-size 65% ?><emphasis>// Add a field directly to the layout. This field will\n"
"// not be bound to the data source Item of the form.</emphasis>\n"
"form.getLayout().addComponent(new TextField(\"A Field\"));\n"
"\n"
"<emphasis>// Add a field and bind it to an named item property.</emphasis>\n"
"form.addField(\"another\", new TextField(\"Another Field\"));"
msgstr ""

#. Tag: para
#: chapter-components.xml:5163
#, no-c-format
msgid "Binding forms and their fields to data objects is described further in <xref linkend=\"components.form.binding\"/> below."
msgstr ""

#. Tag: para
#: chapter-components.xml:5168
#, no-c-format
msgid "The <classname>Form</classname> has a special error indicator inside the form. The indicator can show the following types of error messages:"
msgstr ""

#. Tag: listitem
#: chapter-components.xml:5174
#, no-c-format
msgid "Errors set with the <methodname>setComponentError()</methodname> method of the form. For example:"
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:5176
#, no-c-format
msgid "<?pocket-size 65% ?>form.setComponentError(new UserError(\"This is the error indicator of the Form.\"));"
msgstr ""

#. Tag: listitem
#: chapter-components.xml:5179
#, no-c-format
msgid "Errors caused by a validator attached to the <classname>Form</classname> with <methodname>addValidator()</methodname>."
msgstr ""

#. Tag: listitem
#: chapter-components.xml:5183
#, no-c-format
msgid "Errors caused by validators attached to the fields inside forms, if <methodname>setValidationVisible(true)</methodname> is set for the form. This type of validation is explained futher in <xref linkend=\"components.form.validation\"/> below."
msgstr ""

#. Tag: listitem
#: chapter-components.xml:5188
#, no-c-format
msgid "Errors from automatic validation of fields set as <emphasis>required</emphasis> with <methodname>setRequired(true)</methodname> if an error message has also been set with <methodname>setRequiredError()</methodname>."
msgstr ""

#. Tag: para
#: chapter-components.xml:5194
#, no-c-format
msgid "Only a single error is displayed in the error indicator at a time."
msgstr ""

#. Tag: para
#: chapter-components.xml:5198
#, no-c-format
msgid "Finally, <classname>Form</classname> has a footer area. The footer is a <classname>HorizontalLayout</classname> by default, but you can change it with <methodname>setFooter()</methodname>."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:5204
#, no-c-format
msgid ""
"<?pocket-size 65% ?><emphasis>// Set the footer layout.</emphasis>\n"
"form.<methodname>setFooter</methodname>(new <classname>VerticalLayout</classname>());\n"
"\n"
"form.<methodname>getFooter</methodname>().<methodname>addComponent</methodname>(\n"
"        new <classname>Label</classname>(\"This is the footer area of the Form. \"+\n"
"                  \"You can use any layout here. \"+\n"
"                  \"This is nice for buttons.\"));\n"
"\n"
"// Have a button bar in the footer.\n"
"<classname>HorizontalLayout</classname> okbar = new <classname>HorizontalLayout</classname>();\n"
"okbar.<methodname>setHeight</methodname>(\"25px\");\n"
"form.<methodname>getFooter</methodname>().<methodname>addComponent</methodname>(okbar);\n"
"\n"
"<emphasis>// Add an Ok (commit), Reset (discard), and Cancel buttons\n"
"// for the form.</emphasis>\n"
"<classname>Button</classname> okbutton = new <classname>Button</classname>(\"OK\", form, \"commit\");\n"
"okbar.<methodname>addComponent</methodname>(okbutton);\n"
"okbar.<methodname>setComponentAlignment</methodname>(okbutton, Alignment.TOP_RIGHT);\n"
"okbar.<methodname>addComponent</methodname>(new <classname>Button</classname>(\"Reset\", form, \"discard\"));\n"
"okbar.<methodname>addComponent</methodname>(new <classname>Button</classname>(\"Cancel\"));"
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:5210
#, no-c-format
msgid ""
".v-form {}\n"
".v-form legend\n"
".v-form fieldset {}\n"
".v-form-error {}\n"
".v-form-errormessage {}\n"
".v-form-description {}"
msgstr ""

#. Tag: para
#: chapter-components.xml:5212
#, no-c-format
msgid "The top-level style name of a <classname>Form</classname> component is <literal>v-form</literal>. It is important to notice that the form is implemented as a HTML <literal>&lt;fieldset&gt;</literal>, which allows placing the caption (or \"legend\") inside the border. It would not be so meaningful to set a border for the top-level form element. The following example sets a border around the form, as is done in <xref linkend=\"figure.ui.form.layout\"/> above."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:5222
#, no-c-format
msgid ""
".v-form fieldset {\n"
"    border: thin solid;\n"
"}"
msgstr ""

#. Tag: para
#: chapter-components.xml:5224
#, no-c-format
msgid "The top-level element of the form has the style name <literal>v-form-error</literal> if a component error has been set for the form."
msgstr ""

#. Tag: title
#: chapter-components.xml:5235
#, no-c-format
msgid "Binding Form to Data"
msgstr ""

#. Tag: para
#: chapter-components.xml:5237
#, no-c-format
msgid "The main purpose of the <classname>Form</classname> component is that you can bind it to a data source and let the <classname>Form</classname> generate and manage fields automatically. The data source can be any class that implements the <classname>Item</classname> interface, which is part of the Vaadin Data Model, as described in <xref linkend=\"datamodel\"/>. You can either implement the <classname>Item</classname> interface yourself, which can be overly complicated, or use the ready <classname>BeanItem</classname> adapter to bind the form to any JavaBean object. You can also use <classname>PropertysetItem</classname> to bind the form to an ad hoc set of <classname>Property</classname> objects, resembling a <classname>Map</classname>."
msgstr ""

#. Tag: para
#: chapter-components.xml:5252
#, no-c-format
msgid "Let us consider the following simple JavaBean with proper setter and getter methods for the member variables."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:5257
#, no-c-format
msgid ""
"<![CDATA[/** A simple JavaBean. */\n"
"public class PersonBean {\n"
"    String name;\n"
"    String city;\n"
"    \n"
"    public void setName(String name) {\n"
"        this.name = name;\n"
"    }\n"
"\n"
"    public String getName() {\n"
"        return name;\n"
"    }\n"
"\n"
"    public void setCity(String city) {\n"
"        this.city = city;\n"
"    }\n"
"\n"
"    public String getCity() {\n"
"        return city;\n"
"    }\n"
"}]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:5259
#, no-c-format
msgid "We can now bind this bean to a <classname>Form</classname> using the <classname>BeanItem</classname> adapter as follows."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:5264
#, no-c-format
msgid ""
"<?pocket-size 75% ?><emphasis>// Create a form and use FormLayout as its layout.</emphasis>\n"
"final <classname>Form</classname> form = new <classname>Form</classname>();\n"
"\n"
"<emphasis>// Set form caption and description texts</emphasis>\n"
"form.setCaption(\"Contact Information\");\n"
"form.setDescription(\"Please specify name of the person and the city where the person lives in.\");\n"
"\n"
"<emphasis>// Create the custom bean.</emphasis>\n"
"<classname>PersonBean</classname> bean = new <classname>PersonBean</classname>();\n"
"\n"
"<emphasis>// Create a bean item that is bound to the bean.</emphasis>\n"
"<classname>BeanItem</classname> item = new <classname>BeanItem</classname>(bean);\n"
"\n"
"<emphasis>// Bind the bean item as the data source for the form.</emphasis>\n"
"form.setItemDataSource(item);"
msgstr ""

#. Tag: para
#: chapter-components.xml:5266
#, no-c-format
msgid "The <classname>Form</classname> uses <classname>FormLayout</classname> layout by default and automatically generates the fields for each of the bean properties, as shown in <xref linkend=\"figure.ui.form.binding.bean\"/> below."
msgstr ""

#. Tag: title
#: chapter-components.xml:5274
#, no-c-format
msgid "Form Automatically Generated from a Bean"
msgstr ""

#. Tag: para
#: chapter-components.xml:5282
#, no-c-format
msgid "The automatically determined order of the fields can be undesirable. To set the order properly, you can use the <methodname>setVisibleItemProperties()</methodname> method of the <classname>Form</classname>, which takes an ordered collection as its parameter. Fields that are not listed in the collection are not included in the form."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:5291
#, no-c-format
msgid ""
"<emphasis>// Set the order of the items in the form.</emphasis>\n"
"<classname>Vector</classname> order = new <classname>Vector</classname>();\n"
"order.add(\"city\");\n"
"order.add(\"name\");\n"
"form.setVisibleItemProperties(order);"
msgstr ""

#. Tag: para
#: chapter-components.xml:5293
#, no-c-format
msgid "The form uses the property identifiers as the captions of the fields by default. If you want to have more proper captions for the fields, which is often the case, you need to use a <classname>FieldFactory</classname> to create the fields, as is shown in the section below."
msgstr ""

#. Tag: title
#: chapter-components.xml:5301
#, no-c-format
msgid "Generating Proper Fields with a <classname>FormFieldFactory</classname>"
msgstr ""

#. Tag: para
#: chapter-components.xml:5303
#, no-c-format
msgid "The form generates the fields automatically using very coarse logic. A <classname>String</classname>, <classname>int</classname>, or <classname>double</classname> will result in a <classname>TextField</classname> alike, regardless of the meaning of the field. You might want to have a city name to be input with a combo box, for example. You can create such custom fields by implementing the <methodname>createField()</methodname> method in the <classname>FormFieldFactory</classname> interface."
msgstr ""

#. Tag: para
#: chapter-components.xml:5314
#, no-c-format
msgid "The default implementation, <classname>DefaultFieldFactory</classname> is shared with the <classname>Table</classname> component: it also implements the <classname>TableFieldFactory</classname> interface. This allows the <classname>DefaultFieldFactory</classname> to create the fields for both purposes with the same logic. It is usually simplest to just extend the default implementation instead of implementing the interfaces from scratch. You should consult the source code of <classname>DefaultFieldFactory</classname> to see how it works; you may want to reimplement <methodname>createFieldByPropertyType()</methodname>, which actually creates the fields by type, instead of the <methodname>createField()</methodname>."
msgstr ""

#. Tag: para
#: chapter-components.xml:5331
#, no-c-format
msgid "Below is an example of implementing the <classname>FormFieldFactory</classname> interface for a specific form, using the names of the fields of the form to create the editable field components."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:5340
#, no-c-format
msgid ""
"<?pocket-size 65% ?>class MyFieldFactory implements FormFieldFactory {\n"
"    public Field createField(Item item, Object propertyId,\n"
"                             Component uiContext) {\n"
"        // Identify the fields by their Property ID.\n"
"        String pid = (String) propertyId;\n"
"        if (\"name\".equals(pid)) {\n"
"            return new TextField(\"Name\");\n"
"        } else if (\"city\".equals(pid)) {\n"
"            Select select = new Select(\"City\");\n"
"            select.addItem(\"Berlin\");\n"
"            select.addItem(\"Helsinki\");\n"
"            select.addItem(\"London\");\n"
"            select.addItem(\"New York\");\n"
"            select.addItem(\"Turku\");\n"
"            select.setNewItemsAllowed(true);\n"
"            return select;\n"
"        }\n"
"        \n"
"        return null; // Invalid field (property) name.\n"
"    }\n"
"}"
msgstr ""

#. Tag: para
#: chapter-components.xml:5342
#, no-c-format
msgid "You set a <classname>Form</classname> to use a custom field factory with <methodname>setFieldFactory()</methodname>:"
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:5347
#, no-c-format
msgid "form.setFieldFactory(new MyFieldFactory());"
msgstr ""

#. Tag: para
#: chapter-components.xml:5348
#, no-c-format
msgid "The earlier example will now look as shown in <xref linkend=\"figure.ui.form.binding.fieldfactory\"/>."
msgstr ""

#. Tag: title
#: chapter-components.xml:5353
#, no-c-format
msgid "Form Fields Generated with a <classname>FormFieldFactory</classname>"
msgstr ""

#. Tag: title
#: chapter-components.xml:5363
#, no-c-format
msgid "Validating Form Input"
msgstr ""

#. Tag: para
#: chapter-components.xml:5365
#, no-c-format
msgid "Validation of the form input is one of the most important tasks in handling forms. The fields in Vaadin can be bound to validators. The validation provides feedback about bad input and the forms can also manage validation results and accept the input only if all validations are successful. Fields can also be set as <emphasis>required</emphasis>, which is a special built-in validator. The validators work on the server-side."
msgstr ""

#. Tag: title
#: chapter-components.xml:5376
#, no-c-format
msgid "Using Validators in Forms"
msgstr ""

#. Tag: para
#: chapter-components.xml:5378
#, no-c-format
msgid "Validators check the validity of input and, if the input is invalid, can provide an error message through an exception. Validators are classes that implement the <classname>Validator</classname> interface. The interface has two methods that you must implement: <methodname>isValid()</methodname> that returns the success or failure as a truth value, and <methodname>validate()</methodname>, which reports a failure with an exception. The exception can be associated with an error message describing the details of the error."
msgstr ""

#. Tag: para
#: chapter-components.xml:5389
#, no-c-format
msgid "Simple validators that only need to produce a single error message in case the validation fails can inherit from <classname>AbstractValidator</classname> or <classname>AbstractStringValidator</classname>. The Vaadin also provides a number of standard validators, including <classname>IntegerValidator</classname> and <classname>DoubleValidator</classname> for validating numerical input, <classname>StringLengthValidator</classname>, <classname>EmailValidator</classname> and the more general <classname>RegexpValidator</classname> for checking that a string matches a Java regular expression:"
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:5403
#, no-c-format
msgid ""
"<?pocket-size 65% ?>// Postal code that must be 5 digits (10000-99999).\n"
"TextField field = new TextField(\"Postal Code\");\n"
"field.setColumns(5);\n"
"\n"
"// Create the validator\n"
"Validator postalCodeValidator = new RegexpValidator(\n"
"    \"[1-9][0-9]{4}\", \"Postal code must be a number 10000-99999.\");\n"
"field.addValidator(postalCodeValidator);"
msgstr ""

#. Tag: para
#: chapter-components.xml:5405
#, no-c-format
msgid "If you are using a custom <classname>FieldFactory</classname> to generate the fields, you may want to set the validators for fields there. It is useful to have the form in <emphasis>immediate</emphasis> mode:"
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:5412
#, no-c-format
msgid ""
"<?pocket-size 65% ?>// Set the form to act immediately on user input. This is\n"
"// necessary for the validation of the fields to occur immediately\n"
"// when the input focus changes and not just on commit.\n"
"form.setImmediate(true);"
msgstr ""

#. Tag: para
#: chapter-components.xml:5414
#, no-c-format
msgid "Validation is done always when you call the <methodname>commit()</methodname> method of the <classname>Form</classname>."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:5420
#, no-c-format
msgid ""
"<?pocket-size 65% ?>// The Commit button calls form.commit().\n"
"Button commit = new Button(\"Commit\", form, \"commit\");"
msgstr ""

#. Tag: para
#: chapter-components.xml:5422
#, no-c-format
msgid "If any of the validators in the form fail, the commit will fail and a validation exception message is displayed in the error indicator of the form. If the commit is successful, the input data is written to the data source. Notice that <methodname>commit()</methodname> also implicitly sets <methodname>setValidationVisible(true)</methodname> (if <methodname>setValidationVisibleOnCommit()</methodname> is <parameter>true</parameter>, as is the default). This makes the error indicators visible even if they were previously not visible."
msgstr ""

#. Tag: title
#: chapter-components.xml:5434
#, no-c-format
msgid "Form Validation in Action"
msgstr ""

#. Tag: para
#: chapter-components.xml:5442
#, no-c-format
msgid "For cases in which more complex error handling is required, the validator can also implement the <classname>Validator</classname> interface directly:"
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:5448
#, no-c-format
msgid ""
"<?pocket-size 65% ?><![CDATA[// Create the validator\n"
"Validator postalCodeValidator = new Validator() {\n"
"\n"
"    // The isValid() method returns simply a boolean value, so\n"
"    // it can not return an error message.\n"
"    public boolean isValid(Object value) {\n"
"        if (value == null || !(value instanceof String)) {\n"
"            return false;\n"
"        }\n"
"\n"
"        return ((String) value).matches(\"[1-9][0-9]{4}\");\n"
"    }\n"
"\n"
"    // Upon failure, the validate() method throws an exception\n"
"    // with an error message.\n"
"    public void validate(Object value)\n"
"                throws InvalidValueException {\n"
"        if (!isValid(value)) {\n"
"            if (value != null &&\n"
"                value.toString().startsWith(\"0\")) {\n"
"                throw new InvalidValueException(\n"
"                    \"Postal code must not start with a zero.\");\n"
"            } else {\n"
"                throw new InvalidValueException(\n"
"                    \"Postal code must be a number 10000-99999.\");\n"
"            }\n"
"        }\n"
"    }\n"
"};]]>"
msgstr ""

#. Tag: title
#: chapter-components.xml:5453
#, no-c-format
msgid "Required Fields in Forms"
msgstr ""

#. Tag: para
#: chapter-components.xml:5455
#, no-c-format
msgid "Setting a field as <parameter>required</parameter> outside a form is usually just a visual clue to the user. Leaving a required field empty does not display any error indicator in the empty field as a failed validation does. However, if you set a form field as required with <methodname>setRequired(true)</methodname> and give an error message with <methodname>setRequiredError()</methodname> and the user leaves the required field empty, the form will display the error message in its error indicator."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:5466
#, no-c-format
msgid ""
"<?pocket-size 65% ?>form.getField(\"name\").setRequired(true);\n"
"form.getField(\"name\").setRequiredError(\"Name is missing\");\n"
"form.getField(\"address\").setRequired(true); // No error message"
msgstr ""

#. Tag: para
#: chapter-components.xml:5468
#, no-c-format
msgid "To have the validation done immediately when the fields lose focus, you should set the form as <emphasis>immediate</emphasis>, as was done in the section above."
msgstr ""

#. Tag: title
#: chapter-components.xml:5475
#, no-c-format
msgid "Empty Required Field After Clicking Commit"
msgstr ""

#. Tag: para
#: chapter-components.xml:5484
#, no-c-format
msgid "It is important that you provide the user with feedback from failed validation of required fields either by setting an error message or by providing the feedback by other means."
msgstr ""

#. Tag: para
#: chapter-components.xml:5491
#, no-c-format
msgid "Otherwise, when a user clicks the <guibutton>Ok</guibutton> button (commits the form), the button does not appear to work and the form does not indicate any reason. As an alternative to setting the error message, you can handle the validation error and provide the feedback about the problem with a different mechanism."
msgstr ""

#. Tag: title
#: chapter-components.xml:5503
#, no-c-format
msgid "Buffering Form Data"
msgstr ""

#. Tag: para
#: chapter-components.xml:5505
#, no-c-format
msgid "Buffering means keeping the edited data in a buffer and writing it to the data source only when the <methodname>commit()</methodname> method is called for the component. If the user has made changes to a buffer, calling <methodname>discard()</methodname> restores the buffer from the data source. Buffering is actually a feature of all <classname>Field</classname> components and <classname>Form</classname> is a <classname>Field</classname>. <classname>Form</classname> manages the buffering of its contained fields so that if <methodname>commit()</methodname> or <methodname>discard()</methodname> is called for the <classname>Form</classname>, it calls the respective method for all of its managed fields."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:5518
#, no-c-format
msgid ""
"<?pocket-size 75% ?>final Form form = new Form();\n"
"...add components...\n"
"\n"
"// Enable buffering.\n"
"form.setWriteThrough(false);\n"
"\n"
"// The Ok button calls form.commit().\n"
"Button commit = new Button(\"Ok\", form, \"commit\");\n"
"\n"
"// The Restore button calls form.discard().\n"
"Button restore = new Button(\"Restore\", form, \"discard\");"
msgstr ""

#. Tag: para
#: chapter-components.xml:5520
#, no-c-format
msgid "The Form example in the Feature Browser of Vaadin demonstrates buffering in forms. The <emphasis>Widget caching demo</emphasis> in Additional demos demonstrates buffering in other <classname>Field</classname> components, its source code is available in <filename>BufferedComponents.java</filename>."
msgstr ""

#. Tag: classname
#: chapter-components.xml:5531
#, no-c-format
msgid "ProgressIndicator"
msgstr ""

#. Tag: para
#: chapter-components.xml:5533
#, no-c-format
msgid "The <classname>ProgressIndicator</classname> component allows displaying the progress of a task graphically. The progress is given as a floating-point value between 0.0 and 1.0."
msgstr ""

#. Tag: title
#: chapter-components.xml:5540
#, no-c-format
msgid "The Progress Indicator Component"
msgstr ""

#. Tag: para
#: chapter-components.xml:5548
#, no-c-format
msgid "The progress indicator polls the server for updates for its value. If the value has changed, the progress is updated. Notice that the user application does not have to handle any polling event, but updating the component is done automatically."
msgstr ""

#. Tag: para
#: chapter-components.xml:5555
#, no-c-format
msgid "Creating a progress indicator is just like with any other component. You can give the initial progress value as a parameter for the constructor. The default polling frequency is 1000 milliseconds (one second), but you can set some other interval with the <methodname>setPollingInterval()</methodname> method."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:5562
#, no-c-format
msgid ""
"<![CDATA[// Create the indicator\n"
"final ProgressIndicator indicator =\n"
"        new ProgressIndicator(new Float(0.0));\n"
"main.addComponent(indicator);\n"
"\n"
"// Set polling frequency to 0.5 seconds.\n"
"indicator.setPollingInterval(500);]]>"
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:5567
#, no-c-format
msgid ""
"<![CDATA[/* Base element. */\n"
".v-progressindicator {}\n"
"\n"
"/* Progress indication element on top of the base. */\n"
".v-progressindicator div {}]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:5569
#, no-c-format
msgid "The default style for the progress indicator uses an animated GIF image (<filename>img/base.gif</filename>) as the base background for the component. The progress is a <literal>&lt;div&gt;</literal> element inside the base. When the progress element grows, it covers more and more of the base background. By default, the graphic of the progress element is defined in <filename>img/progress.png</filename> under the default style directory. See <filename>com.vaadin.terminal.gwt/public/default/progressindicator/progressindicator.css</filename>."
msgstr ""

#. Tag: title
#: chapter-components.xml:5582
#, no-c-format
msgid "Doing Heavy Computation"
msgstr ""

#. Tag: para
#: chapter-components.xml:5584
#, no-c-format
msgid "The progress indicator is often used to display the progress of a heavy server-side computation task. In the following example, we create a thread in the server to do some \"heavy work\". All the thread needs to do is to set the value of the progress indicator with <methodname>setValue()</methodname> and the current progress is displayed automatically when the browser polls the server."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:5593
#, no-c-format
msgid ""
"<?pocket-size 65% ?><![CDATA[// Create an indicator that makes you look busy\n"
"final ProgressIndicator indicator =\n"
"        new ProgressIndicator(new Float(0.0));\n"
"main.addComponent(indicator);\n"
"\n"
"// Set polling frequency to 0.5 seconds.\n"
"indicator.setPollingInterval(500);\n"
"\n"
"// Add a button to start working\n"
"final Button button = new Button(\"Click to start\");\n"
"main.addComponent(button);\n"
"\n"
"// Another thread to do some work\n"
"class WorkThread extends Thread {\n"
"    public void run () {\n"
"        double current = 0.0;\n"
"        while (true) {\n"
"            // Do some \"heavy work\"\n"
"            try {\n"
"                sleep(50); // Sleep for 50 milliseconds\n"
"            } catch (InterruptedException) {}\n"
"            \n"
"            // Show that you have made some progress:\n"
"            // grow the progress value until it reaches 1.0.\n"
"            current += 0.01;\n"
"            if (current>1.0)\n"
"                indicator.setValue(new Float(1.0));\n"
"            else \n"
"                indicator.setValue(new Float(current));\n"
"            \n"
"            // After all the \"work\" has been done for a while,\n"
"            // take a break.\n"
"            if (current > 1.2) {\n"
"                // Restore the state to initial.\n"
"                indicator.setValue(new Float(0.0));\n"
"                button.setVisible(true);\n"
"                break;\n"
"            }\n"
"        }\n"
"    }\n"
"}\n"
"\n"
"// Clicking the button creates and runs a work thread\n"
"button.addListener(new Button.ClickListener() {\n"
"    public void buttonClick(ClickEvent event) {\n"
"        final WorkThread thread = new WorkThread();\n"
"        thread.start();\n"
"        \n"
"        // The button hides until the work is done.\n"
"        button.setVisible(false);\n"
"    }\n"
"});]]>"
msgstr ""

#. Tag: title
#: chapter-components.xml:5596
#, no-c-format
msgid "Starting Heavy Work"
msgstr ""

#. Tag: classname
#: chapter-components.xml:5607
#, no-c-format
msgid "Slider"
msgstr ""

#. Tag: para
#: chapter-components.xml:5609
#, no-c-format
msgid "The <classname>Slider</classname> is a vertical or horizontal bar that allows setting a numeric value within a defined range by dragging a bar handle with the mouse. The value is shown when dragging the handle."
msgstr ""

#. Tag: para
#: chapter-components.xml:5615
#, no-c-format
msgid "<classname>Slider</classname> has a number of different constructors that take a combination of the caption, <emphasis>minimum</emphasis> and <emphasis>maximum</emphasis> value, <emphasis>resolution</emphasis>, and the <emphasis>orientation</emphasis> of the slider."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:5622
#, no-c-format
msgid ""
"<?pocket-size 65% ?><![CDATA[// Create a vertical slider\n"
"final Slider vertslider = new Slider(1, 100);\n"
"vertslider.setOrientation(Slider.ORIENTATION_VERTICAL);]]>"
msgstr ""

#. Tag: title
#: chapter-components.xml:5625
#, no-c-format
msgid "Slider Properties"
msgstr ""

#. Tag: emphasis
#: chapter-components.xml:5627
#, no-c-format
msgid "<emphasis>min</emphasis>"
msgstr ""

#. Tag: para
#: chapter-components.xml:5629
#, no-c-format
msgid "Minimum value of the slider range. The default is 0.0."
msgstr ""

#. Tag: emphasis
#: chapter-components.xml:5635
#, no-c-format
msgid "<emphasis>max</emphasis>"
msgstr ""

#. Tag: para
#: chapter-components.xml:5637
#, no-c-format
msgid "Maximum value of the slider range. The default is 100.0."
msgstr ""

#. Tag: emphasis
#: chapter-components.xml:5643
#, no-c-format
msgid "resolution"
msgstr ""

#. Tag: para
#: chapter-components.xml:5645
#, no-c-format
msgid "The number of digits after the decimal point. The default is 0."
msgstr ""

#. Tag: emphasis
#: chapter-components.xml:5651
#, no-c-format
msgid "orientation"
msgstr ""

#. Tag: para
#: chapter-components.xml:5653
#, no-c-format
msgid "The orientation can be either horizontal (<parameter>Slider.ORIENTATION_HORIZONTAL</parameter>) or vertical (<parameter>Slider.ORIENTATION_VERTICAL</parameter>). The default is horizontal."
msgstr ""

#. Tag: para
#: chapter-components.xml:5663
#, no-c-format
msgid "As the <classname>Slider</classname> is a field component, you can handle value changes with a <classname>ValueChangeListener</classname>. The value of the <classname>Slider</classname> field is a <classname>Double</classname> object."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:5670
#, no-c-format
msgid ""
"<?pocket-size 65% ?><![CDATA[// Shows the value of the vertical slider\n"
"final Label vertvalue = new Label();\n"
"vertvalue.setSizeUndefined();\n"
"\n"
"// Handle changes in slider value.\n"
"vertslider.addListener(new Property.ValueChangeListener() {\n"
"    public void valueChange(ValueChangeEvent event) {\n"
"        double value = (Double) vertslider.getValue();\n"
"\n"
"        // Use the value\n"
"        box.setHeight((float) value, Sizeable.UNITS_PERCENTAGE);\n"
"        vertvalue.setValue(String.valueOf(value));\n"
"    }\n"
"});\n"
"\n"
"// The slider has to be immediate to send the changes\n"
"// immediately after the user drags the handle.\n"
"vertslider.setImmediate(true);]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:5672
#, no-c-format
msgid "You can set the value with the <methodname>setValue()</methodname> method defined in <classname>Slider</classname> that takes the value as a native double value. The setter can throw a <classname>ValueOutOfBoundsException</classname>, which you must handle."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:5679
#, no-c-format
msgid ""
"<?pocket-size 65% ?><![CDATA[// Set the initial value. This has to be set after the\n"
"// listener is added if we want the listener to handle\n"
"// also this value change.\n"
"try {\n"
"        vertslider.setValue(50.0);\n"
"} catch (ValueOutOfBoundsException e) {\n"
"}]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:5681
#, no-c-format
msgid "Alternatively, you can use the regular <methodname>setValue(Object)</methodname>, which does not do bounds checking."
msgstr ""

#. Tag: para
#: chapter-components.xml:5686
#, no-c-format
msgid "shows both vertical (from the code examples) and horizontal sliders that control the size of a box. The slider values are displayed also in separate labels."
msgstr ""

#. Tag: title
#: chapter-components.xml:5693
#, no-c-format
msgid "The <classname>Slider</classname> Component"
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:5707
#, no-c-format
msgid ""
"<![CDATA[.v-slider {}\n"
".v-slider-base {}\n"
".v-slider-handle {}]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:5709
#, no-c-format
msgid "The enclosing style for the <classname>Slider</classname> is <literal>v-slider</literal>. The slider bar has style <literal>v-slider-base</literal>. Even though the handle is higher (for horizontal slider) or wider (for vertical slider) than the bar, the handle element is nevertheless contained within the slider bar element. The appearance of the handle comes from a background image defined in the <emphasis>background</emphasis> CSS property."
msgstr ""

#. Tag: classname
#: chapter-components.xml:5722
#, no-c-format
msgid "LoginForm"
msgstr ""

#. Tag: para
#: chapter-components.xml:5724
#, no-c-format
msgid "The <classname>LoginForm</classname> component is a login form that allows a password manager in the web browser to remember and later automatically fill in the username and password. This commonly used functionality does not work with regular Vaadin components and is a common problem with Ajax applications."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:5732
#, no-c-format
msgid ""
"<?pocket-size 65% ?><![CDATA[// A wrapper with a caption for the login form\n"
"Panel loginPanel = new Panel(\"Login\");\n"
"loginPanel.setWidth(\"250px\");\n"
"        \n"
"LoginForm login = new LoginForm();\n"
"loginPanel.addComponent(login);]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:5734
#, no-c-format
msgid "The resulting form is shown in <xref linkend=\"figure.components.loginform.basic\"/>."
msgstr ""

#. Tag: title
#: chapter-components.xml:5739
#, no-c-format
msgid "The <classname>LoginForm</classname> Component"
msgstr ""

#. Tag: para
#: chapter-components.xml:5750
#, no-c-format
msgid "The <classname>LoginForm</classname> uses static HTML inside an <literal>iframe</literal> element to enable the functionality. The component provides a default implementation of the static HTML; if you want to change the layout, you need to reimplement the <methodname>getLoginHtml()</methodname> method."
msgstr ""

#. Tag: para
#: chapter-components.xml:5758
#, no-c-format
msgid "The login form has by default 100%x100% relative size, taking all the space given by the containing layout. You may set the size to fixed values, but not undefined in either direction, because the contained <literal>iframe</literal> element takes all of this size (it also has 100%x100% size). How the actual form uses this space depends on the static HTML. Giving too little space for the form results in scroll bars."
msgstr ""

#. Tag: title
#: chapter-components.xml:5768
#, no-c-format
msgid "Customizing <classname>LoginForm</classname>"
msgstr ""

#. Tag: para
#: chapter-components.xml:5770
#, no-c-format
msgid "Customization of the login form is necessary, for example, if you need to change the layout or internationalize the form. Customization is done by overriding the <methodname>getLoginHtml()</methodname> method, which returns the static HTML of the form. The customization layer is very \"unvaadin\"-like, and at best hack-ish, but dictated by the form management in browsers."
msgstr ""

#. Tag: para
#: chapter-components.xml:5779
#, no-c-format
msgid "Let us look at a custom login form that lets the user of the form to give the field captions:"
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:5784
#, no-c-format
msgid ""
"<?pocket-size 65% ?><![CDATA[class MyLoginForm extends LoginForm {\n"
"    String usernameCaption;\n"
"    String passwordCaption;\n"
"    String submitCaption;\n"
"    \n"
"    public MyLoginForm(String usernameCaption,\n"
"            String passwordCaption, String submitCaption) {\n"
"        this.usernameCaption = usernameCaption;\n"
"        this.passwordCaption = passwordCaption;\n"
"        this.submitCaption  = submitCaption;\n"
"    }]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:5786
#, no-c-format
msgid "Then we override the method that generates the static HTML for the form:"
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:5790
#, no-c-format
msgid ""
"<?pocket-size 65% ?><![CDATA[@Override\n"
"protected byte[] getLoginHTML() {\n"
"    // Application URI needed for submitting form\n"
"    String appUri = getApplication().getURL().toString()\n"
"            + getWindow().getName() + \"/\";\n"
"\n"
"    String x, h, b; // XML header, HTML head and body]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:5792
#, no-c-format
msgid "The XML header is needed for the validity of the XHTML page:"
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:5796
#, no-c-format
msgid ""
"<?pocket-size 65% ?><![CDATA[    x = \"<!DOCTYPE html PUBLIC \\\"-//W3C//DTD \"\n"
"      + \"XHTML 1.0 Transitional//EN\\\" \"\n"
"      + \"\\\"http://www.w3.org/TR/xhtml1/\"\n"
"      + \"DTD/xhtml1-transitional.dtd\\\">\\n\";]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:5798
#, no-c-format
msgid "Notice that it is important to have a newline (<literal>\\n</literal>) at the end of the XML header line."
msgstr ""

#. Tag: para
#: chapter-components.xml:5803
#, no-c-format
msgid "The HTML header part contains JavaScript definitions that handle submitting the form data. It also copies the style sheet references from the parent window."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:5809
#, no-c-format
msgid ""
"<?pocket-size 65% ?><![CDATA[    h = \"<head><script type='text/javascript'>\"\n"
"      + \"var setTarget = function() {\"\n"
"      + \"  var uri = '\" + appUri + \"loginHandler';\"\n"
"      + \"  var f = document.getElementById('loginf');\"\n"
"      + \"  document.forms[0].action = uri;\"\n"
"      + \"  document.forms[0].username.focus();\"\n"
"      + \"};\"\n"
"      + \"\"\n"
"      + \"var styles = window.parent.document.styleSheets;\"\n"
"      + \"for(var j = 0; j < styles.length; j++) {\\n\"\n"
"      + \"  if(styles[j].href) {\"\n"
"      + \"    var stylesheet = document.createElement('link');\\n\"\n"
"      + \"    stylesheet.setAttribute('rel', 'stylesheet');\\n\"\n"
"      + \"    stylesheet.setAttribute('type', 'text/css');\\n\"\n"
"      + \"    stylesheet.setAttribute('href', styles[j].href);\\n\"\n"
"      + \"    document.getElementsByTagName('head')[0]\"\n"
"      + \"                .appendChild(stylesheet);\\n\"\n"
"      + \"  }\"\n"
"      + \"}\\n\"\n"
"      + \"function submitOnEnter(e) {\"\n"
"      + \"  var keycode = e.keyCode || e.which;\"\n"
"      + \"  if (keycode == 13) {document.forms[0].submit();}\"\n"
"      + \"}\\n\"\n"
"      + \"</script>\"\n"
"      + \"</head>\";]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:5811
#, no-c-format
msgid "The HTML body element contains the actual form. Notice that it is contained within an inner <literal>iframe</literal>. The form and the button must have JavaScript calls to submit the form content."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:5817
#, no-c-format
msgid ""
"<?pocket-size 65% ?><![CDATA[    b = \"<body onload='setTarget();'\"\n"
"      + \"  style='margin:0;padding:0; background:transparent;'\"\n"
"      + \"  class='\"\n"
"      + ApplicationConnection.GENERATED_BODY_CLASSNAME + \"'>\"\n"
"      + \"<div class='v-app v-app-loginpage'\"\n"
"      + \"     style='background:transparent;'>\"\n"
"      + \"<iframe name='logintarget' style='width:0;height:0;\"\n"
"      + \"border:0;margin:0;padding:0;'></iframe>\"\n"
"      + \"<form id='loginf' target='logintarget'\"\n"
"      + \"      onkeypress='submitOnEnter(event)'\"\n"
"      + \"      method='post'>\"\n"
"      + \"<table>\"\n"
"      + \"<tr><td>\" + usernameCaption + \"</td>\"\n"
"      + \"<td><input class='v-textfield' style='display:block;'\"\n"
"      + \"           type='text' name='username'></td></tr>\"\n"
"      + \"<tr><td>\" + passwordCaption + \"</td>\"\n"
"      + \"    <td><input class='v-textfield'\"\n"
"      + \"          style='display:block;' type='password'\"\n"
"      + \"          name='password'></td></tr>\"\n"
"      + \"</table>\"\n"
"      + \"<div>\"\n"
"      + \"<div onclick='document.forms[0].submit();'\"\n"
"      + \"     tabindex='0' class='v-button' role='button'>\"\n"
"      + \"<span class='v-button-wrap'>\"\n"
"      + \"<span class='v-button-caption'>\"\n"
"      + submitCaption + \"</span>\"\n"
"      + \"</span></div></div></form></div></body>\";]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:5819
#, no-c-format
msgid "Then combine and return the page as a byte array."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:5823
#, no-c-format
msgid ""
"<?pocket-size 65% ?><![CDATA[    return (x + \"<html>\" + h + b + \"</html>\").getBytes();\n"
"}]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:5825
#, no-c-format
msgid "We can use the custom login form as follows:"
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:5829
#, no-c-format
msgid ""
"<?pocket-size 65% ?><![CDATA[MyLoginForm loginForm = new MyLoginForm(\"Name of the User\",\n"
"        \"A passing word\", \"Login Me Now\");]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:5831
#, no-c-format
msgid "The customized <classname>LoginForm</classname> is shown in <xref linkend=\"figure.components.loginform.customization\"/>."
msgstr ""

#. Tag: title
#: chapter-components.xml:5836
#, no-c-format
msgid "Customizing the <classname>LoginForm</classname>"
msgstr ""

#. Tag: title
#: chapter-components.xml:5849
#, no-c-format
msgid "Styling with CSS"
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:5851
#, no-c-format
msgid ""
"<?pocket-size 65% ?><![CDATA[.v-customcomponent {}\n"
".v-customcomponent .v-embedded {}\n"
".v-app-loginpage {}\n"
".v-app-loginpage .v-textfield {}\n"
".v-app-loginpage .v-button  {}]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:5853
#, no-c-format
msgid "The <classname>LoginForm</classname> component is a purely server-side component that extends <classname>CustomComponent</classname> and therefore has a <literal>v-customcomponent</literal> base style. If you wish to do any styling for the component, you should give it a custom style name to distinguish it from the regular <classname>CustomComponent</classname>."
msgstr ""

#. Tag: para
#: chapter-components.xml:5862
#, no-c-format
msgid "The component contains an <literal>iframe</literal> in an element with <literal>v-embedded</literal> style. The other styles are defined in the static HTML code returned by the <methodname>getLoginHTML()</methodname> method. The default implementation reuses the styles of the <classname>TextField</classname> and <classname>Button</classname> components for the input fields and the button, that is, <literal>v-textfield</literal> and <literal>v-button</literal>. The root element has the same <literal>v-app</literal> style as a regular Vaadin application would have, and an additional <literal>v-app-loginpage</literal> style."
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:5875
#, no-c-format
msgid ""
"<?pocket-size 65% ?><![CDATA[...\n"
"+ \"<div class='v-app v-app-loginpage'\n"
"        style=\\\"background:transparent;\\\">\"\n"
"...\n"
"+ \"<input class='v-textfield' ...\n"
"...\n"
"+ \"<div><input class='v-textfield' ...\n"
"...\n"
"<div ... class='v-button' role='button'>]]>"
msgstr ""

#. Tag: title
#: chapter-components.xml:5880
#, no-c-format
msgid "Component Composition with <classname>CustomComponent</classname>"
msgstr ""

#. Tag: para
#: chapter-components.xml:5884
#, no-c-format
msgid "The ease of making new user interface components is one of the core features of Vaadin. Typically, you simply combine existing built-in components to produce composite components. In many applications, such composite components make up the majority of the user interface."
msgstr ""

#. Tag: para
#: chapter-components.xml:5891
#, no-c-format
msgid "To create a composite component, you need to inherit the <classname>CustomComponent</classname> and call the <methodname>setCompositionRoot()</methodname> in the constructor to set the <emphasis>composition root</emphasis> component. The root component is typically a layout component that contains multiple components."
msgstr ""

#. Tag: para
#: chapter-components.xml:5899
#, no-c-format
msgid "For example:"
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:5903
#, no-c-format
msgid ""
"<?pocket-size 65% ?><![CDATA[class MyComposite extends CustomComponent {\n"
"    public MyComposite(String message) {\n"
"        // A layout structure used for composition\n"
"        Panel panel = new Panel(\"My Custom Component\");\n"
"        panel.setContent(new VerticalLayout());\n"
"        \n"
"        // Compose from multiple components\n"
"        Label label = new Label(message);\n"
"        label.setSizeUndefined(); // Shrink\n"
"        panel.addComponent(label);\n"
"        panel.addComponent(new Button(\"Ok\"));\n"
"\n"
"        // Set the size as undefined at all levels\n"
"        panel.getContent().setSizeUndefined();\n"
"        panel.setSizeUndefined();\n"
"        setSizeUndefined();\n"
"\n"
"        // The composition root MUST be set\n"
"        setCompositionRoot(panel);\n"
"    }\n"
"}]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:5905
#, no-c-format
msgid "Take note of the sizing when trying to make a customcomponent that shrinks to fit the contained components. You have to set the size as undefined at all levels; the sizing of the composite component and the composition root are separate."
msgstr ""

#. Tag: para
#: chapter-components.xml:5912
#, no-c-format
msgid "You can use the component as follows:"
msgstr ""

#. Tag: programlisting
#: chapter-components.xml:5916
#, no-c-format
msgid "<?pocket-size 65% ?><![CDATA[MyComposite mycomposite = new MyComposite(\"Hello\");]]>"
msgstr ""

#. Tag: para
#: chapter-components.xml:5918
#, no-c-format
msgid "The rendered component is shown in <xref linkend=\"figure.components.customcomponent\"/>."
msgstr ""

#. Tag: title
#: chapter-components.xml:5924
#, no-c-format
msgid "A Custom Composite Component"
msgstr ""

#. Tag: para
#: chapter-components.xml:5932
#, no-c-format
msgid "You can also inherit any other components, such as layouts, to attain similar composition. <indexterm><primary>Google Web Toolkit</primary></indexterm> Even further, you can create entirely new low-level components, by integrating custom Google Web Toolkit components or by extending the client-side functionality of built-in components. Development of custom GWT components is covered in <xref linkend=\"gwt\"/>."
msgstr ""
