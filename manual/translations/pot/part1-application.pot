# SOME DESCRIPTIVE TITLE.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"Report-Msgid-Bugs-To: http://bugs.kde.org\n"
"POT-Creation-Date: 2011-11-03 16:11+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <kde-i18n-doc@kde.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. Tag: title
#: part1-application.xml:4
#, no-c-format
msgid "Writing a Web Application"
msgstr ""

#. Tag: para
#: part1-application.xml:8
#, no-c-format
msgid "This chapter provides the fundamentals of web application development with Vaadin, concentrating on the basic elements of an application from a practical point-of-view."
msgstr ""

#. Tag: para
#: part1-application.xml:14
#, no-c-format
msgid "If you are a newcomer to AJAX development, you may benefit from <xref linkend=\"advanced.application.pages\"/>. It explains the role of pages in AJAX web applications, and provides some basic design patterns for applications."
msgstr ""

#. Tag: title
#: part1-application.xml:21
#, no-c-format
msgid "Overview"
msgstr ""

#. Tag: para
#: part1-application.xml:23
#, no-c-format
msgid "An application made with Vaadin runs as a Java Servlet in a Servlet container. The entry-point is the application class, which needs to create and manage all necessary user interface components, including windows. User interaction is handled with event listeners, simplified by binding user interface components directly to data. Visual appearance is defined in themes as CSS files. Icons, other images, and downloadable files are handled as <emphasis>resources</emphasis>, which can be external or served by the application server or the application itself."
msgstr ""

#. Tag: title
#: part1-application.xml:35
#, no-c-format
msgid "Application Architecture"
msgstr ""

#. Tag: para
#: part1-application.xml:46
#, no-c-format
msgid "above gives the basic architecture of an application made with the Vaadin framework, with all the major elements, which are introduced below and discussed in detail in this chapter."
msgstr ""

#. Tag: para
#: part1-application.xml:53
#, no-c-format
msgid "First of all, an application that uses Vaadin must define an application class that inherits the abstract <classname>com.vaadin.Application</classname> class. The application class must implement the <methodname>init()</methodname> method."
msgstr ""

#. Tag: programlisting
#: part1-application.xml:60
#, no-c-format
msgid ""
      "<![CDATA[public class MyApp extends com.vaadin.Application {\n"
      "\n"
      "    public void init() { \n"
      "        ... initialization code goes here ...\n"
      "    }\n"
      "}]]>"
msgstr ""

#. Tag: para
#: part1-application.xml:62
#, no-c-format
msgid "Besides acting as the entry-point in the servlet, the <classname>Application</classname> class provides facilities for window access, execution control, and theme selection. The application API may seem similar to Java Servlet API, but that is only superficial. Vaadin framework associates requests with sessions so that an application class instance is really a session object. Because of this, you can develop web applications much like you would develop desktop applications."
msgstr ""

#. Tag: title
#: part1-application.xml:73
#, no-c-format
msgid "Restarting Application Session"
msgstr ""

#. Tag: para
#: part1-application.xml:75
#, no-c-format
msgid "When you open the URL for the application, it creates a new user session. The session is preserved even if you reload the page. However, if you use Eclipse, it likes to do hot deployment to Tomcat and you may experience a problem that the application does not return to its initial state after you modify code. As Tomcat likes to persist sessions on server shutdown, the application state can remain even if you restart the server."
msgstr ""

#. Tag: para
#: part1-application.xml:84
#, no-c-format
msgid "Adding the <uri>?restartApplication</uri> parameter in the URL tells the Vaadin servlet to create a new <classname>Application</classname> instance on loading the page. If you also include a URI fragment, the parameter should be given before the fragment."
msgstr ""

#. Tag: para
#: part1-application.xml:92
#, no-c-format
msgid "The most important thing in the initialization is the creation of the main window (see below), which any application has. This, and the deployment of the application as a Java Servlet in the Servlet container, as described in <xref linkend=\"application.environment\"/>, are the minimal requirements for an application."
msgstr ""

#. Tag: para
#: part1-application.xml:100
#, no-c-format
msgid "Below is a short overview of the basic elements of an application:"
msgstr ""

#. Tag: term
#: part1-application.xml:106
#, no-c-format
msgid "Windows"
msgstr ""

#. Tag: para
#: part1-application.xml:108
#, no-c-format
msgid "An application always has a <emphasis>main window</emphasis>, as described in <xref linkend=\"application.main-window\"/>. An application can actually have a number of such application-level windows, all bound to the same application session, as described in <xref linkend=\"application.windows\"/>. Application-level windows can contain non-native sub-windows, which are essentially floating layout components handled inside the browser."
msgstr ""

#. Tag: term
#: part1-application.xml:121
#, no-c-format
msgid "User Interface Components"
msgstr ""

#. Tag: para
#: part1-application.xml:123
#, no-c-format
msgid "The user interface consists of UI components that are created and laid out by the application. User interaction with the components causes events (see below) related to the component, which the application must handle. Most components are bound to some data using the Data Model (see below). You can make your own UI components through either inheritance or composition. For a thorough reference of UI components, see <xref linkend=\"components\"/>, for layout components, see <xref linkend=\"layout\"/>, and for composing components, see <xref linkend=\"components.customcomponent\"/>."
msgstr ""

#. Tag: term
#: part1-application.xml:139
#, no-c-format
msgid "Events and Listeners"
msgstr ""

#. Tag: para
#: part1-application.xml:141
#, no-c-format
msgid "Events, and listeners that handle events, are the basis of handling user interaction in an application. <xref linkend=\"architecture.events\"/> gave an introduction to events and listeners from an architectural point-of-view, while <xref linkend=\"application.events\"/> later in this chapter takes a more practical view."
msgstr ""

#. Tag: term
#: part1-application.xml:153
#, no-c-format
msgid "Resources"
msgstr ""

#. Tag: para
#: part1-application.xml:155
#, no-c-format
msgid "A user interface can display images or have links to web pages or downloadable documents. These are <emphasis>resources</emphasis>, which can be external or provided by the web server or the application itself. <xref linkend=\"application.resources\"/> gives a practical overview of the different types of resources."
msgstr ""

#. Tag: term
#: part1-application.xml:166
#, no-c-format
msgid "Themes"
msgstr ""

#. Tag: para
#: part1-application.xml:168
#, no-c-format
msgid "The presentation and logic of the user interface are separated. While the UI logic is handled as Java code, the presentation is defined in <emphasis>themes</emphasis> as CSS. Vaadin provides a default theme. User-defined themes can, in addition to style sheets, include HTML templates that define custom layouts and other theme resources, such as images. Themes are discussed in detail in <xref linkend=\"themes\"/>, custom layouts in <xref linkend=\"layout.customlayout\"/>, and theme resources in <xref linkend=\"application.resources.theme\"/>."
msgstr ""

#. Tag: term
#: part1-application.xml:183
#, no-c-format
msgid "Data Binding"
msgstr ""

#. Tag: para
#: part1-application.xml:185
#, no-c-format
msgid "Field components are essentially views to data, represented in a <emphasis>data model</emphasis>. Using the data model, the components can update the application data directly, without the need for any control code. A field component model is always bound to a <emphasis>property</emphasis>, an <emphasis>item</emphasis>, or a <emphasis>container</emphasis>, depending on the field type. While all the components have a default data model, they can be bound to a user-defined data source. For example, you can bind a table component to an SQL query response. For a complete overview of data binding in Vaadin, please refer to <xref linkend=\"datamodel\"/>."
msgstr ""

#. Tag: title
#: part1-application.xml:204
#, no-c-format
msgid "Managing the Main Window"
msgstr ""

#. Tag: para
#: part1-application.xml:206
#, no-c-format
msgid "As explained in <xref linkend=\"advanced.application.pages\"/>, an AJAX web application usually runs in a single \"web page\" in a browser window. The page is generally not reloaded after it is opened initially, but it communicates user interaction with the server through AJAX communications. A window in an AJAX application is therefore more like a window in a desktop application and less like a web page."
msgstr ""

#. Tag: para
#: part1-application.xml:215
#, no-c-format
msgid "A <classname>Window</classname> is the top-level container of a user interface displayed in a browser window. As an AJAX application typically runs on a single \"page\" (URL), there is usually just one window -- the main window. The main window can be accessed using the URL of the application. You set the main window with the <methodname>setMainWindow()</methodname> method of the <classname>Application</classname> class."
msgstr ""

#. Tag: programlisting
#: part1-application.xml:224
#, no-c-format
msgid ""
      "<?pocket-size 75% ?>import com.vaadin.ui.*;\n"
      "\n"
      "public class HelloWorld extends com.vaadin.Application {\n"
      "    public void init() { \n"
      "        Window main = new Window(\"The Main Window\"); \n"
      "        setMainWindow(main);\n"
      "\n"
      "        <emphasis>... fill the main window with components ...</emphasis>\n"
      "    }\n"
      "}"
msgstr ""

#. Tag: para
#: part1-application.xml:226
#, no-c-format
msgid "You can add components to the main window, or to any other window, with the <classname>addComponent()</classname> method, which actually adds the given component to the root layout component bound to the window. If you wish to use other than the default root layout, you can set it with <methodname>setContent()</methodname>, as explained in <xref linkend=\"layout.root-layout\"/>."
msgstr ""

#. Tag: para
#: part1-application.xml:235
#, no-c-format
msgid "Vaadin has two basic kinds of windows: <emphasis>application-level windows</emphasis>, such as the main window, and <emphasis>sub-windows</emphasis> inside the application-level windows. The sub-windows are explained in the next section, while application-level windows are covered in <xref linkend=\"application.windows\"/>."
msgstr ""

#. Tag: title
#: part1-application.xml:245
#, no-c-format
msgid "Sub-Windows"
msgstr ""

#. Tag: para
#: part1-application.xml:247
#, no-c-format
msgid "An application-level window can have a number of floating child or sub-windows. They are managed by the client-side JavaScript runtime of Vaadin using HTML features. Vaadin allows opening and closing sub-windows, refreshing one window from another, resizing windows, and scrolling the window content. Sub-windows are typically used for <firstterm>Dialog Windows</firstterm> and <firstterm>Multiple Document Interface</firstterm> applications. Sub-windows are by default not modal; you can set them modal as described in <xref linkend=\"application.child-windows.modal\"/>."
msgstr ""

#. Tag: para
#: part1-application.xml:258
#, no-c-format
msgid "As with all user interface components, the appearance of a window and its contents is defined with themes."
msgstr ""

#. Tag: para
#: part1-application.xml:263
#, no-c-format
msgid "User control of a sub-window is limited to moving, resizing, and closing the window. Maximizing or minimizing are not yet supported."
msgstr ""

#. Tag: title
#: part1-application.xml:269
#, no-c-format
msgid "Opening and Closing a Sub-Window"
msgstr ""

#. Tag: para
#: part1-application.xml:271
#, no-c-format
msgid "You can open a new window by creating a new <classname>Window</classname> object and adding it to the main window with <methodname>addWindow()</methodname> method of the <classname>Application</classname> class."
msgstr ""

#. Tag: programlisting
#: part1-application.xml:278
#, no-c-format
msgid ""
      "<![CDATA[mywindow = new Window(\"My Window\");\n"
      "mainwindow.addWindow(mywindow);]]>"
msgstr ""

#. Tag: para
#: part1-application.xml:280
#, no-c-format
msgid "You close the window in a similar fashion, by calling the <methodname>removeWindow()</methodname> of the <classname>Application</classname> class:"
msgstr ""

#. Tag: programlisting
#: part1-application.xml:286
#, no-c-format
msgid "<![CDATA[myapplication.removeWindow (mywindow);]]>"
msgstr ""

#. Tag: para
#: part1-application.xml:288
#, no-c-format
msgid "The user can, by default, close a sub-window by clicking the close button in the upper-right corner of the window. You can disable the button by setting the window as <emphasis>read-only</emphasis> with <methodname>setReadOnly(true)</methodname>. Notice that you could disable the button also by making it invisible in CSS with a \"<parameter>display: none</parameter>\" formatting. The problem with such a cosmetic disabling is that a malicious user might re-enable the button and close the window, which might cause problems and possibly be a security hole. Setting the window as read-only not only disables the close button on the client side, but also prevents processing the close event on the server side."
msgstr ""

#. Tag: para
#: part1-application.xml:301
#, no-c-format
msgid "The following example demonstrates the use of a sub-window in an application. The example manages the window using a custom component that contains a button for opening and closing the window."
msgstr ""

#. Tag: programlisting
#: part1-application.xml:307
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[/** Component contains a button that allows opening a window. */\n"
      "public class WindowOpener extends CustomComponent\n"
      "                          implements Window.CloseListener {\n"
      "    Window mainwindow;  // Reference to main window\n"
      "    Window mywindow;    // The window to be opened\n"
      "    Button openbutton;  // Button for opening the window\n"
      "    Button closebutton; // A button in the window\n"
      "    Label  explanation; // A descriptive text\n"
      "\n"
      "    public WindowOpener(String label, Window main) {\n"
      "        mainwindow = main;\n"
      "\n"
      "        // The component contains a button that opens the window.\n"
      "        final VerticalLayout layout = new VerticalLayout();\n"
      "        \n"
      "        openbutton = new Button(\"Open Window\", this,\n"
      "                                \"openButtonClick\");\n"
      "        explanation = new Label(\"Explanation\");\n"
      "        layout.addComponent(openbutton);\n"
      "        layout.addComponent(explanation);\n"
      "        \n"
      "        setCompositionRoot(layout);\n"
      "    }\n"
      "\n"
      "    /** Handle the clicks for the two buttons. */\n"
      "    public void openButtonClick(Button.ClickEvent event) {\n"
      "        /* Create a new window. */\n"
      "        mywindow = new Window(\"My Dialog\");\n"
      "        mywindow.setPositionX(200);\n"
      "        mywindow.setPositionY(100);\n"
      "\n"
      "        /* Add the window inside the main window. */\n"
      "        mainwindow.addWindow(mywindow);\n"
      "\n"
      "        /* Listen for close events for the window. */\n"
      "        mywindow.addListener(this);\n"
      "\n"
      "        /* Add components in the window. */\n"
      "        mywindow.addComponent(\n"
      "                new Label(\"A text label in the window.\"));\n"
      "        closebutton = new Button(\"Close\", this, \"closeButtonClick\");\n"
      "        mywindow.addComponent(closebutton);\n"
      "\n"
      "        /* Allow opening only one window at a time. */\n"
      "        openbutton.setEnabled(false);\n"
      "\n"
      "        explanation.setValue(\"Window opened\");\n"
      "    }\n"
      "\n"
      "    /** Handle Close button click and close the window. */\n"
      "    public void closeButtonClick(Button.ClickEvent event) {\n"
      "        /* Windows are managed by the application object. */\n"
      "        mainwindow.removeWindow(mywindow);\n"
      "\n"
      "        /* Return to initial state. */\n"
      "        openbutton.setEnabled(true);\n"
      "\n"
      "        explanation.setValue(\"Closed with button\");\n"
      "    }\n"
      "\n"
      "    /** In case the window is closed otherwise. */\n"
      "    public void windowClose(CloseEvent e) {\n"
      "        /* Return to initial state. */\n"
      "        openbutton.setEnabled(true);\n"
      "\n"
      "        explanation.setValue(\"Closed with window controls\");\n"
      "    }\n"
      "}]]>"
msgstr ""

#. Tag: para
#: part1-application.xml:309
#, no-c-format
msgid "The example implements a custom component that inherits the <classname>CustomComponent</classname> class. It consists of a <classname>Button</classname> that it uses to open a window and a <classname>Label</classname> to describe the state of the window. When the window is open, the button is disabled. When the window is closed, the button is enabled again."
msgstr ""

#. Tag: para
#: part1-application.xml:320
#, no-c-format
msgid "You can use the above custom component in the application class with:"
msgstr ""

#. Tag: programlisting
#: part1-application.xml:324
#, no-c-format
msgid ""
      "<?pocket-size 75% ?> public void init() { \n"
      "    Window main = new Window(\"The Main Window\"); \n"
      "    setMainWindow(main);\n"
      "\n"
      "    main.addComponent(new WindowOpener(\"Window Opener\", main));\n"
      "}"
msgstr ""

#. Tag: para
#: part1-application.xml:326
#, no-c-format
msgid "When added to an application, the screen will look as illustrated in the following screenshot:"
msgstr ""

#. Tag: title
#: part1-application.xml:332
#, no-c-format
msgid "Opening a Sub-Window"
msgstr ""

#. Tag: title
#: part1-application.xml:346
#, no-c-format
msgid "Window Positioning"
msgstr ""

#. Tag: para
#: part1-application.xml:348
#, no-c-format
msgid "When created, a window will have a default size and position. You can specify the size of a window with <methodname>setHeight()</methodname> and <methodname>setWidth()</methodname> methods. You can set the position of the window with <methodname>setPositionX()</methodname> and <methodname>setPositionY()</methodname> methods."
msgstr ""

#. Tag: programlisting
#: part1-application.xml:357
#, no-c-format
msgid ""
      "<![CDATA[/* Create a new window. */\n"
      "mywindow = new Window(\"My Dialog\");\n"
      "\n"
      "/* Set window size. */\n"
      "mywindow.setHeight(\"200px\");\n"
      "mywindow.setWidth(\"400px\");\n"
      "\n"
      "/* Set window position. */\n"
      "mywindow.setPositionX(200);\n"
      "mywindow.setPositionY(50);]]>"
msgstr ""

#. Tag: para
#: part1-application.xml:359
#, no-c-format
msgid "Notice that the size of the main window is unknown and the <methodname>getHeight</methodname> and <methodname>getWidth</methodname> methods will return <returnvalue>-1</returnvalue>."
msgstr ""

#. Tag: title
#: part1-application.xml:369
#, no-c-format
msgid "Scrolling Sub-Window Content"
msgstr ""

#. Tag: primary
#: part1-application.xml:372
#, no-c-format
msgid "scroll bars"
msgstr ""

#. Tag: para
#: part1-application.xml:375
#, no-c-format
msgid "If a sub-window has a fixed or percentual size and its content becomes too big to fit in the content area, a scroll bar will appear for the particular direction. On the other hand, if the sub-window has undefined size in the direction, it will fit the size of the content and never get a scroll bar. Scroll bars in sub-windows are handled with regular HTML features, namely <literal>overflow: auto</literal> property in CSS."
msgstr ""

#. Tag: primary
#: part1-application.xml:382
#, no-c-format
msgid "overflow"
msgstr ""

#. Tag: interfacename
#: part1-application.xml:387
#, no-c-format
msgid "Scrollable"
msgstr ""

#. Tag: para
#: part1-application.xml:387
#, no-c-format
msgid "As <classname>Window</classname> extends <classname>Panel</classname>, windows are also <interfacename>Scrollable</interfacename>. Note that the interface defines <emphasis>programmatic scrolling</emphasis>, not scrolling by the user. Please see <xref linkend=\"layout.components.panel\"/>."
msgstr ""

#. Tag: title
#: part1-application.xml:465
#, no-c-format
msgid "Modal Windows"
msgstr ""

#. Tag: para
#: part1-application.xml:467
#, no-c-format
msgid "A modal window is a child window that has to be closed by the user before the use of the parent window can continue. Dialog windows are typically modal. The advantage of modal windows is the simplification of user interaction, which may contribute to the clarity of the user interface. Modal windows are also easy to use from a development perspective, because as user interaction is isolated to them, changes in application state are more limited while the modal window is open. The disadvantage of modal windows is that they can restrict workflow too much."
msgstr ""

#. Tag: title
#: part1-application.xml:480
#, no-c-format
msgid "Screenshot of the Modal Window Demo Application"
msgstr ""

#. Tag: para
#: part1-application.xml:491
#, no-c-format
msgid "Depending on theme settings, the parent window may be grayed while the modal window is open."
msgstr ""

#. Tag: para
#: part1-application.xml:496
#, no-c-format
msgid "The demo application of Vaadin includes an example of using modal windows. <xref linkend=\"figure.window.modal\"/> above is from the demo application. The example includes the source code."
msgstr ""

#. Tag: title
#: part1-application.xml:504
#, no-c-format
msgid "Security Warning"
msgstr ""

#. Tag: para
#: part1-application.xml:505
#, no-c-format
msgid "Modality of child windows is purely a client-side feature and can be circumvented with client-side attack code. You should not trust in the modality of child windows in security-critical situations such as login windows."
msgstr ""

#. Tag: title
#: part1-application.xml:516
#, no-c-format
msgid "Handling Events with Listeners"
msgstr ""

#. Tag: para
#: part1-application.xml:518
#, no-c-format
msgid "Let us put into practice what we learned of event handling in <xref linkend=\"architecture.events\"/>. You can handle events in three basic ways, as shown below."
msgstr ""

#. Tag: para
#: part1-application.xml:524
#, no-c-format
msgid "The following example follows a typical pattern where you have a <classname>Button</classname> component and a listener that handles user interaction (clicks) communicated to the application as events. Here we define a class that listens click events."
msgstr ""

#. Tag: programlisting
#: part1-application.xml:531
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[public class TheButton implements Button.ClickListener {\n"
      "    Button thebutton;\n"
      "\n"
      "    /** Creates button into given container. */\n"
      "    public TheButton(AbstractComponentContainer container) {\n"
      "        thebutton = new Button (\"Do not push this button\");\n"
      "        thebutton.addListener(this);\n"
      "        container.addComponent(thebutton);\n"
      "    }\n"
      "    \n"
      "    /** Handle button click events from the button. */\n"
      "    public void buttonClick (Button.ClickEvent event) {\n"
      "        thebutton.setCaption (\"Do not push this button again\");\n"
      "    }\n"
      "}]]>"
msgstr ""

#. Tag: para
#: part1-application.xml:533
#, no-c-format
msgid "As an application often receives events for several components of the same class, such as multiple buttons, it has to be able to distinguish between the individual components. There are several techniques to do this, but probably the easiest is to use the property of the received event, which is set to the object sending the event. This requires keeping at hand a reference to every object that emits events."
msgstr ""

#. Tag: programlisting
#: part1-application.xml:543
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[public class TheButtons implements Button.ClickListener {\n"
      "    Button thebutton;\n"
      "    Button secondbutton;\n"
      "\n"
      "    /** Creates two buttons in given container. */\n"
      "    public TheButtons(AbstractComponentContainer container) {\n"
      "        thebutton = new Button (\"Do not push this button\");\n"
      "        thebutton.addListener(this);\n"
      "        container.addComponent(thebutton);\n"
      "        \n"
      "        secondbutton = new Button (\"I am a button too\");\n"
      "        secondbutton.addListener(this);\n"
      "        container.addComponent (secondbutton);\n"
      "    }\n"
      "    \n"
      "    /** Handle button click events from the two buttons. */\n"
      "    public void buttonClick (Button.ClickEvent event) {\n"
      "        if (event.getButton() == thebutton)\n"
      "            thebutton.setCaption(\"Do not push this button again\");\n"
      "        else if (event.getButton() == secondbutton)\n"
      "            secondbutton.setCaption(\"I am not a number\");\n"
      "    }\n"
      "}]]>"
msgstr ""

#. Tag: para
#: part1-application.xml:545
#, no-c-format
msgid "Another solution to handling multiple events of the same class involves attaching an event source to a listener method instead of the class. An event can be attached to a method using another version of the <methodname>addListener()</methodname> method, which takes the event handler method as a parameter. The method can be passed either by the name of the method or as a <classname>Method</classname> object. In the example below, we use the name of the method, as a string (which is not checked at compile time)."
msgstr ""

#. Tag: programlisting
#: part1-application.xml:556
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[public class TheButtons2 {\n"
      "    Button thebutton;\n"
      "    Button secondbutton;\n"
      "\n"
      "    /** Creates two buttons in given container. */\n"
      "    public TheButtons2(AbstractComponentContainer container) {\n"
      "        thebutton = new Button (\"Do not push this button\");\n"
      "        thebutton.addListener(Button.ClickEvent.class, this,\n"
      "                              \"theButtonClick\");\n"
      "        container.addComponent(thebutton);\n"
      "        \n"
      "        secondbutton = new Button (\"I am a button too\");\n"
      "        secondbutton.addListener(Button.ClickEvent.class, this,\n"
      "                                 \"secondButtonClick\");\n"
      "        container.addComponent (secondbutton);\n"
      "    }\n"
      "    \n"
      "    public void theButtonClick (Button.ClickEvent event) {\n"
      "        thebutton.setCaption (\"Do not push this button again\");\n"
      "    }\n"
      "\n"
      "    public void secondButtonClick (Button.ClickEvent event) {\n"
      "        secondbutton.setCaption (\"I am not a number!\");\n"
      "    }\n"
      "}]]>"
msgstr ""

#. Tag: para
#: part1-application.xml:558
#, no-c-format
msgid "Adding a listener method with <methodname>addListener()</methodname> is really just a wrapper that creates a <classname>com.vaadin.event.ListenerMethod</classname> listener object, which is an adapter from a listener class to a method. It implements the <classname>java.util.EventListener</classname> interface and can therefore work for any event source using the interface. Notice that not all listener classes necessarily inherit the <classname>EventListener</classname> interface."
msgstr ""

#. Tag: para
#: part1-application.xml:570
#, no-c-format
msgid "The third way, which uses anonymous local class definitions, is often the easiest as it does not require cumbering the managing class with new interfaces or methods. The following example defines an anonymous class that inherits the <classname>Button.ClickListener</classname> interface and implements the <methodname>buttonClick()</methodname> method."
msgstr ""

#. Tag: programlisting
#: part1-application.xml:578
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[public class TheButtons3 {\n"
      "    Button thebutton;\n"
      "    Button secondbutton;\n"
      "\n"
      "    /** Creates two buttons in given container. */\n"
      "    public TheButtons3(AbstractComponentContainer container) {\n"
      "        thebutton = new Button (\"Do not push this button\");\n"
      "\n"
      "        /* Define a listener in an anonymous class. */\n"
      "        thebutton.addListener(new Button.ClickListener() {\n"
      "            /* Handle the click. */\n"
      "            public void buttonClick(ClickEvent event) {\n"
      "                thebutton.setCaption (\n"
      "                        \"Do not push this button again\");\n"
      "            }\n"
      "        });\n"
      "        container.addComponent(thebutton);\n"
      "        \n"
      "        secondbutton = new Button (\"I am a button too\");\n"
      "        secondbutton.addListener(new Button.ClickListener() {\n"
      "            public void buttonClick(ClickEvent event) {\n"
      "                secondbutton.setCaption (\"I am not a number!\");            \n"
      "            }\n"
      "        });\n"
      "        container.addComponent (secondbutton);\n"
      "    }\n"
      "}]]>"
msgstr ""

#. Tag: para
#: part1-application.xml:580
#, no-c-format
msgid "Other techniques for separating between different sources also exist. They include using object properties, names, or captions to separate between them. Using captions or any other visible text is generally discouraged, as it may create problems for internationalization. Using other symbolic strings can also be dangerous, because the syntax of such strings is checked only runtime."
msgstr ""

#. Tag: para
#: part1-application.xml:590
#, no-c-format
msgid "Events are usually emitted by the framework, but applications may need to emit them too in some situations, such as when updating some part of the UI is required. Events can be emitted using the <methodname>fireEvent(Component.Event)</methodname> method of <classname>AbstractComponent</classname>. The event is then relayed to all the listeners of the particular event class for the object. Some components have a default event type, for example, a <classname>Button</classname> has a nested <classname>Button.ClickEvent</classname> class and a corresponding <classname>Button.ClickListener</classname> interface. These events can be triggered with <methodname>fireComponentEvent()</methodname>."
msgstr ""

#. Tag: title
#: part1-application.xml:606
#, no-c-format
msgid "Referencing Resources"
msgstr ""

#. Tag: para
#: part1-application.xml:608
#, no-c-format
msgid "Web applications work over the web and have various resources, such as images or downloadable files, that the web browser has to get from the server. These resources are typically used in <classname>Embedded</classname> (images) or <classname>Link</classname> (downloadable files) user interface components. Various components, such as <classname>TabSheet</classname>, can also include icons, which are also handled as resources."
msgstr ""

#. Tag: para
#: part1-application.xml:619
#, no-c-format
msgid "A web server can handle many of such requests for static resources without having to ask them from the application, or the <classname>Application</classname> object can provide them. For dynamic resources, the user application must be able to create them dynamically. Vaadin provides resource request interfaces for applications so that they can return various kinds of resources, such as files or dynamically created resources. These include the <classname>StreamResource</classname> class and URI and parameter handlers described in <xref linkend=\"section.application.resources.uri\"/> and <xref linkend=\"section.application.resources.parameters\"/>, respectively."
msgstr ""

#. Tag: para
#: part1-application.xml:632
#, no-c-format
msgid "Vaadin provides also low-level facilities for retrieving the URI and other parameters of a HTTP request. We will first look into how applications can provide various kinds of resources and then look into low-level interfaces for handling URIs and parameters to provide resources and functionalities."
msgstr ""

#. Tag: para
#: part1-application.xml:640
#, no-c-format
msgid "Notice that using URI or parameter handlers to create \"pages\" is not meaningful in Vaadin or in AJAX applications generally. Please see <xref linkend=\"advanced.application.pages\"/> for a detailed explanation."
msgstr ""

#. Tag: title
#: part1-application.xml:648
#, no-c-format
msgid "Resource Interfaces and Classes"
msgstr ""

#. Tag: para
#: part1-application.xml:650
#, no-c-format
msgid "Vaadin has two interfaces for resources: a generic <classname>Resource</classname> interface and a more specific <classname>ApplicationResource</classname> interface for resources provided by the application."
msgstr ""

#. Tag: title
#: part1-application.xml:658
#, no-c-format
msgid "Resource Interface and Class Diagram"
msgstr ""

#. Tag: para
#: part1-application.xml:669
#, no-c-format
msgid "<classname>ApplicationResource</classname> resources are managed by the <classname>Application</classname> class. When you create such a resource, you give the application object to the constructor. The constructor registers the resource in the application using the <classname>addResource</classname> method."
msgstr ""

#. Tag: para
#: part1-application.xml:678
#, no-c-format
msgid "<classname>Application</classname> manages requests for the resources and allows accessing resources using a URI. The URI consists of the base name of the application and a relative name of the resource. The relative name is <literal>\"APP/\"+resourceid+\"/\"+filename</literal>, for example <literal>\"APP/1/myimage.png\"</literal>. The <varname>resourceid</varname> is a generated numeric identifier to make resources unique, and <varname>filename</varname> is the file name of the resource given in the constructor of its class. However, the application using a resource does not usually need to consider its URI. It only needs to give the resource to an appropriate <classname>Embedded</classname> or <classname>Link</classname> or some other user interface component, which manages the rendering of the URI."
msgstr ""

#. Tag: title
#: part1-application.xml:700
#, no-c-format
msgid "File Resources"
msgstr ""

#. Tag: para
#: part1-application.xml:702
#, no-c-format
msgid "File resources are files stored anywhere in the file system. The use of file resources generally falls into two main categories: downloadable files and embedded images."
msgstr ""

#. Tag: para
#: part1-application.xml:708
#, no-c-format
msgid "A file object that can be accessed as a file resource is defined with the standard <classname>java.io.File</classname> class. You can create the file either with an absolute or relative path, but the base path of the relative path depends on the installation of the web server. For example, in Apache Tomcat, the default current directory is the installation path of Tomcat."
msgstr ""

#. Tag: title
#: part1-application.xml:721
#, no-c-format
msgid "Class Loader Resources"
msgstr ""

#. Tag: para
#: part1-application.xml:723
#, no-c-format
msgid "The <classname>ClassResource</classname> allows resources to be loaded from the deployed package of the application using Java Class Loader. The one-line example below loads an image resource from the application package and displays it in an <classname>Embedded</classname> component."
msgstr ""

#. Tag: programlisting
#: part1-application.xml:732
#, no-c-format
msgid ""
      "<?pocket-size 80% ?><![CDATA[mainwindow.addComponent(new Embedded (\"\",\n"
      "        new ClassResource(\"smiley.jpg\",\n"
      "                  mainwindow.getApplication())));]]>"
msgstr ""

#. Tag: title
#: part1-application.xml:736
#, no-c-format
msgid "Theme Resources"
msgstr ""

#. Tag: para
#: part1-application.xml:739
#, no-c-format
msgid "Theme resources are files included in a theme, typically images. See <xref linkend=\"themes\"/> for more information on themes."
msgstr ""

#. Tag: title
#: part1-application.xml:746
#, no-c-format
msgid "Stream Resources"
msgstr ""

#. Tag: para
#: part1-application.xml:748
#, no-c-format
msgid "Stream resources are application resources that allow creating dynamic resource content. Charts are typical examples of dynamic images. To define a stream resource, you need to implement the <classname>StreamResource.StreamSource</classname> interface and its <methodname>getStream</methodname> method. The method needs to return an <classname>InputStream</classname> from which the stream can be read."
msgstr ""

#. Tag: para
#: part1-application.xml:758
#, no-c-format
msgid "The following example demonstrates the creation of a simple image in PNG image format."
msgstr ""

#. Tag: programlisting
#: part1-application.xml:763
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[import java.awt.image.*;\n"
      "\n"
      "public class MyImageSource\n"
      "             implements StreamResource.StreamSource {\n"
      "    ByteArrayOutputStream imagebuffer = null;\n"
      "    int reloads = 0;\n"
      "    \n"
      "    /* We need to implement this method that returns\n"
      "     * the resource as a stream. */\n"
      "    public InputStream getStream () {\n"
      "        /* Create an image and draw something on it. */\n"
      "        BufferedImage image = new BufferedImage (200, 200,\n"
      "                               BufferedImage.TYPE_INT_RGB);\n"
      "        Graphics drawable = image.getGraphics();\n"
      "        drawable.setColor(Color.lightGray);\n"
      "        drawable.fillRect(0,0,200,200);\n"
      "        drawable.setColor(Color.yellow);\n"
      "        drawable.fillOval(25,25,150,150);\n"
      "        drawable.setColor(Color.blue);\n"
      "        drawable.drawRect(0,0,199,199);\n"
      "        drawable.setColor(Color.black);\n"
      "        drawable.drawString(\"Reloads=\"+reloads, 75, 100);\n"
      "        reloads++;\n"
      "\n"
      "        try {\n"
      "            /* Write the image to a buffer. */\n"
      "            imagebuffer = new ByteArrayOutputStream();\n"
      "            ImageIO.write(image, \"png\", imagebuffer);\n"
      "            \n"
      "            /* Return a stream from the buffer. */\n"
      "            return new ByteArrayInputStream(\n"
      "                         imagebuffer.toByteArray());\n"
      "        } catch (IOException e) {\n"
      "            return null;\n"
      "        }\n"
      "    }\n"
      "}]]>"
msgstr ""

#. Tag: para
#: part1-application.xml:765
#, no-c-format
msgid "The content of the generated image is dynamic, as it updates the reloads counter with every call. The <classname>ImageIO</classname>.<methodname>write()</methodname> method writes the image to an output stream, while we had to return an input stream, so we stored the image contents to a temporary buffer."
msgstr ""

#. Tag: para
#: part1-application.xml:774
#, no-c-format
msgid "You can use resources in various ways. Some user interface components, such as <classname>Link</classname> and <classname>Embedded</classname>, take their parameters as a resource."
msgstr ""

#. Tag: para
#: part1-application.xml:780
#, no-c-format
msgid "Below we display the image with the <classname>Embedded</classname> component. The <classname>StreamResource</classname> constructor gets a reference to the application and registers itself in the application's resources. Assume that <varname>main</varname> is a reference to the main window and <varname>this</varname> is the application object."
msgstr ""

#. Tag: programlisting
#: part1-application.xml:790
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[// Create an instance of our stream source.\n"
      "StreamResource.StreamSource imagesource = new MyImageSource ();\n"
      "        \n"
      "// Create a resource that uses the stream source and give it a name.\n"
      "// The constructor will automatically register the resource in\n"
      "// the application.\n"
      "StreamResource imageresource =\n"
      "        new StreamResource(imagesource, \"myimage.png\", this);\n"
      "        \n"
      "// Create an embedded component that gets its contents\n"
      "// from the resource.\n"
      "main.addComponent(new Embedded(\"Image title\", imageresource));]]>"
msgstr ""

#. Tag: para
#: part1-application.xml:792
#, no-c-format
msgid "The image will look as follows:"
msgstr ""

#. Tag: title
#: part1-application.xml:797
#, no-c-format
msgid "Screenshot of the stream resource example with an embedded image"
msgstr ""

#. Tag: para
#: part1-application.xml:808
#, no-c-format
msgid "We named the resource as <filename>myimage.png</filename>. The application adds a resource key to the file name of the resource to make it unique. The full URI will be like <uri>http://localhost:8080/testbench/APP/1/myimage.png</uri>. The end <uri>APP/1/myimage.png</uri> is the <emphasis>relative</emphasis> part of the URI. You can get the relative part of a resource's URI from the application with <methodname>Application.getRelativeLocation()</methodname>."
msgstr ""

#. Tag: para
#: part1-application.xml:819
#, no-c-format
msgid "Another solution for creating dynamic content is an URI handler, possibly together with a parameter handler. See <xref linkend=\"section.application.resources.uri\"/> and <xref linkend=\"section.application.resources.parameters\"/>."
msgstr ""

#. Tag: title
#: part1-application.xml:837
#, no-c-format
msgid "Shutting Down an Application"
msgstr ""

#. Tag: para
#: part1-application.xml:839
#, no-c-format
msgid "A user can log out or close the web page or browser, so a session and the associated application instance can end. Ending an application can be initiated by the application logic. Otherwise, it will be ended automatically when the Servlet session times out."
msgstr ""

#. Tag: title
#: part1-application.xml:847
#, no-c-format
msgid "Closing an Application"
msgstr ""

#. Tag: para
#: part1-application.xml:849
#, no-c-format
msgid "If the user quits the application through the user interface, an event handler should call the <methodname>close()</methodname> method in the <classname>Application</classname> class to shutdown the session."
msgstr ""

#. Tag: para
#: part1-application.xml:855
#, no-c-format
msgid "In the following example, we have a <guibutton>Logout</guibutton> button, which ends the user session."
msgstr ""

#. Tag: programlisting
#: part1-application.xml:860
#, no-c-format
msgid ""
      "<![CDATA[Button closeButton = new Button(\"Logout\");\n"
      "\n"
      "closeButton.addListener(new Button.ClickListener() {\n"
      "    @Override\n"
      "    public void buttonClick(ClickEvent event) {\n"
      "        getMainWindow().getApplication().close();\n"
      "    } \n"
      "});\n"
      "\n"
      "main.addComponent(closeButton);]]>"
msgstr ""

#. Tag: para
#: part1-application.xml:862
#, no-c-format
msgid "You will soon notice that closing the application simply reloads the application with a new <classname>Application</classname> instance. You can set the window to redirect to a different URL (that does not reload the application) with <methodname>setLogoutURL</methodname>. In your application class, write:"
msgstr ""

#. Tag: programlisting
#: part1-application.xml:870
#, no-c-format
msgid "<![CDATA[setLogoutURL(\"/logout.html\");]]>"
msgstr ""

#. Tag: title
#: part1-application.xml:876
#, no-c-format
msgid "Handling the Closing of a Window"
msgstr ""

#. Tag: para
#: part1-application.xml:878
#, no-c-format
msgid "Closing the main window (or all application-level windows) does not close session and the application instance will be left hanging. You need to program such behaviour by handling the close events of the windows."
msgstr ""

#. Tag: para
#: part1-application.xml:884
#, no-c-format
msgid "If the user closes a browser window, such as the main window or any other application-level window, the window will send a final AJAX request to the server, which will fire a <classname>Window.CloseEvent</classname> for the closed window. You can handle the event with a <classname>Window.CloseListener</classname>. In case the user closes the browser, the event is fired for every open window."
msgstr ""

#. Tag: programlisting
#: part1-application.xml:893
#, no-c-format
msgid ""
      "<![CDATA[// Close the application if the main window is closed.\n"
      "main.addListener(new Window.CloseListener(){\n"
      "   @Override\n"
      "    public void windowClose(CloseEvent e) {\n"
      "       System.out.println(\"Closing the application\");\n"
      "       getMainWindow().getApplication().close();\n"
      "    } \n"
      "});]]>"
msgstr ""

#. Tag: para
#: part1-application.xml:895
#, no-c-format
msgid "Notice that <emphasis>refreshing a window means closing and reopening it</emphasis>. Therefore, if you have a close handler as above, the user loses the possibility to refresh the browser window."
msgstr ""

#. Tag: para
#: part1-application.xml:901
#, no-c-format
msgid "In the likely case that the browser crashes, no close event is communicated to the server. As the server has no way of knowing about the problem, and the session will be left hanging until the session timeout expires. During this time, the user can restart the browser, open the application URL, and the main window will be rendered where the user left off. This can be desired behaviour in many cases, but sometimes it is not and can create a security problem."
msgstr ""

#. Tag: title
#: part1-application.xml:913
#, no-c-format
msgid "Handling Errors"
msgstr ""

#. Tag: title
#: part1-application.xml:916
#, no-c-format
msgid "Error Indicator and message"
msgstr ""

#. Tag: para
#: part1-application.xml:918
#, no-c-format
msgid "All components have a built-in error indicator that can be set explicitly with <methodname>setComponentError()</methodname> or can be turned on implicitly if validating the component fails. As with component caption, the placement of the indicator is managed by the layout in which the component is contained. Usually, the error indicator is placed right of the caption text. Hovering the mouse pointer over the field displays the error message."
msgstr ""

#. Tag: para
#: part1-application.xml:928
#, no-c-format
msgid "The following example shows how you can set the component error explicitly. The example essentially validates field value without using an actual validator."
msgstr ""

#. Tag: programlisting
#: part1-application.xml:934
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[// Create a field.\n"
      "final TextField textfield = new TextField(\"Enter code\");\n"
      "main.addComponent(textfield);\n"
      "\n"
      "// Let the component error be initially clear.\n"
      "textfield.setComponentError(null); // (actually the default)\n"
      "\n"
      "// Have a button right of the field (and align it properly).\n"
      "final Button button = new Button(\"Ok!\");\n"
      "main.addComponent(button);\n"
      "((VerticalLayout)main.getLayout())\n"
      "        .setComponentAlignment(button, Alignment.BOTTOM_LEFT);\n"
      "\n"
      "// Handle button clicks\n"
      "button.addListener(new Button.ClickListener() {\n"
      "    public void buttonClick(ClickEvent event) {\n"
      "        // If the field value is bad, set its error.\n"
      "        // (Allow only alphanumeric characters.)\n"
      "        if (! ((String) textfield.getValue()).matches(\"^\\\\w*$\")) {\n"
      "            // Put the component in error state and\n"
      "            // set the error message.\n"
      "            textfield.setComponentError(\n"
      "                new UserError(\"Must be letters and numbers\"));\n"
      "        } else {\n"
      "            // Otherwise clear it.\n"
      "            textfield.setComponentError(null);\n"
      "        }\n"
      "    }\n"
      "});]]>"
msgstr ""

#. Tag: title
#: part1-application.xml:937
#, no-c-format
msgid "Error indicator active"
msgstr ""

#. Tag: para
#: part1-application.xml:948
#, no-c-format
msgid "The <classname>Form</classname> component handles and displays also the errors of its contained fields so that it displays both the error indicator and the message in a special error indicator area. See <xref linkend=\"components.form\"/> and <xref linkend=\"components.form.validation\"/> for details on the <classname>Form</classname> component and validation of form input."
msgstr ""

#. Tag: title
#: part1-application.xml:959
#, no-c-format
msgid "Notifications"
msgstr ""

#. Tag: para
#: part1-application.xml:961
#, no-c-format
msgid "Notifications are error or information boxes that appear typically at the center of the screen. A notification box has a caption and optional description and icon. The box stays on the screen either for a defined time or until the user clicks it. The notification type defines the default appearance and behaviour of a notification."
msgstr ""

#. Tag: para
#: part1-application.xml:969
#, no-c-format
msgid "Notifications are always associated with a window object, which can be a child window (the positioning is always relative to the entire browser view). The <classname>Window</classname> class provides a <methodname>showNotification()</methodname> method for displaying notifications. The method takes the caption and an optional description and notification type as parameters. The method also accepts a notification object of type <classname>Window.Notification</classname>, as described further below."
msgstr ""

#. Tag: programlisting
#: part1-application.xml:980
#, no-c-format
msgid ""
      "<?pocket-size 80% ?><![CDATA[mainwindow.showNotification(\"This is the caption\",\n"
      "                            \"This is the description\");]]>"
msgstr ""

#. Tag: title
#: part1-application.xml:983
#, no-c-format
msgid "Notification"
msgstr ""

#. Tag: para
#: part1-application.xml:994
#, no-c-format
msgid "The caption and description are, by default, written on the same line. If you want to have a line break between them, use the XHTML line break markup \"<literal>&lt;br/&gt;</literal>\". You can use any XHTML markup in the caption and description of a notification. If it is possible to get the notification content from user input, you should sanitize the content carefully, as noted in <xref linkend=\"advanced.security.sanitizing\"/>."
msgstr ""

#. Tag: programlisting
#: part1-application.xml:1003
#, no-c-format
msgid ""
      "<![CDATA[main.showNotification(\"This is a warning\",\n"
      "            \"<br/>This is the <i>last</i> warning\",\n"
      "            Window.Notification.TYPE_WARNING_MESSAGE);]]>"
msgstr ""

#. Tag: title
#: part1-application.xml:1006
#, no-c-format
msgid "Notification with Formatting"
msgstr ""

#. Tag: para
#: part1-application.xml:1017
#, no-c-format
msgid "The notification type defines the overall default style and behaviour of a notification. If no notification type is given, the \"humanized\" type is used as the default. The notification types, listed below, are defined in the <classname>Window.Notification</classname> class."
msgstr ""

#. Tag: parameter
#: part1-application.xml:1027
#, no-c-format
msgid "TYPE_HUMANIZED_MESSAGE"
msgstr ""

#. Tag: para
#: part1-application.xml:1038
#, no-c-format
msgid "A user-friendly message that does not annoy too much: it does not require confirmation by clicking and disappears quickly. It is centered and has a neutral gray color."
msgstr ""

#. Tag: parameter
#: part1-application.xml:1047
#, no-c-format
msgid "TYPE_WARNING_MESSAGE"
msgstr ""

#. Tag: para
#: part1-application.xml:1058
#, no-c-format
msgid "Warnings are messages of medium importance. They are displayed with colors that are neither neutral nor too distractive. A warning is displayed for 1.5 seconds, but the user can click the message box to dismiss it. The user can continue to interact with the application while the warning is displayed."
msgstr ""

#. Tag: parameter
#: part1-application.xml:1069
#, no-c-format
msgid "TYPE_ERROR_MESSAGE"
msgstr ""

#. Tag: para
#: part1-application.xml:1080
#, no-c-format
msgid "Error messages are notifications that require the highest user attention, with alert colors and by requiring the user to click the message to dismiss it. The error message box does not itself include an instruction to click the message, although the close box in the upper right corner indicates it visually. Unlike with other notifications, the user can not interact with the application while the error message is displayed."
msgstr ""

#. Tag: parameter
#: part1-application.xml:1094
#, no-c-format
msgid "TYPE_TRAY_NOTIFICATION"
msgstr ""

#. Tag: para
#: part1-application.xml:1105
#, no-c-format
msgid "Tray notifications are displayed in the \"system tray\" area, that is, in the lower-right corner of the browser view. As they do not usually obsure any user interface, they are displayed longer than humanized or warning messages, 3 seconds by default. The user can continue to interact with the application normally while the tray notification is displayed."
msgstr ""

#. Tag: para
#: part1-application.xml:1117
#, no-c-format
msgid "All of the features of specific notification types can be controlled with the attributes of <classname>Window.Notification</classname>. You can pass an explicitly created notification object to the <methodname>showNotification()</methodname> method."
msgstr ""

#. Tag: programlisting
#: part1-application.xml:1124
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[// Create a notification with default settings for a warning.\n"
      "Window.Notification notif = new Window.Notification(\n"
      "        \"Be warned!\",\n"
      "        \"This message lurks in the top-left corner!\",\n"
      "        Window.Notification.TYPE_WARNING_MESSAGE);\n"
      "\n"
      "// Set the position.\n"
      "notif.setPosition(Window.Notification.POSITION_TOP_LEFT);\n"
      "\n"
      "// Let it stay there until the user clicks it\n"
      "notif.setDelayMsec(-1);\n"
      "\n"
      "// Show it in the main window.\n"
      "main.showNotification(notif);]]>"
msgstr ""

#. Tag: para
#: part1-application.xml:1126
#, no-c-format
msgid "The <methodname>setPosition()</methodname> method allows setting the positioning of the notification. The method takes as its parameter any of the constants:"
msgstr ""

#. Tag: parameter
#: part1-application.xml:1135
#, no-c-format
msgid "Window.Notification.POSITION_CENTERED"
msgstr ""

#. Tag: parameter
#: part1-application.xml:1136
#, no-c-format
msgid "Window.Notification.POSITION_CENTERED_TOP"
msgstr ""

#. Tag: parameter
#: part1-application.xml:1137
#, no-c-format
msgid "Window.Notification.POSITION_CENTERED_BOTTOM"
msgstr ""

#. Tag: parameter
#: part1-application.xml:1138
#, no-c-format
msgid "Window.Notification.POSITION_TOP_LEFT"
msgstr ""

#. Tag: parameter
#: part1-application.xml:1139
#, no-c-format
msgid "Window.Notification.POSITION_TOP_RIGHT"
msgstr ""

#. Tag: parameter
#: part1-application.xml:1140
#, no-c-format
msgid "Window.Notification.POSITION_BOTTOM_LEFT"
msgstr ""

#. Tag: parameter
#: part1-application.xml:1141
#, no-c-format
msgid "Window.Notification.POSITION_BOTTOM_RIGHT"
msgstr ""

#. Tag: para
#: part1-application.xml:1146
#, no-c-format
msgid "The <methodname>setDelayMSec()</methodname> allows you to set the time in milliseconds for how long the notification is displayed. Parameter value <literal>-1</literal> means that the message is displayed until the user clicks the message box. It also prevents interaction with other parts of the application window, as is default behaviour for error messages. It does not, however, add a close box that the error notification has."
msgstr ""

#. Tag: title
#: part1-application.xml:1157
#, no-c-format
msgid "Handling Uncaught Exceptions"
msgstr ""

#. Tag: para
#: part1-application.xml:1159
#, no-c-format
msgid "Application development with Vaadin follows the event-driven programming model. Mouse and keyboard events in the client cause (usually higher-level) events on the server-side, which can be handled with listeners, and that is how most of the application logic works. Handling the events can result in exceptions either in the application logic or in the framework itself, but some of them may not be caught properly."
msgstr ""

#. Tag: para
#: part1-application.xml:1168
#, no-c-format
msgid "For example, in the following code excerpt, we throw an error in an event listener but do not catch it, so it falls to the framework."
msgstr ""

#. Tag: programlisting
#: part1-application.xml:1173
#, no-c-format
msgid ""
      "<?pocket-size 70% ?><![CDATA[final Button button = new Button (\"Fail Me\");\n"
      "\n"
      "button.addListener(new Button.ClickListener() {\n"
      "    public void buttonClick(ClickEvent event) {\n"
      "        // Throw some exception.\n"
      "        throw new RuntimeException(\"You can't catch this.\");\n"
      "    }\n"
      "});]]>"
msgstr ""

#. Tag: para
#: part1-application.xml:1175
#, no-c-format
msgid "Any such exceptions that occur in the call chain, but are not caught at any other level, are eventually caught by the terminal adapter in <classname>ApplicationServlet</classname>, the lowest-level component that receives client requests. The terminal adapter passes all such caught exceptions as events to the error listener of the <classname>Application</classname> instance through the <classname>Terminal.ErrorListener</classname> interface. The <classname>Application</classname> class does not, by default, throw such exceptions forward."
msgstr ""

#. Tag: para
#: part1-application.xml:1187
#, no-c-format
msgid "The reason for this error-handling logic lies in the logic that handles component state synchronization between the client and the server. We want to handle <emphasis>all</emphasis> the serialized variable changes in the client request, because otherwise the client-side and server-side component states would become unsynchronized very easily, which could put the entire application in an invalid state."
msgstr ""

#. Tag: para
#: part1-application.xml:1196
#, no-c-format
msgid "The default implementation of the <classname>Terminal.ErrorListener</classname> interface in the <classname>Application</classname> class simply prints the error to console. It also tries to find out a component related to the error. If the exception occurred in a listener attached to a component, that component is considered as the component related to the exception. If a related component is found, the error handler sets the <emphasis>component error</emphasis> for it, the same attribute which you can set with <methodname>setComponentError()</methodname>."
msgstr ""

#. Tag: para
#: part1-application.xml:1208
#, no-c-format
msgid "In UI, the component error is shown with a small red \"!\" -sign (in the default theme). If you hover the mouse pointer over it, you will see the entire backtrace of the exception in a large tooltip box, as illustrated in <xref linkend=\"figure.application.errors.unchecked-exceptions\"/> for the above code example."
msgstr ""

#. Tag: title
#: part1-application.xml:1217
#, no-c-format
msgid "Uncaught Exception in Component Error Indicator"
msgstr ""

#. Tag: para
#: part1-application.xml:1228
#, no-c-format
msgid "You can change the logic of handling the terminal errors easily by overriding the <methodname>terminalError()</methodname> method in your application class (the one that inherits <classname>Application</classname>) or by setting a custom error listener with the <methodname>setErrorHandler</methodname> method. You can safely discard the default handling or extend its usage with your custom error handling or logging system. In the example code below, the exceptions are also reported as notifications in the main window."
msgstr ""

#. Tag: programlisting
#: part1-application.xml:1239
#, no-c-format
msgid ""
      "<?pocket-size 75% ?><![CDATA[@Override\n"
      "public void terminalError(Terminal.ErrorEvent event) {\n"
      "    // Call the default implementation.\n"
      "    super.terminalError(event);\n"
      "\n"
      "    // Some custom behaviour.\n"
      "    if (getMainWindow() != null) {\n"
      "        getMainWindow().showNotification(\n"
      "                \"An unchecked exception occured!\",\n"
      "                event.getThrowable().toString(),\n"
      "                Notification.TYPE_ERROR_MESSAGE);\n"
      "    }\n"
      "}]]>"
msgstr ""

#. Tag: para
#: part1-application.xml:1242
#, no-c-format
msgid "Handling other exceptions works in the usual way for Java Servlets. Uncaught exceptions are finally caught and handled by the application server."
msgstr ""

#. Tag: title
#: part1-application.xml:1253
#, no-c-format
msgid "Setting Up the Application Environment"
msgstr ""

#. Tag: para
#: part1-application.xml:1255
#, no-c-format
msgid "While more and more server based frameworks, libraries, standards, and architectures for Java are invented to make the programmer's life easier, software deployment seems to get harder and harder. For example, Java Enterprise Beans tried to make the creation of persistent and networked objects easy and somewhat automatic, but the number of deployment descriptions got enormous. As Vaadin lives in a Java Servlet container, it must follow the rules, but it tries to avoid adding extra complexity."
msgstr ""

#. Tag: para
#: part1-application.xml:1268
#, no-c-format
msgid "All Vaadin applications are deployed as Java web applications, which can be packaged as WAR files. For a detailed tutorial on how web applications are packaged, please refer to any Java book that discusses Servlets. Sun has an excellent reference online at <link xlink:href=\"http://java.sun.com/j2ee/tutorial/1_3-fcs/doc/WCC3.html\"> http://java.sun.com/j2ee/tutorial/1_3-fcs/doc/WCC3.html </link>."
msgstr ""

#. Tag: title
#: part1-application.xml:1281
#, no-c-format
msgid "Creating Deployable WAR in Eclipse"
msgstr ""

#. Tag: para
#: part1-application.xml:1283
#, no-c-format
msgid "To deploy an application to a web server, you need to create a WAR package. Here we give the instructions for Eclipse."
msgstr ""

#. Tag: para
#: part1-application.xml:1288
#, no-c-format
msgid "Open project properties and first set the name and destination of the WAR file in Tomcat <guimenuitem>Export to WAR settings</guimenuitem> tab. Exporting to WAR is done by selecting <guimenuitem>Export to WAR</guimenuitem> from <guimenuitem>Tomcat Project</guimenuitem> in project context menu (just click calc with the right mouse button on <guimenuitem>Package contents tree</guimenuitem>)."
msgstr ""

#. Tag: title
#: part1-application.xml:1300
#, no-c-format
msgid "Web Application Contents"
msgstr ""

#. Tag: para
#: part1-application.xml:1302
#, no-c-format
msgid "The following files are required in a web application in order to run it."
msgstr ""

#. Tag: title
#: part1-application.xml:1308
#, no-c-format
msgid "Web application organization"
msgstr ""

#. Tag: filename
#: part1-application.xml:1312
#, no-c-format
msgid "WEB-INF/web.xml"
msgstr ""

#. Tag: para
#: part1-application.xml:1315
#, no-c-format
msgid "This is the standard web application descriptor that defines how the application is organized. You can refer to any Java book about the contents of this file. Also see an example in <xref linkend=\"ex.web.xml\"/>."
msgstr ""

#. Tag: filename
#: part1-application.xml:1328
#, no-c-format
msgid "WEB-INF/lib/vaadin-6.2.0.jar"
msgstr ""

#. Tag: para
#: part1-application.xml:1333
#, no-c-format
msgid "This is the Vaadin library. It is included in the product package in <filename>lib</filename> directory."
msgstr ""

#. Tag: term
#: part1-application.xml:1343
#, no-c-format
msgid "Your application classes"
msgstr ""

#. Tag: para
#: part1-application.xml:1345
#, no-c-format
msgid "You must include your application classes either in a JAR file in <filename>WEB-INF/lib</filename> or as classes in <filename>WEB-INF/classes</filename>"
msgstr ""

#. Tag: term
#: part1-application.xml:1356
#, no-c-format
msgid "Your own theme files (OPTIONAL)"
msgstr ""

#. Tag: para
#: part1-application.xml:1358
#, no-c-format
msgid "If your application uses a special theme (look and feel), you must include it in <filename>WEB-INF/lib/themes/themename</filename> directory."
msgstr ""

#. Tag: title
#: part1-application.xml:1371
#, no-c-format
msgid "Deployment Descriptor <filename>web.xml</filename>"
msgstr ""

#. Tag: para
#: part1-application.xml:1373
#, no-c-format
msgid "The deployment descriptor is an XML file with the name <filename>web.xml</filename> in the <filename>WEB-INF</filename> directory of a web application. It is a standard component in Java EE describing how a web application should be deployed. The structure of the deployment descriptor is illustrated by the following example. You simply deploy applications as servlets implemented by the special <methodname>com.vaadin.terminal.gwt.server.ApplicationServlet</methodname> wrapper class. The class of the actual application is specified by giving the <parameter>application</parameter> parameter with the name of the specific application class to the servlet. The servlet is then connected to a URL in a standard way for Java Servlets."
msgstr ""

#. Tag: title
#: part1-application.xml:1388
#, no-c-format
msgid "web.xml"
msgstr ""

#. Tag: programlisting
#: part1-application.xml:1389
#, no-c-format
msgid ""
      "<?pocket-size 75% ?>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n"
      "&lt;web-app\n"
      "  id=\"WebApp_ID\" version=\"2.4\"\n"
      "  xmlns=\"http://java.sun.com/xml/ns/j2ee\" \n"
      "  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" \n"
      "  xsi:schemaLocation=\"http://java.sun.com/xml/ns/j2ee\n"
      "     http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd\"&gt;\n"
      "\n"
      "  &lt;servlet&gt;\n"
      "    &lt;servlet-name&gt;<emphasis role=\"strong\">myservlet</emphasis>&lt;/servlet-name&gt;\n"
      "    &lt;servlet-class&gt;\n"
      "        com.vaadin.terminal.gwt.server.ApplicationServlet\n"
      "    &lt;/servlet-class&gt;\n"
      "    &lt;init-param&gt;\n"
      "      &lt;param-name&gt;application&lt;/param-name&gt;\n"
      "      &lt;param-value&gt;<emphasis role=\"strong\">MyApplicationClass</emphasis>&lt;/param-value&gt;\n"
      "    &lt;/init-param&gt;\n"
      "  &lt;/servlet&gt;\n"
      "\n"
      "  &lt;servlet-mapping&gt;\n"
      "    &lt;servlet-name&gt;<emphasis role=\"strong\">myservlet</emphasis>&lt;/servlet-name&gt;\n"
      "    &lt;url-pattern&gt;/*&lt;/url-pattern&gt;\n"
      "  &lt;/servlet-mapping&gt;\n"
      "&lt;/web-app&gt;"
msgstr ""

#. Tag: para
#: part1-application.xml:1392
#, no-c-format
msgid "The descriptor defines a servlet with name <filename>myservlet</filename>. The servlet class, <classname>com.vaadin.terminal.gwt.server.ApplicationServlet</classname>, is provided by Vaadin framework and it should be the same for all Vaadin projects. The servlet takes the class name <classname>Calc</classname> of the user application class as a parameter, including the full package path to the class. If the class is in the default package the package path is obviously not used."
msgstr ""

#. Tag: para
#: part1-application.xml:1403
#, no-c-format
msgid "The <literal>url-pattern</literal> is defined above as <literal>/*</literal>. This matches to any URL under the project context. We defined above the project context as <literal>myproject</literal> so the application URL will be <uri>http://localhost:8080/myproject/</uri>. If the project were to have multiple applications or servlets, they would have to be given different names to distinguish them. For example, <literal>url-pattern</literal> <literal>/myapp/*</literal> would match a URL such as <uri>http://localhost:8080/myproject/myapp/</uri>. Notice that the slash and the asterisk <emphasis>must</emphasis> be included at the end of the pattern."
msgstr ""

#. Tag: para
#: part1-application.xml:1417
#, no-c-format
msgid "Notice also that if the URL pattern is other than root <literal>/*</literal> (such as <literal>/myapp/*</literal>), you will also need to make a servlet mapping to <literal>/VAADIN/*</literal> (unless you are serving it statically as noted below). For example:"
msgstr ""

#. Tag: programlisting
#: part1-application.xml:1424
#, no-c-format
msgid ""
      "...\n"
      "    &lt;servlet-mapping&gt;\n"
      "        &lt;servlet-name&gt;<emphasis role=\"strong\">myservlet</emphasis>&lt;/servlet-name&gt;\n"
      "        &lt;url-pattern&gt;/myurl/*&lt;/url-pattern&gt;\n"
      "    &lt;/servlet-mapping&gt;\n"
      "\n"
      "    &lt;servlet-mapping&gt;\n"
      "        &lt;servlet-name&gt;<emphasis role=\"strong\">myservlet</emphasis>&lt;/servlet-name&gt;\n"
      "        &lt;url-pattern&gt;/VAADIN/*&lt;/url-pattern&gt;\n"
      "    &lt;/servlet-mapping&gt;"
msgstr ""

#. Tag: para
#: part1-application.xml:1426
#, no-c-format
msgid "If you have multiple servlets, you should specify only one <literal>/VAADIN/*</literal> mapping . It doesn't matter which servlet you map the pattern to, as long as it is a Vaadin servlet."
msgstr ""

#. Tag: para
#: part1-application.xml:1432
#, no-c-format
msgid "You do not have to provide the above <literal>/VAADIN/*</literal> mapping if you serve both the widget sets and (custom and default) themes statically in the <filename>WebContent/VAADIN/</filename> directory. The mapping simply allows serving them dynamically from the Vaadin JAR. Serving them statically is recommended for production environments as it is faster. If you serve the content from within the same web application, you may not have the root pattern <literal>/*</literal> for the Vaadin servlet, as then all the requests would be mapped to the servlet."
msgstr ""

#. Tag: para
#: part1-application.xml:1444
#, no-c-format
msgid "For a complete example on how to deploy applications, see the demos included in the Vaadin installation package, especially the <filename>WebContent/WEB-INF</filename> directory."
msgstr ""

#. Tag: title
#: part1-application.xml:1451
#, no-c-format
msgid "Deployment Descriptor Parameters"
msgstr ""

#. Tag: para
#: part1-application.xml:1453
#, no-c-format
msgid "Deployment descriptor can have many parameters and options that control the execution of a servlet. You can find a complete documentation of the deployment descriptor in Java Servlet Specification at <uri>http://java.sun.com/products/servlet/</uri>."
msgstr ""

#. Tag: para
#: part1-application.xml:1461
#, no-c-format
msgid "By default, Vaadin applications run in <emphasis>debug mode</emphasis>, which should be used during development. This enables various debugging features. For production use, you should have put in your <filename>web.xml</filename> the following parameter:"
msgstr ""

#. Tag: programlisting
#: part1-application.xml:1468
#, no-c-format
msgid ""
      "<![CDATA[<context-param>\n"
      "  <param-name>productionMode</param-name>\n"
      "  <param-value>true</param-value>\n"
      "  <description>Vaadin production mode</description>\n"
      "</context-param>]]>"
msgstr ""

#. Tag: para
#: part1-application.xml:1470
#, no-c-format
msgid "The parameter and the debug and production modes are described in detail in <xref linkend=\"advanced.debug-production-modes\"/>."
msgstr ""

#. Tag: para
#: part1-application.xml:1475
#, no-c-format
msgid "One often needed option is the session timeout. Different servlet containers use varying defaults for timeouts, such as 30 minutes for Apache Tomcat. You can set the timeout with:"
msgstr ""

#. Tag: programlisting
#: part1-application.xml:1481
#, no-c-format
msgid ""
      "<![CDATA[<session-config>\n"
      "    <session-timeout>30</session-timeout>\n"
      "</session-config>]]>"
msgstr ""

#. Tag: para
#: part1-application.xml:1483
#, no-c-format
msgid "After the timeout expires, the <methodname>close()</methodname> method of the <classname>Application</classname> class will be called. You should implement it if you wish to handle timeout situations."
msgstr ""

