# SOME DESCRIPTIVE TITLE.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"Report-Msgid-Bugs-To: http://bugs.kde.org\n"
"POT-Creation-Date: 2012-04-02 14:31+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <kde-i18n-doc@kde.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. Tag: title
#: chapter-architecture.xml:4
#, no-c-format
msgid "Architecture"
msgstr ""

#. Tag: para
#: chapter-architecture.xml:6
#, no-c-format
msgid "This chapter provides an introduction to the architecture of Vaadin at somewhat technical level."
msgstr ""

#. Tag: title
#: chapter-architecture.xml:12
#, no-c-format
msgid "Overview"
msgstr ""

#. Tag: para
#: chapter-architecture.xml:14
#, no-c-format
msgid "In <xref linkend=\"intro\"/>, we gave a short introduction to the general architecture of Vaadin. Let us now look deeper into it. <xref linkend=\"figure.architecture.detailed\"/> gives a basic illustration of the architecture."
msgstr ""

#. Tag: title
#: chapter-architecture.xml:22
#, no-c-format
msgid "Vaadin Architecture"
msgstr ""

#. Tag: para
#: chapter-architecture.xml:33
#, no-c-format
msgid "Vaadin consists of a <emphasis>web application API</emphasis>, a horde of <emphasis>user interface components</emphasis>, <emphasis>themes</emphasis> for controlling the appearance, and a <emphasis>data model</emphasis> that allows binding the user interface components directly to data. Behind the curtains it also employs a <emphasis>terminal adapter</emphasis> to receive requests from web browsers and make responses by rendering the pages."
msgstr ""

#. Tag: para
#: chapter-architecture.xml:44
#, no-c-format
msgid "An application that uses Vaadin runs as a servlet in a Java web server, serving HTTP requests. The terminal adapter receives client requests through the web server's Java Servlet API, and inteprets them to user events for a particular session. Sessions are tracked using cookies. Events are associated with UI components and delivered to the application, which handles them with listeners. If the application logic makes changes to the server-side UI components, the terminal adapter renders them in the web browser by generating a response. The client-side engine running in the browser receives the responses and uses them to make any necessary changes to the page in the browser."
msgstr ""

#. Tag: para
#: chapter-architecture.xml:57
#, no-c-format
msgid "The top level of a user application consists of an application class that inherits <classname>com.vaadin.Application</classname>. It creates the UI components (see below) it needs, receives events regarding them, and makes necessary changes to the components. For detailed information about inheriting the <classname>Application</classname>, see <xref linkend=\"application\"/>."
msgstr ""

#. Tag: para
#: chapter-architecture.xml:66
#, no-c-format
msgid "The major parts of the architecture and their function are as follows:"
msgstr ""

#. Tag: term
#: chapter-architecture.xml:73
#, no-c-format
msgid "User Interface Components"
msgstr ""

#. Tag: para
#: chapter-architecture.xml:75
#, no-c-format
msgid "The user interface consists of UI components that are created and laid out by the application. Each server-side component has a client-side counterpart, with which the user interacts. The server-side components can serialize themselves over the client connection using a terminal adapter. The client-side components, in turn, can serialize user interaction back to the application, which is received in the server-side components as events. The components relay these events to the application logic. Most components are bound to a data source (see below). For a complete description of UI component architecture, see <xref linkend=\"components\"/>."
msgstr ""

#. Tag: term
#: chapter-architecture.xml:92
#, no-c-format
msgid "<term>Client-Side Engine</term>"
msgstr ""

#. Tag: primary
#: chapter-architecture.xml:95 chapter-architecture.xml:386
#, no-c-format
msgid "<primary>Client-Side Engine</primary>"
msgstr ""

#. Tag: primary
#: chapter-architecture.xml:96 chapter-architecture.xml:229
#: chapter-architecture.xml:230 chapter-architecture.xml:293
#, no-c-format
msgid "<primary>Google Web Toolkit</primary>"
msgstr ""

#. Tag: primary
#: chapter-architecture.xml:97 chapter-architecture.xml:167
#, no-c-format
msgid "<primary>UIDL</primary>"
msgstr ""

#. Tag: primary
#: chapter-architecture.xml:98
#, no-c-format
msgid "<primary>JSON</primary>"
msgstr ""

#. Tag: primary
#: chapter-architecture.xml:99
#, no-c-format
msgid "HTTP"
msgstr ""

#. Tag: para
#: chapter-architecture.xml:99
#, no-c-format
msgid "The Client-Side Engine of Vaadin manages the rendering in the web browser using Google Web Toolkit (GWT). It communicates user interaction and UI changes with the server-side Terminal Adapter using the User Interface Definition Language (UIDL), a JSON-based language. The communications are made using asynchronous HTTP or HTTPS requests. See <xref linkend=\"architecture.client-side\"/>."
msgstr ""

#. Tag: term
#: chapter-architecture.xml:113
#, no-c-format
msgid "<term>Terminal Adapter</term>"
msgstr ""

#. Tag: primary
#: chapter-architecture.xml:116 chapter-architecture.xml:166
#, no-c-format
msgid "<primary>Terminal Adapter</primary>"
msgstr ""

#. Tag: primary
#: chapter-architecture.xml:117 chapter-architecture.xml:242
#, no-c-format
msgid "<primary>AJAX</primary>"
msgstr ""

#. Tag: para
#: chapter-architecture.xml:117
#, no-c-format
msgid "The UI components do not render themselves directly as a web page, but use a <emphasis>Terminal Adapter</emphasis>. This abstraction layer allows users to use Vaadin applications with practically any web browser. Releases 3 and 4 of IT Mill Toolkit supported HTML and simple AJAX based rendering, while Vaadin Release 5 supports advanced AJAX-based rendering using Google Web Toolkit (GWT). <indexterm><primary>IT Mill Toolkit</primary></indexterm> <indexterm><primary>Google Web Toolkit</primary></indexterm> You could imagine some other browser technology, not even based on HTML, and you - or we for that matter - could make it work just by writing a new adapter. Your application would still just see the Vaadin API. To allow for this sort of abstraction, UI components communicate their changes to the Terminal Adapter, which renders them for the user's browser. When the user does something in the web page, the events are communicated to the terminal adapter (through the web server) as asynchronous AJAX requests. The terminal adapter delivers the user events to the UI components, which deliver them to the application's UI logic."
msgstr ""

#. Tag: term
#: chapter-architecture.xml:144
#, no-c-format
msgid "Themes"
msgstr ""

#. Tag: primary
#: chapter-architecture.xml:147
#, no-c-format
msgid "theme"
msgstr ""

#. Tag: primary
#: chapter-architecture.xml:148
#, no-c-format
msgid "<primary>CSS</primary>"
msgstr ""

#. Tag: primary
#: chapter-architecture.xml:149
#, no-c-format
msgid "HTML templates"
msgstr ""

#. Tag: para
#: chapter-architecture.xml:149
#, no-c-format
msgid "The user interface separates between presentation and logic. While the UI logic is handled as Java code, the presentation is defined in <emphasis>themes</emphasis> as CSS. Vaadin provides a default themes. User themes can, in addition to style sheets, include HTML templates that define custom layouts and other resources, such as images. Themes are discussed in detail in <xref linkend=\"themes\"/>."
msgstr ""

#. Tag: term
#: chapter-architecture.xml:163
#, no-c-format
msgid "<term>UIDL</term>"
msgstr ""

#. Tag: para
#: chapter-architecture.xml:167
#, no-c-format
msgid "The Terminal Adapter draws the user interface to the web page and any changes to it using a special User Interface Definition Language (UIDL). <indexterm><primary>JSON</primary></indexterm> The UIDL communications are done using JSON (JavaScript Object Notation), which is a lightweight data interchange format that is especially efficient for interfacing with JavaScript-based AJAX code in the browser. See <xref linkend=\"architecture.technology.json\"/> and <xref linkend=\"uidl\"/> for details."
msgstr ""

#. Tag: term
#: chapter-architecture.xml:186
#, no-c-format
msgid "Events"
msgstr ""

#. Tag: primary
#: chapter-architecture.xml:189
#, no-c-format
msgid "events"
msgstr ""

#. Tag: para
#: chapter-architecture.xml:189
#, no-c-format
msgid "User interaction with UI components creates events, which are first processed on the client-side with JavaScript and then passed all the way through the HTTP server, terminal adapter, and user component layers to the application. See <xref linkend=\"architecture.events\"/>."
msgstr ""

#. Tag: term
#: chapter-architecture.xml:200
#, no-c-format
msgid "<term>Data Model</term>"
msgstr ""

#. Tag: primary
#: chapter-architecture.xml:203
#, no-c-format
msgid "<primary>Data Model</primary>"
msgstr ""

#. Tag: para
#: chapter-architecture.xml:203
#, no-c-format
msgid "In addition to the user interface model, Vaadin provides a <emphasis>data model</emphasis> for interfacing data presented in UI components. Using the data model, the user interface components can update the application data directly, without the need for any control code. All the UI components use this data model internally, but they can be bound to a separate data source as well. <indexterm><primary>SQL</primary></indexterm> For example, you can bind a table component to an SQL query response. For a complete overview of the Vaadin Data Model, please refer to <xref linkend=\"datamodel\"/>."
msgstr ""

#. Tag: title
#: chapter-architecture.xml:226
#, no-c-format
msgid "Technological Background"
msgstr ""

#. Tag: para
#: chapter-architecture.xml:230
#, no-c-format
msgid "This section provides an introduction to the various technologies and designs on which Vaadin is based: AJAX-based web applications in general, Google Web Toolkit, and JSON data interchange format. This knowledge is not necessary for using Vaadin, but provides some background if you need to make low-level extensions to Vaadin."
msgstr ""

#. Tag: title
#: chapter-architecture.xml:240
#, no-c-format
msgid "<title>AJAX</title>"
msgstr ""

#. Tag: primary
#: chapter-architecture.xml:243
#, no-c-format
msgid "<primary>XML</primary>"
msgstr ""

#. Tag: primary
#: chapter-architecture.xml:244
#, no-c-format
msgid "JavaScript"
msgstr ""

#. Tag: para
#: chapter-architecture.xml:244
#, no-c-format
msgid "AJAX (Asynchronous JavaScript and XML) is a technique for developing web applications with responsive user interaction, similar to traditional desktop applications. While conventional JavaScript-enabled HTML pages can receive new content only with page updates, AJAX-enabled pages send user interaction to the server using an asynchronous request and receive updated content in the response. This way, only small parts of the page data can be loaded. <indexterm><primary>XHTML</primary></indexterm> <indexterm><primary>CSS</primary></indexterm> <indexterm><primary>DOM</primary></indexterm> <indexterm><primary>XMLHttpRequest</primary></indexterm> This goal is archieved by the use of a certain set of technologies: XHTML, CSS, DOM, JavaScript, XMLHttpRequest, and XML."
msgstr ""

#. Tag: para
#: chapter-architecture.xml:263
#, no-c-format
msgid "AJAX, with all the fuss and pomp it receives, is essentially made possible by a simple API, namely the <methodname>XMLHttpRequest</methodname> class in JavaScript. The API is available in all major browsers and, as of 2006, the API is under way to become a W3C standard."
msgstr ""

#. Tag: para
#: chapter-architecture.xml:270
#, no-c-format
msgid "Communications between the browser and the server usually require some sort of <emphasis>serialization</emphasis> (or <emphasis>marshalling</emphasis>) of data objects. AJAX suggests the use of XML for data representation in communications between the browser and the server. While Vaadin Release 4 used XML for data interchange, Release 5 uses the more efficient JSON. For more information about JSON and its use in Vaadin, see <xref linkend=\"architecture.technology.json\"/>."
msgstr ""

#. Tag: para
#: chapter-architecture.xml:281
#, no-c-format
msgid "If you're a newcomer to Ajax, <xref linkend=\"advanced.application.pages\"/> discusses the history and motivations for AJAX-based web applications, as well as some special characteristics that differ from both traditional web applications and desktop applications."
msgstr ""

#. Tag: title
#: chapter-architecture.xml:290
#, no-c-format
msgid "<title>Google Web Toolkit</title>"
msgstr ""

#. Tag: para
#: chapter-architecture.xml:293
#, no-c-format
msgid "Google Web Toolkit is a software development kit for developing client-side web applications easily, without having to use JavaScript or other browser technologies directly. Applications using GWT are developed with Java and compiled into JavaScript with the GWT Compiler."
msgstr ""

#. Tag: para
#: chapter-architecture.xml:301
#, no-c-format
msgid "GWT is essentially a client-side technology, normally used to develop user interface logic in the web browser. GWT applications still need to communicate with a server using RPC calls and by serializing any data. Vaadin effectively hides all client-server communications, allows handling user interaction logic in a server application, and allows software development in a single server-side application. This makes the architecture of an AJAX-based web application much simpler."
msgstr ""

#. Tag: para
#: chapter-architecture.xml:311
#, no-c-format
msgid "Vaadin uses GWT to render user interfaces in the web browser and handle the low-level tasks of user interaction in the browser. Use of GWT is largely invisible in Vaadin for applications that do not need any custom GWT components."
msgstr ""

#. Tag: para
#: chapter-architecture.xml:318
#, no-c-format
msgid "See <xref linkend=\"architecture.client-side\"/> for a description of how GWT is used in the Client-Side Engine of Vaadin. <xref linkend=\"gwt\"/> provides information about the integration of GWT-based user interface components with Vaadin."
msgstr ""

#. Tag: title
#: chapter-architecture.xml:327
#, no-c-format
msgid "<title>JSON</title>"
msgstr ""

#. Tag: para
#: chapter-architecture.xml:329
#, no-c-format
msgid "JSON is a lightweight data-interchange format that is easy and fast to generate and parse. JSON messages are said to be possibly a hundred times faster to parse than XML with current browser technology. The format is a subset of the JavaScript language, which makes it possible to evaluate JSON messages directly as JavaScript expressions. This makes JSON very easy to use in JavaScript applications and therefore also for AJAX applications."
msgstr ""

#. Tag: para
#: chapter-architecture.xml:339
#, no-c-format
msgid "The Client-Side Engine of Vaadin uses JSON through Google Web Toolkit, which supports JSON communications in the <classname>com.google.gwt.json.client</classname> package. Together with advanced update optimization and caching, Vaadin is able to update changes in the user interface to the browser in an extremely efficient way."
msgstr ""

#. Tag: para
#: chapter-architecture.xml:348
#, no-c-format
msgid "The use of JSON is completely invisible to a developer using Vaadin. Implementation of client-server serialization in custom widgets uses abstract interfaces that may be implemented as any low-level interchange format, such as XML or JSON. Details on JSON communications are given in <xref linkend=\"uidl.json\"/>."
msgstr ""

#. Tag: title
#: chapter-architecture.xml:360
#, no-c-format
msgid "Applications as Java Servlet Sessions"
msgstr ""

#. Tag: para
#: chapter-architecture.xml:362
#, no-c-format
msgid "Vaadin framework does basically everything it does on top of the Java Servlet API, which lies hidden deep under the hood, with the terminal adapter being the lowest level layer for handling requests from the web container."
msgstr ""

#. Tag: para
#: chapter-architecture.xml:369
#, no-c-format
msgid "When the web container gets the first request for a URL registered for an application, it creates an instance of the <classname>ApplicationServlet</classname> class in Vaadin framework that inherits the <classname>HttpServlet</classname> class defined in Java Servlet API. It follows sessions by using <classname>HttpSession</classname> interface and associates an <classname>Application</classname> instance with each session. During the lifetime of a session, the framework relays user actions to the proper application instance, and further to a user interface component."
msgstr ""

#. Tag: title
#: chapter-architecture.xml:383
#, no-c-format
msgid "<title>Client-Side Engine</title>"
msgstr ""

#. Tag: para
#: chapter-architecture.xml:386
#, no-c-format
msgid "This section gives an overview of the client-side architecture of Vaadin. Knowledge of the client-side technologies is generally not needed unless you develop or use custom GWT components. <indexterm><primary>Google Web Toolkit</primary></indexterm> <indexterm><primary>Java</primary></indexterm> The client-side engine is based on Google Web Toolkit (GWT), which allows the development of the engine and client-side components solely with Java."
msgstr ""

#. Tag: para
#: chapter-architecture.xml:399
#, no-c-format
msgid "provides information about the integration of GWT-based user interface components with Vaadin."
msgstr ""

#. Tag: title
#: chapter-architecture.xml:405
#, no-c-format
msgid "Architecture of Vaadin Client-Side Engine"
msgstr ""

#. Tag: para
#: chapter-architecture.xml:416
#, no-c-format
msgid "illustrates the architecture of the client-side engine using a button component as an example. The user interface is managed by the <classname>ApplicationConnection</classname> class, which handles AJAX requests to the server and renders the user interface according to responses. Communications are done over HTTP(S) using the JSON data interchange format and the User Interface Definition Language (UIDL). In the server-side application, the button is used with the <classname>Button</classname> class of Vaadin. On the client-side, the user interface consists of various GWT components that inherit <classname>Widget</classname> class. In the figure above, the GWT class <classname>Button</classname> is used to render the button in the browser (the inheritance of <classname>Button</classname> is simplified in the figure). Vaadin provides an <classname>VButton</classname> class, which implements the <classname>Paintable</classname> interface needed for rendering the component with GWT."
msgstr ""

#. Tag: para
#: chapter-architecture.xml:434
#, no-c-format
msgid "The actual initial web page that is loaded in the browser is an empty page that loads the JavaScript code of the Vaadin Client-Side Engine. After it is loaded and started, it handles the AJAX requests to the server. All server communications are done through the <classname>ApplicationConnection</classname> class."
msgstr ""

#. Tag: para
#: chapter-architecture.xml:442
#, no-c-format
msgid "The communication with the server is done as UIDL (User Interface Definition Language) messages using the JSON message interchange format over a HTTP(S) connection. UIDL is described in <xref linkend=\"uidl\"/> and JSON in <xref linkend=\"architecture.technology.json\"/> and <xref linkend=\"uidl.json\"/>."
msgstr ""

#. Tag: title
#: chapter-architecture.xml:453
#, no-c-format
msgid "Events and Listeners"
msgstr ""

#. Tag: para
#: chapter-architecture.xml:455
#, no-c-format
msgid "Vaadin offers an event-driven programming model for handling user interaction. When a user does something in the user interface, such as clicks a button or selects an item, the application needs to know about it. Many Java-based user interface frameworks follow the Event-Listener pattern (also known as the Observer design pattern) to communicate user input to the application logic. So does Vaadin. The design pattern involves two kinds of elements: an object that generates (\"fires\" or \"emits\") events and a number of listeners that listen for the events. When such an event occurs, the object sends a notification about it to all the listeners. In a typical case, there is only one listener."
msgstr ""

#. Tag: para
#: chapter-architecture.xml:468
#, no-c-format
msgid "Events can serve many kinds of purposes. In Vaadin, the usual purpose of events is handling user interaction in a user interface. Session management can require special events, such as for time-out, in which case the event would actually be the lack of user interaction. Time-out is a special case of timed or scheduled events, where an event occurs at a specific date and time or when a set time has passed. Database and other asynchronous communications can cause events as well."
msgstr ""

#. Tag: para
#: chapter-architecture.xml:478
#, no-c-format
msgid "To receive events of a particular type, an application must register a listener object with the event source. The listeners are registered in the components with the <methodname>addListener()</methodname> method. The method has a generic version defined at the level of <classname>AbstractComponent</classname>, the base class of all components."
msgstr ""

#. Tag: para
#: chapter-architecture.xml:486
#, no-c-format
msgid "Most components that have related events define their own event class and corresponding listener classes. For example, the <classname>Button</classname> has <classname>Button.ClickEvent</classname> events, which can be listened to through the <classname>Button.ClickListener</classname> interface."
msgstr ""

#. Tag: para
#: chapter-architecture.xml:493
#, no-c-format
msgid "In the following, we handle button clicks with a listener implemented as an anonymous class:"
msgstr ""

#. Tag: programlisting
#: chapter-architecture.xml:498
#, no-c-format
msgid ""
"<![CDATA[final Button button = new Button(\"Push it!\");\n"
"\n"
"button.addListener(new Button.ClickListener() {\n"
"    public void buttonClick(ClickEvent event) {\n"
"        button.setCaption(\"You pushed it!\");\n"
"    }\n"
"});]]>"
msgstr ""

#. Tag: para
#: chapter-architecture.xml:500
#, no-c-format
msgid "illustrates the case where an application-specific class inherits the <classname>Button.ClickListener</classname> interface to be able to listen for button click events. The application must instantiate the listener class and register it with <methodname>addListener()</methodname>. When an event occurs, an event object is instantiated, in this case a <classname>ClickEvent</classname>. The event object knows the related UI component, in this case the <classname>Button</classname>."
msgstr ""

#. Tag: title
#: chapter-architecture.xml:513
#, no-c-format
msgid "Class Diagram of a Button Click Listener"
msgstr ""

#. Tag: para
#: chapter-architecture.xml:524
#, no-c-format
msgid "In the ancient times of C programming, <emphasis>callback functions</emphasis> filled largely the same need as listeners do now. In object-oriented languages, we have only classes and methods, not functions, so the application has to give a class interface instead of a callback function pointer to the framework. However, Vaadin supports defining a method as a listener as well, using the <classname>MethodListener</classname> wrapper."
msgstr ""

#. Tag: para
#: chapter-architecture.xml:533
#, no-c-format
msgid "Notice that many listener interfaces inherit the <classname>java.util.EventListener</classname> superinterface, but it is not generally necessary to inherit it."
msgstr ""

#. Tag: para
#: chapter-architecture.xml:539
#, no-c-format
msgid "goes into details of handling events in practice."
msgstr ""
