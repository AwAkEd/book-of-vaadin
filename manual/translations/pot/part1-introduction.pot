msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2009-09-07 14:42+0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. When image changes, this message will be marked fuzzy or untranslated for you.
#. It doesn't matter what you translate it to: it's not used at all.
#: part1-introduction.xml:39(None) 
msgid "@@image: 'img/intro/architecture-lo.png'; md5=31f38e9d177414d409c656595b4b5109"
msgstr ""

#. When image changes, this message will be marked fuzzy or untranslated for you.
#. It doesn't matter what you translate it to: it's not used at all.
#: part1-introduction.xml:42(None) 
msgid "@@image: 'img/intro/architecture-hi.png'; md5=72dc809b8a01af7d5543a0ded35685c9"
msgstr ""

#. When image changes, this message will be marked fuzzy or untranslated for you.
#. It doesn't matter what you translate it to: it's not used at all.
#: part1-introduction.xml:106(None) 
msgid "@@image: 'img/intro/intro-themes-faded-lo.png'; md5=6310a2533f1652d06d9940e6e1c50121"
msgstr ""

#. When image changes, this message will be marked fuzzy or untranslated for you.
#. It doesn't matter what you translate it to: it's not used at all.
#: part1-introduction.xml:109(None) 
msgid "@@image: 'img/intro/intro-themes-faded-hi.png'; md5=805dafd19b25d3a901789837f4330f08"
msgstr ""

#. When image changes, this message will be marked fuzzy or untranslated for you.
#. It doesn't matter what you translate it to: it's not used at all.
#: part1-introduction.xml:195(None) 
msgid "@@image: 'img/intro/HelloWorld.png'; md5=eb97626c7f598269a6bbe9108074750f"
msgstr ""

#: part1-introduction.xml:4(title) 
msgid "Introduction"
msgstr ""

#: part1-introduction.xml:6(para) 
msgid "This chapter provides an introduction to software development with Vaadin, including installation of Vaadin, the Eclipse development environment, and any other necessary or useful utilities. We look into the design philosophy behind Vaadin, its history, and recent major changes."
msgstr ""

#: part1-introduction.xml:14(title) 
msgid "Overview"
msgstr ""

#: part1-introduction.xml:16(para) 
msgid "The core piece of Vaadin is the Java library that is designed to make creation and maintenance of high quality web-based user interfaces easy. The key idea in the server-driven programming model of Vaadin is that it allows you to forget the web and lets you program user interfaces much like you would program any Java desktop application with conventional toolkits such as AWT, Swing, or SWT. But easier."
msgstr ""

#: part1-introduction.xml:25(para) 
msgid "While traditional web programming is a fun way to spend your time learning new web technologies, you probably want to be productive and concentrate on the application logic. With the server-driven programming model, Vaadin takes care of managing the user interface in the browser and <firstterm>AJAX</firstterm> communications between the browser and the server. With the Vaadin approach, you do not need to learn and debug browser technologies, such as HTML or JavaScript."
msgstr ""

#: part1-introduction.xml:36(title) 
msgid "General Architecture of Vaadin"
msgstr ""

#: part1-introduction.xml:47(para) 
msgid "<xref linkend=\"figure.intro.architecture\"/> illustrates the basic architecture of web applications made with Vaadin. Vaadin consists of the <emphasis>server-side framework</emphasis> and a <emphasis>client-side engine</emphasis> that runs in the browser as a JavaScript program, rendering the user interface and delivering user interaction to the server. As the application runs as a persistent Java Servlet session in an application server, you can easily bind your application to data and logic tiers."
msgstr ""

#: part1-introduction.xml:57(para) 
msgid "Because HTML, JavaScript, and other browser technologies are essentially invisible to the application logic, you can think of the web browser as only a thin client platform. A thin client displays the user interface and communicates user events to the server at a low level. The control logic of the user interface runs on a Java-based web server, together with your business logic. By contrast, a normal client-server architecture with a dedicated client application would include a lot of application specific communications between the client and the server. Essentially removing the user interface tier from the application architecture makes our approach a very effective one."
msgstr ""

#: part1-introduction.xml:73(para) 
msgid "As the Client-Side Engine is executed as JavaScript in the browser, no browser plugins are needed for using applications made with Vaadin. This gives it a sharp edge over frameworks based on Flash, Java Applets, or other plugins. Vaadin relies on the support of GWT for a wide range of browsers, so that the developer doesn't need to worry about browser support."
msgstr ""

#: part1-introduction.xml:81(para) 
msgid "Behind the server-driven development model, Vaadin makes the best use of AJAX (<firstterm>Asynchronous JavaScript and XML</firstterm>) techniques that make it possible to create Rich Internet Applications (RIA) that are as responsive and interactive as desktop applications. If you're a newcomer to AJAX, see <xref linkend=\"architecture.technology.ajax\"/> to find out what it is and how AJAX applications differ from traditional web applications."
msgstr ""

#: part1-introduction.xml:90(para) 
msgid "Hidden well under the hood, Vaadin uses <firstterm>GWT</firstterm>, the <firstterm>Google Web Toolkit</firstterm>, for rendering the user interface in the browser. GWT programs are written in Java, but compiled into JavaScript, thus freeing the developer from learning JavaScript and other browser technologies. GWT is ideal for implementing advanced user interface components (or widgets in GWT terminology) and interaction logic in the browser, while Vaadin handles the actual application logic in the server. Vaadin is designed to be extensible, and you can indeed use any 3rd-party GWT components easily, in addition to the component repertoire offered in Vaadin. The use of GWT also means that all the code you need to write is pure Java."
msgstr ""

#: part1-introduction.xml:114(para) 
msgid "The Vaadin library defines a clear separation between user interface presentation and logic and allows you to develop them separately. Our approach to this is <firstterm>themes</firstterm>, which dictate the visual appearance of applications. Themes control the appearance of the user interfaces using CSS and (optional) HTML page templates. As Vaadin provides excellent default themes, you do not usually need to make much customization, but you can if you need to. For more about themes, see <xref linkend=\"themes\"/>."
msgstr ""

#: part1-introduction.xml:125(para) 
msgid "We hope that this is enough about the basic architecture and features of Vaadin for now. You can read more about it later in <xref linkend=\"architecture\"/>, or jump straight to more practical things in <xref linkend=\"application\"/>."
msgstr ""

#: part1-introduction.xml:134(title) 
msgid "Example Application Walkthrough"
msgstr ""

#: part1-introduction.xml:136(para) 
msgid "Let us follow the long tradition of first saying \"Hello World!\" when learning a new programming environment. After that, we can go through a more detailed example that implements the model-view-controller architecture. The two examples given are really simple, but this is mostly because Vaadin is designed to make things simple."
msgstr ""

#: part1-introduction.xml:145(title) 
msgid "HelloWorld.java"
msgstr ""

#: part1-introduction.xml:158(para) 
msgid "The first thing to note is that the example application extends <classname>com.vaadin.Application</classname> class. The <classname>Application</classname> class is used as the base class for all user applications. Instances of the <classname>Application</classname> are essentially user sessions, and one is created for each user using the application. In the context of our HelloWorld application, it is sufficient to know that the application is started when the user first accesses it and at that time <methodname>init</methodname> method is invoked."
msgstr ""

#: part1-introduction.xml:170(para) 
msgid "Initialization of the application first creates a new window object and sets \"Hello window\" as its caption. The window is then set as the main window of the application; an application can actually have many windows. This means that when a user launches the application, the contents of the \"main window\" are shown to the user in the web page. The caption is shown as the title of the (browser) window."
msgstr ""

#: part1-introduction.xml:179(para) 
msgid "A new user interface component of class <classname>com.vaadin.ui.Label</classname> is created. The label is set to draw the text \"Hello World!\". Finally, the label is added to the main window. And here we are, when the application is started, it draws the text \"Hello World!\" to the browser window."
msgstr ""

#: part1-introduction.xml:187(para) 
msgid "The following screenshot shows what the \"Hello World!\" program will look like in a web browser."
msgstr ""

#: part1-introduction.xml:200(para) 
msgid "Before going into details, we should note that this example source code is complete and does not need any additional declaratively defined template files to be run. To run the program, you can just add it to your web application, as explained in <xref linkend=\"application.environment\"/>."
msgstr ""

#: part1-introduction.xml:209(title) 
msgid "Support for the Eclipse IDE"
msgstr ""

#: part1-introduction.xml:211(para) 
msgid "While Vaadin is not bound to any specific IDE, and you can in fact easily use it without any IDE altogether, we provide special support for the Eclipse IDE, which has become the standard environment for Java development. The support includes:"
msgstr ""

#: part1-introduction.xml:220(para) 
msgid "Import the installation package as a QuickStart demo project in Eclipse"
msgstr ""

#: part1-introduction.xml:224(para) 
msgid "Install the Vaadin Plugin for Eclipse, which allows you to:"
msgstr ""

#: part1-introduction.xml:228(para) 
msgid "Create new Vaadin projects"
msgstr ""

#: part1-introduction.xml:232(para) 
msgid "Create custom themes"
msgstr ""

#: part1-introduction.xml:236(para) 
msgid "Create custom client-side widgets and widget sets"
msgstr ""

#: part1-introduction.xml:240(para) 
msgid "Edit components with a visual (WYSIWYG) editor"
msgstr ""

#: part1-introduction.xml:244(para) 
msgid "Easily upgrade to a newer version of the Vaadin library"
msgstr ""

#: part1-introduction.xml:250(para) 
msgid "The Vaadin Plugin for Eclipse is our recommended way of installing Vaadin; the actual installation package contains demos and documentation that are available also from the website, so you do not normally need to download and install it, unless you want to experiment with the demos or try debugging."
msgstr ""

#: part1-introduction.xml:257(para) 
msgid "Installing and updating the plugin is covered in <xref linkend=\"getting-started.environment.eclipse-plugin\"/> and the creation of a new Vaadin project using the plugin in <xref linkend=\"getting-started.first-project.creation\"/>. See <xref linkend=\"themes.eclipse\"/>, <xref linkend=\"gwt.eclipse\"/>, and <xref linkend=\"eclipse\"/> for instructions on using the different features of the plugin."
msgstr ""

#: part1-introduction.xml:269(title) 
msgid "Goals and Philosophy"
msgstr ""

#: part1-introduction.xml:271(para) 
msgid "Simply put, Vaadin's ambition is to be the best possible tool when it comes to creating web user interfaces for business applications. It is easy to adopt, as it is designed to support both entry-level and advanced programmers, as well as usability experts and graphical designers."
msgstr ""

#: part1-introduction.xml:279(para) 
msgid "When designing Vaadin, we have followed the philosophy inscribed in the following rules."
msgstr ""

#: part1-introduction.xml:285(title) 
msgid "Right tool for the right purpose"
msgstr ""

#: part1-introduction.xml:287(para) 
msgid "Because our goals are high, the focus must be clear. This toolkit is designed for creating web applications. It is not designed for creating websites or advertisements demos. For such purposes, you might find (for instance) JSP/JSF or Flash more suitable."
msgstr ""

#: part1-introduction.xml:296(title) 
msgid "Simplicity and maintainability"
msgstr ""

#: part1-introduction.xml:298(para) 
msgid "We have chosen to emphasize robustness, simplicity, and maintainability. This involves following the well-established best practices in user interface frameworks and ensuring that our implementation represents an ideal solution for its purpose without clutter or bloat."
msgstr ""

#: part1-introduction.xml:308(title) 
msgid "XML is not designed for programming"
msgstr ""

#: part1-introduction.xml:309(para) 
msgid "The Web is inherently document-centered and very much bound to the declarative presentation of user interfaces. The Vaadin framework frees the programmer from these limitations. It is far more natural to create user interfaces by programming them than by defining them in declarative templates, which are not flexible enough for complex and dynamic user interaction."
msgstr ""

#: part1-introduction.xml:320(title) 
msgid "Tools should not limit your work"
msgstr ""

#: part1-introduction.xml:321(para) 
msgid "There should not be any limits on what you can do with the framework: if for some reason the user interface components do not support what you need to achieve, it must be easy to add new ones to your application. When you need to create new components, the role of the framework is critical: it makes it easy to create re-usable components that are easy to maintain."
msgstr ""

#: part1-introduction.xml:333(title) 
msgid "Background"
msgstr ""

#: part1-introduction.xml:335(para) 
msgid "The library was not written overnight. After working with web user interfaces since the beginning of the Web, a group of developers got together in 2000 to form IT Mill. The team had a desire to develop a new programming paradigm that would support the creation of real user interfaces for real applications using a real programming language."
msgstr ""

#: part1-introduction.xml:343(para) 
msgid "The library was originally called Millstone Library. The first version was used in a large production application that IT Mill designed and implemented for an international pharmaceutical company. IT Mill made the application already in the year 2001 and it is still in use. Since then, the company has produced dozens of large business applications with the library and it has proven its ability to solve hard problems easily."
msgstr ""

#: part1-introduction.xml:352(para) 
msgid "The next generation of the library, IT Mill Toolkit Release 4, was released in 2006. It introduced an entirely new AJAX-based presentation engine. This allowed the development of AJAX applications without the need to worry about communications between the client and the server."
msgstr ""

#: part1-introduction.xml:360(title) 
msgid "Release 5 Into the Open"
msgstr ""

#: part1-introduction.xml:362(para) 
msgid "IT Mill Toolkit 5, released at the end of 2007, took a significant step further into AJAX. The client-side rendering of the user interface was completely rewritten using GWT, the Google Web Toolkit. This allowed the use of Java for developing all aspects of the framework. It also allows easy integration of existing GWT components."
msgstr ""

#: part1-introduction.xml:370(para) 
msgid "The Release 5 was published under the Apache License 2, an unrestrictive open source license, to create faster expansion of the user base and make the formation of a development community possible."
msgstr ""

#: part1-introduction.xml:376(para) 
msgid "Stabilization of the release 5 took over a year of work from the development team. It introduced a number of changes in the API, the client-side customization layer, and the themes. Many significant changes were done during the beta phase, until the stable version 5.3.0 was released in March 2009."
msgstr ""

#: part1-introduction.xml:384(para) 
msgid "IT Mill Toolkit 5 introduced many significant improvements both in the API and in the functionality. Many of the user interface components in IT Mill Toolkit 4 and before were available as styles for a basic set of components. For example, the <classname>Select</classname> class allowed selection of items from a list. Normally, it would show as a dropdown list, but setting <literal>setStyle(\"optiongroup\")</literal> would change it to a radio button group. In Release 5, we have obsoleted the <methodname>setStyle()</methodname> method and provided distinct classes for such variations. For example, we now have <classname>OptionGroup</classname> that inherits the <classname>AbstractSelect</classname> component. In a similar fashion, the <classname>Button</classname> component had a <parameter>switchMode</parameter> attribute, set with <methodname>setSwitchMode()</methodname>, that would turn the button into a check box. Release 5 introduces a separate <classname>CheckBox</classname> component. The <methodname>setStyle()</methodname> method actually had a dual function, as it was also used to set the HTML element <parameter>class</parameter> attribute for the components to allow styling in CSS. This functionality has been changed to <methodname>addStyle()</methodname> and <methodname>removeStyle()</methodname> methods."
msgstr ""

#: part1-introduction.xml:408(para) 
msgid "The <classname>OrderedLayout</classname> was replaced (since the first stable version 5.3.0) with specific <classname>VerticalLayout</classname> and <classname>HorizontalLayout</classname> classes."
msgstr ""

#: part1-introduction.xml:414(para) 
msgid "Release 5 introduced <emphasis>expansion ratio</emphasis> for applicable layout components. It allows you to designate one or more components as expanding and set their relative expansion ratios. The layout will then distribute the left-over space between the expanded components according to the ratios. The release also introduces a number of new user interface components: <classname>SplitPanel</classname>, <classname>Slider</classname>, <classname>Notification</classname>, <classname>LoginForm</classname>, <classname>MenuBar</classname>, <classname>UriFragmentUtility</classname> and <classname>RichTextEditor</classname>."
msgstr ""

#: part1-introduction.xml:427(para) 
msgid "The Client-Side Engine of IT Mill Toolkit was entirely rewritten with Google Web Toolkit. This did not, by itself, cause any changes in the API of IT Mill Toolkit, because GWT is a browser technology that is well hidden behind the API. The transition from JavaScript to GWT makes the development and integration of custom components and customization of existing components much easier than before. It does, however, require reimplementation of any existing custom client-side code with GWT. See <xref linkend=\"architecture\"/> for more information on the impact of GWT on the architecture and <xref linkend=\"gwt\"/> for details regarding creation or integration of custom client-side components with GWT."
msgstr ""

#: part1-introduction.xml:441(para) 
msgid "The release introduced an entirely new, simplified architecture for themes. Themes control the appearance of web applications with CSS and can include images, HTML templates for custom layouts, and other related resources. The old themeing architecture in Release 4 required use of some JavaScript even in the simplest themes, and definition of a theme XML descriptor. In Release 5, you simply include the CSS file for the theme and any necessary graphics and HTML templates for custom layouts. For more details on the revised theme architecture, see <xref linkend=\"themes\"/>. Old CSS files are not compatible with Release 5, as the HTML class style names of components have changed. As GWT implements many components with somewhat different HTML elements than what IT Mill Toolkit Release 4 used, styles may need to be updated also in that respect."
msgstr ""

#: part1-introduction.xml:459(title) 
msgid "Birth of Vaadin Release 6"
msgstr ""

#: part1-introduction.xml:461(para) 
msgid "IT Mill Toolkit was renamed as <emphasis>Vaadin</emphasis> in spring 2009 to avoid common confusions with the name (IT Mill is a company not the product) and to clarify the separation between the company and the open source project. Vaadin means a female semi-domesticated mountain reindeer in Finnish."
msgstr ""

#: part1-introduction.xml:469(para) 
msgid "The most notable enhancements in Vaadin 6 are the following external development tools:"
msgstr ""

#: part1-introduction.xml:475(listitem) 
msgid "Eclipse Plugin"
msgstr ""

#: part1-introduction.xml:476(listitem) 
msgid "Visual user interface editor under Eclipse (experimental)"
msgstr ""

#: part1-introduction.xml:479(para) 
msgid "The Eclipse Plugin allows easy creation of Vaadin projects and custom client-side widgets. See <xref linkend=\"getting-started.environment.eclipse-plugin\"/> for details. The visual editor, described in <xref linkend=\"eclipse\"/> makes prototyping easy and new users of Vaadin should find it especially useful for introducing oneself to Vaadin. Like Vaadin itself, the tools are open source."
msgstr ""

#: part1-introduction.xml:489(para) 
msgid "While the API in Vaadin 6 is essentially backward-compatible with IT Mill Toolkit 5.4, the package names and some name prefixes were changed to comply with the new product name:"
msgstr ""

#: part1-introduction.xml:496(package) 
msgid "com.itmill.toolkit"
msgstr ""

#: part1-introduction.xml:496(package) 
msgid "com.vaadin"
msgstr ""

#: part1-introduction.xml:496(listitem) 
msgid "Package name <placeholder-1/> was renamed as <placeholder-2/>."
msgstr ""

#: part1-introduction.xml:497(literal) 
msgid "ITMILL"
msgstr ""

#: part1-introduction.xml:497(literal) 
msgid "VAADIN"
msgstr ""

#: part1-introduction.xml:497(listitem) 
msgid "The static resource directory <placeholder-1/> was changed to <placeholder-2/>."
msgstr ""

#: part1-introduction.xml:498(literal) 
msgid "I"
msgstr ""

#: part1-introduction.xml:498(literal) 
msgid "V"
msgstr ""

#: part1-introduction.xml:498(listitem) 
msgid "Client-side widget prefix was changed from \"<placeholder-1/>\" to \"<placeholder-2/>\"."
msgstr ""

#: part1-introduction.xml:499(literal) 
msgid "i-"
msgstr ""

#: part1-introduction.xml:499(literal) 
msgid "v-"
msgstr ""

#: part1-introduction.xml:499(listitem) 
msgid "CSS style name prefix was changed from \"<placeholder-1/>\" to \"<placeholder-2/>\"."
msgstr ""

#: part1-introduction.xml:502(para) 
msgid "Other enhancements in Vaadin 6 are listed in the Release Notes, which also gives detailed instructions for upgrading from IT Mill Toolkit 5."
msgstr ""

#. Put one translator per line, in the form of NAME <EMAIL>, YEAR1, YEAR2.
#: part1-introduction.xml:0(None) 
msgid "translator-credits"
msgstr ""

