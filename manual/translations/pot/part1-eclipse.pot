# SOME DESCRIPTIVE TITLE.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"Report-Msgid-Bugs-To: http://bugs.kde.org\n"
"POT-Creation-Date: 2011-11-03 16:11+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <kde-i18n-doc@kde.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. Tag: title
#: part1-eclipse.xml:4
#, no-c-format
msgid "Visual User Interface Design with Eclipse"
msgstr ""

#. Tag: primary
#: part1-eclipse.xml:7
#, no-c-format
msgid "Vaadin Plugin for Eclipse"
msgstr ""

#. Tag: secondary
#: part1-eclipse.xml:8
#, no-c-format
msgid "visual designer"
msgstr ""

#. Tag: classname
#: part1-eclipse.xml:12
#, no-c-format
msgid "CustomComponent"
msgstr ""

#. Tag: para
#: part1-eclipse.xml:15
#, no-c-format
msgid "This chapter provides instructions for developing the graphical user interface of Vaadin components with the Vaadin Plugin for the Eclipse IDE."
msgstr ""

#. Tag: title
#: part1-eclipse.xml:22
#, no-c-format
msgid "Overview"
msgstr ""

#. Tag: para
#: part1-eclipse.xml:24
#, no-c-format
msgid "The visual designer feature in the Vaadin Plugin for Eclipse allows you to design the user interface of an entire application or of specific custom components. The plugin generates the actual Java code, which is designed to be reusable, so you can design the basic layout of the user interface with the visual designer and build the user interaction logic on top of the generated code. You can use inheritance and composition to modify the components further."
msgstr ""

#. Tag: para
#: part1-eclipse.xml:34
#, no-c-format
msgid "For instructions on installing the plugin, see <xref linkend=\"getting-started.environment.eclipse-plugin\"/>."
msgstr ""

#. Tag: title
#: part1-eclipse.xml:42
#, no-c-format
msgid "Creating a New <classname>CustomComponent</classname>"
msgstr ""

#. Tag: para
#: part1-eclipse.xml:44
#, no-c-format
msgid "The visual designer works with classes that extend the <classname>CustomComponent</classname> class, which is the basic technique in Vaadin for creating composite components. Component composition is described in <xref linkend=\"components.customcomponent\"/>. Any <classname>CustomComponent</classname> will not do for the visual designer; you need to create a new one as instructed below."
msgstr ""

#. Tag: para
#: part1-eclipse.xml:55
#, no-c-format
msgid "Select <menuchoice><guimenu>File</guimenu><guisubmenu>New</guisubmenu><guimenuitem>Other...</guimenuitem></menuchoice> in the main menu or right-click the <guilabel>Project Explorer</guilabel> and select <menuchoice><guimenu>New</guimenu><guimenuitem>Other...</guimenuitem></menuchoice> to open the <guilabel>New</guilabel> window."
msgstr ""

#. Tag: para
#: part1-eclipse.xml:66
#, no-c-format
msgid "In the first, <guilabel>Select a wizard</guilabel> step, select <menuchoice><guimenu>Vaadin</guimenu><guimenuitem>Vaadin CustomComponent</guimenuitem></menuchoice> and click <guibutton>Next</guibutton>."
msgstr ""

#. Tag: para
#: part1-eclipse.xml:86
#, no-c-format
msgid "The <guilabel>Source folder</guilabel> is the root source directory where the new component will be created. This is by default the default source directory of your project."
msgstr ""

#. Tag: para
#: part1-eclipse.xml:103
#, no-c-format
msgid "Enter the Java <guilabel>Package</guilabel> under which the new component class should be created or select it by clicking the <guibutton>Browse</guibutton> button. Also enter the class <guilabel>Name</guilabel> of the new component."
msgstr ""

#. Tag: para
#: part1-eclipse.xml:110
#, no-c-format
msgid "Finally, click <guibutton>Finish</guibutton> to create the component."
msgstr ""

#. Tag: para
#: part1-eclipse.xml:116
#, no-c-format
msgid "A newly created composite component is opened in the <guilabel>Design</guilabel> window, as shown in <xref linkend=\"figure.eclipse.editor.source.new\"/>."
msgstr ""

#. Tag: title
#: part1-eclipse.xml:123
#, no-c-format
msgid "New Composite Component"
msgstr ""

#. Tag: para
#: part1-eclipse.xml:134
#, no-c-format
msgid "You can observe that a component that you can edit with the visual designer has two tabs at the bottom of the view: <guilabel>Source</guilabel> and <guilabel>Design</guilabel>. These tabs allow switching between the source view and the visual design view."
msgstr ""

#. Tag: para
#: part1-eclipse.xml:141
#, no-c-format
msgid "If you later open the source file for editing, the <guilabel>Source</guilabel> and <guilabel>Design</guilabel> tabs should appear below the source editor. If they do not, right-click the file in the Project Explorer and select <menuchoice><guimenu>Open With</guimenu><guimenuchoice>Vaadin Editor</guimenuchoice></menuchoice>."
msgstr ""

#. Tag: title
#: part1-eclipse.xml:151
#, no-c-format
msgid "Using The Visual Designer"
msgstr ""

#. Tag: para
#: part1-eclipse.xml:153
#, no-c-format
msgid "The visual editor view consists of, on the left side, an <emphasis>editing area</emphasis> that displays the current layout and, on the right side, a <emphasis>control panel</emphasis> that contains a <emphasis>component list</emphasis> for selecting new components to add, the current <emphasis>component tree</emphasis>, and a <emphasis>component property panel</emphasis>."
msgstr ""

#. Tag: title
#: part1-eclipse.xml:163
#, no-c-format
msgid "Adding New Components"
msgstr ""

#. Tag: para
#: part1-eclipse.xml:165
#, no-c-format
msgid "Adding new components to the user interface is done as follows by dragging them from the component list to either the editing area or to the component tree. If you drag the components to the tree,"
msgstr ""

#. Tag: listitem
#: part1-eclipse.xml:172
#, no-c-format
msgid "Select which components are shown in the component list by entering a search string or by expanding the filters and selecting only the desired component categories."
msgstr ""

#. Tag: para
#: part1-eclipse.xml:179
#, no-c-format
msgid "Drag a component from the component list to either:"
msgstr ""

#. Tag: listitem
#: part1-eclipse.xml:184
#, no-c-format
msgid "Editing area, where you can easily move and resize the component. Dragging a component onto a layout component will add it in it and you can also position components within a layout by dragging them."
msgstr ""

#. Tag: listitem
#: part1-eclipse.xml:189
#, no-c-format
msgid "Component tree. Remember that you can only add components under a layout component or other component container."
msgstr ""

#. Tag: para
#: part1-eclipse.xml:196
#, no-c-format
msgid "Edit the component properties"
msgstr ""

#. Tag: listitem
#: part1-eclipse.xml:201
#, no-c-format
msgid "In the editing area, you can move and resize the components, and set their alignment in the containing layout."
msgstr ""

#. Tag: listitem
#: part1-eclipse.xml:205
#, no-c-format
msgid "In the property panel, you can set the component name, size, position and other properties."
msgstr ""

#. Tag: title
#: part1-eclipse.xml:214
#, no-c-format
msgid "Adding a New Component Node"
msgstr ""

#. Tag: para
#: part1-eclipse.xml:225
#, no-c-format
msgid "You can delete a component by right-clicking it in the component tree and selecting <menuchoice><guimenuitem>Remove</guimenuitem></menuchoice>. The context menu also allows copying and pasting components."
msgstr ""

#. Tag: para
#: part1-eclipse.xml:231
#, no-c-format
msgid "A composite component created by the plugin must have a <classname>AbsoluteLayout</classname> as its root layout. While it is suitable for the visual designer, absolute layouts are rarely used otherwise in Vaadin applications. If you want to use another root layout, you can add another layout inside the <literal>mainLayout</literal> and set that as the root with <methodname>setCompositionRoot()</methodname> in the source view. It will be used as the root when the component is actually used in an application."
msgstr ""

#. Tag: title
#: part1-eclipse.xml:244
#, no-c-format
msgid "Setting Component Properties"
msgstr ""

#. Tag: para
#: part1-eclipse.xml:246
#, no-c-format
msgid "The property setting area of the control panel allows setting component properties. The area is divided into basic properties, size and position settings, and other properties, which includes also styles."
msgstr ""

#. Tag: title
#: part1-eclipse.xml:253
#, no-c-format
msgid "Basic Properties"
msgstr ""

#. Tag: para
#: part1-eclipse.xml:255
#, no-c-format
msgid "The top section of the property panel, shown in <xref linkend=\"figure.eclipse.editor.component-properties.basic\"/>, allows settings basic component properties."
msgstr ""

#. Tag: title
#: part1-eclipse.xml:262
#, no-c-format
msgid "Basic Component Properties"
msgstr ""

#. Tag: para
#: part1-eclipse.xml:273
#, no-c-format
msgid "The basic properties are:"
msgstr ""

#. Tag: term
#: part1-eclipse.xml:279
#, no-c-format
msgid "Component name"
msgstr ""

#. Tag: para
#: part1-eclipse.xml:281
#, no-c-format
msgid "The name of the component, which is used for the reference to the component, so it must obey Java notation for variable names."
msgstr ""

#. Tag: term
#: part1-eclipse.xml:289
#, no-c-format
msgid "Caption"
msgstr ""

#. Tag: para
#: part1-eclipse.xml:291
#, no-c-format
msgid "The caption of a component is usually displayed above the component. Some components, such as <classname>Button</classname>, display the caption inside the component. For <classname>Label</classname> text, you should set the value of the label instead of the caption, which should be left empty."
msgstr ""

#. Tag: term
#: part1-eclipse.xml:302
#, no-c-format
msgid "Description (tooltip)"
msgstr ""

#. Tag: para
#: part1-eclipse.xml:304
#, no-c-format
msgid "The description is usually displayed as a tooltip when the mouse pointer hovers over the component for a while. Some components, such as <classname>Form</classname> have their own way of displaying the description."
msgstr ""

#. Tag: term
#: part1-eclipse.xml:313
#, no-c-format
msgid "Icon"
msgstr ""

#. Tag: para
#: part1-eclipse.xml:315
#, no-c-format
msgid "The icon of a component is usually displayed above the component, left of the caption. Some components, such as <classname>Button</classname>, display the icon inside the component."
msgstr ""

#. Tag: term
#: part1-eclipse.xml:324
#, no-c-format
msgid "Formatting type"
msgstr ""

#. Tag: para
#: part1-eclipse.xml:326
#, no-c-format
msgid "Some components allow different formatting types, such as <classname>Label</classname>, which allow formatting either as <guilabel>Text</guilabel>, <guilabel>XHTML</guilabel>, <guilabel>Preformatted</guilabel>, and <guilabel>Raw</guilabel>."
msgstr ""

#. Tag: term
#: part1-eclipse.xml:337
#, no-c-format
msgid "Value"
msgstr ""

#. Tag: para
#: part1-eclipse.xml:339
#, no-c-format
msgid "The component value. The value type and how it is displayed by the component varies between different component types and each value type has its own editor. The editor opens by clicking on the <guibutton>...</guibutton> button."
msgstr ""

#. Tag: para
#: part1-eclipse.xml:350
#, no-c-format
msgid "Most of the basic component properties are defined in the <classname>Component</classname> interface; see <xref linkend=\"components.interfaces.component\"/> for further details."
msgstr ""

#. Tag: title
#: part1-eclipse.xml:359
#, no-c-format
msgid "Size and Position"
msgstr ""

#. Tag: para
#: part1-eclipse.xml:361
#, no-c-format
msgid "The size of a component is determined by its width and height, which you can give in the two edit boxes in the control panel. You can use any unit specifiers for components, as described in <xref linkend=\"components.features.sizeable\"/>. Emptying a size box will make the size \"automatic\", which means setting the size as <emphasis>undefined</emphasis>. In the generated code, the undefined value will be expressed as \"<literal>-1px</literal>\"."
msgstr ""

#. Tag: para
#: part1-eclipse.xml:371
#, no-c-format
msgid "Setting width of \"<literal>100px</literal>\" and <emphasis>auto</emphasis> (undefined or empty) height would result in the following generated settings for a button:"
msgstr ""

#. Tag: programlisting
#: part1-eclipse.xml:377
#, no-c-format
msgid ""
      "<![CDATA[// myButton\n"
      "myButton = new Button();\n"
      "...\n"
      "myButton.setHeight(\"-1px\");\n"
      "myButton.setWidth(\"100px\");\n"
      "...]]>"
msgstr ""

#. Tag: para
#: part1-eclipse.xml:379
#, no-c-format
msgid "shows the control panel area for the size and position."
msgstr ""

#. Tag: title
#: part1-eclipse.xml:385
#, no-c-format
msgid "Component Size and Position"
msgstr ""

#. Tag: para
#: part1-eclipse.xml:396
#, no-c-format
msgid "The generated code for the example would be:"
msgstr ""

#. Tag: programlisting
#: part1-eclipse.xml:400
#, no-c-format
msgid ""
      "<?pocket-size 75% ?><![CDATA[// myButton\n"
      "myButton = new Button();\n"
      "myButton.setWidth(\"-1px\");\n"
      "myButton.setHeight(\"-1px\");\n"
      "myButton.setImmediate(true);\n"
      "myButton.setCaption(\"My Button\");\n"
      "mainLayout.addComponent(myButton,\n"
      "                        \"top:243.0px;left:152.0px;\");]]>"
msgstr ""

#. Tag: para
#: part1-eclipse.xml:402
#, no-c-format
msgid "The position is given as a CSS position in the second parameter for <methodname>addComponent()</methodname>. The values \"<literal>-1px</literal>\" for width and height will make the button to be sized automatically to the minimum size required by the caption."
msgstr ""

#. Tag: para
#: part1-eclipse.xml:409
#, no-c-format
msgid "When editing the position of a component inside an <classname>AbsoluteLayout</classname>, the editor will display vertical and horizontal guides, which you can use to set the position of the component. See <xref linkend=\"eclipse.editor.absolutelayout\"/> for more information about editing absolute layouts."
msgstr ""

#. Tag: para
#: part1-eclipse.xml:417
#, no-c-format
msgid "The <guilabel>ZIndex</guilabel> setting controls the \"Z coordinate\" of the components, that is, which component will overlay which when they overlap. Value <literal>-1</literal> means automatic, in which case the components added to the layout later will be on top."
msgstr ""

#. Tag: title
#: part1-eclipse.xml:426 part1-eclipse.xml:435
#, no-c-format
msgid "Other Properties"
msgstr ""

#. Tag: para
#: part1-eclipse.xml:428
#, no-c-format
msgid "The bottom section of the property panel, shown in <xref linkend=\"figure.eclipse.editor.component-properties.other\"/>, allows settings other often used component properties."
msgstr ""

#. Tag: guilabel
#: part1-eclipse.xml:448
#, no-c-format
msgid "Style Names"
msgstr ""

#. Tag: para
#: part1-eclipse.xml:450
#, no-c-format
msgid "Enter the enabled CSS style names for the component as a space-seraparated list. See <xref linkend=\"themes\"/> for information on component styles in themes."
msgstr ""

#. Tag: guilabel
#: part1-eclipse.xml:458
#, no-c-format
msgid "Visible"
msgstr ""

#. Tag: para
#: part1-eclipse.xml:460
#, no-c-format
msgid "Defines whether the component is visible or hidden, as set with the <methodname>setVisible()</methodname> method."
msgstr ""

#. Tag: guilabel
#: part1-eclipse.xml:467
#, no-c-format
msgid "Enabled"
msgstr ""

#. Tag: para
#: part1-eclipse.xml:469
#, no-c-format
msgid "Defines whether the component is enabled or disabled, as set with the <methodname>setEnabled()</methodname> method. If disabled, no user interaction is allowed for the component and it is usually shown as shadowed."
msgstr ""

#. Tag: guilabel
#: part1-eclipse.xml:478
#, no-c-format
msgid "Read-only"
msgstr ""

#. Tag: para
#: part1-eclipse.xml:480
#, no-c-format
msgid "Defines whether editing the component is allowed, as set with the <methodname>setReadonly()</methodname> method."
msgstr ""

#. Tag: guilabel
#: part1-eclipse.xml:487
#, no-c-format
msgid "Immediate"
msgstr ""

#. Tag: para
#: part1-eclipse.xml:489
#, no-c-format
msgid "Defines whether user interaction with the component is updated immediately (after the component loses focus) in the server as a state or value chage in the component value."
msgstr ""

#. Tag: para
#: part1-eclipse.xml:499
#, no-c-format
msgid "Most of the component properties mentioned above are defined in the <classname>Component</classname> interface; see <xref linkend=\"components.interfaces.component\"/> for further details."
msgstr ""

#. Tag: title
#: part1-eclipse.xml:509
#, no-c-format
msgid "Editing an <classname>AbsoluteLayout</classname>"
msgstr ""

#. Tag: para
#: part1-eclipse.xml:511
#, no-c-format
msgid "The visual editor has interactive support for the <classname>AbsoluteLayout</classname> component that allows positioning components exactly at specified coordinates. You can position the components using guides that control the position attributes, shown in the control panel on the right. The position values are measured in pixels from the corresponding edge; the vertical and horizontal rulers show the distances from the top and left edge."
msgstr ""

#. Tag: para
#: part1-eclipse.xml:521
#, no-c-format
msgid "shows three components, a <classname>Label</classname>, a <classname>Table</classname>, and a <classname>Button</classname>, inside an <classname>AbsoluteLayout</classname>."
msgstr ""

#. Tag: title
#: part1-eclipse.xml:529
#, no-c-format
msgid "Positioning with <classname>AbsoluteLayout</classname>"
msgstr ""

#. Tag: para
#: part1-eclipse.xml:540
#, no-c-format
msgid "Position attributes that are empty are <emphasis>automatic</emphasis> and can be either zero (at the edge) or dynamic to make it shrink to fit the size of the component, depending on the component. Guides are shown also for the automatic position attributes and move automatically; in <xref linkend=\"figure.eclipse.editor.absolutelayout.button\"/> the right and bottom edges of the <classname>Button</classname> are automatic."
msgstr ""

#. Tag: para
#: part1-eclipse.xml:549
#, no-c-format
msgid "Moving an automatic guide manually makes the guide and the corresponding the position attribute non-automatic. To make a manually set attribute automatic, empty it in the control panel. <xref linkend=\"figure.eclipse.editor.absolutelayout.label\"/> shows a <classname>Label</classname> component with all the four edges set manually. Notice that if an automatic position is 0, the guide is at the edge of the ruler."
msgstr ""

#. Tag: title
#: part1-eclipse.xml:560
#, no-c-format
msgid "Manually positioned <classname>Label</classname>"
msgstr ""

#. Tag: title
#: part1-eclipse.xml:575
#, no-c-format
msgid "Structure of a Visually Editable Component"
msgstr ""

#. Tag: para
#: part1-eclipse.xml:577
#, no-c-format
msgid "A component created by the wizard and later managed by the visual editor has a very specific structure that allows you to insert your user interface logic in the component while keeping a minimal amount of code off-limits. You need to know what you can edit yourself and what exactly is managed by the editor. The managed member variables and methods are marked with the <classname>AutoGenerated</classname> annotation, as you can see later."
msgstr ""

#. Tag: para
#: part1-eclipse.xml:586
#, no-c-format
msgid "A visually editable component consists of:"
msgstr ""

#. Tag: para
#: part1-eclipse.xml:591
#, no-c-format
msgid "Member variables containing sub-component references"
msgstr ""

#. Tag: para
#: part1-eclipse.xml:592
#, no-c-format
msgid "Sub-component builder methods"
msgstr ""

#. Tag: para
#: part1-eclipse.xml:593
#, no-c-format
msgid "The constructor"
msgstr ""

#. Tag: para
#: part1-eclipse.xml:596
#, no-c-format
msgid "The structure of a composite component is hierarchical, a nested hierarchy of layout components containing other layout components as well as regular components. The root layout of the component tree, or the <emphasis>composition root</emphasis> of the <classname>CustomComponent</classname>, is named <literal>mainLayout</literal>. See <xref linkend=\"components.customcomponent\"/> for a detailed description of the structure of custom (composite) components."
msgstr ""

#. Tag: title
#: part1-eclipse.xml:608
#, no-c-format
msgid "Sub-Component References"
msgstr ""

#. Tag: para
#: part1-eclipse.xml:610
#, no-c-format
msgid "The <classname>CustomComponent</classname> class will include a reference to each contained component as a member variable. The most important of these is the <varname>mainLayout</varname> reference to the composition root layout. Such automatically generated member variables are marked with the <literal>@AutoGenerated</literal> annotation. They are managed by the editor, so you should not edit them manually, unless you know what you are doing."
msgstr ""

#. Tag: para
#: part1-eclipse.xml:620
#, no-c-format
msgid "A composite component with an <classname>AbsoluteLayout</classname> as the composition root, containing a <classname>Button</classname> and a <classname>Table</classname> would have the references as follows:"
msgstr ""

#. Tag: programlisting
#: part1-eclipse.xml:626
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[public class MyComponent extends CustomComponent {\n"
      "\n"
      "    @AutoGenerated\n"
      "    private AbsoluteLayout mainLayout;\n"
      "    @AutoGenerated\n"
      "    private Button myButton;\n"
      "    @AutoGenerated\n"
      "    private Table myTable;\n"
      "    ...]]>"
msgstr ""

#. Tag: para
#: part1-eclipse.xml:628
#, no-c-format
msgid "The names of the member variables are defined in the component properties panel of the visual editor, in the <guilabel>Component name</guilabel> field, as described in <xref linkend=\"eclipse.editor.component-properties.basic\"/>. While you can change the name of any other components, the name of the root layout is always <varname>mainLayout</varname>. It is fixed because the editor does not make changes to the constructor, as noted in <xref linkend=\"eclipse.structure.constructor\"/>. You can, however, change the type of the root layout, which is an <classname>AbsoluteLayout</classname> by default."
msgstr ""

#. Tag: para
#: part1-eclipse.xml:641
#, no-c-format
msgid "Certain typically static components, such as the <classname>Label</classname> label component, will not have a reference as a member variable. See the description of the builder methods below for details."
msgstr ""

#. Tag: title
#: part1-eclipse.xml:651
#, no-c-format
msgid "Sub-Component Builders"
msgstr ""

#. Tag: para
#: part1-eclipse.xml:653
#, no-c-format
msgid "Every managed layout component will have a builder method that creates the layout and all its contained components. The builder puts references to the created components in their corresponding member variables, and it also returns a reference to the created layout component."
msgstr ""

#. Tag: para
#: part1-eclipse.xml:660
#, no-c-format
msgid "Below is an example of an initial main layout:"
msgstr ""

#. Tag: programlisting
#: part1-eclipse.xml:664
#, no-c-format
msgid ""
      "<?pocket-size 75% ?><![CDATA[@AutoGenerated\n"
      "private AbsoluteLayout buildMainLayout() {\n"
      "    // common part: create layout\n"
      "    mainLayout = new AbsoluteLayout();\n"
      "    \n"
      "    // top-level component properties\n"
      "    setHeight(\"100.0%\");\n"
      "    setWidth(\"100.0%\");\n"
      "    \n"
      "    return mainLayout;\n"
      "}]]>"
msgstr ""

#. Tag: para
#: part1-eclipse.xml:666
#, no-c-format
msgid "Notice that while the builder methods return a reference to the created component, they also write the reference directly to the member variable. The returned reference might not be used by the generated code at all (in the constructor or in the builder methods), but you can use it for your purposes."
msgstr ""

#. Tag: para
#: part1-eclipse.xml:674
#, no-c-format
msgid "The builder of the main layout is called in the constructor, as explained in <xref linkend=\"eclipse.structure.constructor\"/>. When you have a layout with nested layout components, the builders of each layout will call the appropriate builder methods of their contained layouts to create their contents."
msgstr ""

#. Tag: title
#: part1-eclipse.xml:684
#, no-c-format
msgid "The Constructor"
msgstr ""

#. Tag: para
#: part1-eclipse.xml:686
#, no-c-format
msgid "When you create a new composite component using the wizard, it will create a constructor for the component and fill its basic content."
msgstr ""

#. Tag: programlisting
#: part1-eclipse.xml:691
#, no-c-format
msgid ""
      "<?pocket-size 65% ?><![CDATA[    public MyComponent() {\n"
      "        buildMainLayout();\n"
      "        setCompositionRoot(mainLayout);\n"
      "\n"
      "        // TODO add user code here\n"
      "    }]]>"
msgstr ""

#. Tag: para
#: part1-eclipse.xml:693
#, no-c-format
msgid "The most important thing to do in the constructor is to set the composition root of the <classname>CustomComponent</classname> with the <methodname>setCompositionRoot()</methodname> (see <xref linkend=\"components.customcomponent\"/> for more details on the composition root). The generated constructor first builds the root layout of the composite component with <methodname>buildMainLayout()</methodname> and then uses the <varname>mainLayout</varname> reference."
msgstr ""

#. Tag: para
#: part1-eclipse.xml:703
#, no-c-format
msgid "The editor will not change the constructor afterwards, so you can safely change it as you want. The editor does not allow changing the member variable holding a reference to the root layout, so it is always named <varname>mainLayout</varname>."
msgstr ""

