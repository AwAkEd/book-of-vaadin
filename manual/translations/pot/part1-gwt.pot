msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2009-09-07 14:42+0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. When image changes, this message will be marked fuzzy or untranslated for you.
#. It doesn't matter what you translate it to: it's not used at all.
#: part1-gwt.xml:126(None) 
msgid "@@image: 'img/gwt/gwt-widget-files-lo.png'; md5=d88d8dbd072a3b0fdb8ad0a318eb47e2"
msgstr ""

#. When image changes, this message will be marked fuzzy or untranslated for you.
#. It doesn't matter what you translate it to: it's not used at all.
#: part1-gwt.xml:129(None) 
msgid "@@image: 'img/gwt/gwt-widget-files-hi.png'; md5=a9798d87593b381add71320657c16f77"
msgstr ""

#. When image changes, this message will be marked fuzzy or untranslated for you.
#. It doesn't matter what you translate it to: it's not used at all.
#: part1-gwt.xml:206(None) part1-gwt.xml:209(None) 
msgid "@@image: 'img/eclipse/widgetset-new-select.png'; md5=eac678067ad83a0ac7091b7ce34d7bdb"
msgstr ""

#. When image changes, this message will be marked fuzzy or untranslated for you.
#. It doesn't matter what you translate it to: it's not used at all.
#: part1-gwt.xml:224(None) part1-gwt.xml:227(None) 
msgid "@@image: 'img/eclipse/widgetset-new-settings.png'; md5=3db93d4f50fbec7d8353735932149677"
msgstr ""

#. When image changes, this message will be marked fuzzy or untranslated for you.
#. It doesn't matter what you translate it to: it's not used at all.
#: part1-gwt.xml:400(None) part1-gwt.xml:403(None) 
msgid "@@image: 'img/eclipse/widget-new-select.png'; md5=f737582a502dc42f6573773ba481a5a4"
msgstr ""

#. When image changes, this message will be marked fuzzy or untranslated for you.
#. It doesn't matter what you translate it to: it's not used at all.
#: part1-gwt.xml:418(None) part1-gwt.xml:421(None) 
msgid "@@image: 'img/eclipse/widget-new-settings.png'; md5=6afe5d06270d88007fbc9673b51ba83a"
msgstr ""

#. When image changes, this message will be marked fuzzy or untranslated for you.
#. It doesn't matter what you translate it to: it's not used at all.
#: part1-gwt.xml:547(None) part1-gwt.xml:550(None) 
msgid "@@image: 'img/eclipse/widgetset-compiling.png'; md5=2fec27768964f0ad64efd46b257c9fd6"
msgstr ""

#. When image changes, this message will be marked fuzzy or untranslated for you.
#. It doesn't matter what you translate it to: it's not used at all.
#: part1-gwt.xml:597(None) 
msgid "@@image: 'img/gwt/gwt-widgets-lo.png'; md5=afebd487007a96741d1cddb5f8ccaa8f"
msgstr ""

#. When image changes, this message will be marked fuzzy or untranslated for you.
#. It doesn't matter what you translate it to: it's not used at all.
#: part1-gwt.xml:600(None) 
msgid "@@image: 'img/gwt/gwt-widgets-hi.png'; md5=6aec6a35c25de121237a83425c2ad0be"
msgstr ""

#. When image changes, this message will be marked fuzzy or untranslated for you.
#. It doesn't matter what you translate it to: it's not used at all.
#: part1-gwt.xml:785(None) part1-gwt.xml:788(None) 
msgid "@@image: 'img/custom/gwt-colorpicker-2b.png'; md5=0d20b0e16b29122f8ea473f7e5987a1e"
msgstr ""

#. When image changes, this message will be marked fuzzy or untranslated for you.
#. It doesn't matter what you translate it to: it's not used at all.
#: part1-gwt.xml:870(None) part1-gwt.xml:873(None) 
msgid "@@image: 'img/custom/gwt-colorpicker-2.png'; md5=52c1ed19c6944d7504c9fe8a7aeb5c2d"
msgstr ""

#. When image changes, this message will be marked fuzzy or untranslated for you.
#. It doesn't matter what you translate it to: it's not used at all.
#: part1-gwt.xml:2324(None) 
msgid "@@image: 'img/gwt/gwt-hostedmode-project-annotated-lo.png'; md5=c483e55a55fac61300095d1c27806faf"
msgstr ""

#. When image changes, this message will be marked fuzzy or untranslated for you.
#. It doesn't matter what you translate it to: it's not used at all.
#: part1-gwt.xml:2327(None) 
msgid "@@image: 'img/gwt/gwt-hostedmode-project-annotated-hi.png'; md5=045d856dc49c9ba07882a133628d7422"
msgstr ""

#. When image changes, this message will be marked fuzzy or untranslated for you.
#. It doesn't matter what you translate it to: it's not used at all.
#: part1-gwt.xml:2381(None) part1-gwt.xml:2384(None) 
msgid "@@image: 'img/custom/gwt-colorpicker-3.png'; md5=27d3baf6b0b3a074e69e9c129151b482"
msgstr ""

#. When image changes, this message will be marked fuzzy or untranslated for you.
#. It doesn't matter what you translate it to: it's not used at all.
#: part1-gwt.xml:2459(None) part1-gwt.xml:2462(None) 
msgid "@@image: 'img/gwt/gwt-hostedmode-launch-1.png'; md5=4f974d4bc076df463dcce9e67e65a2f6"
msgstr ""

#. When image changes, this message will be marked fuzzy or untranslated for you.
#. It doesn't matter what you translate it to: it's not used at all.
#: part1-gwt.xml:2479(None) part1-gwt.xml:2482(None) 
msgid "@@image: 'img/gwt/gwt-hostedmode-launch-2.png'; md5=30804d199e26cf424c62666962b07cb9"
msgstr ""

#. When image changes, this message will be marked fuzzy or untranslated for you.
#. It doesn't matter what you translate it to: it's not used at all.
#: part1-gwt.xml:2563(None) part1-gwt.xml:2566(None) 
msgid "@@image: 'img/gwt/gwt-hostedmode-launch-3.png'; md5=29920c0cd10a59f3fd6fabf2f2018bab"
msgstr ""

#. When image changes, this message will be marked fuzzy or untranslated for you.
#. It doesn't matter what you translate it to: it's not used at all.
#: part1-gwt.xml:2642(None) part1-gwt.xml:2645(None) 
msgid "@@image: 'img/gwt/gwt-hostedmode-debug-2.png'; md5=037a987f692a2a799ae931d38de168ce"
msgstr ""

#. When image changes, this message will be marked fuzzy or untranslated for you.
#. It doesn't matter what you translate it to: it's not used at all.
#: part1-gwt.xml:2663(None) part1-gwt.xml:2666(None) 
msgid "@@image: 'img/gwt/gwt-hostedmode-debug-1.png'; md5=194893d3395efb96fbb80c49a3ac1a8f"
msgstr ""

#: part1-gwt.xml:4(title) 
msgid "Developing Custom Components"
msgstr ""

#: part1-gwt.xml:6(para) 
msgid "This chapter describes how you can create custom client-side components as Google Web Toolkit (GWT) widgets and how you integrate them with Vaadin. The client-side implementations of all standard user interface components in Vaadin use the same client-side interfaces and patterns."
msgstr ""

#: part1-gwt.xml:13(para) 
msgid "Google Web Toolkit is intended for developing browser-based user interfaces using the Java language, which is compiled into JavaScript. Knowledge of such client-side technologies is usually not needed with Vaadin, as its repertoire of user interface components should be sufficient for most applications. The easiest way to create custom components in Vaadin is to make composite components with the <classname>CustomComponent</classname> class. See <xref linkend=\"components.customcomponent\"/> for more details on the composite components. In some cases, however, you may need to either make modifications to existing components or create new or integrate existing GWT widgets with your application."
msgstr ""

#: part1-gwt.xml:26(para) 
msgid "Creation of new widgets involves a number of rather intricate tasks. The Vaadin Plugin for Eclipse makes many of the tasks much easier, so if you are using Eclipse and the plugin, you should find <xref linkend=\"gwt.eclipse\"/> helpful."
msgstr ""

#: part1-gwt.xml:32(para) 
msgid "If you need more background on the architecture, <xref linkend=\"architecture.client-side\"/> gives an introduction to the architecture of the Vaadin Client-Side Engine. If you are new to Google Web Toolkit, <xref linkend=\"architecture.technology.gwt\"/> gives an introduction to GWT and its role in the architecture of Vaadin."
msgstr ""

#: part1-gwt.xml:41(title) 
msgid "On Terminology"
msgstr ""

#: part1-gwt.xml:42(para) 
msgid "Google Web Toolkit uses the term <emphasis>widget</emphasis> for user interface components. In this book, we use the term widget to refer to client-side components made with Google Web Toolkit, while using the term <emphasis>component</emphasis> in a general sense and also in the special sense for server-side components."
msgstr ""

#: part1-gwt.xml:52(title) 
msgid "Overview"
msgstr ""

#: part1-gwt.xml:54(para) 
msgid "Google Web Toolkit (GWT) is an integral part of Vaadin since Release 5. All rendering of user interface components in a web browser is programmed with GWT. Using custom GWT widgets is easy in Vaadin. This chapter gives an introduction to GWT widgets and details on how to integrate them with Vaadin."
msgstr ""

#: part1-gwt.xml:62(para) 
msgid "On the client side, in the web browser, you have the Vaadin Client-Side Engine. It uses the GWT framework, and both are compiled into a JavaScript runtime component. The client-side engine is contained in the <package>com.vaadin.terminal.gwt.client</package> package and the client-side implementations of various user interface components are in the <package>com.vaadin.terminal.gwt.client.ui</package> package. You can find the source code for these packages in the Vaadin installation package. You make custom components by inheriting GWT widget classes. To integrate them with Vaadin, you have to implement the <classname>Paintable</classname> interface of the Client-Side Engine that provides the AJAX communications with the server-side application. To enable the custom widgets, you also need to implement a <emphasis>widget set</emphasis>. A widget set is a factory class that can instantiate your widgets. It needs to inherit the <classname>DefaultWidgetSet</classname> that acts as the factory for the standard widgets. You can also define stylesheets for custom widgets. A client-side module is defined in a GWT Module Descriptor."
msgstr ""

#: part1-gwt.xml:82(para) 
msgid "To summarize, to implement a client-side widget that is integrated with Vaadin, you need the following:"
msgstr ""

#: part1-gwt.xml:88(classname) 
msgid "Paintable"
msgstr ""

#: part1-gwt.xml:88(listitem) 
msgid "A GWT widget that implements the <placeholder-1/> interface of the Vaadin Client-Side Engine"
msgstr ""

#: part1-gwt.xml:91(listitem) 
msgid "A widget factory (a \"widget set\") that can create the custom widget or widgets"
msgstr ""

#: part1-gwt.xml:93(listitem) 
msgid "Default CSS style sheet for the widget set (optional)"
msgstr ""

#: part1-gwt.xml:95(filename) 
msgid ".gwt.xml"
msgstr ""

#: part1-gwt.xml:95(listitem) 
msgid "A GWT Module Descriptor (<placeholder-1/>) that describes the entry point and style sheet"
msgstr ""

#: part1-gwt.xml:99(para) 
msgid "On the server side, you need to implement a server-side component that manages serialization and deserialization of its attributes with the client-side widget. A server-side component usually inherits the <classname>AbstractComponent</classname> or <classname>AbstractField</classname> class and implements either the <methodname>paintContent()</methodname> or the more generic <methodname>paint()</methodname> method to serialize its data to the client. These methods \"paint\" the component by generating a UIDL element that is sent to the client. The UIDL element contains all the relevant information about the component, and you can easily add your own attributes to it. Upon reception of UIDL messages, the client-side engine (using the widget set) creates or updates user interface widgets as needed."
msgstr ""

#: part1-gwt.xml:114(para) 
msgid "<xref linkend=\"figure.gwt.widget-files\"/> illustrates the folder hierarchy of the Color Picker example used in this chapter. The example is available in the demo application of Vaadin with URL <filename>/colorpicker/</filename>. You can find the full source code of the application in the source module for the demos in the installation package."
msgstr ""

#: part1-gwt.xml:123(title) 
msgid "Color Picker Module"
msgstr ""

#: part1-gwt.xml:134(para) 
msgid "The <filename>ColorPickerApplication.java</filename> application provides an example of using the <classname>ColorPicker</classname> custom component. To allow accessing the application, it must be defined in the deployment descriptor <filename>web.xml</filename>. See <xref linkend=\"section.web.web-xml\"/> for details. The source code for the server-side component is located in the same folder."
msgstr ""

#: part1-gwt.xml:143(para) 
msgid "A client-side widget set must be developed within a single source module tree. This is because GWT Compiler takes as its argument the root folder of the source code, in the Color Picker example the <filename>colorpicker.gwt.client</filename> module, and compiles all the contained Java source files into JavaScript. The path to the source files, the entry point class, and the style sheet are specified in the <filename>WidgetSet.gwt.xml</filename> descriptor for the GWT Compiler. The <filename>WidgetSet.java</filename> provides source code for the entry point, which is a factory class for creating the custom widget objects. The actual custom widget is split into two classes: <classname>GwtColorPicker</classname>, a pure GWT widget, and <classname>VColorPicker</classname> that provides the integration with Vaadin. The default style sheet for the widget set is provided in <filename>gwt/public/colorpicker/styles.css</filename>."
msgstr ""

#: part1-gwt.xml:163(title) 
msgid "Doing It the Simple Way in Eclipse"
msgstr ""

#: part1-gwt.xml:165(para) 
msgid "The Vaadin Plugin for Eclipse automates all the Vaadin related routines of widget development, most importantly the creation of new widgets and the required widget set."
msgstr ""

#: part1-gwt.xml:172(title) 
msgid "Creating a Widget Set"
msgstr ""

#: part1-gwt.xml:174(para) 
msgid "Before creating new widgets, you need to create a new <emphasis>widget set</emphasis>. The Vaadin widget set wizard will automate the creation of new widget sets. The definition of widget sets is described in detail in <xref linkend=\"gwt.widgetset\"/>."
msgstr ""

#: part1-gwt.xml:183(para) part1-gwt.xml:377(para) 
msgid "Select <menuchoice><guimenu>File</guimenu><guisubmenu>New</guisubmenu><guimenuitem>Other...</guimenuitem></menuchoice> in the main menu <emphasis>or</emphasis> right-click the <guilabel>Project Explorer</guilabel> and select <menuchoice><guimenu>New</guimenu><guimenuitem>Other...</guimenuitem></menuchoice><emphasis>or</emphasis> press <keycombo><keycap>Ctrl</keycap><keycap>N</keycap></keycombo> to open the <guilabel>New</guilabel> dialog."
msgstr ""

#: part1-gwt.xml:196(para) 
msgid "In the first, <guilabel>Select a wizard</guilabel> step, select <menuchoice><guimenu>Vaadin</guimenu><guimenuitem>Vaadin Widgetset</guimenuitem></menuchoice> and click <guibutton>Next</guibutton>."
msgstr ""

#: part1-gwt.xml:216(para) 
msgid "In the <guilabel>Vaadin widgetset</guilabel> step, fill out the target folder, package, and class information."
msgstr ""

#: part1-gwt.xml:234(guilabel) part1-gwt.xml:428(guilabel) 
msgid "Source folder"
msgstr ""

#: part1-gwt.xml:236(para) 
msgid "The root folder of the source tree under which you wish to put the new widget sets. The default value is your default source tree."
msgstr ""

#: part1-gwt.xml:244(guilabel) part1-gwt.xml:438(guilabel) 
msgid "Package"
msgstr ""

#: part1-gwt.xml:246(para) 
msgid "The parent package under which the widget set should be created. Widget sets will be created under the <package>client</package> subpackage under this package."
msgstr ""

#: part1-gwt.xml:255(guilabel) part1-gwt.xml:449(guilabel) 
msgid "Name"
msgstr ""

#: part1-gwt.xml:257(para) 
msgid "Name of the widget set class to be created. We suggest a naming convention that uses -<classname>Widgetset</classname> suffix in the class name."
msgstr ""

#: part1-gwt.xml:266(guilabel) part1-gwt.xml:462(guilabel) 
msgid "Superclass"
msgstr ""

#: part1-gwt.xml:268(para) 
msgid "The superclass defines the base widget set that you extend with your own widgets. You should always have <classname>DefaultWidgetSet</classname> highest at the hierarchy."
msgstr ""

#: part1-gwt.xml:277(guilabel) 
msgid "Modify applications to use widget set"
msgstr ""

#: part1-gwt.xml:279(para) 
msgid "Select the application(s) that will use the created widget set. This will modify the <filename>web.xml</filename> deployment descriptor of the selected application(s) to enable the widget set."
msgstr ""

#: part1-gwt.xml:288(guilabel) 
msgid "Compile widgetset"
msgstr ""

#: part1-gwt.xml:290(para) 
msgid "When this option is enabled, the wizard will start compilation of the new widget set automatically after it is created. See below for details and <xref linkend=\"gwt.eclipse.compiling\"/> for information on compiling a widget set manually."
msgstr ""

#: part1-gwt.xml:301(para) 
msgid "Finally, click <guibutton>Finish</guibutton> to create the new widget set."
msgstr ""

#: part1-gwt.xml:307(para) part1-gwt.xml:503(para) 
msgid "The wizard will create:"
msgstr ""

#: part1-gwt.xml:312(para) 
msgid "Widget set class in <filename>client</filename> folder under the base folder"
msgstr ""

#: part1-gwt.xml:313(para) 
msgid "GWT module descriptor file (<filename>.gwt.xml</filename>) in the base folder"
msgstr ""

#: part1-gwt.xml:314(para) 
msgid "Launch configuration (<filename>.launch</filename>) for compiling the widget set in the project root folder"
msgstr ""

#: part1-gwt.xml:317(para) 
msgid "If you selected the <guilabel>Compile widgetset</guilabel> option, the wizard will also automatically compile the widget set. After the compilation finishes, you should be able to run your application as before, but using the new widget set. The compilation result is written under the <filename>WebContent/VAADIN/widgetsets</filename> folder. When you need to recompile the widget set in Eclipse, see <xref linkend=\"gwt.eclipse.compiling\"/>. For detailed information on compiling widget sets, see <xref linkend=\"gwt.development.compiler\"/>."
msgstr ""

#: part1-gwt.xml:328(para) 
msgid "You do not normally need to edit the widget set class yourself, as the <guilabel>New widget</guilabel> wizard will manage it for you. If you need to have more complex logic for the creation of widget objects, please see <xref linkend=\"gwt.widgetset\"/> for a detailed description of widget sets. You should not touch the methods marked as <literal>AUTOGENERATED</literal>."
msgstr ""

#: part1-gwt.xml:337(para) 
msgid "If you selected application(s) in the <guilabel>Modify applications to use widget set</guilabel> selection, the following setting is inserted in your <filename>web.xml</filename> deployment descriptor(s) to enable the widget set:"
msgstr ""

#: part1-gwt.xml:344(programlisting) 
#, no-wrap
msgid "<?pocket-size 65% ?>&lt;init-param&gt;\n    &lt;description&gt;Application widgetset&lt;/description&gt;\n    &lt;param-name&gt;widgetset&lt;/param-name&gt;\n    &lt;param-value&gt;<emphasis mode=\"bold\">com.example.myproject.MyprojectApplicationWidgetset</emphasis>&lt;/param-value&gt;\n&lt;/init-param&gt;"
msgstr ""

#. TODO: Will this change?
#: part1-gwt.xml:352(para) 
msgid "Notice that the package structure created by the Vaadin Plugin for Eclipse is slightly different from the one illustrated in <xref linkend=\"figure.gwt.widget-files\"/> earlier, with no intermediate <filename>gwt</filename> package that contains the GWT module descriptor. You can refactor the package structure if you find need for it, but the client-side code <emphasis>must</emphasis> always be stored under a package named \"<filename>client</filename>\"."
msgstr ""

#: part1-gwt.xml:368(title) 
msgid "Creating a Widget"
msgstr ""

#: part1-gwt.xml:370(para) 
msgid "Once you have created a widget set as described above, you can create new widgets in it as follows:"
msgstr ""

#: part1-gwt.xml:390(para) 
msgid "In the first, <guilabel>Select a wizard</guilabel> step, select <menuchoice><guimenu>Vaadin</guimenu><guimenuitem>Vaadin Widget</guimenuitem></menuchoice> and click <guibutton>Next</guibutton>."
msgstr ""

#: part1-gwt.xml:410(para) 
msgid "In the <guilabel>New Component wizard</guilabel> step, fill out the target folder, package, and class information."
msgstr ""

#: part1-gwt.xml:430(para) 
msgid "The root folder of the source tree under which you wish to put the new widget sets. The default value is the default source tree of your project."
msgstr ""

#: part1-gwt.xml:440(para) 
msgid "The parent package under which the new server-side component should be created. The client-side widget will be created under the <package>client</package> subpackage under this package."
msgstr ""

#: part1-gwt.xml:451(para) 
msgid "The class name of the new <emphasis>server-side component</emphasis>. The name of the client-side widget stub (if you have its creation enabled) will be the same but with \"<classname>V</classname>-\" prefix. You can easily refactor the class names afterwards."
msgstr ""

#: part1-gwt.xml:464(para) 
msgid "The superclass of the server-side component. It is <classname>AbstractComponent</classname> by default, but <classname>com.vaadin.ui.AbstractField</classname> or <classname>com.vaadin.ui.AbstractSelect</classname> are other commonly used superclasses. If you are extending an existing component, you should select it as the superclass. You can easily change the superclass later."
msgstr ""

#: part1-gwt.xml:477(guilabel) 
msgid "Build client-side stub"
msgstr ""

#: part1-gwt.xml:479(para) 
msgid "When this option is selected (strongly recommended), the wizard will build a stub for the client-side widget."
msgstr ""

#: part1-gwt.xml:487(guilabel) 
msgid "To widgetset"
msgstr ""

#: part1-gwt.xml:489(para) 
msgid "Select the widget set in which the client-side stub should be included."
msgstr ""

#: part1-gwt.xml:497(para) 
msgid "Finally, click <guibutton>Finish</guibutton> to create the new component."
msgstr ""

#: part1-gwt.xml:508(para) 
msgid "Server-side component stub in the defined package"
msgstr ""

#: part1-gwt.xml:509(para) 
msgid "Client-side widget stub in the <filename>client.ui</filename> package under the base package"
msgstr ""

#: part1-gwt.xml:512(para) 
msgid "The structure of the server-side component and the client-side widget, and the serialization of component state between them, is explained in the subsequent sections of this chapter."
msgstr ""

#: part1-gwt.xml:518(para) 
msgid "The wizard will automatically recompile the widget set in which you included the new widget. See <xref linkend=\"gwt.eclipse.compiling\"/>."
msgstr ""

#: part1-gwt.xml:525(title) 
msgid "Recompiling the Widget Set"
msgstr ""

#: part1-gwt.xml:527(para) 
msgid "After you edit your widget or widget set, you need to recompile it. You can do this from <menuchoice><guimenu>Run</guimenu><guimenuitem>External Tools</guimenuitem></menuchoice> menu, where the run configuration whould be listed. You can view the launch configuration settings by selecting <menuchoice><guimenu>Run</guimenu><guisubmenu>External Tools</guisubmenu><guimenuitem>External Tools Configurations</guimenuitem></menuchoice>."
msgstr ""

#: part1-gwt.xml:537(para) 
msgid "The compilation progress is shown in the <guilabel>Console</guilabel> panel in Eclipse, as illustrated in <xref linkend=\"figure.gwt.eclipse.compiling\"/>."
msgstr ""

#: part1-gwt.xml:544(title) 
msgid "Recompiling a Widget Set"
msgstr ""

#: part1-gwt.xml:555(para) 
msgid "The compilation output is written under the <filename>WebContent/VAADIN/widgetsets</filename> folder, in a widget set specific folder."
msgstr ""

#: part1-gwt.xml:561(para) 
msgid "For detailed information on compiling widget sets, see <xref linkend=\"gwt.development.compiler\"/>. Should you ever compile a widget set outside Eclipse, you need to refresh the project by selecting it in <guilabel>Project Explorer</guilabel> and pressing <keycap>F5</keycap>."
msgstr ""

#: part1-gwt.xml:571(title) 
msgid "Google Web Toolkit Widgets"
msgstr ""

#: part1-gwt.xml:573(para) 
msgid "Let us take a look into how custom GWT widgets are created. The authoritative sources for developing with GWT are the <emphasis>Google Web Toolkit Developer Guide</emphasis> and <emphasis>Google Web Toolkit Class Reference</emphasis>."
msgstr ""

#: part1-gwt.xml:579(para) 
msgid "Google Web Toolkit offers a variety of ways for creating custom widgets. The easiest way is to create <emphasis>composite</emphasis> widgets by grouping existing basic widgets and adding some interaction logic to them. You can also develop widgets using the lower-level Java interfaces used by the standard GWT widgets or the really low-level JavaScript interfaces."
msgstr ""

#: part1-gwt.xml:587(para) 
msgid "A custom GWT widget needs to find its place in the GWT class hierarchy. <xref linkend=\"figure.gwt.widgets\"/> illustrates the abstract base classes for GWT widgets."
msgstr ""

#: part1-gwt.xml:594(title) 
msgid "GWT Widget Base Class Hierarchy"
msgstr ""

#: part1-gwt.xml:605(para) 
msgid "Each of the base classes offers various services for different types of widgets. Many custom widgets, such as the Color Picker example below, extend the <classname>Composite</classname> class to combine the widget from existing GWT widgets. Other base classes offer various features useful for different kinds of widgets. You can also choose to extend an existing GWT widget, as we have done for most of the standard user interface components of Vaadin, or extend a Vaadin widget."
msgstr ""

#: part1-gwt.xml:616(title) 
msgid "Extending a Vaadin Widget"
msgstr ""

#: part1-gwt.xml:618(para) 
msgid "Extending a Vaadin widget is an easy way to add features, such as advanced client-side validation, to existing standard components. If the extended widget does not require any additional parameters, which is usual in client-side validation, you may not even need to define a server-side counterpart for your widget. A server-side component can be mapped to multiple client-side components depending on its parameters. The mapping is defined in the widget factory, i.e., the class inheriting <classname>DefaultWidgetSet</classname>. For details on how to implement a widget factory, see <xref linkend=\"gwt.widgetset\"/>."
msgstr ""

#: part1-gwt.xml:633(title) 
msgid "Example: A Color Picker GWT Widget"
msgstr ""

#: part1-gwt.xml:635(para) 
msgid "In the following example, we implement a composite GWT widget built from <classname>HorizontalPanel</classname>, <classname>Grid</classname>, <classname>Button</classname>, and <classname>Label</classname> widgets. This widget does not yet have any integration with the server side code, which will be shown later in this chapter. The source code is available in the source folder for the demo application in Vaadin installation folder, under package <package>com.vaadin.demo.colorpicker</package>."
msgstr ""

#: part1-gwt.xml:751(para) 
msgid "This example demonstrates one reason for making a custom widget: it provides client-side feedback to the user in a way that would not be possible or at least practical from server-side code. Server-side code can only select a static CSS style or a theme, while on the client-side we can manipulate styles of HTML elements very flexibly. Notice that manipulation of the DOM tree depends somewhat on the browser. In this example, the manipulation should be rather compatible, but in some cases there could be problems. Standard GWT and Vaadin widgets handle many of such compatibility issues, but when doing such low-level operations as DOM manipulation, you may need to consider them."
msgstr ""

#: part1-gwt.xml:764(para) 
msgid "The structure of the DOM tree depends on how GWT renders its widgets for a specific browser. It is also not guaranteed that the rendering does not change in future releases of GWT. You should therefore make as few assumptions regarding the DOM structure as possible. Unfortunately, GWT does not provide a way to set the style of, for example, cells of layout elements. The above example therefore assumes that the <classname>Grid</classname> is a table and the <literal>&lt;button&gt;</literal> elements are inside <literal>&lt;td&gt;</literal> elements of the table. See <xref linkend=\"gwt.widgets.styling\"/> below for more details on compatibility."
msgstr ""

#: part1-gwt.xml:777(para) 
msgid "The widget will look as follows:"
msgstr ""

#: part1-gwt.xml:782(title) 
msgid "Color Picker Widget Without Styling"
msgstr ""

#: part1-gwt.xml:793(para) 
msgid "As you can notice, the widget will look rather uninviting without CSS styling. We will next look how to define a default style for a GWT widget."
msgstr ""

#: part1-gwt.xml:800(title) 
msgid "Styling GWT Widgets"
msgstr ""

#: part1-gwt.xml:802(para) 
msgid "GWT renders its widgets in the DOM tree of the web browser as HTML elements. Therefore, their style can be defined with Cascading Style Sheets (CSS) just as in HTML. GWT Compiler supports packaging style sheets from the source package tree. The style sheet is defined in the <filename>.gwt.xml</filename> descriptor file (see <xref linkend=\"gwt.widgetset.moduledescriptor\"/> for details)."
msgstr ""

#: part1-gwt.xml:814(para) 
msgid "The style sheet path is relative to the <filename>public</filename> folder under the folder containing the <filename>.gwt.xml</filename> file."
msgstr ""

#: part1-gwt.xml:819(para) 
msgid "Let us define the <filename>colorpicker/styles.css</filename> as follows."
msgstr ""

#: part1-gwt.xml:854(para) 
msgid "The stylesheet makes some assumptions regarding the HTML element structure. First, it assumes that the <classname>Grid</classname> layout is a table. Second, the custom class name, <literal>colorpicker-currentcolorbox</literal>, of the right-hand <classname>HorizontalPanel</classname> cell was inserted in the DOM representation of the widget in the GwtColorPicker implementation. Styling a button makes less assumptions. Using only class names instead of specific element names may make a stylesheet more compatible if the HTML representation is different in different browsers or changes in the future."
msgstr ""

#: part1-gwt.xml:867(title) 
msgid "Color Picker Widget With Styling"
msgstr ""

#: part1-gwt.xml:882(title) 
msgid "Integrating a GWT Widget"
msgstr ""

#: part1-gwt.xml:884(para) 
msgid "Integration of GWT widgets with Vaadin can be done in two basic ways: by modifying the original class or by inheriting it and adding the integration code in the subclass. The latter way is actually the way the standard client-side components in Vaadin are done: they simply inherit the corresponding standard GWT widgets. For example, <classname>VButton</classname> inherits GWT <classname>Button</classname>."
msgstr ""

#: part1-gwt.xml:893(para) 
msgid "The integration code has the following tasks:"
msgstr ""

#: part1-gwt.xml:898(listitem) 
msgid "Manage CSS style class"
msgstr ""

#: part1-gwt.xml:900(listitem) 
msgid "Receive component state from server"
msgstr ""

#: part1-gwt.xml:902(listitem) 
msgid "Send state changes caused by user interaction to server"
msgstr ""

#: part1-gwt.xml:905(para) 
msgid "The integration is broken down in the following sections into server-client deserialization done in <methodname>updateFromUIDL()</methodname> and client-server serialization done with <methodname>updateVariable()</methodname>. The complete example of the integration of the Color Picker widget is given at the end of this section."
msgstr ""

#: part1-gwt.xml:913(para) 
msgid "If you are using the Eclipse IDE, the Vaadin Plugin for Eclipse allows easy creation of a stub for a new widget, alongside its server-side component. It also manages the widget set for you automatically. See <xref linkend=\"gwt.eclipse.widget\"/> for detailed instructions."
msgstr ""

#: part1-gwt.xml:921(title) 
msgid "Naming Conventions"
msgstr ""

#: part1-gwt.xml:923(para) 
msgid "While the use of Vaadin does not require the use of any particular naming conventions for GWT widgets, some notes regarding naming may be necessary. Even though Java package names make it possible to use identical class names in the same context, it may be useful to try to make them more distinctive to avoid any inconvenience. GWT uses plain names for its standard widgets, such as <classname>Button</classname>. The standard components of Vaadin use identical or similar names, but that does not cause any inconvenience, because the GWT widgets and server-side components of Vaadin are never used in the same context. For the client-side components of Vaadin, we use the \"<literal>V</literal>\" prefix, for example <classname>VButton</classname>. In the Color Picker example, we use <classname>GwtColorPicker</classname> for the GWT widget and <classname>VColorPicker</classname> for the integration implementation. You may wish to follow similar conventions."
msgstr ""

#: part1-gwt.xml:940(para) 
msgid "Notice that the naming convention changed when IT Mill Toolkit was renamed as Vaadin. The prefix for client-side widgets in IT Mill Toolkit was <literal>I</literal>, which was changed to <literal>V</literal> in Vaadin. Similarly, CSS style name prefixes were changed from <literal>i-</literal> to <literal>v-</literal>."
msgstr ""

#: part1-gwt.xml:950(title) 
msgid "Deserialization of Component State from Server"
msgstr ""

#: part1-gwt.xml:952(para) 
msgid "To receive data from the server, a widget must implement the <classname>Paintable</classname> interface and its <methodname>updateFromUIDL()</methodname> method. The idea is that the method \"paints\" the user interface description by manipulating the HTML tree on the browser. Typically, when using composite GWT components, most of the DOM tree manipulation is done by standard GWT widgets."
msgstr ""

#: part1-gwt.xml:961(para) 
msgid "An implementation of the <methodname>updateFromUIDL()</methodname> method must include some routine tasks:"
msgstr ""

#: part1-gwt.xml:968(methodname) 
msgid "updateComponent()"
msgstr ""

#: part1-gwt.xml:967(listitem) 
msgid "Call <placeholder-1/> and return if it succeeds"
msgstr ""

#: part1-gwt.xml:972(listitem) 
msgid "Manage the component identifier"
msgstr ""

#: part1-gwt.xml:975(classname) 
msgid "ApplicationConnection"
msgstr ""

#: part1-gwt.xml:974(listitem) 
msgid "Manage a reference to the <placeholder-1/> object. The widget needs to know it to be able to initiate a server request when a browser event occurs."
msgstr ""

#: part1-gwt.xml:982(para) 
msgid "The latter two of these tasks are not needed if the widget does not handle any user input that needs to be sent to server."
msgstr ""

#: part1-gwt.xml:987(para) 
msgid "The following excerpt provides a skeleton for the <methodname>updateFromUIDL()</methodname> method and shows how the component identifier and connection object reference are managed by a widget."
msgstr ""

#: part1-gwt.xml:1010(para) 
msgid "The <methodname>updateComponent()</methodname> call has several functions important for different kinds of components. It updates various default attributes, such as <parameter>disabled</parameter>, <parameter>readonly</parameter>, <parameter>invisible</parameter>, and (CSS) <parameter>style</parameter> attributes. If the <parameter>manageCaption</parameter> argument is <literal>true</literal>, the call will also update the caption of the component. By default, the caption is managed by the parent layout of the component. Components, such as a <classname>Button</classname>, that manage the caption themselves, do not need management of the caption."
msgstr ""

#: part1-gwt.xml:1023(para) 
msgid "The <methodname>updateComponent()</methodname> is also part of the transmutation mechanism that allows a single server-side component to have alternative client-side implementations, based on its parameters. For example, the <classname>Button</classname> server-side component can manifest either as a clickable <classname>VButton</classname> or as a switchable <classname>VCheckBox</classname> widget on the client-side. If the parameters are changed, the client-side widget can be replaced with another dynamically. Determination of the correct implementation is done in a <classname>WidgetSet</classname>. If <methodname>updateComponent()</methodname> returns <returnvalue>true</returnvalue>, the client-side engine can attempt to replace the implementation. For more details on the transmutation mechanism, see <xref linkend=\"gwt.widgetset\"/>."
msgstr ""

#: part1-gwt.xml:1039(para) 
msgid "The component identifier is used when the component needs to serialize its updated state to server. The reference to the application connection manager is needed to make the server request. If a component does not have any state changes that need to be sent to the server, management of the variables is not needed. See <xref linkend=\"gwt.integration.serialization\"/> below for further details."
msgstr ""

#: part1-gwt.xml:1048(para) 
msgid "The design of the client-side framework of Vaadin, because the <classname>Paintable</classname> is an interface and can not store any references. Having an API layer between GWT and custom widgets would be a much more complicated solution."
msgstr ""

#: part1-gwt.xml:1058(title) 
msgid "Serialization of Component State to Server"
msgstr ""

#: part1-gwt.xml:1060(para) 
msgid "User input is handled in GWT widgets with events."
msgstr ""

#: part1-gwt.xml:1064(para) 
msgid "User input is passed to the server using the <methodname>updateVariable()</methodname> method. If the <parameter>immediate</parameter> parameter is <parameter>false</parameter>, the value is simply added to a queue to be sent to the server at next AJAX request. If the argument is <parameter>true</parameter>, the AJAX request is made immediately, and will include all queued updates to variables. The <parameter>immediate</parameter> argument is described in more detail below."
msgstr ""

#: part1-gwt.xml:1082(para) 
msgid "The <parameter>client</parameter> of the above example is a reference to the <classname>ApplicationConnection</classname> object that manages server requests. The <parameter>uidl_id</parameter> argument is the UIDL identifier obtained during a <methodname>updateFromUIDL()</methodname> call with <methodname>uidl.getId()</methodname> method."
msgstr ""

#: part1-gwt.xml:1090(para) 
msgid "The <methodname>updateVariable()</methodname> method has several varieties to send variables of different types."
msgstr ""

#: part1-gwt.xml:1096(title) 
msgid "UIDL Variable Types"
msgstr ""

#: part1-gwt.xml:1100(entry) 
msgid "Type"
msgstr ""

#: part1-gwt.xml:1101(entry) 
msgid "Description"
msgstr ""

#: part1-gwt.xml:1102(entry) 
msgid "UIDL Type"
msgstr ""

#: part1-gwt.xml:1107(constant) 
msgid "String"
msgstr ""

#: part1-gwt.xml:1108(entry) 
msgid "String object."
msgstr ""

#: part1-gwt.xml:1111(entry) 
msgid "s"
msgstr ""

#: part1-gwt.xml:1114(constant) 
msgid "int"
msgstr ""

#: part1-gwt.xml:1115(entry) 
msgid "Native integer value."
msgstr ""

#: part1-gwt.xml:1118(entry) 
msgid "i"
msgstr ""

#: part1-gwt.xml:1121(constant) 
msgid "long"
msgstr ""

#: part1-gwt.xml:1122(entry) 
msgid "Native long integer value."
msgstr ""

#: part1-gwt.xml:1125(entry) 
msgid "l"
msgstr ""

#: part1-gwt.xml:1128(constant) 
msgid "float"
msgstr ""

#: part1-gwt.xml:1129(entry) 
msgid "Native single-precision floating-point value."
msgstr ""

#: part1-gwt.xml:1132(entry) 
msgid "f"
msgstr ""

#: part1-gwt.xml:1135(constant) 
msgid "double"
msgstr ""

#: part1-gwt.xml:1136(entry) 
msgid "Native double-precision floating-point value."
msgstr ""

#: part1-gwt.xml:1139(entry) 
msgid "d"
msgstr ""

#: part1-gwt.xml:1142(constant) 
msgid "boolean"
msgstr ""

#: part1-gwt.xml:1143(entry) 
msgid "Native boolean value."
msgstr ""

#: part1-gwt.xml:1146(entry) 
msgid "b"
msgstr ""

#: part1-gwt.xml:1149(constant) 
msgid "Object[]"
msgstr ""

#: part1-gwt.xml:1152(methodname) 
msgid "toString()"
msgstr ""

#: part1-gwt.xml:1154(methodname) 
msgid "escapeString()"
msgstr ""

#: part1-gwt.xml:1150(entry) 
msgid "Array of object data. The <placeholder-1/> method is used to serialize each of the objects. The content strings are escaped with <placeholder-2/>, to allow characters such as quotes."
msgstr ""

#: part1-gwt.xml:1157(entry) 
msgid "a"
msgstr ""

#: part1-gwt.xml:1163(para) 
msgid "This serialization mechanism is intended to be as simple as possible in most cases, when the user input is typically just one state variable, while also allowing the serialization of more complex data, if necessary."
msgstr ""

#: part1-gwt.xml:1171(title) 
msgid "Immediateness"
msgstr ""

#: part1-gwt.xml:1173(para) 
msgid "Server-side components that inherit <classname>AbstractComponent</classname> have an <parameter>immediate</parameter> attribute, set with <methodname>setImmediate()</methodname>. This attribute dictates whether a component makes a server request immediately when its state changes, or only afterwards. For example, there is no need to send the contents of a \"Username\" <classname>TextField</classname> before the \"Login\" button has been clicked. On the other hand, the server can set the <classname>TextField</classname> as immediate to receive changes for example when the component loses focus."
msgstr ""

#: part1-gwt.xml:1186(para) 
msgid "Most widgets should support immediateness by receiving the <parameter>immediate</parameter> attribute from the UIDL message that renders the widget. The following example is extracted from the <classname>VTextField</classname> implementation."
msgstr ""

#: part1-gwt.xml:1217(para) 
msgid "In some widgets, the <parameter>immediate</parameter> attribute would have little meaning, and in fact an accidental <parameter>false</parameter> value would cause undesired behaviour. For example, a button is always expected to send a request to the server when it is clicked. Such widgets can simply use <parameter>true</parameter> for the <parameter>immediate</parameter> argument in <methodname>updateVariable()</methodname>. For example, <classname>VButton</classname> does as follows:"
msgstr ""

#: part1-gwt.xml:1239(title) 
msgid "Example: Integrating the Color Picker Widget"
msgstr ""

#: part1-gwt.xml:1241(para) 
msgid "Below is a complete example of an integration component for the Color Picker example. It demonstrates all the basic tasks needed for the integration of a GWT widget with its server-side counterpart component."
msgstr ""

#: part1-gwt.xml:1335(title) 
msgid "Defining a Widget Set"
msgstr ""

#: part1-gwt.xml:1337(para) 
msgid "The client-side components, or in GWT terminology, widgets, must be made usable in the client-side GWT application by defining a widget set factory that can create the widgets by their UIDL tag name. (Actually, such a widget set factory <emphasis>is</emphasis> the client-side application.)"
msgstr ""

#: part1-gwt.xml:1344(para) 
msgid "A widget set factory needs to inherit the default factory <classname>DefaultWidgetSet</classname> and implement the <methodname>createWidget()</methodname> and <methodname>resolveWidgetType()</methodname> methods. The methods must call their default implementation to allow creation of the standard widgets."
msgstr ""

#: part1-gwt.xml:1352(para) 
msgid "The following example shows how to define a widget set factory class for the Color Picker example. The tag name of the widget was defined in the server-side implementation of the widget (see <xref linkend=\"gwt.integration.example.colorpicker\"/>) as <literal>colorpicker</literal>. The <methodname>resolveWidgetType()</methodname> must resolve this name to the class object of the <classname>VColorPicker</classname> integration class, which is later passed to the <methodname>createWidget()</methodname> method for creating an instance of the <classname>VColorPicker</classname> class."
msgstr ""

#: part1-gwt.xml:1393(para) 
msgid "The default widgets in Vaadin actually use more than just the tag name to resolve the actual widget class. For example, the <classname>Button</classname> server-side component, which has tag name <literal>button</literal>, can be resolved to either an <classname>VButton</classname> or <classname>VCheckBox</classname> widget, depending on the <parameter>switch</parameter> (<parameter>switchMode</parameter>) attribute. Vaadin Client-Side Engine can actually replace the client-side object of the parameters change."
msgstr ""

#: part1-gwt.xml:1405(title) 
msgid "GWT Module Descriptor"
msgstr ""

#: part1-gwt.xml:1407(para) 
msgid "A widget set is actually a GWT application and needs to be defined in the GWT module descriptor as the entry point of the application. A GWT module descriptor is an XML file with extension <filename>.gwt.xml</filename>."
msgstr ""

#: part1-gwt.xml:1413(para) 
msgid "If you are using the Eclipse IDE, the New Vaadin Widget Set wizard will create the GWT module descriptor for you. See <xref linkend=\"gwt.eclipse.widgetset\"/> for detailed instructions."
msgstr ""

#: part1-gwt.xml:1419(para) 
msgid "The following example shows the GWT module descriptor of the Color Picker application. The client-side entry point will be the <classname>WidgetSet</classname> class. We also define the default stylesheet for the color picker widget, as described above in <xref linkend=\"gwt.widgets.styling\"/>."
msgstr ""

#: part1-gwt.xml:1441(para) 
msgid "For more information about the GWT Module XML Format, please see Google Web Toolkit Developer Guide."
msgstr ""

#: part1-gwt.xml:1451(title) 
msgid "Server-Side Components"
msgstr ""

#: part1-gwt.xml:1453(para) 
msgid "Server-side components provide the API for user applications to build their user interface. Many applications do not ever need to bother with the client-side implementation of the standard components, but those that use their own GWT widgets need to have corresponding server-side components."
msgstr ""

#: part1-gwt.xml:1460(para) 
msgid "If you are using the Vaadin Plugin for Eclipse, the wizard for creating new widgets will also create a stub of the server-side component for you. See <xref linkend=\"gwt.eclipse.widget\"/> for detailed instructions."
msgstr ""

#: part1-gwt.xml:1466(para) 
msgid "A server-side component has two basic tasks: it has to be able to serialize its state variables to the corresponding client-side component, and deserialize any user input received from the client. Many of these tasks are taken care of by the component framework."
msgstr ""

#: part1-gwt.xml:1474(title) 
msgid "Component Tag Name"
msgstr ""

#: part1-gwt.xml:1476(para) 
msgid "Server-side components are identified with a unique UIDL tag name, which must be returned by the <methodname>getTag()</methodname> method. The tag should follow XML rules for element names, that is, only characters a-z, A-Z, 0-9, and _, and not begin with a number. Actually, as Vaadin Release 5 uses a JSON notation for serialization, the tag syntax is more relaxed, but we nevertheless recommend using a stricter syntax. UIDL is detailed in <xref linkend=\"uidl\"/> together with lists of reserved tags. The server-side implementation of the Color Picker component defines the tag as follows:"
msgstr ""

#: part1-gwt.xml:1492(para) 
msgid "On the client side, this tag is mapped to a GWT widget. The mapping from server-side to client-side components is actually one to many; a server-side component can manifest as several client-side components, depending on its parameters. For example, a server-side <classname>Button</classname> can manifest either as an <classname>VButton</classname> or <classname>VCheckBox</classname> in client, depending on the <emphasis>switchMode</emphasis> attribute. For the client side, see <xref linkend=\"gwt.widgets\"/> above."
msgstr ""

#: part1-gwt.xml:1503(para) 
msgid "The serialization is broken down into server-client serialization and client-server deserialization in the following sections. We will also present the complete example of the server-side implementation of the Color Picker component below."
msgstr ""

#: part1-gwt.xml:1513(title) 
msgid "Server-Client Serialization"
msgstr ""

#. UNFINISHED
#: part1-gwt.xml:1517(para) 
msgid "The server-side implementation of a component must be able to serialize its data into a UIDL message that is sent to the client. You need to override the <methodname>paintContent()</methodname> method, defined in <classname>AbstractComponent</classname>. You should call the superclass to allow it to paint its data as well."
msgstr ""

#: part1-gwt.xml:1525(para) 
msgid "The data is serialized with the variants of the <methodname>addAttribute()</methodname> and <methodname>addVariable()</methodname> methods for different basic data types."
msgstr ""

#: part1-gwt.xml:1532(para) 
msgid "The UIDL API offered in <classname>PaintTarget</classname> is covered in <xref linkend=\"uidl.painting\"/>."
msgstr ""

#: part1-gwt.xml:1545(title) 
msgid "Client-Server Deserialization"
msgstr ""

#: part1-gwt.xml:1547(para) 
msgid "The server-side component must be able to receive state changes from the client-side widget. This is done by overriding the <methodname>changeVariables()</methodname> method, defined in <classname>AbstractComponent</classname>. A component should always call the superclass implementation in the beginning to allow it handle its variables."
msgstr ""

#: part1-gwt.xml:1556(para) 
msgid "The variables are given as objects in the <parameter>variables</parameter> map, with the same key with which they were serialized on the client-side. The object type is likewise the same as given for the particular variable in <methodname>updateVariable()</methodname> in the client-side."
msgstr ""

#: part1-gwt.xml:1579(para) 
msgid "The above example handles variable changes for a field component inheriting <classname>AbstractField</classname>. Fields have their value as the value property of the object. Setting the value with <methodname>setValue()</methodname>, as above, will trigger a <classname>ValueChangeEvent</classname>, which the user of the component can catch with a <classname>ValueChangeListener</classname>."
msgstr ""

#: part1-gwt.xml:1588(para) 
msgid "Contained components, such as components inside a layout, are deserialized by referencing them by their <emphasis>paintable identifier</emphasis> or <emphasis>PID</emphasis>."
msgstr ""

#: part1-gwt.xml:1596(title) 
msgid "Extending Standard Components"
msgstr ""

#: part1-gwt.xml:1598(para) 
msgid "Extending standard components is one way to develop new components that have some additional features."
msgstr ""

#: part1-gwt.xml:1603(para) 
msgid "Every component needs to have a unique UIDL tag that is used to create and communicate with widgets on the client-side. The tag is normally unique for server-side components. The minimal requirement for the server-side component is that you reimplement the <methodname>getId()</methodname> method that provides the tag."
msgstr ""

#: part1-gwt.xml:1611(para) 
msgid "If your extension component contains any specific state variables, you need to handle their serialization in <classname>paintContent()</classname> and deserialization in <classname>changeVariables()</classname> and call the superclass implementation in the beginning. See <xref linkend=\"gwt.server-side.serialization\"/><xref linkend=\"gwt.server-side.deserialization\"/> above for details."
msgstr ""

#: part1-gwt.xml:1621(para) 
msgid "The client-side implementation goes also much like for regular custom widgets."
msgstr ""

#: part1-gwt.xml:1628(title) 
msgid "Example: Color Picker Server-Side Component"
msgstr ""

#: part1-gwt.xml:1630(para) 
msgid "The following example provides the complete server-side <classname>ColorPicker</classname> component for the Color Picker example. It has only one state variable: the currently selected color, which is stored as the property of the component. Implementation of the <classname>Property</classname> interface is provided in the <classname>AbstractField</classname> superclass of the component. The UIDL tag name for the component is <literal>colorpicker</literal> and the state is communicated through the <parameter>colorname</parameter> variable."
msgstr ""

#: part1-gwt.xml:1710(title) 
msgid "Using a Custom Component"
msgstr ""

#: part1-gwt.xml:1712(para) 
msgid "A custom component is used like any other Vaadin component. You will, however, need to compile the client-side widget set with the GWT Compiler. See <xref linkend=\"gwt.development.compiler\"/> for instructions on how to compile widget sets."
msgstr ""

#: part1-gwt.xml:1720(title) 
msgid "Example: Color Picker Application"
msgstr ""

#: part1-gwt.xml:1722(para) 
msgid "The following server-side example application shows how to use the Color Picker custom widget. The example includes also server-side feedback of the user input and changing the color selection to show that the communication of the component state works in both directions."
msgstr ""

#: part1-gwt.xml:1786(title) 
msgid "Web Application Deployment"
msgstr ""

#: part1-gwt.xml:1788(para) 
msgid "Deployment of web applications that include custom components is almost identical to the normal case where you use only the default widget set of Vaadin. The default case is documented in <xref linkend=\"section.web.web-xml\"/>. You only need to specify the widget set for the application in the <filename>WebContent/WEB-INF/web.xml</filename> deployment descriptor."
msgstr ""

#: part1-gwt.xml:1797(para) 
msgid "If you are using the Vaadin Plugin for Eclipse, creating a new widget set with the <guilabel>New Vaadin Widgetset</guilabel> wizard will modify the deployment descriptor for you to use the custom widget set. See <xref linkend=\"gwt.eclipse.widgetset\"/> for detailed instructions."
msgstr ""

#: part1-gwt.xml:1804(para) 
msgid "The following deployment descriptor specifies the Color Picker Application detailed in the previous section."
msgstr ""

#: part1-gwt.xml:1809(programlisting) 
#, no-wrap
msgid "<?pocket-size 65% ?>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;web-app\n  id=\"WebApp_ID\"\n  version=\"2.4\"\n  xmlns=\"http://java.sun.com/xml/ns/j2ee\"\n  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n  xsi:schemaLocation=\"http://java.sun.com/xml/ns/j2ee\n           http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd\"&gt;\n\n    &lt;display-name&gt;myproject&lt;/display-name&gt;\n\n    &lt;servlet&gt;\n        &lt;servlet-name&gt;<parameter>ColorPickerServlet</parameter>&lt;/servlet-name&gt;\n        &lt;servlet-class&gt;\n            com.vaadin.terminal.gwt.server.ApplicationServlet\n        &lt;/servlet-class&gt;\n        &lt;init-param&gt;\n            &lt;param-name&gt;application&lt;/param-name&gt;\n            &lt;param-value&gt;\n                <parameter>com.vaadin.demo.colorpicker.ColorPickerApplication</parameter>\n            &lt;/param-value&gt;\n        &lt;/init-param&gt;\n        &lt;init-param&gt;\n            &lt;param-name&gt;widgetset&lt;/param-name&gt;\n            &lt;param-value&gt;\n                <parameter>com.vaadin.demo.colorpicker.gwt.ColorPickerWidgetSet</parameter>\n            &lt;/param-value&gt;\n        &lt;/init-param&gt;\n    &lt;/servlet&gt;\n\n    &lt;servlet-mapping&gt;\n        &lt;servlet-name&gt;<parameter>ColorPickerServlet</parameter>&lt;/servlet-name&gt;\n        &lt;url-pattern&gt;<parameter>/*</parameter>&lt;/url-pattern&gt;\n    &lt;/servlet-mapping&gt;\n&lt;/web-app&gt;"
msgstr ""

#: part1-gwt.xml:1846(para) 
msgid "The project specific parameters are emphasized. Notice that the widget set name is not a file name, but the base name for the <filename>ColorPickerWidgetSet.gwt.xml</filename> module descriptor."
msgstr ""

#: part1-gwt.xml:1852(para) 
msgid "As the project context root in the above example is <filename>myproject</filename> and the <parameter>&lt;url-pattern&gt;</parameter> is <filename>/*</filename>, the URL for the application will be <uri>/myproject/</uri>."
msgstr ""

#: part1-gwt.xml:1862(title) 
msgid "GWT Widget Development"
msgstr ""

#: part1-gwt.xml:1864(para) 
msgid "Development of new GWT widgets includes management of the source code tree, running and debugging the application with the GWT Hosted Mode Browser, and compiling the widgets and the Vaadin Client-Side Engine to JavaScript with the GWT Compiler."
msgstr ""

#: part1-gwt.xml:1871(para) 
msgid "You can use any IDE for developing GWT components for Vaadin. The examples given in this book are for the Eclipse IDE. It allows easy launching of the GWT Hosted Mode Browser, debugging, and running an external compiler for GWT widget sets."
msgstr ""

#: part1-gwt.xml:1879(title) 
msgid "Creating a Widget Project in Eclipse"
msgstr ""

#: part1-gwt.xml:1881(para) 
msgid "Creation of a Vaadin project that uses the default widget set was covered in <xref linkend=\"getting-started.first-project\"/>. Developing custom widgets creates a number of additional requirements for a project. Let us review the steps required for creating a project. Details for each step are given in the subsequent sections."
msgstr ""

#: part1-gwt.xml:1889(para) 
msgid "The Vaadin Plugin for Eclipse makes the creation of custom widgets in Eclipse very easy. See <xref linkend=\"gwt.eclipse\"/> for detailed instructions."
msgstr ""

#: part1-gwt.xml:1896(listitem) 
msgid "Create a new project in the Eclipse IDE. (<xref linkend=\"getting-started.first-project.creation\" xrefstyle=\"select: label\"/>)"
msgstr ""

#: part1-gwt.xml:1900(listitem) 
msgid "Import GWT directory into the project. (<xref linkend=\"gwt.development.import-gwt\" xrefstyle=\"select: label\"/> below)"
msgstr ""

#: part1-gwt.xml:1903(listitem) 
msgid "Write the source code in a Java module. (<xref linkend=\"gwt.development.module-creation\" xrefstyle=\"select:      label\"/> below)"
msgstr ""

#: part1-gwt.xml:1909(para) 
msgid "Write the <filename>web.xml</filename> Deployment Descriptor for the web application."
msgstr ""

#: part1-gwt.xml:1911(listitem) 
msgid "Define the custom widget set to use instead of the default widget set. (<xref linkend=\"gwt.usage.deployment\" xrefstyle=\"select: label\"/> above)"
msgstr ""

#: part1-gwt.xml:1917(listitem) 
msgid "Compile the widget set to JavaScript runtime with GWT Compiler. (<xref linkend=\"gwt.development.compiler\" xrefstyle=\"select: label\"/> below)"
msgstr ""

#: part1-gwt.xml:1920(listitem) 
msgid "Configure the project in Apache Tomcat (or some other web container) and start the server. (<xref linkend=\"getting-started.first-project.server\" xrefstyle=\"select: label\"/> below)"
msgstr ""

#: part1-gwt.xml:1926(para) 
msgid "Either:"
msgstr ""

#: part1-gwt.xml:1929(listitem) 
msgid "Open a web browser to use the web application."
msgstr ""

#: part1-gwt.xml:1932(listitem) 
msgid "Debug the widgets with Hosted Mode Browser. (<xref linkend=\"gwt.hosted-mode\" xrefstyle=\"select: label\"/>)"
msgstr ""

#: part1-gwt.xml:1940(para) 
msgid "The contents of a ready widget development project are described in <xref linkend=\"gwt.development.compiler.result\"/>."
msgstr ""

#: part1-gwt.xml:1948(title) 
msgid "Importing GWT Installation Package"
msgstr ""

#: part1-gwt.xml:1950(para) 
msgid "You will need to include the Google Web Toolkit in your project to develop custom widgets. The installation directory of Vaadin includes full GWT installation in the <filename>gwt</filename> subdirectory. The package includes precompiled libraries and applications for the specific platform of the installation. To use the libraries, you need to configure them in the classpath of your project as described below."
msgstr ""

#: part1-gwt.xml:1960(title) part1-gwt.xml:2357(title) 
msgid "Experimental OOPHM Package"
msgstr ""

#: part1-gwt.xml:1962(para) 
msgid "The Out of Process Hosted Mode, described in <xref linkend=\"gwt.development.oophm\"/>, is an experimental alternative for the Hosted Mode Browser, which you will need to debug GWT widgets. It runs the application in a regular browser instead of the built-in browser, so it will later probably become the default solution. <emphasis>The regular Hosted Mode Browser does not work on Linux in Vaadin 6.1.</emphasis> For the Linux platform, the OOPHM package is the only option if you wish to debug GWT code."
msgstr ""

#: part1-gwt.xml:1973(para) 
msgid "The OOPHM version of GWT is included in the experimental platform-independent OOPHM package of Vaadin, available from the download site."
msgstr ""

#: part1-gwt.xml:1980(para) 
msgid "You need to copy the <filename>gwt</filename> directory to your project. You can either copy it with system tools or, if you are using Eclipse, import the directory. You can import the directory as follows."
msgstr ""

#: part1-gwt.xml:1988(guilabel) 
msgid "Project Explorer"
msgstr ""

#: part1-gwt.xml:1990(guimenu) part1-gwt.xml:2103(guimenuitem) part1-gwt.xml:2106(guilabel) 
msgid "Import"
msgstr ""

#: part1-gwt.xml:1990(guimenuitem) 
msgid "Import..."
msgstr ""

#: part1-gwt.xml:1987(listitem) 
msgid "Right-click on the project folder in <placeholder-1/> and select <menuchoice><placeholder-2/><placeholder-3/></menuchoice>."
msgstr ""

#: part1-gwt.xml:1994(guimenu) part1-gwt.xml:2107(guimenu) 
msgid "General"
msgstr ""

#: part1-gwt.xml:1994(guimenuitem) part1-gwt.xml:2107(guimenuitem) 
msgid "File System"
msgstr ""

#: part1-gwt.xml:1996(guibutton) part1-gwt.xml:2109(guibutton) 
msgid "Next"
msgstr ""

#: part1-gwt.xml:1992(listitem) 
msgid "From the Import dialog, select <menuchoice><placeholder-1/><placeholder-2/></menuchoice> and click <placeholder-3/>."
msgstr ""

#: part1-gwt.xml:1999(guibutton) 
msgid "Browse"
msgstr ""

#: part1-gwt.xml:1999(guilabel) 
msgid "From directory"
msgstr ""

#: part1-gwt.xml:2000(filename) part1-gwt.xml:2005(filename) part1-gwt.xml:2010(filename) 
msgid "gwt"
msgstr ""

#: part1-gwt.xml:2002(guibutton) part1-gwt.xml:2114(guibutton) 
msgid "Ok"
msgstr ""

#: part1-gwt.xml:1998(listitem) 
msgid "Click <placeholder-1/> button of the \"<placeholder-2/>\" field and browse to the <placeholder-3/> directory under the Vaadin installation directory. Click <placeholder-4/> in the file selection dialog."
msgstr ""

#: part1-gwt.xml:2004(listitem) 
msgid "Select the <placeholder-1/> entry in the list box for importing."
msgstr ""

#: part1-gwt.xml:2008(guilabel) part1-gwt.xml:2118(guilabel) 
msgid "Into folder"
msgstr ""

#: part1-gwt.xml:2009(filename) 
msgid "myproject/gwt"
msgstr ""

#: part1-gwt.xml:2007(listitem) 
msgid "In the \"<placeholder-1/>\" field, enter <placeholder-2/>. (If you do not set this, all the contents of the <placeholder-3/> directory will be imported directly below the root directory of the project which is undesirable.)"
msgstr ""

#: part1-gwt.xml:2014(guibutton) part1-gwt.xml:2064(guibutton) part1-gwt.xml:2125(guibutton) 
msgid "Finish"
msgstr ""

#: part1-gwt.xml:2013(listitem) part1-gwt.xml:2124(listitem) 
msgid "Click <placeholder-1/>."
msgstr ""

#: part1-gwt.xml:2018(para) 
msgid "If you copied the directory outside Eclipse with system tools, remember to select your project folder in Eclipse and press <keycap>F5</keycap> to refresh the project."
msgstr ""

#: part1-gwt.xml:2024(para) 
msgid "GWT libraries must be included in the classpath of the project. Right-click on the project folder in the <guilabel>Project Explorer</guilabel> in Eclipse and select <menuchoice><guimenu>Properties</guimenu></menuchoice>. Select <menuchoice><guimenu>Java Build Path</guimenu><guimenuitem>Libraries</guimenuitem></menuchoice>."
msgstr ""

#: part1-gwt.xml:2035(title) 
msgid "Creating a GWT Module"
msgstr ""

#: part1-gwt.xml:2037(para) 
msgid "This section gives details on writing an application module that includes custom widgets."
msgstr ""

#: part1-gwt.xml:2043(title) 
msgid "Creating the Source Folder"
msgstr ""

#: part1-gwt.xml:2045(para) 
msgid "While the source files can be placed in any directory in ordinary projects, usually in the <filename>src</filename> directory directly under the project root, the widget build script described below in <xref linkend=\"gwt.development.compiler\"/> as well as the GWT Hosted Mode Browser assume that source files are located under the <filename>WebContent/WEB-INF/src</filename> folder. The source folder has to be created and designated as a source folder for the project."
msgstr ""

#: part1-gwt.xml:2057(filename) 
msgid "WebContent/WEB-INF"
msgstr ""

#: part1-gwt.xml:2059(guimenu) 
msgid "New"
msgstr ""

#: part1-gwt.xml:2059(guimenuitem) 
msgid "Folder"
msgstr ""

#: part1-gwt.xml:2056(listitem) part1-gwt.xml:2066(listitem) 
msgid "Right-click on the <placeholder-1/> folder and select <menuchoice><placeholder-2/><placeholder-3/></menuchoice>."
msgstr ""

#: part1-gwt.xml:2062(guilabel) 
msgid "New Folder"
msgstr ""

#: part1-gwt.xml:2063(filename) part1-gwt.xml:2067(filename) 
msgid "src"
msgstr ""

#: part1-gwt.xml:2063(guilabel) 
msgid "Folder name"
msgstr ""

#: part1-gwt.xml:2061(listitem) 
msgid "In the <placeholder-1/> dialog, enter <placeholder-2/> as the <placeholder-3/> and click <placeholder-4/>."
msgstr ""

#: part1-gwt.xml:2068(guimenu) 
msgid "Build Path"
msgstr ""

#: part1-gwt.xml:2068(guimenuitem) 
msgid "Use as Source Folder"
msgstr ""

#: part1-gwt.xml:2073(para) 
msgid "The folders designated as source folders are moved under the <guilabel>Java Resources</guilabel> folder in the <guilabel>Project Explorer</guilabel> of Eclipse. This is only a display feature; the source directory remains in its original location in the filesystem."
msgstr ""

#: part1-gwt.xml:2082(title) 
msgid "Creating Source Files"
msgstr ""

#. UNFINISHED
#: part1-gwt.xml:2086(para) 
msgid "In Eclipse, you can insert a folder inside a source package by selecting <menuchoice><guimenu>File</guimenu><guisubmenu>New</guisubmenu><guimenuitem>Folder</guimenuitem></menuchoice>."
msgstr ""

#: part1-gwt.xml:2093(title) 
msgid "Importing the ColorPicker Demo"
msgstr ""

#: part1-gwt.xml:2095(para) 
msgid "If you want to use the Color Picker application as an application skeleton, you need to import it under the source folder."
msgstr ""

#: part1-gwt.xml:2101(listitem) 
msgid "Right-click on the source folder and select <menuchoice><placeholder-1/></menuchoice>."
msgstr ""

#: part1-gwt.xml:2105(listitem) 
msgid "In the <placeholder-1/> dialog, select <menuchoice><placeholder-2/><placeholder-3/></menuchoice> and click <placeholder-4/>."
msgstr ""

#: part1-gwt.xml:2113(filename) 
msgid "WebContent/WEB-INF/src/com.vaadin/demo/colorpicker/"
msgstr ""

#: part1-gwt.xml:2114(guilabel) 
msgid "Import from directory"
msgstr ""

#: part1-gwt.xml:2111(listitem) 
msgid "Browse to <placeholder-1/> and click <placeholder-2/> button in the <placeholder-3/> dialog."
msgstr ""

#: part1-gwt.xml:2119(filename) 
msgid "myproject/WebContent/WEB-INF/src/com.vaadin/demo/colorpicker"
msgstr ""

#: part1-gwt.xml:2117(listitem) 
msgid "In the <placeholder-1/> field, enter <placeholder-2/>."
msgstr ""

#: part1-gwt.xml:2122(filename) 
msgid "colorpicker"
msgstr ""

#: part1-gwt.xml:2121(listitem) 
msgid "Check the <placeholder-1/> entry in the list box."
msgstr ""

#: part1-gwt.xml:2129(para) 
msgid "This will import the directory as <package>com.vaadin.demo.colorpicker</package> package. If you want to use it as a skeleton for your own project, you should refactor it to some other name. Notice that you will need to refactor the package and application name manually in the <filename>web.xml</filename> and <filename>.gwt.xml</filename> descriptor files."
msgstr ""

#: part1-gwt.xml:2142(title) 
msgid "Compiling GWT Widget Sets"
msgstr ""

#: part1-gwt.xml:2144(para) 
msgid "When running an application in a regular web browser, you need to compile the Vaadin Client-Side Engine and your custom widget set to JavaScript. This is done with the GWT Compiler. Vaadin installation package includes an Ant build script <filename>build-widgetset.xml</filename> in the <filename>WebContent/docs/example-source/</filename> directory."
msgstr ""

#: part1-gwt.xml:2153(para) part1-gwt.xml:2430(para) 
msgid "If you are using the Vaadin Plugin for Eclipse, it will create a launch configuration for compiling the widget sets for you. See <xref linkend=\"gwt.eclipse.widgetset\"/> and <xref linkend=\"gwt.eclipse.compiling\"/> for instructions."
msgstr ""

#: part1-gwt.xml:2160(para) 
msgid "To compile the Color Picker widget set example using the Ant build script, just change to the directory and enter:"
msgstr ""

#: part1-gwt.xml:2165(prompt) part1-gwt.xml:2308(prompt) 
msgid "$"
msgstr ""

#: part1-gwt.xml:2165(command) part1-gwt.xml:2308(command) 
msgid "ant -f build-widgetset.xml"
msgstr ""

#: part1-gwt.xml:2167(para) 
msgid "We advice that you copy the build script to your project and use it as a template. Just set the paths in the \"configure\" target and the widget set class name in the \"compile-widgetset\" target to suit your project."
msgstr ""

#: part1-gwt.xml:2173(para) 
msgid "Alternatively, you can launch the build script from Eclipse, by right-clicking the script in Package Explorer and selecting <menuchoice><guimenu>Run As</guimenu><guimenuitem>Ant Build</guimenuitem></menuchoice>. Progress of the compilation is shown in the <guilabel>Console</guilabel> window."
msgstr ""

#: part1-gwt.xml:2181(para) 
msgid "After compilation, <emphasis>refresh the project by selecting it and pressing <keycap>F5</keycap></emphasis>. This makes Eclipse scan new content and become aware of the output of the compilation in the <filename>WebContent/VAADIN/widgetsets/</filename> directory. If the project is not refreshed, the JavaScript runtime is not included in the web application and running the application will result in an error message such as the following:"
msgstr ""

#: part1-gwt.xml:2191(screen) 
#, no-wrap
msgid "Requested resource [VAADIN/widgetsets/com.vaadin.demo.colorpicker.gwt.ColorPickerWidgetSet/com.vaadin.demo.colorpicker.gwt.ColorPickerWidgetSet.nocache.js] not found from filesystem or through class loader. Add widgetset and/or theme JAR to your classpath or add files to WebContent/VAADIN folder."
msgstr ""

#: part1-gwt.xml:2193(para) 
msgid "Compilation with GWT is required also initially when using the Hosted Mode Browser described in <xref linkend=\"gwt.hosted-mode\"/>. The compilation with the GWT Compiler must be done at least once, as it provides files that are used also by the Hosted Mode Browser, even though the browser runs the GWT application in Java Virtual Machine instead of JavaScript."
msgstr ""

#: part1-gwt.xml:2203(para) 
msgid "Because GWT supports a slightly reduced version of Java, GWT compilation can produce errors that do not occur with the Java compiler integrated in the Eclipse IDE."
msgstr ""

#: part1-gwt.xml:2212(title) 
msgid "Compiling a Custom Widget Set"
msgstr ""

#: part1-gwt.xml:2214(para) 
msgid "If you wish to use the build script to compile your own widget sets, open it in an editor. The build script contains some instructions in the beginning of the file. You can use the <parameter>compile-my-widgetset</parameter> target as a template for your own widget sets."
msgstr ""

#: part1-gwt.xml:2222(programlisting) 
#, no-wrap
msgid "<?pocket-size 65% ?>&lt;!-- NOTE: Modify this example to compile your own widgetset  --&gt;\n&lt;target name=\"compile-widgetset\" depends=\"init\"&gt;\n  &lt;echo&gt;Compiling ColorPickerWidgetSet.&lt;/echo&gt;\n  &lt;echo&gt;Modify this script to compile your own widgetsets.&lt;/echo&gt;\n  &lt;java classname=\"com.google.gwt.dev.Compiler\"\n        failonerror=\"yes\" fork=\"yes\" maxmemory=\"256m\"&gt;\n\n    &lt;!-- Define the output directory. --&gt;\n    &lt;arg value=\"-war\" /&gt;\n    &lt;arg value=\"${client-side-destination}\" /&gt;\n\n    &lt;!-- Define your GWT widget set class here. --&gt;\n    &lt;arg value=\"<emphasis role=\"bold\">com.vaadin.demo.colorpicker.gwt.Col\n                orPickerWidgetSet</emphasis>\"/&gt;\n\n    &lt;!-- Reserve more than the default amount of stack space. --&gt;\n    &lt;jvmarg value=\"-Xss1024k\"/&gt;\n\n    &lt;!-- Prevent some X11 warnings on Linux/UNIX. --&gt;\n    &lt;jvmarg value=\"-Djava.awt.headless=true\"/&gt;\n\n    &lt;classpath&gt;\n      &lt;path refid=\"compile.classpath\"/&gt;\n    &lt;/classpath&gt;\n  &lt;/java&gt;\n&lt;/target&gt;"
msgstr ""

#: part1-gwt.xml:2249(para) 
msgid "Replace the target name with your desired target name and the widget set class name with your own class name."
msgstr ""

#: part1-gwt.xml:2255(title) 
msgid "Google Web Toolkit Version"
msgstr ""

#: part1-gwt.xml:2257(para) 
msgid "You should use a version of GWT suitable for the version of Vaadin you are using; we recommend using the GWT included in the installation package, but other versions may work as well."
msgstr ""

#: part1-gwt.xml:2263(para) 
msgid "If you are upgrading from Vaadin 5, the GWT 1.6 and later versions used by Vaadin 6 contains a new compiler and the old <classname>GWTCompiler</classname> class used previously for compiling GWT widgets is deprecated and replaced with <classname>com.google.gwt.dev.Compiler</classname>. You should update your existing widget set build scripts or launch configurations to use the new compiler class. The only significant API change is the output directory parameter, previously <literal>-out</literal>, now <literal>-war</literal>, as shown in the example above."
msgstr ""

#: part1-gwt.xml:2278(title) 
msgid "Java Stack Overflow Problems"
msgstr ""

#: part1-gwt.xml:2280(para) 
msgid "The <parameter>-Xss</parameter> parameter for the Java process may be necessary if you experience stack overflow errors with the default stack size. They occur especially with GWT 1.6, which uses large amount of stack space."
msgstr ""

#: part1-gwt.xml:2287(para) 
msgid "Notice further that the Windows version of Sun JRE 1.5 has a bug that makes the stack size setting ineffective. The Windows version also has a smaller default stack size than the other platforms. If you experience the problem, we advice that you either use JRE 1.6 on the Windows platform or use a wrapper that circumvents the problem. To use the wrapper, use class <classname>com.vaadin.launcher.WidgetsetCompiler</classname> in the build script instead of the regular compiler."
msgstr ""

#: part1-gwt.xml:2299(para) 
msgid "The <parameter>-Djava.awt.headless=true</parameter> is relevant in Linux/UNIX platforms to avoid some X11 warnings."
msgstr ""

#: part1-gwt.xml:2304(para) 
msgid "You can now compile the widget set with the following command:"
msgstr ""

#: part1-gwt.xml:2313(title) 
msgid "Ready to Run"
msgstr ""

#: part1-gwt.xml:2315(para) 
msgid "<xref linkend=\"figure.gwt.compiler.result.annotated\"/> shows the contents of a ready project."
msgstr ""

#: part1-gwt.xml:2321(title) 
msgid "Annotated Project Contents"
msgstr ""

#: part1-gwt.xml:2332(para) 
msgid "Notice that the Package Explorer does not correspond with the file system contents. Eclipse displays the items marked with asterisk (*) in a logical location, instead of the physical location in the file system."
msgstr ""

#: part1-gwt.xml:2338(para) 
msgid "You can either run the application in web mode, as introduced in <xref linkend=\"getting-started.first-project.run\" xrefstyle=\"select: label\"/>, or debug it with the GWT Hosted Mode Browser, as detailed in the next section."
msgstr ""

#: part1-gwt.xml:2347(title) part1-gwt.xml:2378(title) 
msgid "Hosted Mode Browser"
msgstr ""

#: part1-gwt.xml:2349(para) 
msgid "The GWT Hosted Mode Browser allows easy debugging of GWT applications. The GWT application is actually not compiled into JavaScript, as is done in the deployment phase, but executed as a Java application. This makes it possible to debug the application with, for example, the Eclipse IDE."
msgstr ""

#: part1-gwt.xml:2359(para) 
msgid "The <emphasis>Out of Process Hosted Mode</emphasis> (OOPHM), described in <xref linkend=\"gwt.development.oophm\"/>, is an experimental alternative for the Hosted Mode Browser, which you will need to debug GWT widgets. It runs the application in a regular browser instead of the built-in browser, so it will later probably become the default solution. The OOPHM version of GWT is included in the experimental platform-independent OOPHM package of Vaadin, available from the download site."
msgstr ""

#: part1-gwt.xml:2370(para) 
msgid "<emphasis>The regular Hosted Mode Browser does not work on Linux in Vaadin 6.1.</emphasis> For the Linux platform, the OOPHM package is the only option if you wish to debug GWT code."
msgstr ""

#: part1-gwt.xml:2389(para) 
msgid "<xref linkend=\"figure.gwt.hostedmodebrowser\"/> shows the hosted mode browser in action. On the left, you have the GWT Development Shell window. It displays compilation information and possible errors that occur during compilation. You can open a new browser window by clicking <guibutton>Hosted Browser</guibutton>."
msgstr ""

#: part1-gwt.xml:2397(para) 
msgid "The browser window has a <guibutton>Compile/Browse</guibutton> button, which runs the GWT Compiler to produce the JavaScript runtime and opens a regular web browser to run the application in Web Mode. Notice that even though it is possible to recompile the program with the button, GWT Compiler must be run before launching the Hosted Mode Browser, as described in <xref linkend=\"gwt.development.compiler\"/>."
msgstr ""

#: part1-gwt.xml:2406(para) 
msgid "Because GWT supports a slightly reduced version of Java, GWT compilation can produce errors that do not occur with the Java compiler integrated in the Eclipse IDE. Such errors will show up in the GWT Development Shell window."
msgstr ""

#: part1-gwt.xml:2413(para) 
msgid "While the Hosted Mode Browser is a fast and easy way to debug applications, it does not allow inspecting the HTML or DOM tree or network traffic like Firebug does in Mozilla Firefox."
msgstr ""

#: part1-gwt.xml:2420(title) 
msgid "Configuring Hosted Mode Launching in Eclipse"
msgstr ""

#: part1-gwt.xml:2422(para) 
msgid "This section gives details on configuring a launcher for the Hosted Mode Browser in the Eclipse IDE. We use the QuickStart installation of Vaadin covered in <xref linkend=\"getting-started.quickstart\"/> as an example project. The project includes source code for the Color Picker demo application."
msgstr ""

#: part1-gwt.xml:2440(guimenu) part1-gwt.xml:2443(guilabel) 
msgid "Run"
msgstr ""

#: part1-gwt.xml:2440(guimenuitem) 
msgid "Debug..."
msgstr ""

#: part1-gwt.xml:2441(guilabel) part1-gwt.xml:2584(guibutton) 
msgid "Debug"
msgstr ""

#: part1-gwt.xml:2438(listitem) 
msgid "Select from menu <menuchoice><placeholder-1/><placeholder-2/></menuchoice> and the <placeholder-3/> configuration window will open. Notice that it is not purposeful to run the Hosted Mode Browser in the \"<placeholder-4/>\" mode, because its entire purpose is to allow debugging."
msgstr ""

#: part1-gwt.xml:2448(para) 
msgid "Select the <menuchoice><guimenu>Java Application</guimenu></menuchoice> folder and click on the <guibutton>New</guibutton> button to create a new launch configuration."
msgstr ""

#: part1-gwt.xml:2456(title) 
msgid "Creating New Launch Configuration"
msgstr ""

#: part1-gwt.xml:2470(guilabel) 
msgid "Main"
msgstr ""

#: part1-gwt.xml:2471(guilabel) 
msgid "Main class"
msgstr ""

#: part1-gwt.xml:2473(classname) 
msgid "com.google.gwt.dev.GWTShell"
msgstr ""

#: part1-gwt.xml:2476(title) 
msgid "Naming Launch Configuration"
msgstr ""

#: part1-gwt.xml:2468(listitem) 
msgid "Click on the created launch configuration to open it on the right-side panel. In the <placeholder-1/> tab, give the launch configuration a name. Define the <placeholder-2/> as <placeholder-3/>. <placeholder-4/>"
msgstr ""

#: part1-gwt.xml:2489(para) 
msgid "Switch to the <guilabel>Arguments</guilabel> tab and enter arguments for the Hosted Mode Browsed Java application."
msgstr ""

#: part1-gwt.xml:2496(para) 
msgid "In the <guilabel>Program arguments</guilabel> field, enter:"
msgstr ""

#: part1-gwt.xml:2499(parameter) part1-gwt.xml:2500(parameter) 
msgid "8080"
msgstr ""

#: part1-gwt.xml:2500(parameter) 
msgid "myproject"
msgstr ""

#: part1-gwt.xml:2499(screen) 
#, no-wrap
msgid "-noserver -whitelist \"127.0.0.1  ^http[:][/][/]127[.]0[.]0[.]1[:]<placeholder-1/>\"\n-out WebContent/VAADIN/widgetsets http://127.0.0.1:<placeholder-2/>/<placeholder-3/>"
msgstr ""

#: part1-gwt.xml:2502(para) 
msgid "The browser application, <classname>GWTShell</classname>, takes as its arguments the following parameters:"
msgstr ""

#: part1-gwt.xml:2509(term) 
msgid "-noserver"
msgstr ""

#: part1-gwt.xml:2511(para) 
msgid "Prevents an embedded web server from starting, thereby allowing to use an already running server."
msgstr ""

#: part1-gwt.xml:2516(term) 
msgid "-whitelist"
msgstr ""

#: part1-gwt.xml:2518(para) 
msgid "Adds a regular expression to the list of allowed URL patterns for the web browser. Modify the port number from the 8080 given above as necessary."
msgstr ""

#: part1-gwt.xml:2524(term) 
msgid "-out"
msgstr ""

#: part1-gwt.xml:2526(para) 
msgid "Output directory for compiling widgets with GWT Compiler. The directory must be <parameter>WebContent/VAADIN/widgetsets</parameter>. You can compile the widgets either from the Hosted Mode Browser or externally as explained later in this chapter."
msgstr ""

#: part1-gwt.xml:2535(term) 
msgid "URL"
msgstr ""

#: part1-gwt.xml:2537(para) 
msgid "The URL to connect to. This must be the same as the whitelist entry given above. The port number must correspond to the port of the running web server. The Jetty web server included in Vaadin will run in port 8888 by default. In contrast, Apache Tomcat installed under Eclipse will run in port 8080 by default."
msgstr ""

#: part1-gwt.xml:2550(para) 
msgid "In the <guilabel>VM arguments</guilabel> field enter, for example, <parameter>-Xms256M -Xmx512M</parameter> to give the hosted mode browser more memory than the default amount. On Mac, add also <parameter>-XstartOnFirstThread</parameter>."
msgstr ""

#: part1-gwt.xml:2560(title) 
msgid "GWTShell Arguments"
msgstr ""

#: part1-gwt.xml:2573(guilabel) 
msgid "Classpath"
msgstr ""

#: part1-gwt.xml:2574(parameter) 
msgid "vaadin-examples"
msgstr ""

#: part1-gwt.xml:2572(listitem) 
msgid "In the <placeholder-1/> tab, you will by default have <placeholder-2/>, which contains the default classpath entries for the project. If the classpath entries for the project are sufficient, this should be enough."
msgstr ""

#: part1-gwt.xml:2580(guibutton) 
msgid "Apply"
msgstr ""

#: part1-gwt.xml:2579(listitem) 
msgid "Click <placeholder-1/> to save the launch configuration."
msgstr ""

#: part1-gwt.xml:2583(listitem) 
msgid "Click <placeholder-1/> to launch the Hosted Mode Browser using the launch configuration."
msgstr ""

#: part1-gwt.xml:2589(para) 
msgid "See the following section for details on debugging with the Hosted Mode Browser."
msgstr ""

#: part1-gwt.xml:2596(title) part1-gwt.xml:2660(title) 
msgid "Debugging with Hosted Mode Browser"
msgstr ""

#: part1-gwt.xml:2598(para) 
msgid "The purpose of the hosted mode browser is to allow debugging client-side GWT applications, or in our case, GWT widgets. Below is a checklist for important requirements for launching the Hosted Mode Browser:"
msgstr ""

#: part1-gwt.xml:2606(listitem) 
msgid "GWT is installed under the project folder."
msgstr ""

#: part1-gwt.xml:2609(listitem) 
msgid "GWT libraries are included in the project classpath."
msgstr ""

#: part1-gwt.xml:2612(listitem) 
msgid "Widget sets have been compiled with GWT Compiler."
msgstr ""

#: part1-gwt.xml:2616(filename) 
msgid "web.xml"
msgstr ""

#: part1-gwt.xml:2615(listitem) 
msgid "<placeholder-1/> descriptor is configured."
msgstr ""

#: part1-gwt.xml:2618(listitem) 
msgid "Web server is running and listening to the correct port."
msgstr ""

#: part1-gwt.xml:2621(listitem) 
msgid "Hosted Mode Browser launcher is configured."
msgstr ""

#: part1-gwt.xml:2626(para) 
msgid "Once everything is ready to start debugging, just open a source file, for example, the <classname>com.vaadin.demo.colorpicker.gwt.client.ui.GwtColorPicker</classname> class. Find the <methodname>onClick()</methodname> method. At the line containing the <methodname>setColor()</methodname> call, right-click on the leftmost bar in the editor and select <menuchoice><guimenuitem>Toggle Breakpoint</guimenuitem></menuchoice> from the popup menu. A small magnifying glass will appear in the bar to indicate the breakpoint."
msgstr ""

#: part1-gwt.xml:2639(title) 
msgid "Setting a Breakpoint"
msgstr ""

#: part1-gwt.xml:2650(para) 
msgid "Select from menu <menuchoice><guimenu>Run</guimenu><guimenuitem>Debug...</guimenuitem></menuchoice> and the <guilabel>Debug</guilabel> configuration window will open. Notice that it is not purposeful to run the Hosted Mode Browser in the \"<guilabel>Run</guilabel>\" mode, because its entire purpose is to allow debugging."
msgstr ""

#: part1-gwt.xml:2671(para) 
msgid "<emphasis role=\"strong\">Starting demo applications under the Hosted Mode Browser can take considerable time!</emphasis> This is especially true for the Reservation and Color Picker applications, which require compilation of custom widget sets. During this time, the Hosted Mode Browser is unresponsive and does not update its window. Compiling widgets can take 5-30 seconds, depending on the hardware."
msgstr ""

#: part1-gwt.xml:2680(para) 
msgid "Please refer to Eclipse IDE documentation for further instructions on using the debugger."
msgstr ""

#: part1-gwt.xml:2689(title) 
msgid "Out of Process Hosted Mode (OOPHM)"
msgstr ""

#: part1-gwt.xml:2691(para) 
msgid "The Out of Process Hosted Mode of GWT is an experimental new way for debugging GWT applications in a regular web browser. This allows using other browser debugging tools, such as Firebug, while debugging in hosted mode."
msgstr ""

#: part1-gwt.xml:2699(emphasis) 
msgid "The Linux Hosted Mode Browser is not compatible with Vaadin 6.0, so OOPHM is the only way to debug client-side code in Linux."
msgstr ""

#: part1-gwt.xml:2704(para) 
msgid "The OOPHM installation package of Vaadin is a platform-independent package available separately from the platform specific packages. Use of OOPHM requires (see more detailed notes further below):"
msgstr ""

#: part1-gwt.xml:2712(filename) 
msgid "gwt/plugins"
msgstr ""

#: part1-gwt.xml:2712(listitem) 
msgid "Installation of OOPHM plugin from <placeholder-1/> into your browser"
msgstr ""

#: part1-gwt.xml:2716(filename) part1-gwt.xml:2720(filename) 
msgid "gwt-dev-oophm.jar"
msgstr ""

#: part1-gwt.xml:2715(listitem) 
msgid "Compiling custom widget sets using the GWT Compiler provided in <placeholder-1/> instead of the platform-dependent library."
msgstr ""

#: part1-gwt.xml:2719(listitem) 
msgid "Launching Hosted Mode debugging with the <placeholder-1/> in class path instead of the platform-dependent library."
msgstr ""

#: part1-gwt.xml:2724(para) 
msgid "If you try debugging the demo applications in the Vaadin installation package, just install the plugin (Step 1), launch the server in Web Mode, and then launch the Hosted Mode in debug mode (Step 3) with the included launch configuration."
msgstr ""

#: part1-gwt.xml:2731(para) 
msgid "The OOPHM plugin is available for Mozilla Firefox, Internet Explorer, and WebKit based browsers."
msgstr ""

#: part1-gwt.xml:2737(title) 
msgid "Installing the OOPHM plugin in Firefox and WebKit"
msgstr ""

#: part1-gwt.xml:2738(para) 
msgid "The plugin for Firefox and WebKit is installed by opening the plugin file for your browser in the <filename>gwt/plugins</filename> directory. The Firefox plugin directory contains two plugins; you should normally use the <filename>oophm-xpcom.xpi</filename> plugin."
msgstr ""

#: part1-gwt.xml:2747(title) 
msgid "Installing the OOPHM plugin in Internet Explorer"
msgstr ""

#: part1-gwt.xml:2748(para) 
msgid "The Internet Explorer plugin is installed by running the command <command>regsvr32 oophm.dll</command> in the <filename>gwt/plugins/ie</filename> directory. Remember to restart Internet Explorer afterwards."
msgstr ""

#: part1-gwt.xml:2756(para) 
msgid "The installation package contains the built-in default widget set compiled with the OOPHM, but if you have your own widget sets (which is usually the reason why you want to use client-side debugging in the first place), you need to compile them. If you have compiled them previously with a regular installation of Vaadin, you need to recompile them with the GWT Compiler provided in the <filename>gwt-dev-oophm.jar</filename> library. Compiling GWT widget sets is covered in <xref linkend=\"gwt.development.compiler\"/>. The compilation of OOPHM widget sets uses a large amount of stack memory, so if the JVM default is too small, you should set it explicitly in <filename>compile-widgetset.xml</filename> with the following parameter for the Java process (currently included in the example build script): <placeholder-1/>"
msgstr ""

#: part1-gwt.xml:2773(para) 
msgid "Launching the debugging is done just as described in <xref linkend=\"gwt.hosted-mode\"/> for the regular Hosted Mode Browser, except that you must include the <filename>gwt-dev-oophm.jar</filename> library in the class path instead of the platform specific library. Launching the application with the debug configuration will contact the plugin in your browser and automatically opens the configured page."
msgstr ""

#: part1-gwt.xml:2783(para) 
msgid "To enable the usage of hosted mode in the browser you need to add a <parameter>gwt.hosted=ip:port</parameter> parameter to the URL of the application you want to debug, e.g. <uri>http://localhost:8080/myapp/?gwt.hosted=127.0.0.1:9997</uri>. As OOPHM support is experimental you might get messages such as \"No GWT plugin found\" but debugging should still work. In Internet Explorer you might get a warning: \"The website wants to run the following add-on: 'Google Web Toolkit Out-of-Process Hosted Mode...'\" when using OOPHM hosted mode. You need to allow execution of the ActiveX code to be able to use it."
msgstr ""

#. Put one translator per line, in the form of NAME <EMAIL>, YEAR1, YEAR2.
#: part1-gwt.xml:0(None) 
msgid "translator-credits"
msgstr ""

