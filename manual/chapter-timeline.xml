<?xml version="1.0" encoding="UTF-8"?>
<!-- ====================================================================== -->
<!-- Copyright 2000-2012 Vaadin Ltd                                         -->
<!-- All Rights Reserved                                                    -->
<!-- This work is licensed under a Creative Commons Attribution-NoDerivs    -->
<!-- License (CC-BY-ND) Version 3.0. Full license text is available at:     -->
<!-- http://creativecommons.org/licenses/by-nd/3.0/legalcode                -->
<!-- ====================================================================== -->

<!-- ====================================================================== -->
<!-- Converted from the original Timeline Manual in ODT format in July 2011 -->
<!-- Original author John Ahlroos (john.ahlroos@itmill.com).                -->
<!-- ====================================================================== -->

<!-- Please have only two (numbered) section levels under the chapter level -->
<!-- and only one (unnumbered) section/simplesect level. References must    -->
<!-- be made only to numbered sections.                                     -->

<chapter xml:id="timeline">
    <title>Vaadin Timeline</title>

    <section xml:id="timeline.overview">
        <title>Overview</title>

        <para>
            Vaadin Timeline is an add-on component that gives the user an intuitive
            understanding of events and trends. A timeline consists of a time-axis
            depicting a desired time range and some events or values mapped to the time
            range.
        </para>

        <figure xml:id="figure.addons.timeline.overview">
            <title>Vaadin Timeline Add-On Component</title>
            <mediaobject>
                <imageobject role="html">
                    <imagedata align="center" fileref="img/addons/timeline-overview.png"/>
                </imageobject>
                <imageobject role="fo">
                    <imagedata scale="100" smallscale="100%" align="center" fileref="img/addons/timeline-overview.png"/>
                </imageobject>
            </mediaobject>
        </figure>

        <para>
            A timeline allows representing time-related data visually as graphs instead of
            numerical values. They are used commonly in almost all fields of business,
            science, and technology, such as in project management to map out milestones and
            goals, in geology to map out historical events, and perhaps most prominently in
            the stock market.
        </para>

        <para>
            With Vaadin Timeline, you can represent almost any time-related statistical data
            that has a time-value mapping. Even several data sources can be used for
            comparison between data. This allows the user to better grasp of changes in the
            data and antipate forthcoming trends and problems.
        </para>

        <para>
            Vaadin Timeline can be easily included in a Vaadin application and is highly
            customizable to suit almost any purpose. Timeline supports multiple graph types as
            well as events and markers. The user interaction with the Timeline is
            straight-forward and simple.
        </para>
        
        <para>
            Book of Vaadin currently includes only an introduction to Vaadin Timeline. Please
            refer to the product documentation included in the installation package for
            further details.
        </para>

        <simplesect xml:id="timeline.intro.licensing">
            <title>Licensing</title>

            <para>
                Vaadin Timeline is a commercial product licensed under a dual-licensing
                scheme. The AGPL (GNU Affero General Public License) allows open-source
                development. CVAL (Commercial Vaadin Add-On License) needs to be purchased for
                closed-source use, including web deployments as well as intranet use.
            </para>

            <para>
                Commercial licenses can be purchased from the Vaadin Directory, where you can
                also find the license details and download the Vaadin Timeline.
            </para>
        </simplesect>

        <simplesect xml:id="timeline.intro.graphtypes">
            <title>Graph types</title>

            <para>
                The Vaadin Timeline supports three graph types:
            </para>

            <variablelist>
                <varlistentry>
                    <term><emphasis>Line graphs</emphasis></term>
                    <listitem>
                        Useful for representing continuous data, such as temperature changes
                        or changes in stock price.
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term><emphasis>Bar graphs</emphasis></term>
                    <listitem>
                        Useful for representing discrete or discontinuous data, such as market
                        share or forum posts.
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term><emphasis>Scatter graphs</emphasis></term>
                    <listitem>
                    Useful for representing discrete or discontinuous data.
                    </listitem>
                </varlistentry>
            </variablelist>

            <para>
                If you have several graphs in the timeline, you can also stack them on top
                of each other instead of drawing them on top of each other by setting
                <methodname>setGraphStacking()</methodname> in
                <classname>Timeline</classname> to <literal>true</literal>.
            </para>
        </simplesect>

        <simplesect xml:id="timeline.intro.interaction">
            <title>Interaction Elements</title>

            <para>
                The user can interact with the Vaadin Timeline in several ways.
            </para>

            <para>
                On the bottom of the timeline there is a <emphasis>scrollbar area</emphasis>
                where you can move the time forward or backward in time by dragging the time
                range box or by clicking the left and right arrow buttons. You can change the
                time range by resizing the range box in the scrollbar area. You can also zoom
                with the mouse wheel when the pointer is inside the component.
            </para>

            <figure xml:id="figure.addons.timeline.intro.interaction.scrollbar">
                <title>Scrollbar Area</title>
                <mediaobject>
                    <imageobject>
                        <imagedata smallscale="100%" align="center" fileref="img/addons/timeline-interaction-scrollarea.png"/>
                    </imageobject>
                </mediaobject>
            </figure>

            <para>
                The middle area of the timeline is the <emphasis>main area</emphasis> where
                the selected time range is displayed. Time scale is shown below the main
                area. The time scale used depends on the zoom level and can be a time unit
                from hours to years. Value scale is displayed on the right side of the main
                area. The scale can be either a static value range or a range calculated from
                the displayed data set. The user can move in time by dragging the main area
                with the mouse left and right and zoom in and out by using the mouse wheel.
            </para>

            <figure xml:id="figure.addons.timeline.intro.interaction.mainarea">
                <title>Main Area</title>
                <mediaobject>
                    <imageobject>
                        <imagedata smallscale="75%" align="center" fileref="img/addons/timeline-interaction-mainarea.png"/>
                    </imageobject>
                </mediaobject>
            </figure>

            <para>
                You can select a <emphasis>preset zoom level</emphasis> with the buttons on
                the top the Timeline. This will change the displayed time range to match the
                zoom level. The zoom levels are fully customizable to suit the time range in
                the API.
            </para>

            <figure xml:id="figure.addons.timeline.intro.interaction.presetzooms">
                <title>Preset Zoom Buttons</title>
                <mediaobject>
                    <imageobject>
                        <imagedata smallscale="75%" align="center" fileref="img/addons/timeline-interaction-presetzooms.png"/>
                    </imageobject>
                </mediaobject>
            </figure>

            <para>
                The <emphasis>current time range</emphasis> is shown at the top-right corner
                of the component. Clicking the dates makes them editable, so that you can
                manually change them. <emphasis>Graph legend</emphasis> is shown below the
                time range. The legend explains what is represented by each bar on the graph
                and displays the current value when the user moves the mouse cursor over the
                graph.
            </para>

            <figure xml:id="figure.addons.timeline.intro.interaction.timerange">
                <title>Current Time Range and Graph Legend</title>
                <mediaobject>
                    <imageobject>
                        <imagedata smallscale="75%" align="center" fileref="img/addons/timeline-interaction-timerange.png"/>
                    </imageobject>
                </mediaobject>
            </figure>

            <para>
                Finally, the available <emphasis>chart modes</emphasis> are shown below the
                preset zoom levels options. The available graph modes can be set from the API.
            </para>

            <figure xml:id="figure.addons.timeline.intro.interaction.chartmode">
                <title>Chart Mode</title>
                <mediaobject>
                    <imageobject>
                        <imagedata smallscale="85%" align="center" fileref="img/addons/timeline-interaction-chartmode.png"/>
                    </imageobject>
                </mediaobject>
            </figure>

            <para>
                You can use or hide any of the features above can be shown or hidden depending
                on your needs. For example, if you only need to display a graph without any
                controls, you can hide all them from the API.
            </para>
        </simplesect>

        <simplesect xml:id="timeline.intro.events">
            <title>Event Markers</title>
        
            <para>
                In addition to graphs, the timeline can have events. An event can be, for
                example, the time of a published advertisement in a graph that displays
                website hits. Combining the event data with the graphs enables the user to
                observe the relevance of the advertisement to the website hits visually.
            </para>

            <para>
                Vaadin Timeline provides two types of event markers, as illustrated in <xref
                    linkend="figure.addons.timeline.intro.events"/>.
            </para>

            <figure xml:id="figure.addons.timeline.intro.events">
                <title>Timeline Event Markers</title>
                <mediaobject>
                    <imageobject role="html">
                        <imagedata align="center" fileref="img/addons/timeline-event-markers.png"/>
                    </imageobject>
                    <imageobject role="fo">
                        <imagedata scale="50" smallscale="100%" align="center" fileref="img/addons/timeline-event-markers.png"/>
                    </imageobject>
                </mediaobject>
            </figure>

            <para>
                (On left) Marker with a customizable marker sign, for example, letter 'E'. The
                marker displays a caption which appears when the user hovers the pointer over
                the event.
            </para>

            <para>
                (On right) Marker with button-like appearance with a marker sign and a
                caption.
            </para>
        </simplesect>

        <simplesect xml:id="timeline.intro.efficiency">
            <title>Efficiency</title>

            <para>
                Vaadin Timeline reduces the traffic between the server and the client by using
                two methods.
            </para>

            <para>
                First of all, all the data that is presented in the component is dynamically
                fetched from the server as needed. This means that when the user scrolls the
                timeline view, the component continuously fetches data from the server. Also,
                only data that is visible to the user is transferred to the client. For
                example, if the timeline has data that has been measured once a second for an
                entire year, not all the data will be sent to the client. Only the data which
                can be rendered on the screen without overlapping is sent. This ensures that,
                even for large data sets, the loading time is small and only the necessary
                data is actually transferred over the network.
            </para>

            <para>
                Second, Vaadin Timeline caches the data received from the server in the
                browser, so that the data is transferred over the network only once, if
                possible. This speeds up the time-range browsing when data can be fetched from
                the cache instead of reloading it over the network.
            </para>
        </simplesect>
    </section>

    <section xml:id="timeline.using">
        <title>Using Timeline</title>

        <section xml:id="timeline.using.data-source">
            <title>Data Source Requirements</title>

            <para>
                Vaadin Timeline uses Vaadin containers as data sources for both the graphs
                and the events. There are, however, some requirements for the containers
                to make them compatible with the Vaadin Timeline.
            </para>

            <para>
                The containers have to implement
                <interfacename>Container.Indexed</interfacename> for the Vaadin Timeline
                to be able to use them. This is because the Vaadin Timeline dynamically
                fetches the data from the server when needed. This way large data sets can
                be used without having to load all data to the client-side at once and it
                brings a huge performance increase.
            </para>

            <para>
                Another requirement is that the container has one property of type
                <classname>java.util.Date</classname> (or a class that can be cast to it),
                which contains the timestamp when a data point or event occurred. This
                property has to be set by using the
                <methodname>setGraphTimestampPropertyId()</methodname> in
                <classname>Timeline</classname>. The default property ID
                <constant>timeline.PropertyId.TIMESTAMP</constant> is
                used if no timestamp-property ID has been set.
            </para>

            <para>
                A graph container also needs to have a <emphasis>value</emphasis> property
                that defines the value of the data point. This value can be any numerical
                value. The value property can be set with
                <methodname>setGraphValuePropertyId()</methodname> in
                <classname>Timeline</classname>. The default property ID
                <constant>Timeline.PropertyId.VALUE</constant> is used if no value
                property is given.
            </para>

            <para>
                Below is an example of how a graph container could be constructed:
            </para>
	 
            <programlisting><?pocket-size 65% ?><![CDATA[// Construct a container which implements Container.Indexed       
IndexedContainer container = new IndexedContainer();

// Add the Timestamp property to the container
Object timestampProperty = "Our timestamp property";
container.addContainerProperty(timestampProperty,
                               java.util.Date.class, null);

// Add the value property
Object valueProperty = "Our value property";
container.addContainerProperty(valueProperty, Float.class, null);

// Our timeline
Timeline timeline = new Timeline();

// Add the container as a graph container
timeline.addGraphDataSource(container, timestampProperty,
                                       valueProperty);]]></programlisting>

            <para>
                The event and marker containers are similar. They both need the
                <parameter>timestamp</parameter> property which should be of type
                <classname>java.util.Date</classname> and the
                <parameter>caption</parameter> property which should be a string. The
                marker container additionally needs a <parameter>value</parameter>
                property which is displayed in the marker popup.
            </para>

            <para>
                Below is an example on how a marker or event container can be constructed:
            </para>

            <programlisting><?pocket-size 65% ?><![CDATA[// Create the container
IndexedContainer container = new IndexedContainer();
        
// Add the timestamp property
container.addContainerProperty(Timeline.PropertyId.TIMESTAMP,
                               Date.class, null);
        
// Add the caption property
container.addContainerProperty(Timeline.PropertyId.CAPTION,
                              String.class, "");

// Add the marker specific value property.
// Not needed for a event containers.
container.addContainerProperty(Timeline.PropertyId.VALUE,
                               String.class, "");

// Create the timeline with the container as both the marker
// and event data source
Timeline timeline = new Timeline();
timeline.setMarkerDataSource(container, 
	Timeline.PropertyId.TIMESTAMP,
	Timeline.PropertyId.CAPTION,
	Timeline.PropertyId.VALUE);

timeline.setEventDataSource(container,
	Timeline.PropertyId.TIMESTAMP,
	Timeline.PropertyId.CAPTION);]]></programlisting>

            <para>
                The above example uses the default property IDs. You can change them to
                suit your needs.
            </para>

            <para>
                The <classname>Timeline</classname> listens for changes in the containers
                and updates the graph accordingly. When it updates the graph and items are
                added or removed from the container, the currently selected date range
                will remain selected. The selection bar in the browser area moves to keep
                the current selection selected. If you want the selection to change when
                the contents of the container changes and keep the selection area
                stationary, you can disable the selection lock by setting
                <methodname>setBrowserSelectionLock()</methodname> to
                <parameter>false</parameter>.
            </para>
        </section>

        <section xml:id="timeline.using.events">
            <title>Events and Listeners</title>

            <para>
                Two types of events are available when using the Vaadin Timeline.
            </para>

            <para>
                When the user modifies the selected date range by moving the date range
                selector, dragging the timeline, or by manually entering new dates, an
                event will be sent to the server with the information of what the current
                displayed date range is. To listen to these events you can attach a
                <classname>DateRangeListener</classname> which will receive the start and
                end dates of the current selection.
            </para>

            <para>
                If you are using events in your graph then you can attach an
                <classname>EventClickListener</classname> to listen for clicks on the
                events.  The listener will receive a list of itemIds from the event data
                source which are related to the click event. Since the events can be
                gathered into a single event icon if space is not sufficient for
                displaying them all, many item ids can be returned.
            </para>
        </section>

        <section xml:id="timeline.using.configurability">
            <title>Configurability</title>

            <para>
                The Vaadin Timeline is highly customizable and its outlook can be easily
                changed to suit your needs. The default view of the Timeline contains all
                the controls available but often all of them are not needed and can be
                hidden.
            </para>

            <para>
                The following list contains the components that can be shown or hidden at your preference:
            </para>

            <itemizedlist>
                <listitem>Chart modes</listitem>
                <listitem>Textual date select</listitem>
                <listitem>Browser area (bottom part of the Timeline)</listitem>
                <listitem>Legend</listitem>
                <listitem>Zoom levels</listitem>
                <listitem>Caption</listitem>
            </itemizedlist>

            <para>
                The outlook of the graphs themselves can also be changed for both the
                browser area and the main view. The following settings are available
                through the API:
            </para>

            <itemizedlist>
                <listitem>Graph outline color</listitem>
                <listitem>Graph outline width</listitem>
                <listitem>Graph caps (in line graphs only)</listitem>
                <listitem>Graph fill color</listitem>
                <listitem>Graph visibility</listitem>
                <listitem>Graph shadows</listitem>
            </itemizedlist>

            <para>
                Other changes to the outlook of the component can easily be done by CSS.
            </para>

            <para>
                Zoom levels are also fully customizable. Zoom levels are defined as
                milliseconds and can be added by calling the
                <methodname>addZoomLevel()</methodname> method. A zoom level always has a
                caption, which is the visible part in the zoom panel, and a millisecond
                amount.
            </para>

            <para>
                By default the grid divides the graph into five equally spaced parts with
                a gray color. However, you can fully customize how the grid is drawn by
                using <methodname>setGridColor()</methodname> and
                <methodname>setVerticalGridLines()</methodname>.
            </para>
        </section>

        <section xml:id="timeline.using.localization">
            <title>Localization</title>

            <para>
                By default the Vaadin Timeline uses English as its primary language for
                the captions and the default locale for the application to display the
                dates in the timeline.
            </para>

            <para>
                You can change the different captions in the Timeline by using their
                corresponding setters:
            </para>

            <itemizedlist>
                <listitem><methodname>setZoomLevelsCaption()</methodname> --  The caption appearing before the zoom levels</listitem>
                <listitem><methodname>setChartModesCaption()</methodname> --  The caption appearing before the chart modes</listitem>
            </itemizedlist>

            <para>
                Furthermore, you can also change the locale in which the Timeline shows
                the dates in the horizontal scale by specifying a valid locale using the
                <methodname>setLocale()</methodname> method of the timeline.
            </para>

            <para>
                You can also configure in what format the dates appear in the horizontal
                scale or in the date select in the top-right corner by using the
                <methodname>getDateFormats()</methodname>-method which will return a
                <classname>DateFormatInfo</classname> object.  By using its setters you
                can set specific formats for each date range in the scale. Please note
                that if you are using long date formats they might get clipped if the
                scale does not fit the whole formatted date.
            </para>
        </section>
    </section>
	
    <section xml:id="timeline.code-example">
        <title>Code example</title>

        <section xml:id="timeline.code-example.prerequisites">
            <title>Prerequisites</title>

            <para>
                To get started using the Vaadin Timeline component you should first
                download the Vaadin eclipse plugin and install it. More information on
                getting it can be found at <link
                xlink:href="http://vaadin.com/eclipse">http://vaadin.com/eclipse</link>.
            </para>

            <para>
                Once you got the plugin installed create an example project by selecting
                <menuchoice><guimenu>File</guimenu><guisubmenu>New</guisubmenu><guimenuitem>Other</guimenuitem></menuchoice>
                and select <guilabel>Vaadin Project</guilabel>. Lets call it
                <classname>MyTimelineDemo</classname>.
            </para>

            <figure xml:id="figure.timeline.code-example.new">
                <title>New Timeline Project</title>
                <mediaobject>
                    <imageobject role="html">
                        <imagedata align="center" fileref="img/timeline/timeline-example-new.png"/>
                    </imageobject>
                    <imageobject role="fo">
                        <imagedata scale="100" smallscale="100%" align="center" fileref="img/timeline/timeline-example-new.png"/>
                    </imageobject>
                </mediaobject>
            </figure>

            <para>
                When the project is created you should add the Vaadin Timeline library to
                your project. This can be done by copying the
                <filename>timeline-*.jar</filename> to the projects
                <filename>WebContent/WEB-INF/lib</filename> directory. When you copy the
                library into the folder you might get the message shown in <xref
                linkend="figure.timeline.code-example.widgetset"/>.
            </para>

            <figure xml:id="figure.timeline.code-example.widgetset">
                <title>Widget set compilation</title>
                <mediaobject>
                    <imageobject role="html">
                        <imagedata align="center" fileref="img/timeline/timeline-example-widgetset.png"/>
                    </imageobject>
                    <imageobject role="fo">
                        <imagedata scale="100" smallscale="100%" align="center" fileref="img/timeline/timeline-example-widgetset.png"/>
                    </imageobject>
                </mediaobject>
            </figure>

            <para>
                You should answer Yes and let the widgetset get compiled. If you do not
                get the above message or you answer No then you have to compile the
                widgetset manually by selecting the icon. It might take a while until the
                widgetset gets compiled depending of how much resources your computer
                have.
            </para>

            <para>
                Once the compilation is done the project file structure should look
                something as shown in <xref
                linkend="figure.timeline.code-example.project"/>.
            </para>
    
            <figure xml:id="figure.timeline.code-example.project">
                <title>Timeline Example Project</title>
                <mediaobject>
                    <imageobject role="html">
                        <imagedata align="center" fileref="img/timeline/timeline-example-project.png"/>
                    </imageobject>
                    <imageobject role="fo">
                        <imagedata scale="100" smallscale="100%" align="center" fileref="img/timeline/timeline-example-project.png"/>
                    </imageobject>
                </mediaobject>
            </figure>

            <para>
                Now you are ready to start developing with the Vaadin Timeline!
            </para>
        </section>

        <section xml:id="timeline.code-example.data-sources">
            <title>Create the data sources</title>

            <para>
                To use the Vaadin Timeline you need to create some data sources for
                it. The Vaadin Timeline uses Container.Indexed containers as data sources
                for both the graphs and the markers and events. So lets start by creating
                a datasource which represents the graph we want to draw in the timeline.
            </para>

            <para>
                For the Vaadin Timeline to understand how the data is constructed in the
                container we need to use specific property ids which describe what kind of
                data each property represents. For the Vaadin Timeline to work properly we
                will need to add two property ids, one for when the value was acquired and
                one for the value itself. The Vaadin Timeline has these both properties
                predefined as <parameter>Timeline.PropertyId.TIMESTAMP</parameter> and
                <parameter>Timeline.PropertyId.VALUE</parameter>. You can use the
                predefined ones or create your own if you wish.
            </para>

            <para>
                So, lets create a container which meets the above stated
                specification. Open the main application class which was automatically
                created when we created the project (in our case
                <filename>MytimelinedemoApplication.java</filename>) and add the following
                method.
            </para>

            <programlisting><?pocket-size 65% ?><![CDATA[/**
 * Creates a graph container with a month of random data
 */
public Container.Indexed createGraphDataSource(){
        
    // Create the container
    Container.Indexed container = new IndexedContainer();
        
    // Add the required property ids (use the default ones here)
    container.addContainerProperty(Timeline.PropertyId.TIMESTAMP, 
        Date.class, null);
    container.addContainerProperty(Timeline.PropertyId.VALUE, 
        Float.class, 0f);
        
    // Add some random data to the container
    Calendar cal = Calendar.getInstance();
    cal.add(Calendar.MONTH, -1);
    Date today = new Date();
    Random generator = new Random();
        
    while(cal.getTime().before(today)){
        // Create  a point in time
        Item item = container.addItem(cal.getTime());
            
        // Set the timestamp property
        item.getItemProperty(Timeline.PropertyId.TIMESTAMP)
            .setValue(cal.getTime());
            
        // Set the value property
        item.getItemProperty(Timeline.PropertyId.VALUE)
            .setValue(generator.nextFloat());
        
        cal.add(Calendar.DAY_OF_MONTH, 1);            
    }
        
    return container;        
}]]></programlisting>

            <para>
                This method will create an indexed container with some random points. As
                you can see we are using an <classname>IndexedContainer</classname> and
                define two properties to it which was discussed earlier. Then we just
                generate some random data in the container. Here we are using the default
                property ids for the timestamp and value but you could use your own if you
                wished. We'll see later how you would tell the Timeline which property ids
                to use if you used your own.
            </para>

            <para>
                Next, lets add some markers to our graph. Markers are arrow like shapes in
                the bottom of the timeline with which you can mark some occurrence that
                happened at that time. To create markers you again have to create a data
                source for them. I'll first show you how the code to create them and then
                explain what it all means. Add the following method to the main
                Application class:
            </para>

            <programlisting><?pocket-size 65% ?><![CDATA[/**
 * Creates a marker container with a marker for each seven days    
 */
public Container.Indexed createMarkerDataSource(){
        
    // Create the container
    Container.Indexed container = new IndexedContainer();
        
    // Add the required property IDs (use the default ones here)
    container.addContainerProperty(Timeline.PropertyId.TIMESTAMP,
            Date.class, null);
    container.addContainerProperty(Timeline.PropertyId.CAPTION, 
            String.class, "Our marker symbol");
    container.addContainerProperty(Timeline.PropertyId.VALUE, 
            String.class, "Our description");
        
    // Add a marker for every seven days
    Calendar cal = Calendar.getInstance();
    cal.add(Calendar.MONTH, -1);
    Date today = new Date();
    SimpleDateFormat formatter =
            new SimpleDateFormat("EEE, MMM d, ''yy");
    while(cal.getTime().before(today)){
        // Create a point in time
        Item item = container.addItem(cal.getTime());
        
        // Set the timestamp property
        item.getItemProperty(Timeline.PropertyId.TIMESTAMP)
                .setValue(cal.getTime());
        
        // Set the caption property
        item.getItemProperty(Timeline.PropertyId.CAPTION)
                .setValue("M");
            
        // Set the value property
        item.getItemProperty(Timeline.PropertyId.VALUE).
           setValue("Today is "+formatter.format(cal.getTime()));

        cal.add(Calendar.DAY_OF_MONTH, 7);
    }
    
    return container;        
}]]></programlisting>

            <para>
                Here we start the same as in the example with the graph container by
                creating an indexed container. Remember, all containers must be indexed
                containers when using the graph component.
            </para>

            <para>
                We then add the timestamp property, caption property and value property. 
            </para>

            <para>
                The timestamp property is the same as in the graph container but the
                caption and value property differ. The caption property describes what
                kind of marker it is. The caption is displayed on top of the arrow shape
                in the Timeline so it should be a short symbol, preferably only one
                character long. The class of the caption property must be String.
            </para>

            <para>
                The value property should also be a string and is displayed when the user
                hovers the mouse over the marker. This string can be arbitrarily long and
                normally should represent some kind of description of the marker.
            </para>

            <para>
                The third kind of data sources are the event data sources. The events are
                displayed on top of the timeline and supports grouping and are
                clickable. They are represented as button like icons in the Timeline.
            </para>

            <para>
                The event data sources are almost identical the to marker data sources
                except the value property is missing. Lets create an event data source and
                add events for each Sunday in out graph:
            </para>


            <programlisting><?pocket-size 65% ?><![CDATA[/**
 * Creates a event container with a marker for each sunday
 */
public Container.Indexed createEventDataSource(){
		
	// Create the container
	Container.Indexed container = new IndexedContainer();
	
	// Add the required property IDs (use the default ones here)
	container.addContainerProperty(Timeline.PropertyId.TIMESTAMP,
		Date.class, null);
	container.addContainerProperty(Timeline.PropertyId.CAPTION, 
		String.class, "Our marker symbol");
			
	// Add a marker for every seven days
	Calendar cal = Calendar.getInstance();
	cal.add(Calendar.MONTH, -1);
	Date today = new Date();		
	while(cal.getTime().before(today)){
		if(cal.get(Calendar.DAY_OF_WEEK) == Calendar.SUNDAY){
			// Create a point in time
			Item item = container.addItem(cal.getTime());
				
			// Set the timestamp property
			item.getItemProperty(Timeline.PropertyId.TIMESTAMP)
                .setValue(cal.getTime());
				
			// Set the caption property
			item.getItemProperty(Timeline.PropertyId.CAPTION)
				.setValue("Sunday");			
		}			
		cal.add(Calendar.DAY_OF_MONTH, 1);
	}
		
	return container;		
}]]></programlisting>

            <para>
                As you can see the event container does not differ a whole lot from the
                marker containers. In use however they differ since they are groupable
                they can be closely put together and still be usable and you can add click
                listeners to them so you can catch user events. More on the click
                listeners later.
            </para>

            <para>
                So now we have our three data sources ready to be displayed in our
                application. In the next chapter we will use them with our Timeline and
                see how they integrate with it.
            </para>
        </section>

        <section xml:id="timeline.code-example.timeline">
            <title>Create the Vaadin Timeline</title>

            <para>
                Okay, now that we have out data sources lets look at the init-method in
                our Vaadin Application. Lets start by creating our timeline, so add the
                following line to the end of the init-method in
                <classname>MytimelinedemoApplication</classname>:
            </para>

            <programlisting><?pocket-size 75% ?><![CDATA[Timeline timeline = new Timeline("Our timeline");
timeline.setWidth("100%");]]></programlisting>

            <para>
                This will create the timeline we want with a 100 percent width. Now lets
                add our data sources to the timeline:
            </para>

            <programlisting><?pocket-size 75% ?><![CDATA[timeline.addGraphDataSource(createGraphDataSource(), 
                        Timeline.PropertyId.TIMESTAMP,
                        Timeline.PropertyId.VALUE);

timeline.setMarkerDataSource(createMarkerDataSource(), 
                        Timeline.PropertyId.TIMESTAMP, 
                        Timeline.PropertyId.CAPTION, 
                        Timeline.PropertyId.VALUE);

timeline.setEventDataSource(createEventDataSource(), 
                        Timeline.PropertyId.TIMESTAMP,     
                        Timeline.PropertyId.CAPTION);]]></programlisting>


            <para>
                And finally add the timeline to the window. Here is the complete
                init-method:
            </para>

            <programlisting><?pocket-size 65% ?><![CDATA[@Override
public void init() {
    Window mainWindow = new Window("Mytimelinedemo Application");
    Label label = new Label("Hello Vaadin user");
    mainWindow.addComponent(label);
    setMainWindow(mainWindow);
        
    // Create the timeline
    Timeline timeline = new Timeline("Our timeline");

    // Create the data sources
    Container.Indexed graphDS  = createGraphDataSource();
    Container.Indexed markerDS = createMarkerDataSource();
    Container.Indexed eventDS  = createEventDataSource();
        
    // Add our data sources
    timeline.addGraphDataSource(graphDS, 
                                Timeline.PropertyId.TIMESTAMP,
                                Timeline.PropertyId.VALUE);
    timeline.setMarkerDataSource(markerDS, 
                                 Timeline.PropertyId.TIMESTAMP,
                                 Timeline.PropertyId.CAPTION,     
                                 Timeline.PropertyId.VALUE);
    timeline.setEventDataSource(eventDS, 
                                Timeline.PropertyId.TIMESTAMP,
                                Timeline.PropertyId.CAPTION);
        
    mainWindow.addComponent(timeline);        
}]]></programlisting>

            <para>
                Now you should be able to start the application and browse the
                timeline. The result is shown in <xref
                linkend="figure.code-example.timeline"/>.
            </para>

            <figure xml:id="figure.code-example.timeline">
                <title>Timeline Example Application</title>
                <mediaobject>
                    <imageobject role="html">
                        <imagedata align="center" fileref="img/timeline/timeline-example-timeline.png"/>
                    </imageobject>
                    <imageobject role="fo">
                        <imagedata scale="100" smallscale="100%" align="center" fileref="img/timeline/timeline-example-timeline.png"/>
                    </imageobject>
                </mediaobject>
            </figure>
        </section>
        
        <section xml:id="timeline.code-example.final">
            <title>Final Touches</title>

            <para>
                Now that we have our timeline we would probably like to customize it a
                bit. There are many things you can do but lets start by giving our graph
                some style properties and a caption in the legend. This can be done as
                follows:
            </para>

            <programlisting><?pocket-size 65% ?><![CDATA[// Set the caption of the graph
timeline.setGraphLegend(graphDataSource, "Our cool graph");
        
// Set the color of the graph
timeline.setGraphOutlineColor(graphDataSource, Color.RED);

// Set the fill color of the graph
timeline.setGraphFillColor(graphDataSource, new Color(255,0,0,128));
        
// Set the width of the graph
timeline.setGraphOutlineThickness(2.0);]]></programlisting>

            <para>
                Lets do the same to the browser areas graph:
            </para>

            <programlisting><?pocket-size 65% ?><![CDATA[// Set the color of the browser graph
timeline.setBrowserOutlineColor(graphDataSource, Color.BLACK);

// Set the fill color of the graph
timeline.setBrowserFillColor(graphDataSource,
                             new Color(0,0,0,128));]]></programlisting>

            <para>
                And the result looks like this:
            </para>

            <figure xml:id="figure.code-example.final.styling">
                <title>Styling Timeline</title>
                <mediaobject>
                    <imageobject role="html">
                        <imagedata align="center" fileref="img/timeline/timeline-example-result.png"/>
                    </imageobject>
                    <imageobject role="fo">
                        <imagedata scale="100" smallscale="100%" align="center" fileref="img/timeline/timeline-example-result.png"/>
                    </imageobject>
                </mediaobject>
            </figure>

            <para>
                Okay, now that looks different. But there is still something missing. If
                you look in the upper left corner you will not see any zoom levels. No
                zoom levels are predefined so we will have to make our own. Since we are
                dealing with a month of data lets make a zoom level for a day, a week and
                a month.  Zoom levels are given in milliseconds so we will have to
                calculate how many milliseconds each of the zoom levels are. So lets add
                them by adding the following lines:
            </para>

            <programlisting><![CDATA[// Add some zoom levels
timeline.addZoomLevel("Day", 86400000L);
timeline.addZoomLevel("Week", 7 * 86400000L);
timeline.addZoomLevel("Month", 2629743830L);]]></programlisting>

            <para>
                Remember the events we added? You can now see them in the graph but their
                functionality is still a bit incomplete. We can add an event listener to
                the graph which will send an event each time the user clicks on one of the
                event buttons. To demonstrate this feature lets add an event listener
                which notifies the user what date the Sunday-button represents. Here is
                the code for that:
            </para>

            <programlisting><?pocket-size 65% ?><![CDATA[
// Listen to click events from events
timeline.addListener(new Timeline.EventClickListener() {
    @Override
    public void eventClick(EventButtonClickEvent event) {
        Item item = eventDataSource.getItem(event.getItemIds()
                                   .iterator().next());
        Date sunday = (Date) item.getItemProperty(
                      Timeline.PropertyId.TIMESTAMP).getValue();
        SimpleDateFormat formatter =
            new SimpleDateFormat("EEE, MMM d, ''yy");
        
        MyTimelineDemo.this.getMainWindow()
            .showNotification(formatter.format(sunday));
               }        
        });]]></programlisting>

            <para>
                Now try clicking on the events and see what happens!
            </para>

            <para>
                And here is the final demo application, yours will probably look a bit
                different since we are using random data.
            </para>
    
            <figure xml:id="figure.code-example.final.final">
                <title>Final Example</title>
                <mediaobject>
                    <imageobject role="html">
                        <imagedata align="center" fileref="img/timeline/timeline-example-final.png"/>
                    </imageobject>
                    <imageobject role="fo">
                        <imagedata scale="100" smallscale="100%" align="center" fileref="img/timeline/timeline-example-final.png"/>
                    </imageobject>
                </mediaobject>
            </figure>

            <para>
                Now we hope you have a basic understanding of how the Vaadin Timeline
                works and how it can be customized. There are still a few features we left
                out of this tutorial like hiding unnecessary components from the timeline
                and adding multiple graphs to the timeline, but these are pretty self
                explanatory features and you probably can look them up in the JavaDoc.
            </para>

            <para>
                We hope you enjoy the Vaadin Timeline and find it useful in your projects!
            </para>
        </section>
    </section>
</chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: xml
sgml-omittag:nil
sgml-shorttag:nil
sgml-namecase-general:nil
sgml-general-insert-case:lower
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:4
sgml-indent-data:t
sgml-parent-document:nil
sgml-exposed-tags:nil
sgml-local-catalogs:("/etc/sgml/catalog" "/usr/share/xemacs21/xemacs-packages/etc/psgml-dtds/CATALOG")
sgml-local-ecat-files:("ECAT" "~/sgml/ECAT" "/usr/share/sgml/ECAT" "/usr/local/share/sgml/ECAT" "/usr/local/lib/sgml/ECAT")
End:
-->
