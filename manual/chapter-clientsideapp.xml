<?xml version="1.0" encoding="UTF-8"?>
<!-- ====================================================================== -->
<!-- Copyright 2000-2012 Vaadin Ltd                                         -->
<!-- All Rights Reserved                                                    -->
<!-- This work is licensed under a Creative Commons Attribution-NoDerivs    -->
<!-- License (CC-BY-ND) Version 3.0. Full license text is available at:     -->
<!-- http://creativecommons.org/licenses/by-nd/3.0/legalcode                -->
<!-- ====================================================================== -->

<chapter xml:id="clientsideapp">
	<title>Client-Side Applications</title>

    <para>
        This chapter describes how to develop client-side Vaadin applications.
    </para>

    <para>
        <emphasis>This edition is a draft. Many new features that will be included in
        Vaadin 7 are not yet covered in the draft and some of the content may in fact be
        outdated. For the most current version, please see the on-line edition available
        at <uri>http://vaadin.com/book</uri>.</emphasis>
    </para>

    <section xml:id="clientsideapp.overview">
        <title>Overview</title>

        <para>
            Vaadin allows developing client-side modules that run in the browser.
            Client-side modules can use the same widgets, themes, and back-end services as
            server-side Vaadin applications. Client-side applications can run in the
            browser, even with no further server communications. When paired with a
            server-side service to gain access to data storage and server-side business
            logic, client-side applications can be considered "fat clients", in comparison
            to the "thin client" approach of the server-side Vaadin applications. Fat
            clients are useful for a range of purposes when you have a need for highly
            responsive UI logic, such as for games or for serving a huge number of clients
            with possibly stateless server-side code.
        </para>

		<figure xml:id="figure.clientsideapp.overview.architecture" float="center" floatstyle="before">
			<title>Client-Side Application Architecture</title>
			<mediaobject>
				<imageobject role="html">
					<imagedata align="center" fileref="img/clientsideapp/clientsideapp-architecture-lo.png"/>
				</imageobject>
				<imageobject role="fo">
					<imagedata scale="60" smallscale="100%" align="center" fileref="img/clientsideapp/clientsideapp-architecture-hi.png"/>
				</imageobject>
			</mediaobject>
		</figure>

        <para>
            A client-side application is defined as a <emphasis>module</emphasis>, which
            has an <emphasis>entry-point</emphasis> class. Its
            <methodname>onModuleLoad()</methodname> method is executed when the JavaScript
            of the compiled module is loaded in the browser.
        </para>

        <para>
            Consider the following client-side application:
        </para>

        <programlisting><?pocket-size 75% ?><![CDATA[public class HelloWorld implements EntryPoint {
    @Override
    public void onModuleLoad() {
        RootPanel.get().add(new Label("Hello, world!"));
    }
}]]></programlisting>

        <para>
           The user interface of a client-side application is built under a HTML
           <emphasis>root element</emphasis>, which can be accessed by
           <methodname>RootPanel.get()</methodname>. The purpose and use of the
           entry-point is documented in more detail in <xref
           linkend="clientsideapp.entrypoint"/>. The user interface is built from
           <emphasis>widgets</emphasis> hierarchically, just like with server-side Vaadin
           UIs. The built-in widgets and their relationships are catalogued in <xref
           linkend="widgets"/>. You can also use Vaadin add-on widgets or make your own.
        </para>

        <para>
            A client-side module is defined in a <emphasis>module descriptor</emphasis>,
            as described in <xref linkend="clientside.module"/>. A module is
            compiled from Java to JavaScript using the Vaadin Compiler, of which use was
            described in <xref linkend="clientside.compiling"/>. The <xref
            linkend="clientsideapp.compiling"/> in this chapter gives further information
            about compiling client-side applications. The resulting JavaScript can be
            loaded to any web page, as described in <xref
            linkend="clientsideapp.loading"/>.
        </para>

        <para>
            The client-side user interface can be built declaratively using the included
            <emphasis>UI Binder</emphasis><!--, as described in <xref
            linkend="clientsideapp.uibinder"/> -->.
        </para>

        <para>
            The servlet for processing RPC calls from the client-side can be generated
            automatically using the included compiler.
        </para>

        <para>
            Even with regular server-side Vaadin applications, it may be useful to provide
            an off-line mode if the connection is closed. An off-line mode can persist
            data in a local store in the browser, thereby avoiding the need for
            server-side storage, and transmit the data to the server when the connection
            is again available. Such a pattern is commonly used with Vaadin TouchKit.<!-- Use
            of a client-side application to provide an off-line mode is described in <xref
            linkend="clientsideapp.offline"/>-->.
        </para>
    </section>

    <section xml:id="clientsideapp.entrypoint">
        <title>Client-Side Module Entry-Point</title>

        <para>
            A client-side application requires an <emphasis>entry-point</emphasis> where
            the execution starts, much like the <methodname>init()</methodname> method in
            server-side Vaadin UIs.
        </para>

        <para>
            Consider the following application:
        </para>

        <programlisting><?pocket-size 65% ?><![CDATA[package com.example.myapp.client;

import com.google.clientside.core.client.EntryPoint;
import com.google.clientside.event.dom.client.ClickEvent;
import com.google.clientside.event.dom.client.ClickHandler;
import com.google.clientside.user.client.ui.RootPanel;
import com.vaadin.terminal.clientside.client.ui.button.VButton;

public class MyEntryPoint implements EntryPoint {
    @Override
    public void onModuleLoad() {
        // Create a button widget
        Button button = new Button();
        button.setText("Click me!");
        button.addClickHandler(new ClickHandler() {
            @Override
            public void onClick(ClickEvent event) {
                mywidget.setText("Hello, world!");
            }
        });
        RootPanel.get().add(button);
    }
}]]></programlisting>
            
        <para>
            Before compiling, the entry-point needs to be defined in a module
            descriptor, as described in the next section.
        </para>

        <section xml:id="clientsideapp.entrypoint.descriptor">
            <title>Module Descriptor</title>

            <para>
                The entry-point of a client-side application is defined, along with any
                other configuration, in a client-side module descriptor, described in
                <xref linkend="clientside.module"/>. The descriptor is an XML file
                with suffix <filename>.gwt.xml</filename>.
            </para>

            <programlisting><?pocket-size 65% ?><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE module PUBLIC
    "-//Google Inc.//DTD Google Web Toolkit 1.7.0//EN"
    "http://google-web-toolkit.googlecode.com/svn/tags/1.7.0/distro-source/core/src/gwt-module.dtd">
<module>
    <!-- The entry-point for the client-side application -->
    <entry-point class="com.example.myapp.client.MyEntryPoint"/>
</module>]]></programlisting>

            <para>
                Any static resources, such as images or CSS stylesheets, must be contained
                in a <filename>public</filename> folder (not a Java package) under the
                folder of the descriptor file. When the module is compiled, the resources
                are copied to the output folder.
            </para>
        </section>
    </section>

    <section xml:id="clientsideapp.compiling">
        <title>Compiling a Client-Side Application</title>

        <para>
            The application needs to be compiled with the Vaadin Compiler into
            JavaScript. We covered the basics of the client-side module compilation in
            <xref linkend="clientside.compiling"/>. In the following, we see how to
            compile client-side applications.
        </para>

        <para>
            Probably the easiest way to compile a client-side application is to use
            the Vaadin Development Mode, which also allows debugging. You need to
            execute the <classname>com.google.clientside.dev.DevMode</classname> class
            in the Vaadin JAR with the following parameters:
        </para>

        <programlisting><![CDATA[-noserver -war warname com.example.myapp.MyModule
-startupUrl http://localhost:8080/myproject
warname -bindAddress 127.0.0.1]]></programlisting>
    </section>

    <section xml:id="clientsideapp.loading">
        <title>Loading a Client-Side Application</title>

        <para>
            You can load the JavaScript code of a client-side application in a HTML page
            by including it with a <literal>&lt;script&gt;</literal> tag, for example as
            follows:
        </para>

        <programlisting><?pocket-size 65% ?><![CDATA[<html xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <meta http-equiv="Content-Type"
          content="text/html; charset=UTF-8" />

    <title>Embedding a Vaadin Application in HTML Page</title>

    <!-- Load the Vaadin style sheet -->
    <link rel="stylesheet"
          type="text/css"
          href="/myproject/VAADIN/themes/reindeer/styles.css"/>
  </head>

  <body>
    <h1>A Pure Client-Side Application</h1>
    
    <script type="text/javascript" language="javascript"
            src="com.example.myapp.MyModule/com.example.myapp.MyM
                 odule.nocache.js"></script>
  </body>
</html>]]></programlisting>

        <para>
            The JavaScript module is loaded in a <literal>&lt;script&gt;</literal>
            element. The <literal>src</literal> parameter should be a relative
            link from the page to the compiled JavaScript module.
        </para>
        
        <para>
            If the application uses any supplementary Vaadin widgets, and not just
            core GWT widgets, you need to include the Vaadin theme as was done in the
            example. The exact path to the style file depends on your project
            structure - the example is given for a regular Vaadin application where
            themes are contained in the <filename>VAADIN</filename> folder in the WAR.
        </para>
    </section>

    <!--
    <section xml:id="clientsideapp.uibinder">
        <title>Declarative UIs with UI Binder</title>

        <para>
            To be done.
        </para>

        <para>
            Note that "UI" is used here in a general sense, not referring to the UI class
            in server-side Vaadin applications.
        </para>
    </section>

    <section xml:id="clientsideapp.service">
        <title>Servicing the Client-Side Apps</title>

        <para>
            To be done.
        </para>
    </section>

    <section xml:id="clientsideapp.offline">
        <title>Offline Mode for Server-Side Apps</title>

        <para>
            To be done.
        </para>
    </section>-->
</chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: xml
sgml-omittag:nil
sgml-shorttag:nil
sgml-namecase-general:nil
sgml-general-insert-case:lower
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:4
sgml-indent-data:t
sgml-parent-document:nil
sgml-exposed-tags:nil
sgml-local-catalogs:("/etc/sgml/catalog" "/usr/share/xemacs21/xemacs-packages/etc/psgml-dtds/CATALOG")
sgml-local-ecat-files:("ECAT" "~/sgml/ECAT" "/usr/share/sgml/ECAT" "/usr/local/share/sgml/ECAT" "/usr/local/lib/sgml/ECAT")
End:
-->

