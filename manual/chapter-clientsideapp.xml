<?xml version="1.0" encoding="UTF-8"?>

<chapter xml:id="clientsideapp">
	<title>Client-Side Applications</title>

    <para>
        This chapter describes how to develop client-side applications.
    </para>

    <section xml:id="clientsideapp.overview">
        <title>Overview</title>

        <para>
            Vaadin supports client-side application modules, which run in the browser.
            Client-side modules can use the same widgets, themes and back-end services as
            server-side Vaadin applications. They are useful when you have a need for
            highly responsive UI logic, such as for games or for serving a large number of
            clients with possibly stateless server-side code, and for various other
            purposes.
        </para>

        <para>
            Even with regular server-side Vaadin applications, it may be useful to
            provide an off-line mode if the connection is closed. An off-line mode can
            persist data in a local store in the browser, thereby avoiding the need
            for server-side storage, and transmit the data to the server when the
            connection is again available. Such pattern is commonly used with Vaadin
            TouchKit, as described in <xref linkend="mobile"/>.
        </para>
           
        <para>
            The client-side user interface can be built declaratively using the included
            <emphasis>UI Binder</emphasis>.
        </para>

        <para>
            The servlet for processing RPC calls from the client-side can be generated
            automatically by the included compiler.
        </para>
    </section>

    <section xml:id="clientsideapp.entrypoint">
        <title>Client-Side Module Entry-Point</title>

        <para>
            A client-side application requires an <emphasis>entry-point</emphasis> where
            the execution starts, much like the <methodname>init()</methodname> method in
            server-side Vaadin UIs.
        </para>

        <para>
            Consider the following application:
        </para>

        <programlisting><![CDATA[package com.example.myapp.client;

import com.google.clientside.core.client.EntryPoint;
import com.google.clientside.event.dom.client.ClickEvent;
import com.google.clientside.event.dom.client.ClickHandler;
import com.google.clientside.user.client.ui.RootPanel;
import com.vaadin.terminal.clientside.client.ui.button.VButton;

public class MyEntryPoint implements EntryPoint {
    @Override
    public void onModuleLoad() {
        // Create a button widget
        Button button = new Button();
        button.setText("Click me!");
        button.addClickHandler(new ClickHandler() {
            @Override
            public void onClick(ClickEvent event) {
                mywidget.setText("Hello, world!");
            }
        });
        RootPanel.get().add(button);
    }
}]]></programlisting>
            
        <para>
            Before compiling, the entry-point needs to be defined in a module
            descriptor, as described in the next section.
        </para>
    </section>

    <section xml:id="clientsideapp.descriptor">
        <title>Module Descriptor</title>

        <para>
            The entry-point is defined, along with any other configuration, in a
            <emphasis>client-side module descriptor</emphasis>. The descriptor is an
            XML file with suffix <filename>.gwt.xml</filename>.
        </para>

        <programlisting><?pocket-size 65% ?><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE module PUBLIC
    "-//Google Inc.//DTD Google Web Toolkit 1.7.0//EN"
    "http://google-web-toolkit.googlecode.com/svn/tags/1.7.0/distro-source/core/src/gwt-module.dtd">
<module>
    <!-- The entry-point for the client-side application -->
    <entry-point class="com.example.myapp.client.MyEntryPoint"/>
</module>]]></programlisting>

        <para>
            Any static resources, such as images or CSS stylesheets, must be contained
            in a <filename>public</filename> folder (not a Java package) under the
            folder of the descriptor file. When the module is compiled, the resources
            are copied to the output folder.
        </para>
    </section>

    <section xml:id="clientside.application.compiling">
        <title>Compiling the Application</title>

        <para>
            The application needs to be compiled with the Vaadin Compiler into
            JavaScript. We cover the details of the compilation later in <xref
                linkend="clientside.compiling"/>.
        </para>

        <para>
            Probably the easiest way to compile a client-side application is to use
            the Vaadin Development Mode, which also allows debugging. You need to
            execute the <classname>com.google.clientside.dev.DevMode</classname> class
            in the Vaadin JAR with the following parameters:
        </para>

        <programlisting><![CDATA[-noserver -war warname com.example.myapp.MyModule
-startupUrl http://localhost:8080/myproject
warname -bindAddress 127.0.0.1]]></programlisting>
    </section>

    <section xml:id="clientside.application.executing">
        <title>Executing a Client-Side Application</title>

        <para>
            You can use the JavaScript code of a client-side application in a HTML page by
            including it with a <literal>&lt;script&gt;</literal> tag, for example as
            follows:
        </para>

        <programlisting><?pocket-size 65% ?><![CDATA[<html xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <meta http-equiv="Content-Type"
          content="text/html; charset=UTF-8" />

    <title>Embedding a Vaadin Application in HTML Page</title>

    <!-- Load the Vaadin style sheet -->
    <link rel="stylesheet"
          type="text/css"
          href="/myproject/VAADIN/themes/reindeer/styles.css"/>
  </head>

  <body>
    <h1>A Pure Client-Side Application</h1>
    
    <script type="text/javascript" language="javascript"
            src="com.example.myapp.MyModule/com.example.myapp.MyModule.nocache.js"></script>
  </body>
</html>]]></programlisting>

        <para>
            The JavaScript module is loaded in a <literal>&lt;script&gt;</literal>
            element. The <literal>src</literal> parameter should be a relative
            link from the page to the compiled JavaScript module.
        </para>
        
        <para>
            If the application uses any supplementary Vaadin widgets, and not just
            core GWT widgets, you need to include the Vaadin theme as was done in the
            example. The exact path to the style file depends on your project
            structure - the example is given for a regular Vaadin application where
            themes are contained in the <filename>VAADIN</filename> folder in the WAR.
        </para>
    </section>
</chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: xml
sgml-omittag:nil
sgml-shorttag:nil
sgml-namecase-general:nil
sgml-general-insert-case:lower
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:4
sgml-indent-data:t
sgml-parent-document:nil
sgml-exposed-tags:nil
sgml-local-catalogs:("/etc/sgml/catalog" "/usr/share/xemacs21/xemacs-packages/etc/psgml-dtds/CATALOG")
sgml-local-ecat-files:("ECAT" "~/sgml/ECAT" "/usr/share/sgml/ECAT" "/usr/local/share/sgml/ECAT" "/usr/local/lib/sgml/ECAT")
End:
-->

