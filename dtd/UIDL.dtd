<?xml version="1.0" encoding="UTF-8" ?>

<!-- 
=============================================================================
 IT Mill Toolkit UIDL
.............................................................................

    Attributes are 'inherited' by defining an entity with the attributes, 
    'overridden' attributes are defined _before_ the reference to the entity,
    extended attributes are defined _after_ the reference.
    
    <!ENTITY parentAttributes "foo (true|false) #IMPLIED 
                               bar (true|false) #REQUIRED">
    <!ELEMENT parent>
    <!ATTLIST parent %parentAttributes;>
    
    <!ELEMENT child> 
    <!ATTLIST child foo (true) #REQUIRED %parentAttributes; 
                    huu CDATA #IMPLIED>
    
    The attribute 'foo' was restricted, 'bar' left alone and 'huu' added.
    
    NOTE: The default value of flag type attributes ('true|false') can be
          regarded as 'false' unless otherwise specified, even if the 
          attribute is defined as #IMPLIED. This is an optimization - since
          undefined attributes are evaluated as 'false' in XSL, it allows us
          to leave out the attribute.
          
=============================================================================
-->


<!-- 
=============================================================================
 Component variables
.............................................................................
 These are typically values that can be changed by the user, for instance 
 text-fields. Buttons contain a boolean value named 'clicked'.
.............................................................................
-->


<!-- Common variable defines ____________________________________________ -->

<!-- Common attributes for all variable types                             -->
<!ENTITY % variableAttributes 
            "id     NMTOKEN #REQUIRED 
             name   NMTOKEN #REQUIRED">
             <!-- 
             id: 
                System-generated unique id of the variable.         
             name: 
                Name of the variable.                             
             -->
             
<!-- All variable types                                                   -->
<!ENTITY % variables 
            "string|integer|boolean|array|uploadstream">


<!-- Variables __________________________________________________________ -->       

<!-- ........................................................................
 String -variable
.............................................................................
    <string id ="7" name="mystring">the string</string>
-->
<!ELEMENT string (#PCDATA)>
    <!ATTLIST string   
                %variableAttributes;>
                
<!-- ........................................................................
 Integer variable           
............................................................................. 
    <integer id ="7" name="myint" value="7"/>
-->   
<!ELEMENT integer EMPTY>
    <!ATTLIST integer   
                %variableAttributes; 
                value CDATA #REQUIRED>
                <!-- 
                value: 
                    Integer value of the variable                 
                -->
                
<!-- ........................................................................
 Boolean variable  
.............................................................................
    <boolean id="7" name="mybool" value="true"/>
-->
<!ELEMENT boolean EMPTY>
    <!ATTLIST boolean 
                %variableAttributes; 
                value (true|false) #REQUIRED>
                <!-- 
                value: 
                    Boolean value of the variable                 
                -->
                
<!-- ........................................................................
 Array variable 
.............................................................................
    <array name="keylist" id="12345">
        <ai>key1</ai>
        <ai>key2</ai>
    </array>
-->
<!ELEMENT ai (#PCDATA)> <!-- string element in the string array          -->
<!ELEMENT array (ai)*> 
    <!ATTLIST array 
                %variableAttributes;>
                
<!-- ........................................................................
 Uploadstream variable
.............................................................................
    <uploadstream id="7" name="myupload"/>
-->
<!ELEMENT uploadstream EMPTY>
    <!ATTLIST uploadstream 
                %variableAttributes;>
                
                
<!-- 
=============================================================================
 Components & component containers
.............................................................................
 Components are the buildingstones of IT Mill Toolkit interfaces. Some components
 are component containers as well - single component containers can contain 
 one component, while multi component containers can contain several
 components. Layout components are multi component containers that are meant 
 to layout a number of components in a controlled manner.

  The 'window' -component is a hybrid of sorts, since it is a single component
 container, but always contains a layout component - which in turn is a multi
 component container.
.............................................................................
-->


<!-- Common component defines ___________________________________________ -->

<!-- All basic components                                                 -->
<!ENTITY % basicComponents 
            "button|datefield|embedded|label|link|select|textfield|tree|upload">

<!-- All Layouts                                                          -->
<!ENTITY % layoutComponents
            "customlayout|gridlayout|orderedlayout">

<!-- All component containers                                             -->
<!ENTITY % singleComponentContainers 
            "framewindow|panel|window">
<!ENTITY % multipleComponentContainers 
            "table|tabsheet">
<!ENTITY % componentContainers 
            "%singleComponentContainers;|%multipleComponentContainers;">
            
<!-- All components, including containers                                 -->
<!ENTITY % components 
            "%basicComponents;|%layoutComponents;|%componentContainers;|component">

<!-- Common attributes for all components                                 -->
<!ENTITY % componentAttributes 
            "caption    CDATA           #IMPLIED
             icon       CDATA           #IMPLIED
             style      CDATA           #IMPLIED 
             readonly   (false|true)    #IMPLIED
             immediate  (false|true)    #IMPLIED
             disabled   (false|true)    #IMPLIED">
             <!-- 
             caption: 
                Visual caption of the component (string).
             icon:
                Identifier of a visual icon to display with the component.
             style: 
                Visual style of the component (string).
             readonly: 
                Component is read-only -flag (boolean).
             immediate: 
                React-immediatly-on-change -flag (boolean).
             disabled: 
                Component is disabled -flag (boolean).
             -->

<!-- Common attributes for all focusable                                 -->
<!ENTITY % focusableAttributes 
            "focusid    CDATA           #IMPLIED
             focus       (false|true)    #IMPLIED">
             <!-- 
             focusid: 
                Unique id of this focusable.
             focus:
                The field should be focused. The terminal should place the cursor on it
             -->

             
<!-- Shared elements ____________________________________________________ -->             

<!-- ........................................................................
 Action definitions
.............................................................................
    <actions>
        <string id="7" name="action" value="itemkey2,actionkey1" />
        <action caption="Edit" icon="edit.gif" key="actionkey1"/>
        <action caption="Copy" icon="copy.gif" key="actionkey2"/>
        <action caption="Delete" icon="delete.gif" key="actionkey3"/>
    </actions>
-->                
<!ELEMENT action EMPTY> <!-- Action definition                          -->
    <!ATTLIST action
                caption     CDATA   #IMPLIED 
                icon        CDATA   #IMPLIED
                key         NMTOKEN #REQUIRED>
                <!--
                caption:
                    Visual caption of the action.
                icon:
                    Identifier of a visual icon to display with the action.
                key:
                    Unique key of the action, referenced by nodes and leafs.
                -->            
                
<!ELEMENT actions (array, (action*))> <!-- list of actions                -->
    <!--
    string name="action":
        item key - action key pair separated with colon. For example
        value="12,93", where 12 is a item key and 93 is a action key.
    -->

<!-- ........................................................................
 Action references
    A set of references to actions defined elsewhere. Actions are referenced
    by their 'key' -attribute.
.............................................................................
    <al>
        <ak>actionkey1</ak>
        <ak>actionkey2</ak>
        <ak>actionkey3</ak>
    </al>
-->                
<!ELEMENT ak (#PCDATA)> <!-- An action reference                          -->
             <!--
             #PCDATA:
                References an action key.
             -->
<!ELEMENT al (ak*)> <!-- Action reference list                            -->
                
              
<!-- ........................................................................
 Text formatting elements 
    Used inte for instance error, description and label.
.............................................................................
    This is <i>an example</i> making use of the <b>UIDL</b> simple 
    formatting elements.<br/> 
-->
<!-- All formatting elements                                              -->
<!ENTITY % formattingElements 
            "b | br | i | li | u | ul | h1 | h2 | h3 | h4 | h5 | h6">     
<!ENTITY % formattedText 
            "(PCDATA | %formattingElements;)*">
                        
<!-- Bold style                                                           -->
<!ELEMENT b %formattedText;>

<!-- Line break                                                           -->
<!ELEMENT br EMPTY> 

<!-- Italic -style                                                        -->
<!ELEMENT i %formattedText;>

<!-- Underlined -style                                                    -->
<!ELEMENT u %formattedText;>

<!-- Bulleted list item                                                   -->
<!ELEMENT li %formattedText;>

<!-- Unordered (bulleted) list                                            -->
<!ELEMENT ul ((li)*)>

<!-- Header level 1                                                       -->
<!ELEMENT h1 (#PCDATA)>

<!-- Header level 2                                                       -->
<!ELEMENT h2 (#PCDATA)>

<!-- Header level 3                                                       -->
<!ELEMENT h3 (#PCDATA)>

<!-- Header level 4                                                       -->
<!ELEMENT h4 (#PCDATA)>

<!-- Header level 5                                                       -->
<!ELEMENT h5 (#PCDATA)>

<!-- Header level 6                                                       -->
<!ELEMENT h6 (#PCDATA)>


<!-- Common sections for all components _________________________________ -->

<!-- All component sections                                               -->
<!ENTITY % componentSections "description|error">
 
<!-- ........................................................................
 Component description
    Describes the function of the component in it's context. Often visually
    implemented a a 'tool-tip'.
.............................................................................
-->
<!ELEMENT description %formattedText;>

<!-- ........................................................................
 Component error message 
    Used to describe an error situation, when something is wrong with the 
    components content or state, for instance if the user entered an illegal
    value.
.............................................................................
-->
<!ELEMENT error (%formattedText;|error)*>
    <!ATTLIST error 
                level (info|warning|error|critical|system) #IMPLIED>
                <!--
                level: 
                    Severity level of the error (optional)
                -->
               
                     
<!-- Components _________________________________________________________ -->
          
<!-- ........................................................................
 Generic customizable component       
    A component that is custom made. 
.............................................................................
    <component type="push">
        ...
    </button> 
-->
<!ELEMENT component (%components;)*>
    <!ATTLIST component
                type    CDATA #IMPLIED>
                <!-- 
                type: 
                    The optional type of the component
                -->
 
<!-- ........................................................................
 Generic button component       
    A button that the user can interact with, either a push-button (volatile 
    state) or a switch-button (retains state, for instance a checkbox).
.............................................................................
    <button type="push">
        <boolean name="state" value="false"/>
    </button> 
-->
<!ELEMENT button ((%componentSections;)*,boolean)>
    <!-- 
    boolean name="state": 
        true if the button is in it's activated state
    -->
    <!ATTLIST button 
        modified  (false|true)    #IMPLIED
        caption CDATA   #REQUIRED
        %componentAttributes;
        %focusableAttributes;
        type    (push|switch)   "push">
                <!-- 
                modified:
                    True if component is modified but not commited to data 
                    storage.
                caption: 
                    Visual button caption (string)
                -->
 
<!-- ........................................................................
Date selection component
    Used to select a date and/or time, optionally within a certain range.
    Granularity is changed by not including certain variables.
    In the example below, 'min', 'sec' and 'msec' are left out, and the valid 
    range is from 2002.07.01 to the end of the year 2010.
    
    Note that if any of the the fields < 0, the datefield should be shown
    as empty. This implies null valued date.
.............................................................................
    <datefield modified="false"
                minyear="2002"
                minmonth="7"
                minday="1"
                maxyear="2010">
        <integer name="year" value=""/>
        <integer name="month" value=""/>
        <integer name="day" value=""/>
        <integer name="hour" value=""/>
    </datefield> 
-->
<!ELEMENT datefield ((%componentSections;)*,integer?,integer?,integer?,integer?,integer?,integer?,integer?)>
    <!--
    integer name="year": 
        Selected year
    integer name="month": 
        Selected month
    integer name="day": 
        Selected day
    integer name="hour": 
        Selected hour
    integer name="min": 
        Selected minute
    integer name="sec": 
        Selected second
    integer name="msec": 
        Selected millisecond
    -->
    <!ATTLIST datefield
        %componentAttributes;
        %focusableAttributes;
        modified  (false|true)    #IMPLIED>
        <!--
        modified: 
            true if the component is modified but not commited to data storage
        -->
                 
<!-- ........................................................................
 Embedded component                                
.............................................................................
  <embedded type="0" width="100" height="100" classid="Java.class" 
   codebase="http://something/" codetype="application/java-applet" 
   src="http://sourceofobject/" standby="Please wait loading ..." 
   >
    <embeddedparam name="name" value="value">
    <embeddedparam name="name2" value="value2"> 
   </embedded>

-->
<!ELEMENT embedded (#PCDATA|%componentSections;|embeddedparam)*>
    <!ATTLIST embedded
                %componentAttributes;
                type        (object|image)  "object"
                src         CDATA   #REQUIRED
                mimetype    CDATA   #IMPLIED
                width       CDATA   #IMPLIED
                height      CDATA   #IMPLIED
                classid     CDATA   #IMPLIED
                codebase    CDATA   #IMPLIED
                codetype    CDATA   #IMPLIED
                standby     CDATA   #IMPLIED
                >
                <!--
                type:
                	Type of the embedded object.
                src:
                    URL for the embedded content
                mimetype:
                    MIME type of the embedded content.
                width:
                    Visual width of the embedded content in pixels.
                height:
                    Visual height of the embedded content in pixels.
                classid:
                    An object's implementation location via a URI.
                codebase:
                    The root for relative path statements.
                codetype:
                	The MIME-Type of the code.
                standby:
                	Text to display while loading the object.
                
                See also: W3C specification on HTML 4.01 <object> tag.
                -->
<!ELEMENT embeddedparam EMPTY>
 <!ATTLIST embeddedparam
 	name	CDATA	#REQUIRED
 	value	CDATA	#REQUIRED
 	>

<!-- ........................................................................
 Label component 
    Used for showing textual labels.                                 
.............................................................................
<label>
    This is a <b>label</b>, which is a <i>component.</i> <br> 
    Enjoy.
</label>
-->
<!ELEMENT html (#PCDATA)>

<!ELEMENT pre (#PCDATA)>

<!ELEMENT data ANY>

<!ELEMENT label (%formattedText;|%componentSections;|html|pre|data)*>
    <!ATTLIST label
                %componentAttributes;>
  
<!-- ........................................................................
 Link component
    Used to create external or internal URL links.
.............................................................................
    <link src="jdhsakjdh" name="mywindow" width="500" height="350" 
          border="none"/>
-->

<!ELEMENT link ((%componentSections;)*)>
    <!ATTLIST link 
                %componentAttributes;
                src     CDATA 					#REQUIRED
                name    CDATA                   #IMPLIED
                width   CDATA                   #IMPLIED
                height  CDATA                   #IMPLIED
                border  (default|minimal|none)  "default">
                <!-- 
                src: 
                    the link address (string)                         
                name: 
                    Name of the target window (usually a window or frame)
                width: 
                    Width of the target (usually a window) in pixels.
                height: 
                    Height of the target (usually a window) in pixels.
                border: 
                    Border decoration of the target
                -->

<!-- ........................................................................
 Tree component
    Used to select an item (or multiple items) from a hierarchical set of 
    items.                                                               
.............................................................................
    <tree selectmode="single" disablenodeselection="true">
        <node icon="node.gif" caption="Nodes" key="node1" expanded="true" selected="false">
            <al>
                <ak>actionkey1</ak>
            </al>
            <leaf icon="leaf.gif" caption="Leaf1" key="leaf1" selected="true">
                <al>
                    <ak>actionkey</ak>
                </al>
            </leaf>
            <leaf icon="asd" caption="asd" key="wwe" selected="false">
                <al>
                    <ak>actionkey</ak>
                </al>
            </leaf>
            <node ...>
                <node .../>
                <leaf .../>
                <node .../>
                <leaf .../>
            </node>
        </node>
        <array id="17" name="selected">
            <ai>leaf1</ai>
        </array>
        <array id="156" name="expand" />
        <array id="136" name="collapse" />
        <actions>
            <array id="13" name="action">
                <ai>actionikey</ai>
            </array>
            <action caption="Edit" icon="edit.gif" key="actionkey" />
        </actions>
    </tree>
-->
<!ELEMENT leaf (al?)>
    <!ATTLIST leaf
                caption     CDATA           #IMPLIED 
                icon        CDATA           #IMPLIED
                key         NMTOKEN         #REQUIRED
                selected    (true|false)    #IMPLIED>

<!ELEMENT node ((node|leaf)*,al?)>
    <!ATTLIST node
                caption     CDATA       #IMPLIED
                icon        CDATA       #IMPLIED     
                key         NMTOKEN     #REQUIRED
                expanded (true|false)   #IMPLIED
                selected (true|false)   #IMPLIED>
                <!-- 
                caption: 
                    the display name of the node (string)
                icon: 
                    identifier of a visual icon to display with the node.
                key: 
                    unique identifier for this node
                expanded: 
                    true if the node is expanded (boolean)
                selected: 
                    true if node is selected (boolean)           
                -->

       
<!ELEMENT tree ((%componentSections;)*,(node|leaf)*,array*,actions?)>
    <!--
    array name="selected": 
        array of keys of selected nodes/leafs
    array name="expand": 
        array of keys to be requested to be expanded
    array name="collapse": 
        array of keys to be requested to be collapsed (collapses are one done before expands)
    -->
    <!ATTLIST tree
                %componentAttributes;
		        modified  (false|true)    #IMPLIED
                selectmode              (none|single|multi) "none" 
                disablenodeselection    (false|true)        #IMPLIED>
                <!--
                modified:
                    True if component is modified but not commited to data 
                    storage.
                selectmode: 
                    'none' turns selection off
                    'single' allows only one node/leaf to be selected at a time
                    'multi' allows multiple nodes/items to be selected simultaneously
                disablenodeselection:
                    disables the ability to select nodes (only leafs can be selected)
                -->

<!-- ........................................................................
 Select component 
    Used for selecting one or many options from a set of choices.            
.............................................................................
    <select selectmode="single" allownewitem="true">
        <options>
            <so key="7" icon="option.gif" caption="Option 1" selected="true"/>
            <so key="5" icon="option.gif" caption="Option 2" selected="false"/>
        </options>
        <array name="selected" id="5">
            <ai>7</ai>
        </array>
        <string name="newitem" id="34"/>
    </select>
-->
<!ELEMENT so EMPTY> <!-- select-option                                  -->
    <!ATTLIST so 
                key         NMTOKEN         #REQUIRED
                caption     CDATA           #IMPLIED
                icon        CDATA           #IMPLIED
                selected    (false|true)    #IMPLIED>
                <!--
                key:
                    Unique identifier for the option.
                caption:
                    Visual caption for the option. 
                    Caption and/or icon should be specified so that the option 
                    can be visually represented.
                icon:
                    Identifier of a visual icon to display with the option.
                    Caption and/or icon should be specified so that the option 
                    can be visually represented.
                selected:
                    true if the option is selected
                -->

<!ELEMENT options (so*)> <!-- list of options                             -->

<!ELEMENT select ((%componentSections;)*,options,array*)>
    <!--
    array name="selected":
        Array of keys of selected options.
    string name="newitem"
        ItemId of a new option, to be dynamically added if permitted by the
        'allownewitem' attribute. The value of the newitem valiable is interpreted
        as item id. Also if the component mode supports it, the contents are 
        shown as the caption of the new id. New id is not selected by default. 
        Selecting new items is done by selecting key "NEW" (without "-marks).
    -->
    <!ATTLIST select
                %componentAttributes;
                %focusableAttributes;
		        modified  (false|true)    #IMPLIED
                selectmode      (single|multi)  "single" 
                allownewitem  (false|true)    #IMPLIED>
                <!--
                modified:
                    True if component is modified but not commited to data 
                    storage.
                selectmode:
                    'single' if only one option can be selected at a time.
                    'multi' of multiple options can be selected 
                    simultaniously.
                allownewitem:
                    True to allow a new option to be dynamically added.
                -->

<!-- ........................................................................
TextField component
    Implements text editor, that supports both multiple and single line 
    modes, but defaults to one-line mode.                          
.............................................................................
  <textfield
    modified="true" 
    cols="15" 
    rows="5"
    wordwrap="true"
    multiline="true"
    maxlength="200">
        <string id="9" name="text" value="The editable text."/>
    </textfield>
-->
<!ELEMENT textfield ((%componentSections;)*,string)>
    <!--
    string name="text":
        Content of the textfield.
    -->
    <!ATTLIST textfield
                %componentAttributes;
                %focusableAttributes;
                modified    (false|true)    #IMPLIED
                cols        CDATA           #IMPLIED
                rows        CDATA           #IMPLIED
                wordwrap    (true|false)    #IMPLIED
                multiline   (false|true)    #IMPLIED                
                maxlength   CDATA           #IMPLIED
                secret      (false|true)    #IMPLIED>
                <!--
                modified:
                    True if component is modified but not commited to data 
                    storage.
                cols:
                    Number of visible columns in the textfield.
                rows:
                    Number of visible rows in the textfield. Only applicable 
                    if the textfield has the 'multiline' attribute set.
                wordwrap:
                    True if the textfield should do automatic word-wrapping. 
                    Only applicable if the textfield has the 'multiline' 
                    attribute set.
                multiline:
                    True if the textfield allows multiline input.
                secret:
                    True if textfield should not echo the input to display.
                -->
    
<!-- ........................................................................
 Upload component
    FIXME: describe this
.............................................................................
    <upload>
        <uploadstream name="myupload" id="1"/>
    </upload>   
-->                
<!ELEMENT upload ((%componentSections;)*,uploadstream)>
    <!ATTLIST upload %componentAttributes; %focusableAttributes; >

                    
<!-- Component containers _______________________________________________ -->

<!-- ........................................................................
 Ordered Layout
    An ordered layout places components in a predictable fasion, which
    varies depending on it's orientation.
    
    The 'vertical' orientation positions components from left to right.
    The 'horizontal' orientation positions components from top to bottom.
                
.............................................................................
    <orderedlayout orientation="vertical">
        <somecoponent/>
        <somecoponent/>
        <somecoponent/>
    </orderedlayout>
-->                

<!ELEMENT orderedlayout ((%componentSections;)*,(%components;)*)>
    <!ATTLIST orderedlayout
                %componentAttributes;
                orientation (vertical|horizontal)  "vertical">
                <!--
                orientation:
                    The visual orientation of the component.
                -->

<!-- ........................................................................
 Grid Layout
    A two-dimensional grid of cells on which components can be placed. 
    Components may occupy more than one cell, but the occupied area is always
    rectangular.
    Components can not overlap. 
.............................................................................
    <gridlayout w="2" h="1">
        <gr>
            <gc x="0" y="0"/>
            <gc x="1" y="0">
                <somecomponent/>
            </gc>
        </gr>
    </gridlayout>
-->       
<!ELEMENT gc ((%componentSections;)*, (%components;)?)>
    <!ATTLIST gc
                x       CDATA   #REQUIRED
                y       CDATA   #REQUIRED
                w       CDATA   "1"
                h       CDATA   "1">
                <!--
                x:
                    Horizontal position of the cell, starting from left
                y:
                    Vertical position of the cell, startion from top
                w:
                    Width (column-span) of the cell. Defaults to 1 if missing.
                h:
                    Height (row-span) of the cell. Defaults to 1 if missing.
                -->
                
<!ELEMENT gr (gc*)> <!-- Grid row                                         -->
         
<!ELEMENT gridlayout ((%componentSections;)*,gr*)>
    <!ATTLIST gridlayout
                %componentAttributes;
                x           CDATA           "0"
                y           CDATA           "0"
                w           CDATA           #REQUIRED 
                h           CDATA           #REQUIRED>
                <!--
                x:
                    Horisontal position of the grid's origo (top-left).
                y:
                    Vertical position of the grid's origo (top-left).
                w:
                    Width of the grid (total number of 'imagined' columns)
                h:
                    Height of the grid (total number of rows)
                -->

<!-- ........................................................................
  Custom Layout
    A layout used to place components in a customized manner. The location
    specifies a arbitrary name, used to tell the customized theme where to
    place the component. 
.............................................................................
    <customlayout>
        <location name="top">
            <somecomponent/>
        </location>
        <location name="body">
            <somecomponent/>
        </location>
    </customlayout>
-->            
<!ELEMENT location (%components;)>
    <!ATTLIST location
                name    CDATA   #REQUIRED>
                <!--
                name:
                    Textual identifier of the custom location.
                -->
 
<!ELEMENT customlayout ((%componentSections;)*,location*)>
    <!ATTLIST customlayout
                %componentAttributes;>
                              
<!-- ........................................................................
 Panel 
    A simple single component container. 
    FIXME explain more                                
.............................................................................
    <panel>
        <somecomponent/>
   	    <integer name="width" value="182"/>     
   	    <integer name="height" value="282"/>     
    </panel>
-->
<!ELEMENT panel ((%componentSections;)*,(%components;),integer*)>
    <!ATTLIST panel 
                %componentAttributes;>
    <!--
    integer name="width": 
        Content width in pixels or -1 if terminal can freely assign the width.
    integer name="height": 
        Content height in pixels or -1 if terminal can freely assign the height.
    integer name="scrolldown": 
        Content is scrolled down by given value (in pixels). If this variable 
        exists, scrolling is enabled.
    integer name="scrollleft": 
        Content is scrolled left by given value (in pixels). If this variable 
        exists, scrolling is enabled.
    -->


                
<!-- ........................................................................
  Table
    Used to produce a table -type presentation of data, with rows and 
    columns.
.............................................................................
  <table selectmode="multi" cols="2" rows="10" totalrows="20" >
    <cols>
        <ch icon="name.gif" caption="Name" align="left">
            <string name="sort" value="asc" id="7" />
        </ch>
        <ch icon="url.gif" caption="Url"/>
    </cols>
    <rows>
      <tr caption="1" selected="false" key="row1">
        <label>IT Mill</label>
        <link src="http://www.itmill.com" caption="www.itmill.com"/>
        <al>
            <ak>action1</ak>
            <ak>action2</ak>
        </al>
      </tr>
      <tr caption="2" key="row2" selected="true">
        <label>IT Mill Toolkit</label>
        <link src="http://www.itmill.com" caption="www.itmill.com"/>
        <al>
            <ak>action1</ak>
            <ak>action2</ak>
        </al>
      </tr>
    </rows>
    <array name="selected" id="s6">
        <ai>row2</ai>
    </array>
    <integer id="fv1"  name="firstvisible" value="1"/>
    <actions>
      <array  id="a6" name="action">
        <ai>action1/ai>
        <ai>action2/ai>
      </array>
      <action caption="Visit" icon="go.gif" key="action1" />
      <action caption="Delete" icon="del.gif" key="action2" />
    </actions>
  </table>
-->       

<!ELEMENT ch (string?)>
    <!--
    string name="sort":
        Indicates that this colums is sorted in the specified order. Possible
        values are: 'no', 'asc', 'desc'
    -->
    <!ATTLIST ch
                caption CDATA   #IMPLIED
                icon    CDATA   #IMPLIED 
                align   (left|center|right) "left">
                <!--
                caption:
                    Visual caption for the column header. 
                icon:
                    Identifier of a visual icon to display with the header.
                align:
                	Alignment of the table column.
                -->
<!ELEMENT cols (ch*)>

<!ELEMENT tr ((%components;)*,al?)>
    <!ATTLIST tr
                caption     CDATA           #IMPLIED
                icon        CDATA           #IMPLIED
                selected    (false|true)    #IMPLIED 
                key         NMTOKEN         #REQUIRED>
                <!--
                caption:
                    Visual caption for the row header. 
                icon:
                    Identifier of a visual icon to display with the header.
                selected:
                    True if the row is selected.
                key:
                    Unique identifier for the row.
                -->
<!ELEMENT rows (tr)*>

<!ELEMENT table ((%componentSections;)*,cols,rows*,array,integer,actions?)>
    <!--
    array name="selected":
        References selected rows by their 'key'.
    integer name="firstvisible":
        Index of the first visible row (starting from index 1). 
    integer name="reqfirstrow":
    	If > 0, table is requested to return rows starting from given index on next
    	paint. This overrides firstvisible. Indexing starts from 1.
    integer name="reqrows":
    	If >= 0, table is requested to return given number of rows on next paint.
    -->
    <!ATTLIST table
                %componentAttributes;
                %focusableAttributes;
		        modified  (false|true)    #IMPLIED
                selectmode  (none|single|multi) "none"
                cols        CDATA               #REQUIRED
                rows        CDATA               #REQUIRED
                firstrow    CDATA               #REQUIRED
                colheaders  (false|true)   	    #IMPLIED
                rowheaders  (false|true)   	    #IMPLIED
                pagelength  CDATA               #IMPLIED
                totalrows   CDATA               #REQUIRED>
                <!--
                selectmode:
                    Mode of selection.
                modified:
                    True if component is modified but not commited to data 
                    storage.
                cols:
                    Visible columns in the table.
                rows:
                    Number of rows painted. This might be different from pagelenght and totalrows.
                firstrow
                	Index of the first row painted. (The index of the first row in table is 1).
                colheaders:
                	Show column headers    
                rowheaders:
                	Show row headers    
                pagelength:
                    Number of tablerows per page. If not given, paging is disabled.
                totalrows:
                    Total rows in the table (serverside).
                -->
                
<!-- ........................................................................
 Window component.                                               
.............................................................................
  <window caption="My Window" name="targetname" theme="base">
    <somecomponent/>
    <integer name="width" value="182"/>     
   	<integer name="height" value="282"/>     
    <integer name="positionx" value="-1"/>     
   	<integer name="positiony" value="-1"/>     
    <boolean name="close" value="false"/>     
  </window>
-->
<!ELEMENT open EMPTY>
    <!ATTLIST open 
    			src			CDATA			#REQUIRED
    			name		CDATA			#IMPLIED
    			theme		CDATA			#IMPLIED>
                
                <!-- 
                src: 
                    the url to open address (string)                         
                name: 
                    Name of the target, if unspecified - open in this window
                theme: 
                    Theme used to render the window, if unspecified - we should not 
                    change the theme for this window from previously defined one.
                width: 
                    Width of the target (usually a window) in pixels.
                height: 
                    Height of the target (usually a window) in pixels.
                -->

<!ELEMENT window ((%componentSections;)*,open*,(%components;)*,integer*)>
    <!--
    integer name="width": 
        Content width in pixels or -1 if terminal can freely assign the width.
    integer name="height": 
        Content height in pixels or -1 if terminal can freely assign the height.
    integer name="scrolldown": 
        Content is scrolled down by given value (in pixels). If this variable 
        exists, scrolling is enabled.
    integer name="scrollleft": 
        Content is scrolled left by given value (in pixels). If this variable 
        exists, scrolling is enabled.
    integer name="focusid": 
        One component (field) at time can be focused within window. If this
        variable is present it contains the id of currently focused component.
    integer name="positionx": 
        Window position x or -1 if terminal can freely assign the position.
    integer name="positiony": 
        Window position y or -1 if terminal can freely assign the width.
    boolean name="close": 
        Variable that can be set true in order to close the window. Closing window
        sets it invisible and server can then remove the window alltogetger if
        it wants to.
    -->
    <!ATTLIST window 
    			name		CDATA			#REQUIRED
    			main		(false|true)	#IMPLIED
                %componentAttributes;>
                <!--
                name:
                    Name of the window target.
                main: 
                	Is the window main window. 'false' by default
                -->

<!-- ........................................................................
 Framewindow component.                                               
.............................................................................
    <framewindow>
        <frameset cols="15%,*"  >
            <frameset rows="*,100">
                <frame src="http://www.itmill.com" />
                <frame src="http://www.itmill.com" />
            </frameset>
            <frame src="http://www.itmill.com" />
        </frameset>
  </framewindow>
-->
<!ELEMENT frame EMPTY>
    <!ATTLIST frame
                src  CDATA   #REQUIRED
    			main		(false|true)	#IMPLIED
                name CDATA   #REQUIRED>
                <!--
                src:
                    URL to the frame content.
                name:
                    Name of the frame.
                -->
<!ELEMENT frameset (frameset|frame)+>
    <!ATTLIST frameset
                cols    CDATA   #IMPLIED
                rows    CDATA   #IMPLIED>
                <!--
                cols:
                    Comma delimited list of column widths. Either cols OR 
                    rows can be specified, not both.
                rows:
                    Comma delimited list of row heights. Either cols OR 
                    rows can be specified, not both.
                -->
<!ELEMENT framewindow ((%componentSections;)*,(frame|frameset)+)>
    <!ATTLIST framewindow 
                name    CDATA   #REQUIRED
                main	(true|false) #IMPLIED
                openurl	CDATA   #REQUIRED
                openwindowname	CDATA #IMPLIED
                %componentAttributes;>
                <!--
                name:
                    Name of the window target.
                openurl:
                	Redirect the window to given url
                openwindowname:
                	Name of the redirected window
                main: 
                	Is the window main window. 'false' by default
                -->

<!-- ........................................................................
 Tabsheet component
    Displays one component at a time from a set of components that are in
    the tabsheet. The tabs, which are normally used to select which 
    component to view, can be hidden - in this case selection of active tab
    is handeled elsewhere, for instance programmatically.
.............................................................................
    <tabsheet hidetabs="false">
        <tabs>
            <tab icon="tab.gif" caption="Tab 1" selected="false" key="t1">
                <somecomponent/>
            </tab>
            <tab icon="tab.gif" caption="Tab 2" key="t2" selected="true">
                 <somecomponent/>
           </tab>
        </tabs>
        <string id="s1" name="selected" value="t2"/>
    </tabsheet>
-->

<!ELEMENT tab (%components;)?>
    <!ATTLIST tab
                caption     CDATA           #IMPLIED
                icon        CDATA           #IMPLIED
                selected    (false|true)    #IMPLIED
                key         NMTOKEN         #REQUIRED>
                <!--
                caption:
                    Visual caption of the tab.
                icon:
                    Visual icon for the tab.
                selected:
                    True if the tab is selected.
                key:
                    Unique key of the tab.
                -->
<!ELEMENT tabs (tab)+>
<!ELEMENT tabsheet ((%componentSections;)*,tabs,string)>
    <!--
    string name="selected":
        Reference to the selected tab's key.
    -->
    <!ATTLIST tabsheet
                %componentAttributes;
                hidetabs    (false|true)    #IMPLIED>
                <!--
                hidetabs:
                    True if the tabs are hidden.
                -->
                
<!--
=============================================================================
  UIDL top level element
=============================================================================
-->

<!ELEMENT uidl (%components;)+>
    <!ATTLIST uidl
				theme CDATA	#REQUIRED>