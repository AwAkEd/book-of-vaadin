<?xml version="1.0"?>

<project name="Vaadin Documentation" basedir="../" default="package-all">

    <target name="package-all" depends="clean-all, init, docs"/>

    <!-- Ant contrib required for flow control (for loop, if, property override) -->
    <taskdef resource="net/sf/antcontrib/antlib.xml">
        <classpath>
            <pathelement location="build/lib/ant-contrib-1.0b3.jar" />
        </classpath>
    </taskdef>

    <!-- ================================================================== -->
    <!-- Clean results                                                      -->
    <!-- ================================================================== -->
    <target name="clean-all" depends="">
        <property file="build/build.properties" />
        <delete dir="${result-path}" includes="**/*" followsymlinks="false" defaultexcludes="false" includeemptydirs="true" failonerror="false">
        </delete>
    </target>

    <!-- ================================================================== -->
    <!-- Initialization - - - - - - - - - - - - - - - - - - - - - - - - - - -->
    <!-- ================================================================== -->

    <target name="init">

        <property file="build/build.properties" />
        <property file="build/VERSION.properties" />
        <property file="build/html-style.properties" />

        <!-- Can run XEP only if license is available. -->
        <available file="build/lib/XEP/license.xml" property="xep.license.available" />

        <!-- Create result dir unless already exists -->
        <mkdir dir="${result-path}" />

        <echo message="Prepared to build documentation for ${product-file} version ${version}" />

        <!-- Output directory -->
        <property name="output-dir" value="${result-path}/package" />
        <mkdir dir="${output-dir}" />

        <!-- Create Output Directory Hierarchy -->
        <mkdir dir="${output-dir}/WebContent" />
        <mkdir dir="${output-dir}/WebContent/docs" />
        <mkdir dir="${output-dir}/WebContent/docs/book" />

		<!-- Read the English book from the default directory, translations from prepared ones. -->
        <condition property="manual.source.dir" value="manual">
			<not><isset property="locale"/></not>
		</condition>
        <condition property="manual.source.dir" value="${result-path}/translations/${locale}">
			<isset property="locale"/>
		</condition>

		<!-- The language string for DocBook. -->
		<property name="manual.language.docbook" value="en"/>
		<property name="manual.language.extension" value=""/>

		<property name="manual.source.xml" value="${manual.source.dir}/book.xml"/>
		<echo>Manual source XML: ${manual.source.xml}</echo>
    </target>

    <!-- ================================================================== -->
    <!-- Build Documentation.                                               -->
    <!-- ================================================================== -->
    <target name="docs" depends="manual-pdf, manual-html, tutorial-pdf, tutorial-html, package-docs"/>

    <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
    <!-- Package Documentation: Add documentation including style files      -->
    <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
    <target name="package-docs">
        <copy todir="${output-dir}/WebContent/docs/book/html-style">
            <fileset dir="manual/html-style">
                <exclude name="**/.svn" />
                <exclude name="**/test.html" />
            </fileset>
        </copy>
        <copy todir="${output-dir}/WebContent/docs">
            <fileset dir="/">
                <exclude name="**/.svn" />
                <include name="dtd/**/*.dtd" />
            </fileset>
        </copy>
    </target>

    <!-- ================================================================== -->
    <!-- Build Reference Manual.                                            -->
    <!-- ================================================================== -->

    <!-- Initialize properties especially for the Reference Manual. -->
    <target name="init-manual" depends="prepare-translations">
        <!-- Sets the current date as the publication date of the Manual. -->
        <tstamp>
            <format property="manual.pubdate" pattern="yyyy-MM-dd"/>
        </tstamp>

        <!-- Classpath for running the XSLT processor. -->
        <path id="docbook-xsl.classpath">
            <pathelement path="build/lib/fserializer.jar" />
            <pathelement path="build/lib/xalan.jar" />
            <pathelement path="build/lib/xercesImpl.jar" />
            <pathelement path="build/lib/xml-apis.jar" />
        </path>

		<condition property="locale.explicit" value="en_US">
			<not><isset property="locale"/></not>
		</condition>
		<property name="locale.explicit" value="${locale}"/>
		<echo>Locale: ${locale.explicit}</echo>
    </target>

    <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
    <!-- Build PDF manual                                                    -->
    <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

    <!-- Build PDF manual from sources or just copy it. -->
    <target name="manual-pdf" depends="init, init-manual, init-manual-pdf, build-manual-pdf, copy-manual-pdf">
    </target>

    <target name="init-manual-pdf" depends="">
        <!-- Detect the presense of Vaadin special fonts. -->
        <condition property="manual.fonts.custom" value="1" else="0">
            <available file="build/lib/XEP/fonts/HelveticaRoundedLTStd-Bd.otf" />
        </condition>

        <condition property="xep.config" value="build/lib/XEP/xep-vaadinfonts.xml" else="build/lib/XEP/xep.xml">
            <equals arg1="${manual.fonts.custom}" arg2="1"/>
        </condition>
    </target>

    <target name="modify-xep-config">
    </target>

    <!-- Just copy a prebuilt PDF manual. -->
    <target name="copy-manual-pdf" unless="xep.license.available">
        <echo>PDF Manual: No XEP license available, just copy a prebuilt PDF.</echo>
        <copy file="manual/book.pdf" tofile="${output-dir}/WebContent/docs/book-of-vaadin.pdf" />
    </target>

    <!-- Build PDF manual with XEP FO processor. -->
    <target name="build-manual-pdf" depends="modify-xep-config" if="xep.license.available">
        <echo>PDF Manual: processing images (TBD)</echo>
        <!-- TBD -->
        <echo>PDF Manual: converting xml to fo</echo>

        <property name="manual.fo.style" value=""/>
		<property name="manual.fo.conf" value="custom-fo-docbook${manual.fo.style}.xsl"/>

        <echo>Configuration file: ${manual.fo.conf}</echo>

        <echo>Publication date is ${manual.pubdate}</echo>

        <java classname="org.apache.xalan.xslt.Process" failonerror="yes" fork="yes" maxmemory="512m">
            <arg value="-xsl" />
            <arg value="build/docbook/conf/${manual.fo.conf}" />
            <arg value="-in" />
            <arg value="${manual.source.xml}" />
            <arg value="-out" />
            <arg value="${result-path}/book${manual.language.extension}.fo" />
            <arg value="-param" />
            <arg value="section.autolabel" />
            <arg value="1" />
            <arg value="-param" />
            <arg value="section.label.includes.component.label" />
            <arg value="1" />
            <arg value="-param" />
            <arg value="section.autolabel.max.depth" />
            <arg value="2" />
            <arg value="-param" />
            <arg value="draft.watermark.image" />
            <arg value="''" />
            <arg value="-param" />
            <arg value="draft.mode" />
            <arg value="'no'" />
            <arg value="-param" />
            <arg value="double.sided" />
            <arg value="1" />
            <arg value="-param" /> <!-- PDF bookmarks support. -->
            <arg value="xep.extensions" />
            <arg value="1" />
            <arg value="-param" />
            <arg value="manual.pubdate" />
            <arg value="${manual.pubdate}" />
            <arg value="-param" />
            <arg value="manual.version" />
            <arg value="${version}" />
            <arg value="-param" />
            <arg value="manual.fonts.custom" />
            <arg value="${manual.fonts.custom}" />
            <arg value="-param" />
            <arg value="l10n.gentext.language" />
            <arg value="${manual.language.docbook}" />
            <classpath refid="docbook-xsl.classpath" />
        </java>

        <echo>PDF Manual: converting fo to pdf</echo>
        <!-- Run XEP FO processor to convert FO to PDF -->
        <java classname="com.renderx.xep.XSLDriver" error="${result-path}/xep-error.log" failonerror="yes" fork="yes" maxmemory="512m" input="${result-path}/book${manual.language.extension}.fo" output="${output-dir}/WebContent/docs/book-of-vaadin${manual.language.extension}.pdf">
            <arg value="-Dcom.renderx.xep.CONFIG=${xep.config}" />
            <classpath>
                <pathelement location="build/lib/XEP/lib/tools.jar" />
                <pathelement location="build/lib/XEP/lib/xep.jar" />
                <pathelement location="build/lib/XEP/lib/saxon.jar" />
                <pathelement location="build/lib/XEP/lib/xt.jar" />
            </classpath>
        </java>
    </target>

    <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
    <!-- HTML Manual                                                         -->
    <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

    <!-- Common initialization tasks for a HTML manual.                                   -->
    <!-- Some properties must be defined in the more specific HTML manual initialization. -->
    <target name="init-manual-html-common" depends="">
        <!-- Create the manual output directory if it doesn't already exist. -->
        <mkdir dir="${manual.html.output.dir}"/>

        <property name="manual.html.xsl.template"  value="build/docbook/conf/custom-html-template.xsl"/>
        <property name="manual.html.xsl.processed" value="build/docbook/conf/custom-html-processed.xsl"/>

        <!-- Replace tags in the HTML stylesheet template. -->
        <delete file="${manual.html.xsl.processed}" />
        <copy file="${manual.html.xsl.template}" tofile="${manual.html.xsl.processed}">
            <filterchain>
                <replacetokens>
                    <token key="BODYHEADER" value="${html.body.start1}${docbook.head.title}${html.body.start2}" />
                    <token key="BODYFOOTER" value="${html.body.end}" />
                </replacetokens>
            </filterchain>
        </copy>
    </target>

    <target name="manual-html-build" depends="init-manual-html, init-manual-html-common">
        <java classname="org.apache.xalan.xslt.Process" failonerror="yes" fork="yes" maxmemory="512m">
            <arg value="-in" />
            <arg value="${manual.source.xml}" />
            <arg value="-xsl" />
            <arg value="${manual.html.xsl}" />
            <!-- The output file will be empty for eclipse plugin. -->
            <arg value="-out" />
            <arg value="${manual.html.output.index}" />
            <arg value="-param" />
            <arg value="section.autolabel" />
            <arg value="1" />
            <arg value="-param" />
            <arg value="section.label.includes.component.label" />
            <arg value="1" />
            <arg value="-param" />
            <arg value="section.autolabel.max.depth" />
            <arg value="2" />
            <arg value="-param" />
            <arg value="use.extensions" />
            <arg value="1" />
            <arg value="-param" />
            <arg value="manual.pubdate" />
            <arg value="${manual.pubdate}" />
            <arg value="-param" />
            <arg value="manual.version" />
            <arg value="${version}" />
            <!-- This is needed only for the Eclipse Help plugin. -->
            <arg value="-param" />
            <arg value="eclipse.plugin.version" />
            <arg value="${eclipse.plugin.manual.version}" />
            <arg value="-param" />
            <arg value="l10n.gentext.language" />
            <arg value="${manual.language.docbook}" />
            <classpath refid="docbook-xsl.classpath" />
        </java>

        <delete file="${manual.html.xsl.processed}" />

        <!-- Copy images to output directory. -->
        <copy todir="${manual.html.output.dir}/img">
            <fileset dir="manual/img">
                <exclude name="**/.svn" />
            </fileset>
        </copy>
    </target>

    <!-- Configuration for building the HTML manual. -->
    <target name="init-manual-html" depends="init, init-manual">
        <property name="manual.html.xsl" value="build/docbook/conf/manual-html.xsl"/>
        <property name="manual.html.output.dir" value="${output-dir}/WebContent/docs/book${manual.language.extension}"/>
        <property name="manual.html.output.index" value="${manual.html.output.dir}/index.html"/>

        <property name="output-dir-manual" value="${output-dir}/WebContent/docs/book" />

        <echo>Manual: HTML</echo>
        <echo>Published: ${manual.pubdate}</echo>
	</target>

    <target name="manual-html" depends="init, init-manual, init-manual-html, init-manual-html-common, manual-html-build">
    </target>

    <!-- ant contrib required for flow control (for loop, if, property override) -->
    <taskdef resource="net/sf/antcontrib/antlib.xml">
        <classpath>
            <pathelement location="build/lib/ant-contrib-1.0b3.jar" />
        </classpath>
    </taskdef>

    <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
    <!-- Translations                                                        -->
    <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

	<target name="prepare-translations" if="locale">
        <mkdir dir="${manual.source.dir}"/>

		<!-- Copy English book on bottom. -->
		<copy todir="${manual.source.dir}">
			<fileset dir="manual">
				<include name="book.xml"/>
				<include name="part1*.xml"/>
				<include name="*.dtd"/>
				<include name="img/**/*.png"/>
				<include name="img/**/*.jpg"/>
			</fileset>
		</copy>

		<property name="manual.translations.dir" value="manual/translations/${locale}"/>

		<!-- Generate translated XML files from PO and English XML files. -->
		<apply executable="po2xml" dest="." verbose="yes" force="yes">
			<targetfile/>
			<srcfile/>
			<fileset dir="${manual.translations.dir}">
				<include name="book.po"/>
				<include name="part1*.po"/>
			</fileset>
			<globmapper from="*.po" to="manual/*.xml"/>
			<redirector>
				<outputmapper id="out" type="glob" from="*.po" to="${manual.source.dir}/*.xml"/>
			</redirector>
		</apply>
	</target>

	<!-- Compile localized documentation. -->
	<target name="localized-docs">
		<antcall target="docs">
			<param name="locale" value="pl_PL"/>
			<param name="manual.language.docbook" value="pl"/>
			<param name="manual.language.extension" value="-pl"/>
		</antcall>
	</target>

    <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
    <!-- Eclipse Manual                                                      -->
    <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

    <target name="init-manual-eclipse" depends="">
        <!-- Timestamp in YYYYMMDDHHMM format for plugin version number. -->
        <tstamp>
            <format property="eclipse.plugin.manual.pubtime" pattern="yyyyMMddkkmm"/>
        </tstamp>

        <property name="eclipse.plugin.manual.version" value="${version}.${eclipse.plugin.manual.pubtime}" />
        <echo>Manual: Eclipse Help Plugin (version ${eclipse.plugin.manual.version})</echo>

        <property name="manual.html.xsl" value="build/docbook/conf/manual-eclipse-plugin.xsl"/>
        <property name="manual.html.output.dir" value="${output-dir}/WebContent/docs/eclipse"/>
        <property name="manual.html.output.index" value="${manual.html.output.dir}/index-eclipse.html"/>

        <property name="output-dir-manual" value="${output-dir}/WebContent/docs/book" />
    </target>

    <!-- Builds Eclipse Help plugin. Uses the manual-html-build target  -->
    <!-- to build the HTML content of the manual.                       -->
    <target name="manual-eclipse-plugin" depends="init, init-manual, init-manual-eclipse, init-manual-html-common, manual-html-build">
        <!-- The index-eclipse.html file is empty. -->
        <delete file="${manual.html.output.index}" />

        <!-- Plugin JAR filename -->
        <property name="eclipse.plugin.manual.jar-name"
                 value="com.vaadin.manual_${eclipse.plugin.manual.version}.jar" />

        <!-- Package the JAR. -->
        <jar jarfile="${output-dir}/${eclipse.plugin.manual.jar-name}" compress="true">
            <fileset dir="${manual.html.output.dir}">
                <patternset>
                    <include name="**/*" />
                </patternset>
            </fileset>
            <manifest>
                <attribute name="Built-By" value="${user.name}"/>
                <attribute name="Bundle-Name" value="Book of Vaadin"/>
                <attribute name="Bundle-SymbolicName" value="com.vaadin.manual"/>
                <attribute name="Bundle-Version" value="${eclipse.plugin.manual.version}"/>
                <attribute name="Bundle-Vendor" value="IT Mill Inc."/>
            </manifest>
        </jar>
		<echo>##teamcity[publishArtifacts '${output-dir}/${eclipse.plugin.manual.jar-name}']</echo>
    </target>

	<!-- Packages the plugin as a "feature" plugin in Eclipse. -->
	<target name="manual-eclipse-feature">
		<property name="manual.eclipse.feature.dir" value="${output-dir}/feature"/>

        <!-- Plugin JAR filename -->
        <property name="eclipse.manual.feature.jar"
                 value="com.vaadin.integration.eclipse.manual_${eclipse.plugin.manual.version}.jar" />

		<!-- Fill out the feature.xml template. -->
		<copy file="build/feature.xml.tpl" tofile="${output-dir}/feature.xml">
			<filterchain>
				<replacetokens begintoken="@" endtoken="@">
					<token key="manual-version" value="${eclipse.plugin.manual.version}" />
				</replacetokens>
				<replacetokens begintoken="@" endtoken="@">
					<token key="vaadin-version" value="${version}" />
				</replacetokens>
			</filterchain>
		</copy>
		
		<echo>Build:   ${output-dir}/${eclipse.manual.feature.jar}</echo>
		<echo>Include: ${output-dir}/${eclipse.plugin.manual.jar-name}</echo>
		<echo>Include: ${output-dir}/feature.xml</echo>
		<jar destfile="${output-dir}/${eclipse.manual.feature.jar}" compress="true">
			<fileset dir="${output-dir}">
				<include name="feature.xml"/>
			</fileset>
            <manifest>
                <attribute name="Built-By" value="${user.name}"/>
                <attribute name="Bundle-Name" value="Book of Vaadin"/>
                <attribute name="Bundle-SymbolicName" value="com.vaadin.integration.eclipse.manual"/>
                <attribute name="Bundle-Version" value="${eclipse.plugin.manual.version}"/>
                <attribute name="Bundle-Vendor" value="IT Mill Inc."/>
            </manifest>
		</jar>
		<echo>##teamcity[publishArtifacts '${output-dir}/${eclipse.manual.feature.jar}']</echo>
	</target>

	<target name="manual-eclipse" depends="manual-eclipse-plugin, manual-eclipse-feature">
	</target>

    <!-- ================================================================== -->
    <!-- Application Tutorial.                                              -->
    <!-- ================================================================== -->

    <!-- Initialize properties especially for the Reference Tutorial. -->
    <target name="init-tutorial" depends="">
        <!-- Sets the current date as the publication date of the Tutorial. -->
        <tstamp>
            <format property="tutorial.pubdate" pattern="yyyy-MM-dd"/>
        </tstamp>

        <mkdir dir="${output-dir}/WebContent/docs/tutorial" />
    </target>

    <!-- Build PDF tutorial from sources or just copy it. -->
    <target name="tutorial-pdf" depends="init, init-tutorial, build-tutorial-pdf, copy-tutorial-pdf">
    </target>

    <!-- Just copy a prebuilt PDF tutorial. -->
    <target name="copy-tutorial-pdf" unless="xep.license.available">
        <echo>PDF Tutorial: No XEP license available, just copy a prebuilt PDF.</echo>
        <copy file="tutorial/vaadin-tutorial.pdf" tofile="${output-dir}/WebContent/docs/vaadin-tutorial.pdf" />
    </target>

    <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
    <!-- Build PDF tutorial with XEP FO processor                            -->
    <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
    <target name="build-tutorial-pdf" if="xep.license.available">
        <echo>PDF Tutorial: processing images (TBD)</echo>
        <!-- TBD -->
        <echo>PDF Tutorial: converting xml to fo</echo>

        <echo>Publication date is ${tutorial.pubdate}</echo>

        <java classname="org.apache.xalan.xslt.Process" failonerror="yes" fork="yes" maxmemory="512m">
            <arg value="-xsl" />
            <arg value="build/docbook/conf/custom-fo-docbook.xsl" />
            <arg value="-in" />
            <arg value="tutorial/tutorial.xml" />
            <arg value="-out" />
            <arg value="${result-path}/vaadin-tutorial.fo" />
            <arg value="-param" />
            <arg value="section.autolabel" />
            <arg value="1" />
            <arg value="-param" />
            <arg value="section.label.includes.component.label" />
            <arg value="1" />
            <arg value="-param" />
            <arg value="section.autolabel.max.depth" />
            <arg value="2" />
            <arg value="-param" />
            <arg value="draft.watermark.image" />
            <arg value="''" />
            <arg value="-param" />
            <arg value="draft.mode" />
            <arg value="'no'" />
            <arg value="-param" />
            <arg value="double.sided" />
            <arg value="1" />
            <arg value="-param" /> <!-- PDF bookmarks support. -->
            <arg value="xep.extensions" />
            <arg value="1" />
            <arg value="-param" />
            <arg value="manual.pubdate" />
            <arg value="${tutorial.pubdate}" />
            <arg value="-param" />
            <arg value="manual.version" />
            <arg value="${version}" />
            <classpath>
                <pathelement location="build/lib/xalan.jar" />
                <pathelement location="build/lib/xercesImpl.jar" />
                <pathelement location="build/lib/xml-apis.jar" />
            </classpath>
        </java>
        <echo>PDF Tutorial: converting fo to pdf</echo>
        <!-- Run XEP FO processor to convert FO to PDF -->
        <java classname="com.renderx.xep.XSLDriver" error="${result-path}/xep-error.log" failonerror="yes" fork="yes" maxmemory="512m" input="${result-path}/vaadin-tutorial.fo" output="${output-dir}/WebContent/docs/vaadin-tutorial.pdf">
            <arg value="-Dcom.renderx.xep.CONFIG=build/lib/XEP/xep.xml" />
            <classpath>
                <pathelement location="build/lib/XEP/lib/tools.jar" />
                <pathelement location="build/lib/XEP/lib/xep.jar" />
                <pathelement location="build/lib/XEP/lib/saxon.jar" />
                <pathelement location="build/lib/XEP/lib/xt.jar" />
            </classpath>
        </java>
    </target>

    <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
    <!-- HTML Tutorial                                                       -->
    <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
    <target name="tutorial-html" depends="init, init-tutorial">
        <echo>Tutorial: HTML</echo>
        <echo>Publication date is ${tutorial.pubdate}</echo>

        <delete file="build/docbook/conf/temp.xsl" />
        <copy file="build/docbook/conf/custom-html-docbook.xsl" tofile="build/docbook/conf/temp.xsl">
            <filterchain>
                <replacetokens>
                    <token key="BODYHEADER" value="${html.body.start1}${docbook.head.title}${html.body.start2}" />
                     <token key="BODYFOOTER" value="${html.body.end}" />
                </replacetokens>
            </filterchain>
        </copy>
        <path id="docbook-xsl.classpath">
            <pathelement path="build/lib/fserializer.jar" />
            <pathelement path="build/lib/xalan.jar" />
            <pathelement path="build/lib/xercesImpl.jar" />
            <pathelement path="build/lib/xml-apis.jar" />
        </path>
        <java classname="org.apache.xalan.xslt.Process" failonerror="yes" fork="yes" maxmemory="512m">
            <arg value="-in" />
            <arg value="tutorial/tutorial.xml" />
            <arg value="-xsl" />
            <arg value="build/docbook/conf/temp.xsl" />
            <arg value="-out" />
            <arg value="${output-dir}/WebContent/docs/tutorial/index.html" />
            <arg value="-param" />
            <arg value="section.autolabel" />
            <arg value="1" />
            <arg value="-param" />
            <arg value="section.label.includes.component.label" />
            <arg value="1" />
            <arg value="-param" />
            <arg value="section.autolabel.max.depth" />
            <arg value="2" />
            <arg value="-param" />
            <arg value="use.extensions" />
            <arg value="1" />
            <arg value="-param" />
            <arg value="manual.pubdate" />
            <arg value="${tutorial.pubdate}" />
            <arg value="-param" />
            <arg value="manual.version" />
            <arg value="${version}" />
            <classpath refid="docbook-xsl.classpath" />
        </java>
        <delete file="build/docbook/conf/temp.xsl" />
        <copy todir="${output-dir}/WebContent/docs/tutorial/img">
            <fileset dir="tutorial/img">
                <exclude name="**/.svn" />
            </fileset>
        </copy>
    </target>

</project>

<!-- Keep this comment at the end of the file
Local variables:
mode: xml
sgml-omittag:nil
sgml-shorttag:nil
sgml-namecase-general:nil
sgml-general-insert-case:lower
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:4
sgml-indent-data:t
sgml-parent-document:nil
sgml-exposed-tags:nil
sgml-local-catalogs:("/etc/sgml/catalog" "/usr/share/xemacs21/xemacs-packages/etc/psgml-dtds/CATALOG")
sgml-local-ecat-files:("ECAT" "~/sgml/ECAT" "/usr/share/sgml/ECAT" "/usr/local/share/sgml/ECAT" "/usr/local/lib/sgml/ECAT")
End:
-->
